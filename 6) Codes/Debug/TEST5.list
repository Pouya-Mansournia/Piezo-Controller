
TEST5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014248  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002390  08014430  08014430  00024430  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080167c0  080167c0  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  080167c0  080167c0  000267c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080167c8  080167c8  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080167c8  080167c8  000267c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080167cc  080167cc  000267cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080167d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008050  200001e0  080169b0  000301e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  20008230  080169b0  00038230  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028e33  00000000  00000000  00030209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000056a6  00000000  00000000  0005903c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001328  00000000  00000000  0005e6e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001180  00000000  00000000  0005fa10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029405  00000000  00000000  00060b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001dea9  00000000  00000000  00089f95  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cefb8  00000000  00000000  000a7e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00176df6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d14  00000000  00000000  00176e74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e0 	.word	0x200001e0
 8000204:	00000000 	.word	0x00000000
 8000208:	08014418 	.word	0x08014418

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e4 	.word	0x200001e4
 8000224:	08014418 	.word	0x08014418

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000376:	f1a4 0401 	sub.w	r4, r4, #1
 800037a:	d1e9      	bne.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000cfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000d00:	d1ed      	bne.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_uldivmod>:
 8000e5c:	b953      	cbnz	r3, 8000e74 <__aeabi_uldivmod+0x18>
 8000e5e:	b94a      	cbnz	r2, 8000e74 <__aeabi_uldivmod+0x18>
 8000e60:	2900      	cmp	r1, #0
 8000e62:	bf08      	it	eq
 8000e64:	2800      	cmpeq	r0, #0
 8000e66:	bf1c      	itt	ne
 8000e68:	f04f 31ff 	movne.w	r1, #4294967295
 8000e6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000e70:	f000 b974 	b.w	800115c <__aeabi_idiv0>
 8000e74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e7c:	f000 f806 	bl	8000e8c <__udivmoddi4>
 8000e80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e88:	b004      	add	sp, #16
 8000e8a:	4770      	bx	lr

08000e8c <__udivmoddi4>:
 8000e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e90:	468c      	mov	ip, r1
 8000e92:	4604      	mov	r4, r0
 8000e94:	9e08      	ldr	r6, [sp, #32]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d14b      	bne.n	8000f32 <__udivmoddi4+0xa6>
 8000e9a:	428a      	cmp	r2, r1
 8000e9c:	4615      	mov	r5, r2
 8000e9e:	d967      	bls.n	8000f70 <__udivmoddi4+0xe4>
 8000ea0:	fab2 f282 	clz	r2, r2
 8000ea4:	b14a      	cbz	r2, 8000eba <__udivmoddi4+0x2e>
 8000ea6:	f1c2 0720 	rsb	r7, r2, #32
 8000eaa:	fa01 f302 	lsl.w	r3, r1, r2
 8000eae:	fa20 f707 	lsr.w	r7, r0, r7
 8000eb2:	4095      	lsls	r5, r2
 8000eb4:	ea47 0c03 	orr.w	ip, r7, r3
 8000eb8:	4094      	lsls	r4, r2
 8000eba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ebe:	fbbc f7fe 	udiv	r7, ip, lr
 8000ec2:	fa1f f885 	uxth.w	r8, r5
 8000ec6:	fb0e c317 	mls	r3, lr, r7, ip
 8000eca:	fb07 f908 	mul.w	r9, r7, r8
 8000ece:	0c21      	lsrs	r1, r4, #16
 8000ed0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ed4:	4599      	cmp	r9, r3
 8000ed6:	d909      	bls.n	8000eec <__udivmoddi4+0x60>
 8000ed8:	18eb      	adds	r3, r5, r3
 8000eda:	f107 31ff 	add.w	r1, r7, #4294967295
 8000ede:	f080 811c 	bcs.w	800111a <__udivmoddi4+0x28e>
 8000ee2:	4599      	cmp	r9, r3
 8000ee4:	f240 8119 	bls.w	800111a <__udivmoddi4+0x28e>
 8000ee8:	3f02      	subs	r7, #2
 8000eea:	442b      	add	r3, r5
 8000eec:	eba3 0309 	sub.w	r3, r3, r9
 8000ef0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ef8:	fb00 f108 	mul.w	r1, r0, r8
 8000efc:	b2a4      	uxth	r4, r4
 8000efe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f02:	42a1      	cmp	r1, r4
 8000f04:	d909      	bls.n	8000f1a <__udivmoddi4+0x8e>
 8000f06:	192c      	adds	r4, r5, r4
 8000f08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f0c:	f080 8107 	bcs.w	800111e <__udivmoddi4+0x292>
 8000f10:	42a1      	cmp	r1, r4
 8000f12:	f240 8104 	bls.w	800111e <__udivmoddi4+0x292>
 8000f16:	3802      	subs	r0, #2
 8000f18:	442c      	add	r4, r5
 8000f1a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000f1e:	2700      	movs	r7, #0
 8000f20:	1a64      	subs	r4, r4, r1
 8000f22:	b11e      	cbz	r6, 8000f2c <__udivmoddi4+0xa0>
 8000f24:	2300      	movs	r3, #0
 8000f26:	40d4      	lsrs	r4, r2
 8000f28:	e9c6 4300 	strd	r4, r3, [r6]
 8000f2c:	4639      	mov	r1, r7
 8000f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d909      	bls.n	8000f4a <__udivmoddi4+0xbe>
 8000f36:	2e00      	cmp	r6, #0
 8000f38:	f000 80ec 	beq.w	8001114 <__udivmoddi4+0x288>
 8000f3c:	2700      	movs	r7, #0
 8000f3e:	e9c6 0100 	strd	r0, r1, [r6]
 8000f42:	4638      	mov	r0, r7
 8000f44:	4639      	mov	r1, r7
 8000f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4a:	fab3 f783 	clz	r7, r3
 8000f4e:	2f00      	cmp	r7, #0
 8000f50:	d148      	bne.n	8000fe4 <__udivmoddi4+0x158>
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d302      	bcc.n	8000f5c <__udivmoddi4+0xd0>
 8000f56:	4282      	cmp	r2, r0
 8000f58:	f200 80fb 	bhi.w	8001152 <__udivmoddi4+0x2c6>
 8000f5c:	1a84      	subs	r4, r0, r2
 8000f5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000f62:	2001      	movs	r0, #1
 8000f64:	469c      	mov	ip, r3
 8000f66:	2e00      	cmp	r6, #0
 8000f68:	d0e0      	beq.n	8000f2c <__udivmoddi4+0xa0>
 8000f6a:	e9c6 4c00 	strd	r4, ip, [r6]
 8000f6e:	e7dd      	b.n	8000f2c <__udivmoddi4+0xa0>
 8000f70:	b902      	cbnz	r2, 8000f74 <__udivmoddi4+0xe8>
 8000f72:	deff      	udf	#255	; 0xff
 8000f74:	fab2 f282 	clz	r2, r2
 8000f78:	2a00      	cmp	r2, #0
 8000f7a:	f040 808f 	bne.w	800109c <__udivmoddi4+0x210>
 8000f7e:	2701      	movs	r7, #1
 8000f80:	1b49      	subs	r1, r1, r5
 8000f82:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000f86:	fa1f f985 	uxth.w	r9, r5
 8000f8a:	fbb1 fef8 	udiv	lr, r1, r8
 8000f8e:	fb08 111e 	mls	r1, r8, lr, r1
 8000f92:	fb09 f00e 	mul.w	r0, r9, lr
 8000f96:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000f9a:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000f9e:	4298      	cmp	r0, r3
 8000fa0:	d907      	bls.n	8000fb2 <__udivmoddi4+0x126>
 8000fa2:	18eb      	adds	r3, r5, r3
 8000fa4:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000fa8:	d202      	bcs.n	8000fb0 <__udivmoddi4+0x124>
 8000faa:	4298      	cmp	r0, r3
 8000fac:	f200 80cd 	bhi.w	800114a <__udivmoddi4+0x2be>
 8000fb0:	468e      	mov	lr, r1
 8000fb2:	1a1b      	subs	r3, r3, r0
 8000fb4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fb8:	fb08 3310 	mls	r3, r8, r0, r3
 8000fbc:	fb09 f900 	mul.w	r9, r9, r0
 8000fc0:	b2a4      	uxth	r4, r4
 8000fc2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc6:	45a1      	cmp	r9, r4
 8000fc8:	d907      	bls.n	8000fda <__udivmoddi4+0x14e>
 8000fca:	192c      	adds	r4, r5, r4
 8000fcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000fd0:	d202      	bcs.n	8000fd8 <__udivmoddi4+0x14c>
 8000fd2:	45a1      	cmp	r9, r4
 8000fd4:	f200 80b6 	bhi.w	8001144 <__udivmoddi4+0x2b8>
 8000fd8:	4618      	mov	r0, r3
 8000fda:	eba4 0409 	sub.w	r4, r4, r9
 8000fde:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000fe2:	e79e      	b.n	8000f22 <__udivmoddi4+0x96>
 8000fe4:	f1c7 0520 	rsb	r5, r7, #32
 8000fe8:	40bb      	lsls	r3, r7
 8000fea:	fa22 fc05 	lsr.w	ip, r2, r5
 8000fee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ff2:	fa21 f405 	lsr.w	r4, r1, r5
 8000ff6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ffa:	fbb4 f9fe 	udiv	r9, r4, lr
 8000ffe:	fa1f f88c 	uxth.w	r8, ip
 8001002:	fb0e 4419 	mls	r4, lr, r9, r4
 8001006:	fa20 f305 	lsr.w	r3, r0, r5
 800100a:	40b9      	lsls	r1, r7
 800100c:	fb09 fa08 	mul.w	sl, r9, r8
 8001010:	4319      	orrs	r1, r3
 8001012:	0c0b      	lsrs	r3, r1, #16
 8001014:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001018:	45a2      	cmp	sl, r4
 800101a:	fa02 f207 	lsl.w	r2, r2, r7
 800101e:	fa00 f307 	lsl.w	r3, r0, r7
 8001022:	d90b      	bls.n	800103c <__udivmoddi4+0x1b0>
 8001024:	eb1c 0404 	adds.w	r4, ip, r4
 8001028:	f109 30ff 	add.w	r0, r9, #4294967295
 800102c:	f080 8088 	bcs.w	8001140 <__udivmoddi4+0x2b4>
 8001030:	45a2      	cmp	sl, r4
 8001032:	f240 8085 	bls.w	8001140 <__udivmoddi4+0x2b4>
 8001036:	f1a9 0902 	sub.w	r9, r9, #2
 800103a:	4464      	add	r4, ip
 800103c:	eba4 040a 	sub.w	r4, r4, sl
 8001040:	fbb4 f0fe 	udiv	r0, r4, lr
 8001044:	fb0e 4410 	mls	r4, lr, r0, r4
 8001048:	fb00 fa08 	mul.w	sl, r0, r8
 800104c:	b289      	uxth	r1, r1
 800104e:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8001052:	45a2      	cmp	sl, r4
 8001054:	d908      	bls.n	8001068 <__udivmoddi4+0x1dc>
 8001056:	eb1c 0404 	adds.w	r4, ip, r4
 800105a:	f100 31ff 	add.w	r1, r0, #4294967295
 800105e:	d26b      	bcs.n	8001138 <__udivmoddi4+0x2ac>
 8001060:	45a2      	cmp	sl, r4
 8001062:	d969      	bls.n	8001138 <__udivmoddi4+0x2ac>
 8001064:	3802      	subs	r0, #2
 8001066:	4464      	add	r4, ip
 8001068:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800106c:	fba0 8902 	umull	r8, r9, r0, r2
 8001070:	eba4 040a 	sub.w	r4, r4, sl
 8001074:	454c      	cmp	r4, r9
 8001076:	4641      	mov	r1, r8
 8001078:	46ce      	mov	lr, r9
 800107a:	d354      	bcc.n	8001126 <__udivmoddi4+0x29a>
 800107c:	d051      	beq.n	8001122 <__udivmoddi4+0x296>
 800107e:	2e00      	cmp	r6, #0
 8001080:	d069      	beq.n	8001156 <__udivmoddi4+0x2ca>
 8001082:	1a5a      	subs	r2, r3, r1
 8001084:	eb64 040e 	sbc.w	r4, r4, lr
 8001088:	fa04 f505 	lsl.w	r5, r4, r5
 800108c:	fa22 f307 	lsr.w	r3, r2, r7
 8001090:	40fc      	lsrs	r4, r7
 8001092:	431d      	orrs	r5, r3
 8001094:	e9c6 5400 	strd	r5, r4, [r6]
 8001098:	2700      	movs	r7, #0
 800109a:	e747      	b.n	8000f2c <__udivmoddi4+0xa0>
 800109c:	4095      	lsls	r5, r2
 800109e:	f1c2 0320 	rsb	r3, r2, #32
 80010a2:	fa21 f003 	lsr.w	r0, r1, r3
 80010a6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80010aa:	fbb0 f7f8 	udiv	r7, r0, r8
 80010ae:	fa1f f985 	uxth.w	r9, r5
 80010b2:	fb08 0017 	mls	r0, r8, r7, r0
 80010b6:	fa24 f303 	lsr.w	r3, r4, r3
 80010ba:	4091      	lsls	r1, r2
 80010bc:	fb07 fc09 	mul.w	ip, r7, r9
 80010c0:	430b      	orrs	r3, r1
 80010c2:	0c19      	lsrs	r1, r3, #16
 80010c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80010c8:	458c      	cmp	ip, r1
 80010ca:	fa04 f402 	lsl.w	r4, r4, r2
 80010ce:	d907      	bls.n	80010e0 <__udivmoddi4+0x254>
 80010d0:	1869      	adds	r1, r5, r1
 80010d2:	f107 30ff 	add.w	r0, r7, #4294967295
 80010d6:	d231      	bcs.n	800113c <__udivmoddi4+0x2b0>
 80010d8:	458c      	cmp	ip, r1
 80010da:	d92f      	bls.n	800113c <__udivmoddi4+0x2b0>
 80010dc:	3f02      	subs	r7, #2
 80010de:	4429      	add	r1, r5
 80010e0:	eba1 010c 	sub.w	r1, r1, ip
 80010e4:	fbb1 f0f8 	udiv	r0, r1, r8
 80010e8:	fb08 1c10 	mls	ip, r8, r0, r1
 80010ec:	fb00 fe09 	mul.w	lr, r0, r9
 80010f0:	b299      	uxth	r1, r3
 80010f2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80010f6:	458e      	cmp	lr, r1
 80010f8:	d907      	bls.n	800110a <__udivmoddi4+0x27e>
 80010fa:	1869      	adds	r1, r5, r1
 80010fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8001100:	d218      	bcs.n	8001134 <__udivmoddi4+0x2a8>
 8001102:	458e      	cmp	lr, r1
 8001104:	d916      	bls.n	8001134 <__udivmoddi4+0x2a8>
 8001106:	3802      	subs	r0, #2
 8001108:	4429      	add	r1, r5
 800110a:	eba1 010e 	sub.w	r1, r1, lr
 800110e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8001112:	e73a      	b.n	8000f8a <__udivmoddi4+0xfe>
 8001114:	4637      	mov	r7, r6
 8001116:	4630      	mov	r0, r6
 8001118:	e708      	b.n	8000f2c <__udivmoddi4+0xa0>
 800111a:	460f      	mov	r7, r1
 800111c:	e6e6      	b.n	8000eec <__udivmoddi4+0x60>
 800111e:	4618      	mov	r0, r3
 8001120:	e6fb      	b.n	8000f1a <__udivmoddi4+0x8e>
 8001122:	4543      	cmp	r3, r8
 8001124:	d2ab      	bcs.n	800107e <__udivmoddi4+0x1f2>
 8001126:	ebb8 0102 	subs.w	r1, r8, r2
 800112a:	eb69 020c 	sbc.w	r2, r9, ip
 800112e:	3801      	subs	r0, #1
 8001130:	4696      	mov	lr, r2
 8001132:	e7a4      	b.n	800107e <__udivmoddi4+0x1f2>
 8001134:	4618      	mov	r0, r3
 8001136:	e7e8      	b.n	800110a <__udivmoddi4+0x27e>
 8001138:	4608      	mov	r0, r1
 800113a:	e795      	b.n	8001068 <__udivmoddi4+0x1dc>
 800113c:	4607      	mov	r7, r0
 800113e:	e7cf      	b.n	80010e0 <__udivmoddi4+0x254>
 8001140:	4681      	mov	r9, r0
 8001142:	e77b      	b.n	800103c <__udivmoddi4+0x1b0>
 8001144:	3802      	subs	r0, #2
 8001146:	442c      	add	r4, r5
 8001148:	e747      	b.n	8000fda <__udivmoddi4+0x14e>
 800114a:	f1ae 0e02 	sub.w	lr, lr, #2
 800114e:	442b      	add	r3, r5
 8001150:	e72f      	b.n	8000fb2 <__udivmoddi4+0x126>
 8001152:	4638      	mov	r0, r7
 8001154:	e707      	b.n	8000f66 <__udivmoddi4+0xda>
 8001156:	4637      	mov	r7, r6
 8001158:	e6e8      	b.n	8000f2c <__udivmoddi4+0xa0>
 800115a:	bf00      	nop

0800115c <__aeabi_idiv0>:
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop

08001160 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <HAL_Init+0x28>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a07      	ldr	r2, [pc, #28]	; (8001188 <HAL_Init+0x28>)
 800116a:	f043 0310 	orr.w	r3, r3, #16
 800116e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001170:	2003      	movs	r0, #3
 8001172:	f000 fd65 	bl	8001c40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001176:	2000      	movs	r0, #0
 8001178:	f000 f808 	bl	800118c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800117c:	f00e fd02 	bl	800fb84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40022000 	.word	0x40022000

0800118c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <HAL_InitTick+0x54>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <HAL_InitTick+0x58>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	4619      	mov	r1, r3
 800119e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 fd6f 	bl	8001c8e <HAL_SYSTICK_Config>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e00e      	b.n	80011d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2b0f      	cmp	r3, #15
 80011be:	d80a      	bhi.n	80011d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c0:	2200      	movs	r2, #0
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295
 80011c8:	f000 fd45 	bl	8001c56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011cc:	4a06      	ldr	r2, [pc, #24]	; (80011e8 <HAL_InitTick+0x5c>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011d2:	2300      	movs	r3, #0
 80011d4:	e000      	b.n	80011d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	2000000c 	.word	0x2000000c
 80011e4:	20000004 	.word	0x20000004
 80011e8:	20000000 	.word	0x20000000

080011ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <HAL_IncTick+0x1c>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b05      	ldr	r3, [pc, #20]	; (800120c <HAL_IncTick+0x20>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4413      	add	r3, r2
 80011fc:	4a03      	ldr	r2, [pc, #12]	; (800120c <HAL_IncTick+0x20>)
 80011fe:	6013      	str	r3, [r2, #0]
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr
 8001208:	20000004 	.word	0x20000004
 800120c:	20000390 	.word	0x20000390

08001210 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  return uwTick;
 8001214:	4b02      	ldr	r3, [pc, #8]	; (8001220 <HAL_GetTick+0x10>)
 8001216:	681b      	ldr	r3, [r3, #0]
}
 8001218:	4618      	mov	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr
 8001220:	20000390 	.word	0x20000390

08001224 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800122c:	f7ff fff0 	bl	8001210 <HAL_GetTick>
 8001230:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800123c:	d005      	beq.n	800124a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <HAL_Delay+0x40>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	461a      	mov	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	4413      	add	r3, r2
 8001248:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800124a:	bf00      	nop
 800124c:	f7ff ffe0 	bl	8001210 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	68fa      	ldr	r2, [r7, #12]
 8001258:	429a      	cmp	r2, r3
 800125a:	d8f7      	bhi.n	800124c <HAL_Delay+0x28>
  {
  }
}
 800125c:	bf00      	nop
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000004 	.word	0x20000004

08001268 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001270:	2300      	movs	r3, #0
 8001272:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001274:	2300      	movs	r3, #0
 8001276:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001278:	2300      	movs	r3, #0
 800127a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800127c:	2300      	movs	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d101      	bne.n	800128a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e0be      	b.n	8001408 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001294:	2b00      	cmp	r3, #0
 8001296:	d109      	bne.n	80012ac <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f00c fc64 	bl	800db74 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 fbdd 	bl	8001a6c <ADC_ConversionStop_Disable>
 80012b2:	4603      	mov	r3, r0
 80012b4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ba:	f003 0310 	and.w	r3, r3, #16
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f040 8099 	bne.w	80013f6 <HAL_ADC_Init+0x18e>
 80012c4:	7dfb      	ldrb	r3, [r7, #23]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f040 8095 	bne.w	80013f6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012d4:	f023 0302 	bic.w	r3, r3, #2
 80012d8:	f043 0202 	orr.w	r2, r3, #2
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012e8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	7b1b      	ldrb	r3, [r3, #12]
 80012ee:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012f0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012f2:	68ba      	ldr	r2, [r7, #8]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001300:	d003      	beq.n	800130a <HAL_ADC_Init+0xa2>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d102      	bne.n	8001310 <HAL_ADC_Init+0xa8>
 800130a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800130e:	e000      	b.n	8001312 <HAL_ADC_Init+0xaa>
 8001310:	2300      	movs	r3, #0
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	7d1b      	ldrb	r3, [r3, #20]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d119      	bne.n	8001354 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	7b1b      	ldrb	r3, [r3, #12]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d109      	bne.n	800133c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	3b01      	subs	r3, #1
 800132e:	035a      	lsls	r2, r3, #13
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	4313      	orrs	r3, r2
 8001334:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	e00b      	b.n	8001354 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001340:	f043 0220 	orr.w	r2, r3, #32
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134c:	f043 0201 	orr.w	r2, r3, #1
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	430a      	orrs	r2, r1
 8001366:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	689a      	ldr	r2, [r3, #8]
 800136e:	4b28      	ldr	r3, [pc, #160]	; (8001410 <HAL_ADC_Init+0x1a8>)
 8001370:	4013      	ands	r3, r2
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	6812      	ldr	r2, [r2, #0]
 8001376:	68b9      	ldr	r1, [r7, #8]
 8001378:	430b      	orrs	r3, r1
 800137a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001384:	d003      	beq.n	800138e <HAL_ADC_Init+0x126>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d104      	bne.n	8001398 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	3b01      	subs	r3, #1
 8001394:	051b      	lsls	r3, r3, #20
 8001396:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	430a      	orrs	r2, r1
 80013aa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	4b18      	ldr	r3, [pc, #96]	; (8001414 <HAL_ADC_Init+0x1ac>)
 80013b4:	4013      	ands	r3, r2
 80013b6:	68ba      	ldr	r2, [r7, #8]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d10b      	bne.n	80013d4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c6:	f023 0303 	bic.w	r3, r3, #3
 80013ca:	f043 0201 	orr.w	r2, r3, #1
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013d2:	e018      	b.n	8001406 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d8:	f023 0312 	bic.w	r3, r3, #18
 80013dc:	f043 0210 	orr.w	r2, r3, #16
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e8:	f043 0201 	orr.w	r2, r3, #1
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013f4:	e007      	b.n	8001406 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fa:	f043 0210 	orr.w	r2, r3, #16
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001406:	7dfb      	ldrb	r3, [r7, #23]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	ffe1f7fd 	.word	0xffe1f7fd
 8001414:	ff1f0efe 	.word	0xff1f0efe

08001418 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001420:	2300      	movs	r3, #0
 8001422:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800142a:	2b01      	cmp	r3, #1
 800142c:	d101      	bne.n	8001432 <HAL_ADC_Start+0x1a>
 800142e:	2302      	movs	r3, #2
 8001430:	e098      	b.n	8001564 <HAL_ADC_Start+0x14c>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2201      	movs	r2, #1
 8001436:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 fac4 	bl	80019c8 <ADC_Enable>
 8001440:	4603      	mov	r3, r0
 8001442:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001444:	7bfb      	ldrb	r3, [r7, #15]
 8001446:	2b00      	cmp	r3, #0
 8001448:	f040 8087 	bne.w	800155a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001450:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001454:	f023 0301 	bic.w	r3, r3, #1
 8001458:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a41      	ldr	r2, [pc, #260]	; (800156c <HAL_ADC_Start+0x154>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d105      	bne.n	8001476 <HAL_ADC_Start+0x5e>
 800146a:	4b41      	ldr	r3, [pc, #260]	; (8001570 <HAL_ADC_Start+0x158>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d115      	bne.n	80014a2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800148c:	2b00      	cmp	r3, #0
 800148e:	d026      	beq.n	80014de <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001494:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001498:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014a0:	e01d      	b.n	80014de <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a2f      	ldr	r2, [pc, #188]	; (8001570 <HAL_ADC_Start+0x158>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d004      	beq.n	80014c2 <HAL_ADC_Start+0xaa>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a2b      	ldr	r2, [pc, #172]	; (800156c <HAL_ADC_Start+0x154>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d10d      	bne.n	80014de <HAL_ADC_Start+0xc6>
 80014c2:	4b2b      	ldr	r3, [pc, #172]	; (8001570 <HAL_ADC_Start+0x158>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d007      	beq.n	80014de <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d006      	beq.n	80014f8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ee:	f023 0206 	bic.w	r2, r3, #6
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80014f6:	e002      	b.n	80014fe <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f06f 0202 	mvn.w	r2, #2
 800150e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800151a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800151e:	d113      	bne.n	8001548 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001524:	4a11      	ldr	r2, [pc, #68]	; (800156c <HAL_ADC_Start+0x154>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d105      	bne.n	8001536 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800152a:	4b11      	ldr	r3, [pc, #68]	; (8001570 <HAL_ADC_Start+0x158>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001532:	2b00      	cmp	r3, #0
 8001534:	d108      	bne.n	8001548 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	e00c      	b.n	8001562 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	689a      	ldr	r2, [r3, #8]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	e003      	b.n	8001562 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001562:	7bfb      	ldrb	r3, [r7, #15]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40012800 	.word	0x40012800
 8001570:	40012400 	.word	0x40012400

08001574 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800157c:	2300      	movs	r3, #0
 800157e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001586:	2b01      	cmp	r3, #1
 8001588:	d101      	bne.n	800158e <HAL_ADC_Stop+0x1a>
 800158a:	2302      	movs	r3, #2
 800158c:	e01a      	b.n	80015c4 <HAL_ADC_Stop+0x50>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2201      	movs	r2, #1
 8001592:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 fa68 	bl	8001a6c <ADC_ConversionStop_Disable>
 800159c:	4603      	mov	r3, r0
 800159e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d109      	bne.n	80015ba <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015ae:	f023 0301 	bic.w	r3, r3, #1
 80015b2:	f043 0201 	orr.w	r2, r3, #1
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80015cc:	b590      	push	{r4, r7, lr}
 80015ce:	b087      	sub	sp, #28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80015e2:	f7ff fe15 	bl	8001210 <HAL_GetTick>
 80015e6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d00b      	beq.n	800160e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fa:	f043 0220 	orr.w	r2, r3, #32
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e0c8      	b.n	80017a0 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001618:	2b00      	cmp	r3, #0
 800161a:	d12a      	bne.n	8001672 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001622:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001626:	2b00      	cmp	r3, #0
 8001628:	d123      	bne.n	8001672 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800162a:	e01a      	b.n	8001662 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001632:	d016      	beq.n	8001662 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d007      	beq.n	800164a <HAL_ADC_PollForConversion+0x7e>
 800163a:	f7ff fde9 	bl	8001210 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	429a      	cmp	r2, r3
 8001648:	d20b      	bcs.n	8001662 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164e:	f043 0204 	orr.w	r2, r3, #4
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e09e      	b.n	80017a0 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0dd      	beq.n	800162c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001670:	e06c      	b.n	800174c <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001672:	4b4d      	ldr	r3, [pc, #308]	; (80017a8 <HAL_ADC_PollForConversion+0x1dc>)
 8001674:	681c      	ldr	r4, [r3, #0]
 8001676:	2002      	movs	r0, #2
 8001678:	f002 fd1e 	bl	80040b8 <HAL_RCCEx_GetPeriphCLKFreq>
 800167c:	4603      	mov	r3, r0
 800167e:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6919      	ldr	r1, [r3, #16]
 8001688:	4b48      	ldr	r3, [pc, #288]	; (80017ac <HAL_ADC_PollForConversion+0x1e0>)
 800168a:	400b      	ands	r3, r1
 800168c:	2b00      	cmp	r3, #0
 800168e:	d118      	bne.n	80016c2 <HAL_ADC_PollForConversion+0xf6>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	68d9      	ldr	r1, [r3, #12]
 8001696:	4b46      	ldr	r3, [pc, #280]	; (80017b0 <HAL_ADC_PollForConversion+0x1e4>)
 8001698:	400b      	ands	r3, r1
 800169a:	2b00      	cmp	r3, #0
 800169c:	d111      	bne.n	80016c2 <HAL_ADC_PollForConversion+0xf6>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6919      	ldr	r1, [r3, #16]
 80016a4:	4b43      	ldr	r3, [pc, #268]	; (80017b4 <HAL_ADC_PollForConversion+0x1e8>)
 80016a6:	400b      	ands	r3, r1
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d108      	bne.n	80016be <HAL_ADC_PollForConversion+0xf2>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	68d9      	ldr	r1, [r3, #12]
 80016b2:	4b41      	ldr	r3, [pc, #260]	; (80017b8 <HAL_ADC_PollForConversion+0x1ec>)
 80016b4:	400b      	ands	r3, r1
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_ADC_PollForConversion+0xf2>
 80016ba:	2314      	movs	r3, #20
 80016bc:	e020      	b.n	8001700 <HAL_ADC_PollForConversion+0x134>
 80016be:	2329      	movs	r3, #41	; 0x29
 80016c0:	e01e      	b.n	8001700 <HAL_ADC_PollForConversion+0x134>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6919      	ldr	r1, [r3, #16]
 80016c8:	4b3a      	ldr	r3, [pc, #232]	; (80017b4 <HAL_ADC_PollForConversion+0x1e8>)
 80016ca:	400b      	ands	r3, r1
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d106      	bne.n	80016de <HAL_ADC_PollForConversion+0x112>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	68d9      	ldr	r1, [r3, #12]
 80016d6:	4b38      	ldr	r3, [pc, #224]	; (80017b8 <HAL_ADC_PollForConversion+0x1ec>)
 80016d8:	400b      	ands	r3, r1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00d      	beq.n	80016fa <HAL_ADC_PollForConversion+0x12e>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6919      	ldr	r1, [r3, #16]
 80016e4:	4b35      	ldr	r3, [pc, #212]	; (80017bc <HAL_ADC_PollForConversion+0x1f0>)
 80016e6:	400b      	ands	r3, r1
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d108      	bne.n	80016fe <HAL_ADC_PollForConversion+0x132>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	68d9      	ldr	r1, [r3, #12]
 80016f2:	4b32      	ldr	r3, [pc, #200]	; (80017bc <HAL_ADC_PollForConversion+0x1f0>)
 80016f4:	400b      	ands	r3, r1
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_ADC_PollForConversion+0x132>
 80016fa:	2354      	movs	r3, #84	; 0x54
 80016fc:	e000      	b.n	8001700 <HAL_ADC_PollForConversion+0x134>
 80016fe:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001700:	fb02 f303 	mul.w	r3, r2, r3
 8001704:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001706:	e01d      	b.n	8001744 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800170e:	d016      	beq.n	800173e <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d007      	beq.n	8001726 <HAL_ADC_PollForConversion+0x15a>
 8001716:	f7ff fd7b 	bl	8001210 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	429a      	cmp	r2, r3
 8001724:	d20b      	bcs.n	800173e <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172a:	f043 0204 	orr.w	r2, r3, #4
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e030      	b.n	80017a0 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	3301      	adds	r3, #1
 8001742:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	429a      	cmp	r2, r3
 800174a:	d8dd      	bhi.n	8001708 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f06f 0212 	mvn.w	r2, #18
 8001754:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800176c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001770:	d115      	bne.n	800179e <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001776:	2b00      	cmp	r3, #0
 8001778:	d111      	bne.n	800179e <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d105      	bne.n	800179e <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001796:	f043 0201 	orr.w	r2, r3, #1
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	371c      	adds	r7, #28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd90      	pop	{r4, r7, pc}
 80017a8:	2000000c 	.word	0x2000000c
 80017ac:	24924924 	.word	0x24924924
 80017b0:	00924924 	.word	0x00924924
 80017b4:	12492492 	.word	0x12492492
 80017b8:	00492492 	.word	0x00492492
 80017bc:	00249249 	.word	0x00249249

080017c0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d101      	bne.n	80017f8 <HAL_ADC_ConfigChannel+0x20>
 80017f4:	2302      	movs	r3, #2
 80017f6:	e0dc      	b.n	80019b2 <HAL_ADC_ConfigChannel+0x1da>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2201      	movs	r2, #1
 80017fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	2b06      	cmp	r3, #6
 8001806:	d81c      	bhi.n	8001842 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	4613      	mov	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	3b05      	subs	r3, #5
 800181a:	221f      	movs	r2, #31
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	4019      	ands	r1, r3
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	6818      	ldr	r0, [r3, #0]
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	4613      	mov	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	3b05      	subs	r3, #5
 8001834:	fa00 f203 	lsl.w	r2, r0, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	430a      	orrs	r2, r1
 800183e:	635a      	str	r2, [r3, #52]	; 0x34
 8001840:	e03c      	b.n	80018bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b0c      	cmp	r3, #12
 8001848:	d81c      	bhi.n	8001884 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	3b23      	subs	r3, #35	; 0x23
 800185c:	221f      	movs	r2, #31
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43db      	mvns	r3, r3
 8001864:	4019      	ands	r1, r3
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	6818      	ldr	r0, [r3, #0]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685a      	ldr	r2, [r3, #4]
 800186e:	4613      	mov	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4413      	add	r3, r2
 8001874:	3b23      	subs	r3, #35	; 0x23
 8001876:	fa00 f203 	lsl.w	r2, r0, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	430a      	orrs	r2, r1
 8001880:	631a      	str	r2, [r3, #48]	; 0x30
 8001882:	e01b      	b.n	80018bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685a      	ldr	r2, [r3, #4]
 800188e:	4613      	mov	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	3b41      	subs	r3, #65	; 0x41
 8001896:	221f      	movs	r2, #31
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	4019      	ands	r1, r3
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	6818      	ldr	r0, [r3, #0]
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	4613      	mov	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	3b41      	subs	r3, #65	; 0x41
 80018b0:	fa00 f203 	lsl.w	r2, r0, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	430a      	orrs	r2, r1
 80018ba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b09      	cmp	r3, #9
 80018c2:	d91c      	bls.n	80018fe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68d9      	ldr	r1, [r3, #12]
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	4613      	mov	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	4413      	add	r3, r2
 80018d4:	3b1e      	subs	r3, #30
 80018d6:	2207      	movs	r2, #7
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	4019      	ands	r1, r3
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	6898      	ldr	r0, [r3, #8]
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4613      	mov	r3, r2
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	4413      	add	r3, r2
 80018ee:	3b1e      	subs	r3, #30
 80018f0:	fa00 f203 	lsl.w	r2, r0, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	430a      	orrs	r2, r1
 80018fa:	60da      	str	r2, [r3, #12]
 80018fc:	e019      	b.n	8001932 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6919      	ldr	r1, [r3, #16]
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4613      	mov	r3, r2
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	4413      	add	r3, r2
 800190e:	2207      	movs	r2, #7
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	4019      	ands	r1, r3
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	6898      	ldr	r0, [r3, #8]
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4613      	mov	r3, r2
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	4413      	add	r3, r2
 8001926:	fa00 f203 	lsl.w	r2, r0, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	430a      	orrs	r2, r1
 8001930:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2b10      	cmp	r3, #16
 8001938:	d003      	beq.n	8001942 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800193e:	2b11      	cmp	r3, #17
 8001940:	d132      	bne.n	80019a8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a1d      	ldr	r2, [pc, #116]	; (80019bc <HAL_ADC_ConfigChannel+0x1e4>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d125      	bne.n	8001998 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d126      	bne.n	80019a8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001968:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2b10      	cmp	r3, #16
 8001970:	d11a      	bne.n	80019a8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001972:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a13      	ldr	r2, [pc, #76]	; (80019c4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001978:	fba2 2303 	umull	r2, r3, r2, r3
 800197c:	0c9a      	lsrs	r2, r3, #18
 800197e:	4613      	mov	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001988:	e002      	b.n	8001990 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	3b01      	subs	r3, #1
 800198e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f9      	bne.n	800198a <HAL_ADC_ConfigChannel+0x1b2>
 8001996:	e007      	b.n	80019a8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199c:	f043 0220 	orr.w	r2, r3, #32
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80019b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3714      	adds	r7, #20
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr
 80019bc:	40012400 	.word	0x40012400
 80019c0:	2000000c 	.word	0x2000000c
 80019c4:	431bde83 	.word	0x431bde83

080019c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d039      	beq.n	8001a5a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f042 0201 	orr.w	r2, r2, #1
 80019f4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019f6:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <ADC_Enable+0x9c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a1b      	ldr	r2, [pc, #108]	; (8001a68 <ADC_Enable+0xa0>)
 80019fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001a00:	0c9b      	lsrs	r3, r3, #18
 8001a02:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a04:	e002      	b.n	8001a0c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f9      	bne.n	8001a06 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a12:	f7ff fbfd 	bl	8001210 <HAL_GetTick>
 8001a16:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a18:	e018      	b.n	8001a4c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a1a:	f7ff fbf9 	bl	8001210 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d911      	bls.n	8001a4c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2c:	f043 0210 	orr.w	r2, r3, #16
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a38:	f043 0201 	orr.w	r2, r3, #1
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e007      	b.n	8001a5c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d1df      	bne.n	8001a1a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	2000000c 	.word	0x2000000c
 8001a68:	431bde83 	.word	0x431bde83

08001a6c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a74:	2300      	movs	r3, #0
 8001a76:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d127      	bne.n	8001ad6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f022 0201 	bic.w	r2, r2, #1
 8001a94:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a96:	f7ff fbbb 	bl	8001210 <HAL_GetTick>
 8001a9a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a9c:	e014      	b.n	8001ac8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a9e:	f7ff fbb7 	bl	8001210 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d90d      	bls.n	8001ac8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab0:	f043 0210 	orr.w	r2, r3, #16
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001abc:	f043 0201 	orr.w	r2, r3, #1
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e007      	b.n	8001ad8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d0e3      	beq.n	8001a9e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af0:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <__NVIC_SetPriorityGrouping+0x44>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001afc:	4013      	ands	r3, r2
 8001afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b12:	4a04      	ldr	r2, [pc, #16]	; (8001b24 <__NVIC_SetPriorityGrouping+0x44>)
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	60d3      	str	r3, [r2, #12]
}
 8001b18:	bf00      	nop
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc80      	pop	{r7}
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b2c:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <__NVIC_GetPriorityGrouping+0x18>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	0a1b      	lsrs	r3, r3, #8
 8001b32:	f003 0307 	and.w	r3, r3, #7
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	6039      	str	r1, [r7, #0]
 8001b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	db0a      	blt.n	8001b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	490c      	ldr	r1, [pc, #48]	; (8001b90 <__NVIC_SetPriority+0x4c>)
 8001b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b62:	0112      	lsls	r2, r2, #4
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	440b      	add	r3, r1
 8001b68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b6c:	e00a      	b.n	8001b84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	4908      	ldr	r1, [pc, #32]	; (8001b94 <__NVIC_SetPriority+0x50>)
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	3b04      	subs	r3, #4
 8001b7c:	0112      	lsls	r2, r2, #4
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	440b      	add	r3, r1
 8001b82:	761a      	strb	r2, [r3, #24]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000e100 	.word	0xe000e100
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b089      	sub	sp, #36	; 0x24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	f1c3 0307 	rsb	r3, r3, #7
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	bf28      	it	cs
 8001bb6:	2304      	movcs	r3, #4
 8001bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	2b06      	cmp	r3, #6
 8001bc0:	d902      	bls.n	8001bc8 <NVIC_EncodePriority+0x30>
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	3b03      	subs	r3, #3
 8001bc6:	e000      	b.n	8001bca <NVIC_EncodePriority+0x32>
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43da      	mvns	r2, r3
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	401a      	ands	r2, r3
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be0:	f04f 31ff 	mov.w	r1, #4294967295
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bea:	43d9      	mvns	r1, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf0:	4313      	orrs	r3, r2
         );
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3724      	adds	r7, #36	; 0x24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr

08001bfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c0c:	d301      	bcc.n	8001c12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e00f      	b.n	8001c32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c12:	4a0a      	ldr	r2, [pc, #40]	; (8001c3c <SysTick_Config+0x40>)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3b01      	subs	r3, #1
 8001c18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c1a:	210f      	movs	r1, #15
 8001c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c20:	f7ff ff90 	bl	8001b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c24:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <SysTick_Config+0x40>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c2a:	4b04      	ldr	r3, [pc, #16]	; (8001c3c <SysTick_Config+0x40>)
 8001c2c:	2207      	movs	r2, #7
 8001c2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	e000e010 	.word	0xe000e010

08001c40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff ff49 	bl	8001ae0 <__NVIC_SetPriorityGrouping>
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b086      	sub	sp, #24
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	60b9      	str	r1, [r7, #8]
 8001c60:	607a      	str	r2, [r7, #4]
 8001c62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c68:	f7ff ff5e 	bl	8001b28 <__NVIC_GetPriorityGrouping>
 8001c6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	68b9      	ldr	r1, [r7, #8]
 8001c72:	6978      	ldr	r0, [r7, #20]
 8001c74:	f7ff ff90 	bl	8001b98 <NVIC_EncodePriority>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c7e:	4611      	mov	r1, r2
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff ff5f 	bl	8001b44 <__NVIC_SetPriority>
}
 8001c86:	bf00      	nop
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7ff ffb0 	bl	8001bfc <SysTick_Config>
 8001c9c:	4603      	mov	r3, r0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e014      	b.n	8001ce2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	791b      	ldrb	r3, [r3, #4]
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d105      	bne.n	8001cce <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f00b fff3 	bl	800dcb4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	795b      	ldrb	r3, [r3, #5]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d101      	bne.n	8001d00 <HAL_DAC_Start+0x16>
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	e040      	b.n	8001d82 <HAL_DAC_Start+0x98>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2202      	movs	r2, #2
 8001d0a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6819      	ldr	r1, [r3, #0]
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	f003 0310 	and.w	r3, r3, #16
 8001d18:	2201      	movs	r2, #1
 8001d1a:	409a      	lsls	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d10f      	bne.n	8001d4a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001d34:	2b3c      	cmp	r3, #60	; 0x3c
 8001d36:	d11d      	bne.n	8001d74 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0201 	orr.w	r2, r2, #1
 8001d46:	605a      	str	r2, [r3, #4]
 8001d48:	e014      	b.n	8001d74 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	f003 0310 	and.w	r3, r3, #16
 8001d5a:	213c      	movs	r1, #60	; 0x3c
 8001d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d107      	bne.n	8001d74 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 0202 	orr.w	r2, r2, #2
 8001d72:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr

08001d8c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
 8001d98:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d105      	bne.n	8001db6 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4413      	add	r3, r2
 8001db0:	3308      	adds	r3, #8
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	e004      	b.n	8001dc0 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4413      	add	r3, r2
 8001dbc:	3314      	adds	r3, #20
 8001dbe:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	371c      	adds	r7, #28
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b087      	sub	sp, #28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	795b      	ldrb	r3, [r3, #5]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d101      	bne.n	8001dec <HAL_DAC_ConfigChannel+0x18>
 8001de8:	2302      	movs	r3, #2
 8001dea:	e04a      	b.n	8001e82 <HAL_DAC_ConfigChannel+0xae>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2201      	movs	r2, #1
 8001df0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2202      	movs	r2, #2
 8001df6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f003 0310 	and.w	r3, r3, #16
 8001e06:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	4013      	ands	r3, r2
 8001e14:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f003 0310 	and.w	r3, r3, #16
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6819      	ldr	r1, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f003 0310 	and.w	r3, r3, #16
 8001e48:	22c0      	movs	r2, #192	; 0xc0
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43da      	mvns	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	400a      	ands	r2, r1
 8001e56:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6819      	ldr	r1, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f003 0310 	and.w	r3, r3, #16
 8001e64:	22c0      	movs	r2, #192	; 0xc0
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43da      	mvns	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	400a      	ands	r2, r1
 8001e72:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2201      	movs	r2, #1
 8001e78:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	371c      	adds	r7, #28
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr

08001e8c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b088      	sub	sp, #32
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61fb      	str	r3, [r7, #28]
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001e9c:	4bac      	ldr	r3, [pc, #688]	; (8002150 <HAL_ETH_Init+0x2c4>)
 8001e9e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e14a      	b.n	8002148 <HAL_ETH_Init+0x2bc>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d106      	bne.n	8001ecc <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f00b ff30 	bl	800dd2c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Select MII or RMII Mode*/
  AFIO->MAPR &= ~(AFIO_MAPR_MII_RMII_SEL);
 8001ecc:	4ba1      	ldr	r3, [pc, #644]	; (8002154 <HAL_ETH_Init+0x2c8>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	4aa0      	ldr	r2, [pc, #640]	; (8002154 <HAL_ETH_Init+0x2c8>)
 8001ed2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ed6:	6053      	str	r3, [r2, #4]
  AFIO->MAPR |= (uint32_t)heth->Init.MediaInterface;
 8001ed8:	4b9e      	ldr	r3, [pc, #632]	; (8002154 <HAL_ETH_Init+0x2c8>)
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	499c      	ldr	r1, [pc, #624]	; (8002154 <HAL_ETH_Init+0x2c8>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f042 0201 	orr.w	r2, r2, #1
 8001ef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001efc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001efe:	f7ff f987 	bl	8001210 <HAL_GetTick>
 8001f02:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001f04:	e011      	b.n	8001f2a <HAL_ETH_Init+0x9e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 8001f06:	f7ff f983 	bl	8001210 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f14:	d909      	bls.n	8001f2a <HAL_ETH_Init+0x9e>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2203      	movs	r2, #3
 8001f1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e10e      	b.n	8002148 <HAL_ETH_Init+0x2bc>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1e4      	bne.n	8001f06 <HAL_ETH_Init+0x7a>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	f023 031c 	bic.w	r3, r3, #28
 8001f4a:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001f4c:	f001 ff18 	bl	8003d80 <HAL_RCC_GetHCLKFreq>
 8001f50:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	4a80      	ldr	r2, [pc, #512]	; (8002158 <HAL_ETH_Init+0x2cc>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d908      	bls.n	8001f6c <HAL_ETH_Init+0xe0>
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	4a7f      	ldr	r2, [pc, #508]	; (800215c <HAL_ETH_Init+0x2d0>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d804      	bhi.n	8001f6c <HAL_ETH_Init+0xe0>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_DIV16;
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	f043 0308 	orr.w	r3, r3, #8
 8001f68:	61fb      	str	r3, [r7, #28]
 8001f6a:	e00b      	b.n	8001f84 <HAL_ETH_Init+0xf8>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	4a7b      	ldr	r2, [pc, #492]	; (800215c <HAL_ETH_Init+0x2d0>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d907      	bls.n	8001f84 <HAL_ETH_Init+0xf8>
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	4a7a      	ldr	r2, [pc, #488]	; (8002160 <HAL_ETH_Init+0x2d4>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d803      	bhi.n	8001f84 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_DIV26;
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f043 030c 	orr.w	r3, r3, #12
 8001f82:	61fb      	str	r3, [r7, #28]
    /* CSR Clock Range between 60-72 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_DIV42;
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	69fa      	ldr	r2, [r7, #28]
 8001f8a:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001f8c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f90:	2100      	movs	r1, #0
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 fb8f 	bl	80026b6 <HAL_ETH_WritePHYRegister>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00b      	beq.n	8001fb6 <HAL_ETH_Init+0x12a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001fa2:	6939      	ldr	r1, [r7, #16]
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 fd45 	bl	8002a34 <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e0c8      	b.n	8002148 <HAL_ETH_Init+0x2bc>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001fb6:	20ff      	movs	r0, #255	; 0xff
 8001fb8:	f7ff f934 	bl	8001224 <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f000 8096 	beq.w	80020f2 <HAL_ETH_Init+0x266>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001fc6:	f7ff f923 	bl	8001210 <HAL_GetTick>
 8001fca:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001fcc:	f107 030c 	add.w	r3, r7, #12
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 fb06 	bl	80025e6 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 8001fda:	f7ff f919 	bl	8001210 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d90f      	bls.n	800200c <HAL_ETH_Init+0x180>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001ff0:	6939      	ldr	r1, [r7, #16]
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 fd1e 	bl	8002a34 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e09d      	b.n	8002148 <HAL_ETH_Init+0x2bc>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f003 0304 	and.w	r3, r3, #4
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0da      	beq.n	8001fcc <HAL_ETH_Init+0x140>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002016:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800201a:	2100      	movs	r1, #0
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 fb4a 	bl	80026b6 <HAL_ETH_WritePHYRegister>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00b      	beq.n	8002040 <HAL_ETH_Init+0x1b4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800202c:	6939      	ldr	r1, [r7, #16]
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 fd00 	bl	8002a34 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e083      	b.n	8002148 <HAL_ETH_Init+0x2bc>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 8002040:	f7ff f8e6 	bl	8001210 <HAL_GetTick>
 8002044:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002046:	f107 030c 	add.w	r3, r7, #12
 800204a:	461a      	mov	r2, r3
 800204c:	2101      	movs	r1, #1
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 fac9 	bl	80025e6 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002054:	f7ff f8dc 	bl	8001210 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002062:	4293      	cmp	r3, r2
 8002064:	d90f      	bls.n	8002086 <HAL_ETH_Init+0x1fa>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800206a:	6939      	ldr	r1, [r7, #16]
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 fce1 	bl	8002a34 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e060      	b.n	8002148 <HAL_ETH_Init+0x2bc>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f003 0320 	and.w	r3, r3, #32
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0da      	beq.n	8002046 <HAL_ETH_Init+0x1ba>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002090:	f107 030c 	add.w	r3, r7, #12
 8002094:	461a      	mov	r2, r3
 8002096:	2110      	movs	r1, #16
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 faa4 	bl	80025e6 <HAL_ETH_ReadPHYRegister>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00b      	beq.n	80020bc <HAL_ETH_Init+0x230>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80020a8:	6939      	ldr	r1, [r7, #16]
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 fcc2 	bl	8002a34 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e045      	b.n	8002148 <HAL_ETH_Init+0x2bc>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f003 0304 	and.w	r3, r3, #4
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d004      	beq.n	80020d0 <HAL_ETH_Init+0x244>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020cc:	60da      	str	r2, [r3, #12]
 80020ce:	e002      	b.n	80020d6 <HAL_ETH_Init+0x24a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <HAL_ETH_Init+0x25c>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	609a      	str	r2, [r3, #8]
 80020e6:	e026      	b.n	8002136 <HAL_ETH_Init+0x2aa>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	e021      	b.n	8002136 <HAL_ETH_Init+0x2aa>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	08db      	lsrs	r3, r3, #3
 80020f8:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	085b      	lsrs	r3, r3, #1
 8002100:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002102:	4313      	orrs	r3, r2
 8002104:	b29b      	uxth	r3, r3
 8002106:	461a      	mov	r2, r3
 8002108:	2100      	movs	r1, #0
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 fad3 	bl	80026b6 <HAL_ETH_WritePHYRegister>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00b      	beq.n	800212e <HAL_ETH_Init+0x2a2>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800211a:	6939      	ldr	r1, [r7, #16]
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 fc89 	bl	8002a34 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e00c      	b.n	8002148 <HAL_ETH_Init+0x2bc>
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800212e:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002132:	f7ff f877 	bl	8001224 <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002136:	6939      	ldr	r1, [r7, #16]
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 fc7b 	bl	8002a34 <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3720      	adds	r7, #32
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	03938700 	.word	0x03938700
 8002154:	40010000 	.word	0x40010000
 8002158:	01312cff 	.word	0x01312cff
 800215c:	02160ebf 	.word	0x02160ebf
 8002160:	039386ff 	.word	0x039386ff

08002164 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff: Pointer to the first TxBuffer list
  * @param  TxBuffCount: Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8002164:	b480      	push	{r7}
 8002166:	b087      	sub	sp, #28
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
 8002170:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800217c:	2b01      	cmp	r3, #1
 800217e:	d101      	bne.n	8002184 <HAL_ETH_DMATxDescListInit+0x20>
 8002180:	2302      	movs	r3, #2
 8002182:	e052      	b.n	800222a <HAL_ETH_DMATxDescListInit+0xc6>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2202      	movs	r2, #2
 8002190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0U; i < TxBuffCount; i++)
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	e030      	b.n	8002202 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	68ba      	ldr	r2, [r7, #8]
 80021a6:	4413      	add	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]

    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80021b0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80021b8:	fb02 f303 	mul.w	r3, r2, r3
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	4413      	add	r3, r2
 80021c0:	461a      	mov	r2, r3
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	609a      	str	r2, [r3, #8]

    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d105      	bne.n	80021da <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	601a      	str	r2, [r3, #0]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (TxBuffCount - 1U))
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	3b01      	subs	r3, #1
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d208      	bcs.n	80021f6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1U);
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	3301      	adds	r3, #1
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	4413      	add	r3, r2
 80021ee:	461a      	mov	r2, r3
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	60da      	str	r2, [r3, #12]
 80021f4:	e002      	b.n	80021fc <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < TxBuffCount; i++)
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	3301      	adds	r3, #1
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	429a      	cmp	r2, r3
 8002208:	d3ca      	bcc.n	80021a0 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }

  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002214:	3310      	adds	r3, #16
 8002216:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	371c      	adds	r7, #28
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr

08002234 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff: Pointer to the first RxBuffer list
  * @param  RxBuffCount: Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8002234:	b480      	push	{r7}
 8002236:	b087      	sub	sp, #28
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
 8002240:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800224c:	2b01      	cmp	r3, #1
 800224e:	d101      	bne.n	8002254 <HAL_ETH_DMARxDescListInit+0x20>
 8002250:	2302      	movs	r3, #2
 8002252:	e056      	b.n	8002302 <HAL_ETH_DMARxDescListInit+0xce>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2202      	movs	r2, #2
 8002260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	629a      	str	r2, [r3, #40]	; 0x28

  /* Fill each DMARxDesc descriptor with the right values */
  for (i = 0U; i < RxBuffCount; i++)
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
 800226e:	e034      	b.n	80022da <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab + i;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	68ba      	ldr	r2, [r7, #8]
 8002276:	4413      	add	r3, r2
 8002278:	613b      	str	r3, [r7, #16]

    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002280:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002288:	605a      	str	r2, [r3, #4]

    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002290:	fb02 f303 	mul.w	r3, r2, r3
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	4413      	add	r3, r2
 8002298:	461a      	mov	r2, r3
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	609a      	str	r2, [r3, #8]

    if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d105      	bne.n	80022b2 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	605a      	str	r2, [r3, #4]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (RxBuffCount - 1U))
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	3b01      	subs	r3, #1
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d208      	bcs.n	80022ce <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	3301      	adds	r3, #1
 80022c0:	011b      	lsls	r3, r3, #4
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	4413      	add	r3, r2
 80022c6:	461a      	mov	r2, r3
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	60da      	str	r2, [r3, #12]
 80022cc:	e002      	b.n	80022d4 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab);
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < RxBuffCount; i++)
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	3301      	adds	r3, #1
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d3c6      	bcc.n	8002270 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }

  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022ec:	330c      	adds	r3, #12
 80022ee:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	371c      	adds	r7, #28
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr

0800230c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800230c:	b480      	push	{r7}
 800230e:	b087      	sub	sp, #28
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8002316:	2300      	movs	r3, #0
 8002318:	617b      	str	r3, [r7, #20]
 800231a:	2300      	movs	r3, #0
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	2300      	movs	r3, #0
 8002320:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(heth);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002328:	2b01      	cmp	r3, #1
 800232a:	d101      	bne.n	8002330 <HAL_ETH_TransmitFrame+0x24>
 800232c:	2302      	movs	r3, #2
 800232e:	e0cd      	b.n	80024cc <HAL_ETH_TransmitFrame+0x1c0>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2202      	movs	r2, #2
 800233c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  if (FrameLength == 0U)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d109      	bne.n	800235a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return  HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e0b8      	b.n	80024cc <HAL_ETH_TransmitFrame+0x1c0>
  }

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	da09      	bge.n	8002378 <HAL_ETH_TransmitFrame+0x6c>
  {
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2212      	movs	r2, #18
 8002368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0a9      	b.n	80024cc <HAL_ETH_TransmitFrame+0x1c0>
  }

  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800237e:	4293      	cmp	r3, r2
 8002380:	d915      	bls.n	80023ae <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	4a54      	ldr	r2, [pc, #336]	; (80024d8 <HAL_ETH_TransmitFrame+0x1cc>)
 8002386:	fba2 2303 	umull	r2, r3, r2, r3
 800238a:	0a9b      	lsrs	r3, r3, #10
 800238c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE)
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	4b51      	ldr	r3, [pc, #324]	; (80024d8 <HAL_ETH_TransmitFrame+0x1cc>)
 8002392:	fba3 1302 	umull	r1, r3, r3, r2
 8002396:	0a9b      	lsrs	r3, r3, #10
 8002398:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800239c:	fb01 f303 	mul.w	r3, r1, r3
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d005      	beq.n	80023b2 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	3301      	adds	r3, #1
 80023aa:	617b      	str	r3, [r7, #20]
 80023ac:	e001      	b.n	80023b2 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else
  {
    bufcount = 1U;
 80023ae:	2301      	movs	r3, #1
 80023b0:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d11c      	bne.n	80023f2 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c2:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80023c6:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80023d2:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023de:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80023e2:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	461a      	mov	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80023f0:	e04b      	b.n	800248a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i = 0U; i < bufcount; i++)
 80023f2:	2300      	movs	r3, #0
 80023f4:	613b      	str	r3, [r7, #16]
 80023f6:	e044      	b.n	8002482 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002402:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002406:	601a      	str	r2, [r3, #0]

      if (i == 0U)
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d107      	bne.n	800241e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002418:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800241c:	601a      	str	r2, [r3, #0]
      }

      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002422:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002426:	605a      	str	r2, [r3, #4]

      if (i == (bufcount - 1U))
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	3b01      	subs	r3, #1
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	429a      	cmp	r2, r3
 8002430:	d116      	bne.n	8002460 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002440:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	4a25      	ldr	r2, [pc, #148]	; (80024dc <HAL_ETH_TransmitFrame+0x1d0>)
 8002446:	fb02 f203 	mul.w	r2, r2, r3
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	4413      	add	r3, r2
 800244e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002452:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800245e:	605a      	str	r2, [r3, #4]
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800246e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	461a      	mov	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i = 0U; i < bufcount; i++)
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	3301      	adds	r3, #1
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	429a      	cmp	r2, r3
 8002488:	d3b6      	bcc.n	80023f8 <HAL_ETH_TransmitFrame+0xec>
    }
  }

  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002492:	3314      	adds	r3, #20
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00d      	beq.n	80024ba <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024a6:	3314      	adds	r3, #20
 80024a8:	2204      	movs	r2, #4
 80024aa:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024b4:	3304      	adds	r3, #4
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	371c      	adds	r7, #28
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	ac02b00b 	.word	0xac02b00b
 80024dc:	fffffa0c 	.word	0xfffffa0c

080024e0 <HAL_ETH_GetReceivedFrame>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d101      	bne.n	80024fa <HAL_ETH_GetReceivedFrame+0x1a>
 80024f6:	2302      	movs	r3, #2
 80024f8:	e070      	b.n	80025dc <HAL_ETH_GetReceivedFrame+0xfc>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2202      	movs	r2, #2
 8002506:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	db5a      	blt.n	80025ca <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if (((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251e:	2b00      	cmp	r3, #0
 8002520:	d030      	beq.n	8002584 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002526:	1c5a      	adds	r2, r3, #1
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002530:	2b01      	cmp	r3, #1
 8002532:	d103      	bne.n	800253c <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	631a      	str	r2, [r3, #48]	; 0x30
      }

      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	0c1b      	lsrs	r3, r3, #16
 800254c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002550:	3b04      	subs	r3, #4
 8002552:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)((heth->RxDesc)->Buffer2NextDescAddr);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	461a      	mov	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Return function status */
      return HAL_OK;
 8002580:	2300      	movs	r3, #0
 8002582:	e02b      	b.n	80025dc <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800258e:	2b00      	cmp	r3, #0
 8002590:	d010      	beq.n	80025b4 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	461a      	mov	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	629a      	str	r2, [r3, #40]	; 0x28
 80025b2:	e00a      	b.n	80025ca <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */
    else
    {
      (heth->RxFrameInfos).SegCount++;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b8:	1c5a      	adds	r2, r3, #1
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	461a      	mov	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr

080025e6 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue: PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b086      	sub	sp, #24
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	60f8      	str	r0, [r7, #12]
 80025ee:	460b      	mov	r3, r1
 80025f0:	607a      	str	r2, [r7, #4]
 80025f2:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b82      	cmp	r3, #130	; 0x82
 8002606:	d101      	bne.n	800260c <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002608:	2302      	movs	r3, #2
 800260a:	e050      	b.n	80026ae <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2282      	movs	r2, #130	; 0x82
 8002610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f003 031c 	and.w	r3, r3, #28
 8002622:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8a1b      	ldrh	r3, [r3, #16]
 8002628:	02db      	lsls	r3, r3, #11
 800262a:	b29b      	uxth	r3, r3
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	4313      	orrs	r3, r2
 8002630:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002632:	897b      	ldrh	r3, [r7, #10]
 8002634:	019b      	lsls	r3, r3, #6
 8002636:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	4313      	orrs	r3, r2
 800263e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	f023 0302 	bic.w	r3, r3, #2
 8002646:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	f043 0301 	orr.w	r3, r3, #1
 800264e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002658:	f7fe fdda 	bl	8001210 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800265e:	e015      	b.n	800268c <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002660:	f7fe fdd6 	bl	8001210 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800266e:	d309      	bcc.n	8002684 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e014      	b.n	80026ae <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1e4      	bne.n	8002660 <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	b29b      	uxth	r3, r3
 800269e:	461a      	mov	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b086      	sub	sp, #24
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	60f8      	str	r0, [r7, #12]
 80026be:	460b      	mov	r3, r1
 80026c0:	607a      	str	r2, [r7, #4]
 80026c2:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b42      	cmp	r3, #66	; 0x42
 80026d6:	d101      	bne.n	80026dc <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80026d8:	2302      	movs	r3, #2
 80026da:	e04e      	b.n	800277a <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2242      	movs	r2, #66	; 0x42
 80026e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	f003 031c 	and.w	r3, r3, #28
 80026f2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8a1b      	ldrh	r3, [r3, #16]
 80026f8:	02db      	lsls	r3, r3, #11
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	4313      	orrs	r3, r2
 8002700:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002702:	897b      	ldrh	r3, [r7, #10]
 8002704:	019b      	lsls	r3, r3, #6
 8002706:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	4313      	orrs	r3, r2
 800270e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f043 0302 	orr.w	r3, r3, #2
 8002716:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	f043 0301 	orr.w	r3, r3, #1
 800271e:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	b29a      	uxth	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002732:	f7fe fd6d 	bl	8001210 <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002738:	e015      	b.n	8002766 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 800273a:	f7fe fd69 	bl	8001210 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002748:	d309      	bcc.n	800275e <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e00d      	b.n	800277a <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1e4      	bne.n	800273a <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_ETH_Start>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002790:	2b01      	cmp	r3, #1
 8002792:	d101      	bne.n	8002798 <HAL_ETH_Start+0x16>
 8002794:	2302      	movs	r3, #2
 8002796:	e01f      	b.n	80027d8 <HAL_ETH_Start+0x56>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2202      	movs	r2, #2
 80027a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 fb3f 	bl	8002e2c <ETH_MACTransmissionEnable>

  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 fb76 	bl	8002ea0 <ETH_MACReceptionEnable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 fc09 	bl	8002fcc <ETH_FlushTransmitFIFO>

  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 fbaa 	bl	8002f14 <ETH_DMATransmissionEnable>

  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 fbd5 	bl	8002f70 <ETH_DMAReceptionEnable>

  /* Set the ETH state to READY*/
  heth->State = HAL_ETH_STATE_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d101      	bne.n	80027f6 <HAL_ETH_Stop+0x16>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e01f      	b.n	8002836 <HAL_ETH_Stop+0x56>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2202      	movs	r2, #2
 8002802:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 fb9b 	bl	8002f42 <ETH_DMATransmissionDisable>

  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 fbc6 	bl	8002f9e <ETH_DMAReceptionDisable>

  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 fb61 	bl	8002eda <ETH_MACReceptionDisable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 fbd7 	bl	8002fcc <ETH_FlushTransmitFIFO>

  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 fb21 	bl	8002e66 <ETH_MACTransmissionDisable>

  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf: MAC Configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 800284a:	2300      	movs	r3, #0
 800284c:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002854:	2b01      	cmp	r3, #1
 8002856:	d101      	bne.n	800285c <HAL_ETH_ConfigMAC+0x1c>
 8002858:	2302      	movs	r3, #2
 800285a:	e0e4      	b.n	8002a26 <HAL_ETH_ConfigMAC+0x1e6>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2202      	movs	r2, #2
 8002868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

  if (macconf != NULL)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 80b1 	beq.w	80029d6 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));

    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	4b6c      	ldr	r3, [pc, #432]	; (8002a30 <HAL_ETH_ConfigMAC+0x1f0>)
 8002880:	4013      	ands	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
                          macconf->Jabber |
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 800288c:	431a      	orrs	r2, r3
                          macconf->InterFrameGap |
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
                          macconf->Jabber |
 8002892:	431a      	orrs	r2, r3
                          macconf->CarrierSense |
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
                          macconf->InterFrameGap |
 8002898:	431a      	orrs	r2, r3
                          (heth->Init).Speed |
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
                          macconf->CarrierSense |
 800289e:	431a      	orrs	r2, r3
                          macconf->ReceiveOwn |
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	691b      	ldr	r3, [r3, #16]
                          (heth->Init).Speed |
 80028a4:	431a      	orrs	r2, r3
                          macconf->LoopbackMode |
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	695b      	ldr	r3, [r3, #20]
                          macconf->ReceiveOwn |
 80028aa:	431a      	orrs	r2, r3
                          (heth->Init).DuplexMode |
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
                          macconf->LoopbackMode |
 80028b0:	431a      	orrs	r2, r3
                          macconf->ChecksumOffload |
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	699b      	ldr	r3, [r3, #24]
                          (heth->Init).DuplexMode |
 80028b6:	431a      	orrs	r2, r3
                          macconf->RetryTransmission |
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	69db      	ldr	r3, [r3, #28]
                          macconf->ChecksumOffload |
 80028bc:	431a      	orrs	r2, r3
                          macconf->AutomaticPadCRCStrip |
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
                          macconf->RetryTransmission |
 80028c2:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          macconf->AutomaticPadCRCStrip |
 80028c8:	431a      	orrs	r2, r3
                          macconf->DeferralCheck);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          macconf->BackOffLimit |
 80028ce:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80028e6:	2001      	movs	r0, #1
 80028e8:	f7fe fc9c 	bl	8001224 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	601a      	str	r2, [r3, #0]

    /*----------------------- ETHERNET MACFFR Configuration --------------------*/
    /* Write to ETHERNET MACFFR */
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 80028fc:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8002902:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception |
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002908:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception |
 800290e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002914:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800291a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8002926:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8002928:	605a      	str	r2, [r3, #4]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFFR;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002932:	2001      	movs	r0, #1
 8002934:	f7fe fc76 	bl	8001224 <HAL_Delay>
    (heth->Instance)->MACFFR = tmpreg1;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	605a      	str	r2, [r3, #4]

    /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
    /* Write to ETHERNET MACHTHR */
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002948:	609a      	str	r2, [r3, #8]

    /* Write to ETHERNET MACHTLR */
    (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002952:	60da      	str	r2, [r3, #12]
    /*----------------------- ETHERNET MACFCR Configuration --------------------*/

    /* Get the ETHERNET MACFCR value */
    tmpreg1 = (heth->Instance)->MACFCR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	60fb      	str	r3, [r7, #12]
    /* Clear xx bits */
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002962:	4013      	ands	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002970:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8002976:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect |
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 800297c:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect |
 8002982:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002988:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	4313      	orrs	r3, r2
 800298e:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACFCR */
    (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	619a      	str	r2, [r3, #24]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFCR;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80029a0:	2001      	movs	r0, #1
 80029a2:	f7fe fc3f 	bl	8001224 <HAL_Delay>
    (heth->Instance)->MACFCR = tmpreg1;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	619a      	str	r2, [r3, #24]

    /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                             macconf->VLANTagIdentifier);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	61da      	str	r2, [r3, #28]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80029c6:	2001      	movs	r0, #1
 80029c8:	f7fe fc2c 	bl	8001224 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	61da      	str	r2, [r3, #28]
 80029d4:	e01e      	b.n	8002a14 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	60fb      	str	r3, [r7, #12]

    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80029e4:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689a      	ldr	r2, [r3, #8]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a06:	2001      	movs	r0, #1
 8002a08:	f7fe fc0c 	bl	8001224 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	601a      	str	r2, [r3, #0]
  }

  /* Set the ETH state to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	ff20810f 	.word	0xff20810f

08002a34 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err: Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b0b0      	sub	sp, #192	; 0xc0
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d007      	beq.n	8002a5a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a50:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a58:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002a62:	2300      	movs	r3, #0
 8002a64:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002a66:	2300      	movs	r3, #0
 8002a68:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d103      	bne.n	8002a82 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002a7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a7e:	663b      	str	r3, [r7, #96]	; 0x60
 8002a80:	e001      	b.n	8002a86 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002a82:	2300      	movs	r3, #0
 8002a84:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002a86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a8a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002a90:	2300      	movs	r3, #0
 8002a92:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002a94:	2300      	movs	r3, #0
 8002a96:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002aa0:	2340      	movs	r3, #64	; 0x40
 8002aa2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002abc:	2300      	movs	r3, #0
 8002abe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002ad4:	2380      	movs	r3, #128	; 0x80
 8002ad6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002ada:	2300      	movs	r3, #0
 8002adc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002aec:	2300      	movs	r3, #0
 8002aee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002af2:	2300      	movs	r3, #0
 8002af4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002b08:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b0c:	4baa      	ldr	r3, [pc, #680]	; (8002db8 <ETH_MACDMAConfig+0x384>)
 8002b0e:	4013      	ands	r3, r2
 8002b10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8002b14:	6cba      	ldr	r2, [r7, #72]	; 0x48
                        macinit.Jabber |
 8002b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8002b18:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 8002b1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        macinit.Jabber |
 8002b1c:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 8002b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                        macinit.InterFrameGap |
 8002b20:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 8002b26:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 8002b28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                        (heth->Init).Speed |
 8002b2a:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 8002b2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                        macinit.ReceiveOwn |
 8002b2e:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 8002b34:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 8002b36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                        (heth->Init).DuplexMode |
 8002b38:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 8002b3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                        macinit.ChecksumOffload |
 8002b3c:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 8002b3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                        macinit.RetryTransmission |
 8002b40:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 8002b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                        macinit.AutomaticPadCRCStrip |
 8002b44:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 8002b46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                        macinit.BackOffLimit |
 8002b48:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8002b4a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b5c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b68:	2001      	movs	r0, #1
 8002b6a:	f7fe fb5b 	bl	8001224 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b76:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002b78:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002b7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002b7c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002b7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002b80:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 8002b82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002b86:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002b88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception |
 8002b8c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002b8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002b92:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002b94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002b98:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002b9c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002ba4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002ba6:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bb2:	2001      	movs	r0, #1
 8002bb4:	f7fe fb36 	bl	8001224 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bc0:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002bca:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002bd4:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002be0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002be4:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002be8:	4013      	ands	r3, r2
 8002bea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8002bee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002bf2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002bf4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8002bf8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002bfa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002bfe:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 8002c00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002c04:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002c06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect |
 8002c0a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 8002c0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002c10:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8002c12:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c16:	4313      	orrs	r3, r2
 8002c18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c24:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c30:	2001      	movs	r0, #1
 8002c32:	f7fe faf7 	bl	8001224 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c3e:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8002c40:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                           macinit.VLANTagIdentifier);
 8002c44:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c5a:	2001      	movs	r0, #1
 8002c5c:	f7fe fae2 	bl	8001224 <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c68:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60fb      	str	r3, [r7, #12]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002c6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c72:	613b      	str	r3, [r7, #16]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002c74:	2300      	movs	r3, #0
 8002c76:	617b      	str	r3, [r7, #20]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 8002c78:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c7c:	61bb      	str	r3, [r7, #24]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002c82:	2300      	movs	r3, #0
 8002c84:	623b      	str	r3, [r7, #32]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002c86:	2300      	movs	r3, #0
 8002c88:	627b      	str	r3, [r7, #36]	; 0x24
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002c8e:	2304      	movs	r3, #4
 8002c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002c92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c96:	633b      	str	r3, [r7, #48]	; 0x30
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002c98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c9c:	637b      	str	r3, [r7, #52]	; 0x34
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002c9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ca2:	63bb      	str	r3, [r7, #56]	; 0x38
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002ca4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 8002caa:	2300      	movs	r3, #0
 8002cac:	643b      	str	r3, [r7, #64]	; 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	647b      	str	r3, [r7, #68]	; 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cba:	3318      	adds	r3, #24
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002cc2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cc6:	4b3d      	ldr	r3, [pc, #244]	; (8002dbc <ETH_MACDMAConfig+0x388>)
 8002cc8:	4013      	ands	r3, r2
 8002cca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8002cce:	68fa      	ldr	r2, [r7, #12]
                        dmainit.ReceiveStoreForward |
 8002cd0:	693b      	ldr	r3, [r7, #16]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8002cd2:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 8002cd4:	697b      	ldr	r3, [r7, #20]
                        dmainit.ReceiveStoreForward |
 8002cd6:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 8002cd8:	69bb      	ldr	r3, [r7, #24]
                        dmainit.FlushReceivedFrame |
 8002cda:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 8002cdc:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitStoreForward |
 8002cde:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.TransmitThresholdControl |
 8002ce2:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                        dmainit.ForwardErrorFrames |
 8002ce6:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 8002ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                        dmainit.ForwardUndersizedGoodFrames |
 8002cea:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 8002cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                        dmainit.ReceiveThresholdControl |
 8002cee:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8002cf0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d02:	3318      	adds	r3, #24
 8002d04:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d08:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d12:	3318      	adds	r3, #24
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d1a:	2001      	movs	r0, #1
 8002d1c:	f7fe fa82 	bl	8001224 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d28:	3318      	adds	r3, #24
 8002d2a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d2e:	601a      	str	r2, [r3, #0]
  /* Set the FB bit according to ETH FixedBurst value */
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8002d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
                                        dmainit.FixedBurst |
 8002d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8002d34:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                        dmainit.FixedBurst |
 8002d38:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 8002d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002d3c:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 8002d3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d40:	009b      	lsls	r3, r3, #2
                                        dmainit.TxDMABurstLength |
 8002d42:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 8002d44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 8002d46:	431a      	orrs	r2, r3
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002d50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d54:	601a      	str	r2, [r3, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d64:	2001      	movs	r0, #1
 8002d66:	f7fe fa5d 	bl	8001224 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d72:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d76:	601a      	str	r2, [r3, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d10f      	bne.n	8002da0 <ETH_MACDMAConfig+0x36c>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d88:	331c      	adds	r3, #28
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002d94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d9c:	331c      	adds	r3, #28
 8002d9e:	601a      	str	r2, [r3, #0]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	461a      	mov	r2, r3
 8002da6:	2100      	movs	r1, #0
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 f809 	bl	8002dc0 <ETH_MACAddressConfig>
}
 8002dae:	bf00      	nop
 8002db0:	37c0      	adds	r7, #192	; 0xc0
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	ff20810f 	.word	0xff20810f
 8002dbc:	f8de3f23 	.word	0xf8de3f23

08002dc0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr: Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b087      	sub	sp, #28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3305      	adds	r3, #5
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	021b      	lsls	r3, r3, #8
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	3204      	adds	r2, #4
 8002dd8:	7812      	ldrb	r2, [r2, #0]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	4b10      	ldr	r3, [pc, #64]	; (8002e24 <ETH_MACAddressConfig+0x64>)
 8002de2:	4413      	add	r3, r2
 8002de4:	461a      	mov	r2, r3
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	3303      	adds	r3, #3
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	061a      	lsls	r2, r3, #24
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3302      	adds	r3, #2
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	041b      	lsls	r3, r3, #16
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	021b      	lsls	r3, r3, #8
 8002e04:	4313      	orrs	r3, r2
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	7812      	ldrb	r2, [r2, #0]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	4b05      	ldr	r3, [pc, #20]	; (8002e28 <ETH_MACAddressConfig+0x68>)
 8002e12:	4413      	add	r3, r2
 8002e14:	461a      	mov	r2, r3
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	6013      	str	r3, [r2, #0]
}
 8002e1a:	bf00      	nop
 8002e1c:	371c      	adds	r7, #28
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc80      	pop	{r7}
 8002e22:	4770      	bx	lr
 8002e24:	40028040 	.word	0x40028040
 8002e28:	40028044 	.word	0x40028044

08002e2c <ETH_MACTransmissionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0208 	orr.w	r2, r2, #8
 8002e46:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002e50:	2001      	movs	r0, #1
 8002e52:	f000 f8e5 	bl	8003020 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	601a      	str	r2, [r3, #0]
}
 8002e5e:	bf00      	nop
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <ETH_MACTransmissionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b084      	sub	sp, #16
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0208 	bic.w	r2, r2, #8
 8002e80:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002e8a:	2001      	movs	r0, #1
 8002e8c:	f000 f8c8 	bl	8003020 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	601a      	str	r2, [r3, #0]
}
 8002e98:	bf00      	nop
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <ETH_MACReceptionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0204 	orr.w	r2, r2, #4
 8002eba:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002ec4:	2001      	movs	r0, #1
 8002ec6:	f000 f8ab 	bl	8003020 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	601a      	str	r2, [r3, #0]
}
 8002ed2:	bf00      	nop
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <ETH_MACReceptionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b084      	sub	sp, #16
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 0204 	bic.w	r2, r2, #4
 8002ef4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002efe:	2001      	movs	r0, #1
 8002f00:	f000 f88e 	bl	8003020 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	601a      	str	r2, [r3, #0]
}
 8002f0c:	bf00      	nop
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <ETH_DMATransmissionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f24:	3318      	adds	r3, #24
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f34:	3318      	adds	r3, #24
 8002f36:	601a      	str	r2, [r3, #0]
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr

08002f42 <ETH_DMATransmissionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f52:	3318      	adds	r3, #24
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f62:	3318      	adds	r3, #24
 8002f64:	601a      	str	r2, [r3, #0]
}
 8002f66:	bf00      	nop
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr

08002f70 <ETH_DMAReceptionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f80:	3318      	adds	r3, #24
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f042 0202 	orr.w	r2, r2, #2
 8002f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f90:	3318      	adds	r3, #24
 8002f92:	601a      	str	r2, [r3, #0]
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bc80      	pop	{r7}
 8002f9c:	4770      	bx	lr

08002f9e <ETH_DMAReceptionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fae:	3318      	adds	r3, #24
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0202 	bic.w	r2, r2, #2
 8002fba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fbe:	3318      	adds	r3, #24
 8002fc0:	601a      	str	r2, [r3, #0]
}
 8002fc2:	bf00      	nop
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr

08002fcc <ETH_FlushTransmitFIFO>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fe0:	3318      	adds	r3, #24
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002fec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ff0:	3318      	adds	r3, #24
 8002ff2:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ffc:	3318      	adds	r3, #24
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003002:	2001      	movs	r0, #1
 8003004:	f000 f80c 	bl	8003020 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003012:	3318      	adds	r3, #24
 8003014:	601a      	str	r2, [r3, #0]
}
 8003016:	bf00      	nop
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
	...

08003020 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003028:	4b0a      	ldr	r3, [pc, #40]	; (8003054 <ETH_Delay+0x34>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a0a      	ldr	r2, [pc, #40]	; (8003058 <ETH_Delay+0x38>)
 800302e:	fba2 2303 	umull	r2, r3, r2, r3
 8003032:	0a5b      	lsrs	r3, r3, #9
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	fb02 f303 	mul.w	r3, r2, r3
 800303a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800303c:	bf00      	nop
  }
  while (Delay --);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	1e5a      	subs	r2, r3, #1
 8003042:	60fa      	str	r2, [r7, #12]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1f9      	bne.n	800303c <ETH_Delay+0x1c>
}
 8003048:	bf00      	nop
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	bc80      	pop	{r7}
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	2000000c 	.word	0x2000000c
 8003058:	10624dd3 	.word	0x10624dd3

0800305c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800305c:	b480      	push	{r7}
 800305e:	b08b      	sub	sp, #44	; 0x2c
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003066:	2300      	movs	r3, #0
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800306a:	2300      	movs	r3, #0
 800306c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800306e:	e127      	b.n	80032c0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003070:	2201      	movs	r2, #1
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	69fa      	ldr	r2, [r7, #28]
 8003080:	4013      	ands	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	429a      	cmp	r2, r3
 800308a:	f040 8116 	bne.w	80032ba <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2b12      	cmp	r3, #18
 8003094:	d034      	beq.n	8003100 <HAL_GPIO_Init+0xa4>
 8003096:	2b12      	cmp	r3, #18
 8003098:	d80d      	bhi.n	80030b6 <HAL_GPIO_Init+0x5a>
 800309a:	2b02      	cmp	r3, #2
 800309c:	d02b      	beq.n	80030f6 <HAL_GPIO_Init+0x9a>
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d804      	bhi.n	80030ac <HAL_GPIO_Init+0x50>
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d031      	beq.n	800310a <HAL_GPIO_Init+0xae>
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d01c      	beq.n	80030e4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80030aa:	e048      	b.n	800313e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80030ac:	2b03      	cmp	r3, #3
 80030ae:	d043      	beq.n	8003138 <HAL_GPIO_Init+0xdc>
 80030b0:	2b11      	cmp	r3, #17
 80030b2:	d01b      	beq.n	80030ec <HAL_GPIO_Init+0x90>
          break;
 80030b4:	e043      	b.n	800313e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80030b6:	4a89      	ldr	r2, [pc, #548]	; (80032dc <HAL_GPIO_Init+0x280>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d026      	beq.n	800310a <HAL_GPIO_Init+0xae>
 80030bc:	4a87      	ldr	r2, [pc, #540]	; (80032dc <HAL_GPIO_Init+0x280>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d806      	bhi.n	80030d0 <HAL_GPIO_Init+0x74>
 80030c2:	4a87      	ldr	r2, [pc, #540]	; (80032e0 <HAL_GPIO_Init+0x284>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d020      	beq.n	800310a <HAL_GPIO_Init+0xae>
 80030c8:	4a86      	ldr	r2, [pc, #536]	; (80032e4 <HAL_GPIO_Init+0x288>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d01d      	beq.n	800310a <HAL_GPIO_Init+0xae>
          break;
 80030ce:	e036      	b.n	800313e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80030d0:	4a85      	ldr	r2, [pc, #532]	; (80032e8 <HAL_GPIO_Init+0x28c>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d019      	beq.n	800310a <HAL_GPIO_Init+0xae>
 80030d6:	4a85      	ldr	r2, [pc, #532]	; (80032ec <HAL_GPIO_Init+0x290>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d016      	beq.n	800310a <HAL_GPIO_Init+0xae>
 80030dc:	4a84      	ldr	r2, [pc, #528]	; (80032f0 <HAL_GPIO_Init+0x294>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d013      	beq.n	800310a <HAL_GPIO_Init+0xae>
          break;
 80030e2:	e02c      	b.n	800313e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	623b      	str	r3, [r7, #32]
          break;
 80030ea:	e028      	b.n	800313e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	3304      	adds	r3, #4
 80030f2:	623b      	str	r3, [r7, #32]
          break;
 80030f4:	e023      	b.n	800313e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	3308      	adds	r3, #8
 80030fc:	623b      	str	r3, [r7, #32]
          break;
 80030fe:	e01e      	b.n	800313e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	330c      	adds	r3, #12
 8003106:	623b      	str	r3, [r7, #32]
          break;
 8003108:	e019      	b.n	800313e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d102      	bne.n	8003118 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003112:	2304      	movs	r3, #4
 8003114:	623b      	str	r3, [r7, #32]
          break;
 8003116:	e012      	b.n	800313e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d105      	bne.n	800312c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003120:	2308      	movs	r3, #8
 8003122:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	69fa      	ldr	r2, [r7, #28]
 8003128:	611a      	str	r2, [r3, #16]
          break;
 800312a:	e008      	b.n	800313e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800312c:	2308      	movs	r3, #8
 800312e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	69fa      	ldr	r2, [r7, #28]
 8003134:	615a      	str	r2, [r3, #20]
          break;
 8003136:	e002      	b.n	800313e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003138:	2300      	movs	r3, #0
 800313a:	623b      	str	r3, [r7, #32]
          break;
 800313c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	2bff      	cmp	r3, #255	; 0xff
 8003142:	d801      	bhi.n	8003148 <HAL_GPIO_Init+0xec>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	e001      	b.n	800314c <HAL_GPIO_Init+0xf0>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3304      	adds	r3, #4
 800314c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	2bff      	cmp	r3, #255	; 0xff
 8003152:	d802      	bhi.n	800315a <HAL_GPIO_Init+0xfe>
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	e002      	b.n	8003160 <HAL_GPIO_Init+0x104>
 800315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315c:	3b08      	subs	r3, #8
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	210f      	movs	r1, #15
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	fa01 f303 	lsl.w	r3, r1, r3
 800316e:	43db      	mvns	r3, r3
 8003170:	401a      	ands	r2, r3
 8003172:	6a39      	ldr	r1, [r7, #32]
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	fa01 f303 	lsl.w	r3, r1, r3
 800317a:	431a      	orrs	r2, r3
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 8096 	beq.w	80032ba <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800318e:	4b59      	ldr	r3, [pc, #356]	; (80032f4 <HAL_GPIO_Init+0x298>)
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	4a58      	ldr	r2, [pc, #352]	; (80032f4 <HAL_GPIO_Init+0x298>)
 8003194:	f043 0301 	orr.w	r3, r3, #1
 8003198:	6193      	str	r3, [r2, #24]
 800319a:	4b56      	ldr	r3, [pc, #344]	; (80032f4 <HAL_GPIO_Init+0x298>)
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	60bb      	str	r3, [r7, #8]
 80031a4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80031a6:	4a54      	ldr	r2, [pc, #336]	; (80032f8 <HAL_GPIO_Init+0x29c>)
 80031a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031aa:	089b      	lsrs	r3, r3, #2
 80031ac:	3302      	adds	r3, #2
 80031ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031b2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b6:	f003 0303 	and.w	r3, r3, #3
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	220f      	movs	r2, #15
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	43db      	mvns	r3, r3
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	4013      	ands	r3, r2
 80031c8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a4b      	ldr	r2, [pc, #300]	; (80032fc <HAL_GPIO_Init+0x2a0>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d013      	beq.n	80031fa <HAL_GPIO_Init+0x19e>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a4a      	ldr	r2, [pc, #296]	; (8003300 <HAL_GPIO_Init+0x2a4>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d00d      	beq.n	80031f6 <HAL_GPIO_Init+0x19a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a49      	ldr	r2, [pc, #292]	; (8003304 <HAL_GPIO_Init+0x2a8>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d007      	beq.n	80031f2 <HAL_GPIO_Init+0x196>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a48      	ldr	r2, [pc, #288]	; (8003308 <HAL_GPIO_Init+0x2ac>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d101      	bne.n	80031ee <HAL_GPIO_Init+0x192>
 80031ea:	2303      	movs	r3, #3
 80031ec:	e006      	b.n	80031fc <HAL_GPIO_Init+0x1a0>
 80031ee:	2304      	movs	r3, #4
 80031f0:	e004      	b.n	80031fc <HAL_GPIO_Init+0x1a0>
 80031f2:	2302      	movs	r3, #2
 80031f4:	e002      	b.n	80031fc <HAL_GPIO_Init+0x1a0>
 80031f6:	2301      	movs	r3, #1
 80031f8:	e000      	b.n	80031fc <HAL_GPIO_Init+0x1a0>
 80031fa:	2300      	movs	r3, #0
 80031fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031fe:	f002 0203 	and.w	r2, r2, #3
 8003202:	0092      	lsls	r2, r2, #2
 8003204:	4093      	lsls	r3, r2
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4313      	orrs	r3, r2
 800320a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800320c:	493a      	ldr	r1, [pc, #232]	; (80032f8 <HAL_GPIO_Init+0x29c>)
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	089b      	lsrs	r3, r3, #2
 8003212:	3302      	adds	r3, #2
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d006      	beq.n	8003234 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003226:	4b39      	ldr	r3, [pc, #228]	; (800330c <HAL_GPIO_Init+0x2b0>)
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	4938      	ldr	r1, [pc, #224]	; (800330c <HAL_GPIO_Init+0x2b0>)
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	4313      	orrs	r3, r2
 8003230:	600b      	str	r3, [r1, #0]
 8003232:	e006      	b.n	8003242 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003234:	4b35      	ldr	r3, [pc, #212]	; (800330c <HAL_GPIO_Init+0x2b0>)
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	43db      	mvns	r3, r3
 800323c:	4933      	ldr	r1, [pc, #204]	; (800330c <HAL_GPIO_Init+0x2b0>)
 800323e:	4013      	ands	r3, r2
 8003240:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d006      	beq.n	800325c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800324e:	4b2f      	ldr	r3, [pc, #188]	; (800330c <HAL_GPIO_Init+0x2b0>)
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	492e      	ldr	r1, [pc, #184]	; (800330c <HAL_GPIO_Init+0x2b0>)
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	4313      	orrs	r3, r2
 8003258:	604b      	str	r3, [r1, #4]
 800325a:	e006      	b.n	800326a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800325c:	4b2b      	ldr	r3, [pc, #172]	; (800330c <HAL_GPIO_Init+0x2b0>)
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	43db      	mvns	r3, r3
 8003264:	4929      	ldr	r1, [pc, #164]	; (800330c <HAL_GPIO_Init+0x2b0>)
 8003266:	4013      	ands	r3, r2
 8003268:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d006      	beq.n	8003284 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003276:	4b25      	ldr	r3, [pc, #148]	; (800330c <HAL_GPIO_Init+0x2b0>)
 8003278:	689a      	ldr	r2, [r3, #8]
 800327a:	4924      	ldr	r1, [pc, #144]	; (800330c <HAL_GPIO_Init+0x2b0>)
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	4313      	orrs	r3, r2
 8003280:	608b      	str	r3, [r1, #8]
 8003282:	e006      	b.n	8003292 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003284:	4b21      	ldr	r3, [pc, #132]	; (800330c <HAL_GPIO_Init+0x2b0>)
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	43db      	mvns	r3, r3
 800328c:	491f      	ldr	r1, [pc, #124]	; (800330c <HAL_GPIO_Init+0x2b0>)
 800328e:	4013      	ands	r3, r2
 8003290:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d006      	beq.n	80032ac <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800329e:	4b1b      	ldr	r3, [pc, #108]	; (800330c <HAL_GPIO_Init+0x2b0>)
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	491a      	ldr	r1, [pc, #104]	; (800330c <HAL_GPIO_Init+0x2b0>)
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	60cb      	str	r3, [r1, #12]
 80032aa:	e006      	b.n	80032ba <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032ac:	4b17      	ldr	r3, [pc, #92]	; (800330c <HAL_GPIO_Init+0x2b0>)
 80032ae:	68da      	ldr	r2, [r3, #12]
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	43db      	mvns	r3, r3
 80032b4:	4915      	ldr	r1, [pc, #84]	; (800330c <HAL_GPIO_Init+0x2b0>)
 80032b6:	4013      	ands	r3, r2
 80032b8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80032ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032bc:	3301      	adds	r3, #1
 80032be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	fa22 f303 	lsr.w	r3, r2, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f47f aed0 	bne.w	8003070 <HAL_GPIO_Init+0x14>
  }
}
 80032d0:	bf00      	nop
 80032d2:	372c      	adds	r7, #44	; 0x2c
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bc80      	pop	{r7}
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	10210000 	.word	0x10210000
 80032e0:	10110000 	.word	0x10110000
 80032e4:	10120000 	.word	0x10120000
 80032e8:	10310000 	.word	0x10310000
 80032ec:	10320000 	.word	0x10320000
 80032f0:	10220000 	.word	0x10220000
 80032f4:	40021000 	.word	0x40021000
 80032f8:	40010000 	.word	0x40010000
 80032fc:	40010800 	.word	0x40010800
 8003300:	40010c00 	.word	0x40010c00
 8003304:	40011000 	.word	0x40011000
 8003308:	40011400 	.word	0x40011400
 800330c:	40010400 	.word	0x40010400

08003310 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	460b      	mov	r3, r1
 800331a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	887b      	ldrh	r3, [r7, #2]
 8003322:	4013      	ands	r3, r2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d002      	beq.n	800332e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003328:	2301      	movs	r3, #1
 800332a:	73fb      	strb	r3, [r7, #15]
 800332c:	e001      	b.n	8003332 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800332e:	2300      	movs	r3, #0
 8003330:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003332:	7bfb      	ldrb	r3, [r7, #15]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	bc80      	pop	{r7}
 800333c:	4770      	bx	lr

0800333e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800333e:	b480      	push	{r7}
 8003340:	b083      	sub	sp, #12
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
 8003346:	460b      	mov	r3, r1
 8003348:	807b      	strh	r3, [r7, #2]
 800334a:	4613      	mov	r3, r2
 800334c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800334e:	787b      	ldrb	r3, [r7, #1]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d003      	beq.n	800335c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003354:	887a      	ldrh	r2, [r7, #2]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800335a:	e003      	b.n	8003364 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800335c:	887b      	ldrh	r3, [r7, #2]
 800335e:	041a      	lsls	r2, r3, #16
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	611a      	str	r2, [r3, #16]
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	bc80      	pop	{r7}
 800336c:	4770      	bx	lr

0800336e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800336e:	b480      	push	{r7}
 8003370:	b085      	sub	sp, #20
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
 8003376:	460b      	mov	r3, r1
 8003378:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003380:	887a      	ldrh	r2, [r7, #2]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	4013      	ands	r3, r2
 8003386:	041a      	lsls	r2, r3, #16
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	43d9      	mvns	r1, r3
 800338c:	887b      	ldrh	r3, [r7, #2]
 800338e:	400b      	ands	r3, r1
 8003390:	431a      	orrs	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	611a      	str	r2, [r3, #16]
}
 8003396:	bf00      	nop
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr

080033a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e304      	b.n	80039bc <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f000 8087 	beq.w	80034ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033c0:	4b92      	ldr	r3, [pc, #584]	; (800360c <HAL_RCC_OscConfig+0x26c>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f003 030c 	and.w	r3, r3, #12
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d00c      	beq.n	80033e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033cc:	4b8f      	ldr	r3, [pc, #572]	; (800360c <HAL_RCC_OscConfig+0x26c>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f003 030c 	and.w	r3, r3, #12
 80033d4:	2b08      	cmp	r3, #8
 80033d6:	d112      	bne.n	80033fe <HAL_RCC_OscConfig+0x5e>
 80033d8:	4b8c      	ldr	r3, [pc, #560]	; (800360c <HAL_RCC_OscConfig+0x26c>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033e4:	d10b      	bne.n	80033fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e6:	4b89      	ldr	r3, [pc, #548]	; (800360c <HAL_RCC_OscConfig+0x26c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d06c      	beq.n	80034cc <HAL_RCC_OscConfig+0x12c>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d168      	bne.n	80034cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e2de      	b.n	80039bc <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003406:	d106      	bne.n	8003416 <HAL_RCC_OscConfig+0x76>
 8003408:	4b80      	ldr	r3, [pc, #512]	; (800360c <HAL_RCC_OscConfig+0x26c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a7f      	ldr	r2, [pc, #508]	; (800360c <HAL_RCC_OscConfig+0x26c>)
 800340e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003412:	6013      	str	r3, [r2, #0]
 8003414:	e02e      	b.n	8003474 <HAL_RCC_OscConfig+0xd4>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10c      	bne.n	8003438 <HAL_RCC_OscConfig+0x98>
 800341e:	4b7b      	ldr	r3, [pc, #492]	; (800360c <HAL_RCC_OscConfig+0x26c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a7a      	ldr	r2, [pc, #488]	; (800360c <HAL_RCC_OscConfig+0x26c>)
 8003424:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	4b78      	ldr	r3, [pc, #480]	; (800360c <HAL_RCC_OscConfig+0x26c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a77      	ldr	r2, [pc, #476]	; (800360c <HAL_RCC_OscConfig+0x26c>)
 8003430:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	e01d      	b.n	8003474 <HAL_RCC_OscConfig+0xd4>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003440:	d10c      	bne.n	800345c <HAL_RCC_OscConfig+0xbc>
 8003442:	4b72      	ldr	r3, [pc, #456]	; (800360c <HAL_RCC_OscConfig+0x26c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a71      	ldr	r2, [pc, #452]	; (800360c <HAL_RCC_OscConfig+0x26c>)
 8003448:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	4b6f      	ldr	r3, [pc, #444]	; (800360c <HAL_RCC_OscConfig+0x26c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a6e      	ldr	r2, [pc, #440]	; (800360c <HAL_RCC_OscConfig+0x26c>)
 8003454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	e00b      	b.n	8003474 <HAL_RCC_OscConfig+0xd4>
 800345c:	4b6b      	ldr	r3, [pc, #428]	; (800360c <HAL_RCC_OscConfig+0x26c>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a6a      	ldr	r2, [pc, #424]	; (800360c <HAL_RCC_OscConfig+0x26c>)
 8003462:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003466:	6013      	str	r3, [r2, #0]
 8003468:	4b68      	ldr	r3, [pc, #416]	; (800360c <HAL_RCC_OscConfig+0x26c>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a67      	ldr	r2, [pc, #412]	; (800360c <HAL_RCC_OscConfig+0x26c>)
 800346e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003472:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d013      	beq.n	80034a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347c:	f7fd fec8 	bl	8001210 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003484:	f7fd fec4 	bl	8001210 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b64      	cmp	r3, #100	; 0x64
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e292      	b.n	80039bc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003496:	4b5d      	ldr	r3, [pc, #372]	; (800360c <HAL_RCC_OscConfig+0x26c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0f0      	beq.n	8003484 <HAL_RCC_OscConfig+0xe4>
 80034a2:	e014      	b.n	80034ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a4:	f7fd feb4 	bl	8001210 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034ac:	f7fd feb0 	bl	8001210 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b64      	cmp	r3, #100	; 0x64
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e27e      	b.n	80039bc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034be:	4b53      	ldr	r3, [pc, #332]	; (800360c <HAL_RCC_OscConfig+0x26c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCC_OscConfig+0x10c>
 80034ca:	e000      	b.n	80034ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d063      	beq.n	80035a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034da:	4b4c      	ldr	r3, [pc, #304]	; (800360c <HAL_RCC_OscConfig+0x26c>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f003 030c 	and.w	r3, r3, #12
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00b      	beq.n	80034fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034e6:	4b49      	ldr	r3, [pc, #292]	; (800360c <HAL_RCC_OscConfig+0x26c>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f003 030c 	and.w	r3, r3, #12
 80034ee:	2b08      	cmp	r3, #8
 80034f0:	d11c      	bne.n	800352c <HAL_RCC_OscConfig+0x18c>
 80034f2:	4b46      	ldr	r3, [pc, #280]	; (800360c <HAL_RCC_OscConfig+0x26c>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d116      	bne.n	800352c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034fe:	4b43      	ldr	r3, [pc, #268]	; (800360c <HAL_RCC_OscConfig+0x26c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d005      	beq.n	8003516 <HAL_RCC_OscConfig+0x176>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d001      	beq.n	8003516 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e252      	b.n	80039bc <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003516:	4b3d      	ldr	r3, [pc, #244]	; (800360c <HAL_RCC_OscConfig+0x26c>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	4939      	ldr	r1, [pc, #228]	; (800360c <HAL_RCC_OscConfig+0x26c>)
 8003526:	4313      	orrs	r3, r2
 8003528:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800352a:	e03a      	b.n	80035a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d020      	beq.n	8003576 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003534:	4b36      	ldr	r3, [pc, #216]	; (8003610 <HAL_RCC_OscConfig+0x270>)
 8003536:	2201      	movs	r2, #1
 8003538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353a:	f7fd fe69 	bl	8001210 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003542:	f7fd fe65 	bl	8001210 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e233      	b.n	80039bc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003554:	4b2d      	ldr	r3, [pc, #180]	; (800360c <HAL_RCC_OscConfig+0x26c>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f0      	beq.n	8003542 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003560:	4b2a      	ldr	r3, [pc, #168]	; (800360c <HAL_RCC_OscConfig+0x26c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	4927      	ldr	r1, [pc, #156]	; (800360c <HAL_RCC_OscConfig+0x26c>)
 8003570:	4313      	orrs	r3, r2
 8003572:	600b      	str	r3, [r1, #0]
 8003574:	e015      	b.n	80035a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003576:	4b26      	ldr	r3, [pc, #152]	; (8003610 <HAL_RCC_OscConfig+0x270>)
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357c:	f7fd fe48 	bl	8001210 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003584:	f7fd fe44 	bl	8001210 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e212      	b.n	80039bc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003596:	4b1d      	ldr	r3, [pc, #116]	; (800360c <HAL_RCC_OscConfig+0x26c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f0      	bne.n	8003584 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d03a      	beq.n	8003624 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d019      	beq.n	80035ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035b6:	4b17      	ldr	r3, [pc, #92]	; (8003614 <HAL_RCC_OscConfig+0x274>)
 80035b8:	2201      	movs	r2, #1
 80035ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035bc:	f7fd fe28 	bl	8001210 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035c4:	f7fd fe24 	bl	8001210 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e1f2      	b.n	80039bc <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035d6:	4b0d      	ldr	r3, [pc, #52]	; (800360c <HAL_RCC_OscConfig+0x26c>)
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0f0      	beq.n	80035c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80035e2:	2001      	movs	r0, #1
 80035e4:	f000 fc12 	bl	8003e0c <RCC_Delay>
 80035e8:	e01c      	b.n	8003624 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035ea:	4b0a      	ldr	r3, [pc, #40]	; (8003614 <HAL_RCC_OscConfig+0x274>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f0:	f7fd fe0e 	bl	8001210 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f6:	e00f      	b.n	8003618 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035f8:	f7fd fe0a 	bl	8001210 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d908      	bls.n	8003618 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e1d8      	b.n	80039bc <HAL_RCC_OscConfig+0x61c>
 800360a:	bf00      	nop
 800360c:	40021000 	.word	0x40021000
 8003610:	42420000 	.word	0x42420000
 8003614:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003618:	4b9b      	ldr	r3, [pc, #620]	; (8003888 <HAL_RCC_OscConfig+0x4e8>)
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1e9      	bne.n	80035f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0304 	and.w	r3, r3, #4
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 80a6 	beq.w	800377e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003632:	2300      	movs	r3, #0
 8003634:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003636:	4b94      	ldr	r3, [pc, #592]	; (8003888 <HAL_RCC_OscConfig+0x4e8>)
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10d      	bne.n	800365e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003642:	4b91      	ldr	r3, [pc, #580]	; (8003888 <HAL_RCC_OscConfig+0x4e8>)
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	4a90      	ldr	r2, [pc, #576]	; (8003888 <HAL_RCC_OscConfig+0x4e8>)
 8003648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800364c:	61d3      	str	r3, [r2, #28]
 800364e:	4b8e      	ldr	r3, [pc, #568]	; (8003888 <HAL_RCC_OscConfig+0x4e8>)
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003656:	60bb      	str	r3, [r7, #8]
 8003658:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800365a:	2301      	movs	r3, #1
 800365c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365e:	4b8b      	ldr	r3, [pc, #556]	; (800388c <HAL_RCC_OscConfig+0x4ec>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003666:	2b00      	cmp	r3, #0
 8003668:	d118      	bne.n	800369c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800366a:	4b88      	ldr	r3, [pc, #544]	; (800388c <HAL_RCC_OscConfig+0x4ec>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a87      	ldr	r2, [pc, #540]	; (800388c <HAL_RCC_OscConfig+0x4ec>)
 8003670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003674:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003676:	f7fd fdcb 	bl	8001210 <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800367c:	e008      	b.n	8003690 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800367e:	f7fd fdc7 	bl	8001210 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b64      	cmp	r3, #100	; 0x64
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e195      	b.n	80039bc <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003690:	4b7e      	ldr	r3, [pc, #504]	; (800388c <HAL_RCC_OscConfig+0x4ec>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003698:	2b00      	cmp	r3, #0
 800369a:	d0f0      	beq.n	800367e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d106      	bne.n	80036b2 <HAL_RCC_OscConfig+0x312>
 80036a4:	4b78      	ldr	r3, [pc, #480]	; (8003888 <HAL_RCC_OscConfig+0x4e8>)
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	4a77      	ldr	r2, [pc, #476]	; (8003888 <HAL_RCC_OscConfig+0x4e8>)
 80036aa:	f043 0301 	orr.w	r3, r3, #1
 80036ae:	6213      	str	r3, [r2, #32]
 80036b0:	e02d      	b.n	800370e <HAL_RCC_OscConfig+0x36e>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10c      	bne.n	80036d4 <HAL_RCC_OscConfig+0x334>
 80036ba:	4b73      	ldr	r3, [pc, #460]	; (8003888 <HAL_RCC_OscConfig+0x4e8>)
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	4a72      	ldr	r2, [pc, #456]	; (8003888 <HAL_RCC_OscConfig+0x4e8>)
 80036c0:	f023 0301 	bic.w	r3, r3, #1
 80036c4:	6213      	str	r3, [r2, #32]
 80036c6:	4b70      	ldr	r3, [pc, #448]	; (8003888 <HAL_RCC_OscConfig+0x4e8>)
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	4a6f      	ldr	r2, [pc, #444]	; (8003888 <HAL_RCC_OscConfig+0x4e8>)
 80036cc:	f023 0304 	bic.w	r3, r3, #4
 80036d0:	6213      	str	r3, [r2, #32]
 80036d2:	e01c      	b.n	800370e <HAL_RCC_OscConfig+0x36e>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	2b05      	cmp	r3, #5
 80036da:	d10c      	bne.n	80036f6 <HAL_RCC_OscConfig+0x356>
 80036dc:	4b6a      	ldr	r3, [pc, #424]	; (8003888 <HAL_RCC_OscConfig+0x4e8>)
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	4a69      	ldr	r2, [pc, #420]	; (8003888 <HAL_RCC_OscConfig+0x4e8>)
 80036e2:	f043 0304 	orr.w	r3, r3, #4
 80036e6:	6213      	str	r3, [r2, #32]
 80036e8:	4b67      	ldr	r3, [pc, #412]	; (8003888 <HAL_RCC_OscConfig+0x4e8>)
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	4a66      	ldr	r2, [pc, #408]	; (8003888 <HAL_RCC_OscConfig+0x4e8>)
 80036ee:	f043 0301 	orr.w	r3, r3, #1
 80036f2:	6213      	str	r3, [r2, #32]
 80036f4:	e00b      	b.n	800370e <HAL_RCC_OscConfig+0x36e>
 80036f6:	4b64      	ldr	r3, [pc, #400]	; (8003888 <HAL_RCC_OscConfig+0x4e8>)
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	4a63      	ldr	r2, [pc, #396]	; (8003888 <HAL_RCC_OscConfig+0x4e8>)
 80036fc:	f023 0301 	bic.w	r3, r3, #1
 8003700:	6213      	str	r3, [r2, #32]
 8003702:	4b61      	ldr	r3, [pc, #388]	; (8003888 <HAL_RCC_OscConfig+0x4e8>)
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	4a60      	ldr	r2, [pc, #384]	; (8003888 <HAL_RCC_OscConfig+0x4e8>)
 8003708:	f023 0304 	bic.w	r3, r3, #4
 800370c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d015      	beq.n	8003742 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003716:	f7fd fd7b 	bl	8001210 <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800371c:	e00a      	b.n	8003734 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800371e:	f7fd fd77 	bl	8001210 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	f241 3288 	movw	r2, #5000	; 0x1388
 800372c:	4293      	cmp	r3, r2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e143      	b.n	80039bc <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003734:	4b54      	ldr	r3, [pc, #336]	; (8003888 <HAL_RCC_OscConfig+0x4e8>)
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0ee      	beq.n	800371e <HAL_RCC_OscConfig+0x37e>
 8003740:	e014      	b.n	800376c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003742:	f7fd fd65 	bl	8001210 <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003748:	e00a      	b.n	8003760 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800374a:	f7fd fd61 	bl	8001210 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	f241 3288 	movw	r2, #5000	; 0x1388
 8003758:	4293      	cmp	r3, r2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e12d      	b.n	80039bc <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003760:	4b49      	ldr	r3, [pc, #292]	; (8003888 <HAL_RCC_OscConfig+0x4e8>)
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1ee      	bne.n	800374a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800376c:	7dfb      	ldrb	r3, [r7, #23]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d105      	bne.n	800377e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003772:	4b45      	ldr	r3, [pc, #276]	; (8003888 <HAL_RCC_OscConfig+0x4e8>)
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	4a44      	ldr	r2, [pc, #272]	; (8003888 <HAL_RCC_OscConfig+0x4e8>)
 8003778:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800377c:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 808c 	beq.w	80038a0 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003788:	4b3f      	ldr	r3, [pc, #252]	; (8003888 <HAL_RCC_OscConfig+0x4e8>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003794:	d10e      	bne.n	80037b4 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003796:	4b3c      	ldr	r3, [pc, #240]	; (8003888 <HAL_RCC_OscConfig+0x4e8>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d108      	bne.n	80037b4 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80037a2:	4b39      	ldr	r3, [pc, #228]	; (8003888 <HAL_RCC_OscConfig+0x4e8>)
 80037a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80037aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ae:	d101      	bne.n	80037b4 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e103      	b.n	80039bc <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d14e      	bne.n	800385a <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80037bc:	4b32      	ldr	r3, [pc, #200]	; (8003888 <HAL_RCC_OscConfig+0x4e8>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d009      	beq.n	80037dc <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80037c8:	4b2f      	ldr	r3, [pc, #188]	; (8003888 <HAL_RCC_OscConfig+0x4e8>)
 80037ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d001      	beq.n	80037dc <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e0ef      	b.n	80039bc <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80037dc:	4b2c      	ldr	r3, [pc, #176]	; (8003890 <HAL_RCC_OscConfig+0x4f0>)
 80037de:	2200      	movs	r2, #0
 80037e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e2:	f7fd fd15 	bl	8001210 <HAL_GetTick>
 80037e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80037e8:	e008      	b.n	80037fc <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80037ea:	f7fd fd11 	bl	8001210 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b64      	cmp	r3, #100	; 0x64
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e0df      	b.n	80039bc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80037fc:	4b22      	ldr	r3, [pc, #136]	; (8003888 <HAL_RCC_OscConfig+0x4e8>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1f0      	bne.n	80037ea <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8003808:	4b1f      	ldr	r3, [pc, #124]	; (8003888 <HAL_RCC_OscConfig+0x4e8>)
 800380a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003814:	491c      	ldr	r1, [pc, #112]	; (8003888 <HAL_RCC_OscConfig+0x4e8>)
 8003816:	4313      	orrs	r3, r2
 8003818:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 800381a:	4b1b      	ldr	r3, [pc, #108]	; (8003888 <HAL_RCC_OscConfig+0x4e8>)
 800381c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	4918      	ldr	r1, [pc, #96]	; (8003888 <HAL_RCC_OscConfig+0x4e8>)
 8003828:	4313      	orrs	r3, r2
 800382a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 800382c:	4b18      	ldr	r3, [pc, #96]	; (8003890 <HAL_RCC_OscConfig+0x4f0>)
 800382e:	2201      	movs	r2, #1
 8003830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003832:	f7fd fced 	bl	8001210 <HAL_GetTick>
 8003836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003838:	e008      	b.n	800384c <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800383a:	f7fd fce9 	bl	8001210 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b64      	cmp	r3, #100	; 0x64
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e0b7      	b.n	80039bc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 800384c:	4b0e      	ldr	r3, [pc, #56]	; (8003888 <HAL_RCC_OscConfig+0x4e8>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0f0      	beq.n	800383a <HAL_RCC_OscConfig+0x49a>
 8003858:	e022      	b.n	80038a0 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 800385a:	4b0b      	ldr	r3, [pc, #44]	; (8003888 <HAL_RCC_OscConfig+0x4e8>)
 800385c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385e:	4a0a      	ldr	r2, [pc, #40]	; (8003888 <HAL_RCC_OscConfig+0x4e8>)
 8003860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003864:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003866:	4b0a      	ldr	r3, [pc, #40]	; (8003890 <HAL_RCC_OscConfig+0x4f0>)
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386c:	f7fd fcd0 	bl	8001210 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003872:	e00f      	b.n	8003894 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003874:	f7fd fccc 	bl	8001210 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b64      	cmp	r3, #100	; 0x64
 8003880:	d908      	bls.n	8003894 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e09a      	b.n	80039bc <HAL_RCC_OscConfig+0x61c>
 8003886:	bf00      	nop
 8003888:	40021000 	.word	0x40021000
 800388c:	40007000 	.word	0x40007000
 8003890:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003894:	4b4b      	ldr	r3, [pc, #300]	; (80039c4 <HAL_RCC_OscConfig+0x624>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1e9      	bne.n	8003874 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 8088 	beq.w	80039ba <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038aa:	4b46      	ldr	r3, [pc, #280]	; (80039c4 <HAL_RCC_OscConfig+0x624>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f003 030c 	and.w	r3, r3, #12
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	d068      	beq.n	8003988 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d14d      	bne.n	800395a <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038be:	4b42      	ldr	r3, [pc, #264]	; (80039c8 <HAL_RCC_OscConfig+0x628>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c4:	f7fd fca4 	bl	8001210 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038cc:	f7fd fca0 	bl	8001210 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e06e      	b.n	80039bc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038de:	4b39      	ldr	r3, [pc, #228]	; (80039c4 <HAL_RCC_OscConfig+0x624>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1f0      	bne.n	80038cc <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f2:	d10f      	bne.n	8003914 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80038f4:	4b33      	ldr	r3, [pc, #204]	; (80039c4 <HAL_RCC_OscConfig+0x624>)
 80038f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	4931      	ldr	r1, [pc, #196]	; (80039c4 <HAL_RCC_OscConfig+0x624>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003902:	4b30      	ldr	r3, [pc, #192]	; (80039c4 <HAL_RCC_OscConfig+0x624>)
 8003904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003906:	f023 020f 	bic.w	r2, r3, #15
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	492d      	ldr	r1, [pc, #180]	; (80039c4 <HAL_RCC_OscConfig+0x624>)
 8003910:	4313      	orrs	r3, r2
 8003912:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003914:	4b2b      	ldr	r3, [pc, #172]	; (80039c4 <HAL_RCC_OscConfig+0x624>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003924:	430b      	orrs	r3, r1
 8003926:	4927      	ldr	r1, [pc, #156]	; (80039c4 <HAL_RCC_OscConfig+0x624>)
 8003928:	4313      	orrs	r3, r2
 800392a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800392c:	4b26      	ldr	r3, [pc, #152]	; (80039c8 <HAL_RCC_OscConfig+0x628>)
 800392e:	2201      	movs	r2, #1
 8003930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003932:	f7fd fc6d 	bl	8001210 <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800393a:	f7fd fc69 	bl	8001210 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e037      	b.n	80039bc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800394c:	4b1d      	ldr	r3, [pc, #116]	; (80039c4 <HAL_RCC_OscConfig+0x624>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0f0      	beq.n	800393a <HAL_RCC_OscConfig+0x59a>
 8003958:	e02f      	b.n	80039ba <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800395a:	4b1b      	ldr	r3, [pc, #108]	; (80039c8 <HAL_RCC_OscConfig+0x628>)
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003960:	f7fd fc56 	bl	8001210 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003968:	f7fd fc52 	bl	8001210 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e020      	b.n	80039bc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800397a:	4b12      	ldr	r3, [pc, #72]	; (80039c4 <HAL_RCC_OscConfig+0x624>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1f0      	bne.n	8003968 <HAL_RCC_OscConfig+0x5c8>
 8003986:	e018      	b.n	80039ba <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d101      	bne.n	8003994 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e013      	b.n	80039bc <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003994:	4b0b      	ldr	r3, [pc, #44]	; (80039c4 <HAL_RCC_OscConfig+0x624>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d106      	bne.n	80039b6 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d001      	beq.n	80039ba <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e000      	b.n	80039bc <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3718      	adds	r7, #24
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40021000 	.word	0x40021000
 80039c8:	42420060 	.word	0x42420060

080039cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e0d0      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039e0:	4b6a      	ldr	r3, [pc, #424]	; (8003b8c <HAL_RCC_ClockConfig+0x1c0>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d910      	bls.n	8003a10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ee:	4b67      	ldr	r3, [pc, #412]	; (8003b8c <HAL_RCC_ClockConfig+0x1c0>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f023 0207 	bic.w	r2, r3, #7
 80039f6:	4965      	ldr	r1, [pc, #404]	; (8003b8c <HAL_RCC_ClockConfig+0x1c0>)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fe:	4b63      	ldr	r3, [pc, #396]	; (8003b8c <HAL_RCC_ClockConfig+0x1c0>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0307 	and.w	r3, r3, #7
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d001      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e0b8      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d020      	beq.n	8003a5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d005      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a28:	4b59      	ldr	r3, [pc, #356]	; (8003b90 <HAL_RCC_ClockConfig+0x1c4>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	4a58      	ldr	r2, [pc, #352]	; (8003b90 <HAL_RCC_ClockConfig+0x1c4>)
 8003a2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0308 	and.w	r3, r3, #8
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d005      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a40:	4b53      	ldr	r3, [pc, #332]	; (8003b90 <HAL_RCC_ClockConfig+0x1c4>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	4a52      	ldr	r2, [pc, #328]	; (8003b90 <HAL_RCC_ClockConfig+0x1c4>)
 8003a46:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a4c:	4b50      	ldr	r3, [pc, #320]	; (8003b90 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	494d      	ldr	r1, [pc, #308]	; (8003b90 <HAL_RCC_ClockConfig+0x1c4>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d040      	beq.n	8003aec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d107      	bne.n	8003a82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a72:	4b47      	ldr	r3, [pc, #284]	; (8003b90 <HAL_RCC_ClockConfig+0x1c4>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d115      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e07f      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d107      	bne.n	8003a9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a8a:	4b41      	ldr	r3, [pc, #260]	; (8003b90 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d109      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e073      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a9a:	4b3d      	ldr	r3, [pc, #244]	; (8003b90 <HAL_RCC_ClockConfig+0x1c4>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e06b      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aaa:	4b39      	ldr	r3, [pc, #228]	; (8003b90 <HAL_RCC_ClockConfig+0x1c4>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f023 0203 	bic.w	r2, r3, #3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	4936      	ldr	r1, [pc, #216]	; (8003b90 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003abc:	f7fd fba8 	bl	8001210 <HAL_GetTick>
 8003ac0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac2:	e00a      	b.n	8003ada <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ac4:	f7fd fba4 	bl	8001210 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e053      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ada:	4b2d      	ldr	r3, [pc, #180]	; (8003b90 <HAL_RCC_ClockConfig+0x1c4>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f003 020c 	and.w	r2, r3, #12
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d1eb      	bne.n	8003ac4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003aec:	4b27      	ldr	r3, [pc, #156]	; (8003b8c <HAL_RCC_ClockConfig+0x1c0>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d210      	bcs.n	8003b1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003afa:	4b24      	ldr	r3, [pc, #144]	; (8003b8c <HAL_RCC_ClockConfig+0x1c0>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f023 0207 	bic.w	r2, r3, #7
 8003b02:	4922      	ldr	r1, [pc, #136]	; (8003b8c <HAL_RCC_ClockConfig+0x1c0>)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b0a:	4b20      	ldr	r3, [pc, #128]	; (8003b8c <HAL_RCC_ClockConfig+0x1c0>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d001      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e032      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d008      	beq.n	8003b3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b28:	4b19      	ldr	r3, [pc, #100]	; (8003b90 <HAL_RCC_ClockConfig+0x1c4>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	4916      	ldr	r1, [pc, #88]	; (8003b90 <HAL_RCC_ClockConfig+0x1c4>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d009      	beq.n	8003b5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b46:	4b12      	ldr	r3, [pc, #72]	; (8003b90 <HAL_RCC_ClockConfig+0x1c4>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	490e      	ldr	r1, [pc, #56]	; (8003b90 <HAL_RCC_ClockConfig+0x1c4>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b5a:	f000 f82d 	bl	8003bb8 <HAL_RCC_GetSysClockFreq>
 8003b5e:	4601      	mov	r1, r0
 8003b60:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <HAL_RCC_ClockConfig+0x1c4>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	091b      	lsrs	r3, r3, #4
 8003b66:	f003 030f 	and.w	r3, r3, #15
 8003b6a:	4a0a      	ldr	r2, [pc, #40]	; (8003b94 <HAL_RCC_ClockConfig+0x1c8>)
 8003b6c:	5cd3      	ldrb	r3, [r2, r3]
 8003b6e:	fa21 f303 	lsr.w	r3, r1, r3
 8003b72:	4a09      	ldr	r2, [pc, #36]	; (8003b98 <HAL_RCC_ClockConfig+0x1cc>)
 8003b74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b76:	4b09      	ldr	r3, [pc, #36]	; (8003b9c <HAL_RCC_ClockConfig+0x1d0>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fd fb06 	bl	800118c <HAL_InitTick>

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40022000 	.word	0x40022000
 8003b90:	40021000 	.word	0x40021000
 8003b94:	08016488 	.word	0x08016488
 8003b98:	2000000c 	.word	0x2000000c
 8003b9c:	20000000 	.word	0x20000000

08003ba0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003ba4:	4b03      	ldr	r3, [pc, #12]	; (8003bb4 <HAL_RCC_EnableCSS+0x14>)
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	601a      	str	r2, [r3, #0]
}
 8003baa:	bf00      	nop
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bc80      	pop	{r7}
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	4242004c 	.word	0x4242004c

08003bb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003bbc:	b091      	sub	sp, #68	; 0x44
 8003bbe:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8003bc0:	4b6a      	ldr	r3, [pc, #424]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x1b4>)
 8003bc2:	f107 0414 	add.w	r4, r7, #20
 8003bc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bc8:	c407      	stmia	r4!, {r0, r1, r2}
 8003bca:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8003bcc:	4b68      	ldr	r3, [pc, #416]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bce:	1d3c      	adds	r4, r7, #4
 8003bd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	637b      	str	r3, [r7, #52]	; 0x34
 8003bda:	2300      	movs	r3, #0
 8003bdc:	633b      	str	r3, [r7, #48]	; 0x30
 8003bde:	2300      	movs	r3, #0
 8003be0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003be2:	2300      	movs	r3, #0
 8003be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8003bea:	2300      	movs	r3, #0
 8003bec:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bee:	2300      	movs	r3, #0
 8003bf0:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003bf2:	4b60      	ldr	r3, [pc, #384]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bfa:	f003 030c 	and.w	r3, r3, #12
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d002      	beq.n	8003c08 <HAL_RCC_GetSysClockFreq+0x50>
 8003c02:	2b08      	cmp	r3, #8
 8003c04:	d003      	beq.n	8003c0e <HAL_RCC_GetSysClockFreq+0x56>
 8003c06:	e0a7      	b.n	8003d58 <HAL_RCC_GetSysClockFreq+0x1a0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c08:	4b5b      	ldr	r3, [pc, #364]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003c0a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c0c:	e0a7      	b.n	8003d5e <HAL_RCC_GetSysClockFreq+0x1a6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c10:	0c9b      	lsrs	r3, r3, #18
 8003c12:	f003 030f 	and.w	r3, r3, #15
 8003c16:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8003c20:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 808d 	beq.w	8003d48 <HAL_RCC_GetSysClockFreq+0x190>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8003c2e:	4b51      	ldr	r3, [pc, #324]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c32:	f003 030f 	and.w	r3, r3, #15
 8003c36:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8003c40:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8003c42:	4b4c      	ldr	r3, [pc, #304]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d06a      	beq.n	8003d24 <HAL_RCC_GetSysClockFreq+0x16c>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8003c4e:	4b49      	ldr	r3, [pc, #292]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c52:	091b      	lsrs	r3, r3, #4
 8003c54:	f003 030f 	and.w	r3, r3, #15
 8003c58:	3301      	adds	r3, #1
 8003c5a:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8003c5c:	4b45      	ldr	r3, [pc, #276]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c60:	0a1b      	lsrs	r3, r3, #8
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	3302      	adds	r3, #2
 8003c68:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	f04f 0200 	mov.w	r2, #0
 8003c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c74:	f04f 0400 	mov.w	r4, #0
 8003c78:	fb03 f502 	mul.w	r5, r3, r2
 8003c7c:	fb01 f004 	mul.w	r0, r1, r4
 8003c80:	4428      	add	r0, r5
 8003c82:	fba1 5603 	umull	r5, r6, r1, r3
 8003c86:	1983      	adds	r3, r0, r6
 8003c88:	461e      	mov	r6, r3
 8003c8a:	4629      	mov	r1, r5
 8003c8c:	4632      	mov	r2, r6
 8003c8e:	f04f 0300 	mov.w	r3, #0
 8003c92:	f04f 0400 	mov.w	r4, #0
 8003c96:	0154      	lsls	r4, r2, #5
 8003c98:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003c9c:	014b      	lsls	r3, r1, #5
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4622      	mov	r2, r4
 8003ca2:	1b49      	subs	r1, r1, r5
 8003ca4:	eb62 0206 	sbc.w	r2, r2, r6
 8003ca8:	f04f 0300 	mov.w	r3, #0
 8003cac:	f04f 0400 	mov.w	r4, #0
 8003cb0:	0194      	lsls	r4, r2, #6
 8003cb2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003cb6:	018b      	lsls	r3, r1, #6
 8003cb8:	1a5b      	subs	r3, r3, r1
 8003cba:	eb64 0402 	sbc.w	r4, r4, r2
 8003cbe:	f04f 0100 	mov.w	r1, #0
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	00e2      	lsls	r2, r4, #3
 8003cc8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003ccc:	00d9      	lsls	r1, r3, #3
 8003cce:	460b      	mov	r3, r1
 8003cd0:	4614      	mov	r4, r2
 8003cd2:	195b      	adds	r3, r3, r5
 8003cd4:	eb44 0406 	adc.w	r4, r4, r6
 8003cd8:	f04f 0100 	mov.w	r1, #0
 8003cdc:	f04f 0200 	mov.w	r2, #0
 8003ce0:	0262      	lsls	r2, r4, #9
 8003ce2:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003ce6:	0259      	lsls	r1, r3, #9
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4614      	mov	r4, r2
 8003cec:	4698      	mov	r8, r3
 8003cee:	46a1      	mov	r9, r4
 8003cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfa:	f04f 0400 	mov.w	r4, #0
 8003cfe:	fb03 f502 	mul.w	r5, r3, r2
 8003d02:	fb01 f004 	mul.w	r0, r1, r4
 8003d06:	4428      	add	r0, r5
 8003d08:	fba1 3403 	umull	r3, r4, r1, r3
 8003d0c:	1902      	adds	r2, r0, r4
 8003d0e:	4614      	mov	r4, r2
 8003d10:	461a      	mov	r2, r3
 8003d12:	4623      	mov	r3, r4
 8003d14:	4640      	mov	r0, r8
 8003d16:	4649      	mov	r1, r9
 8003d18:	f7fd f8a0 	bl	8000e5c <__aeabi_uldivmod>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	460c      	mov	r4, r1
 8003d20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d22:	e007      	b.n	8003d34 <HAL_RCC_GetSysClockFreq+0x17c>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8003d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d26:	4a14      	ldr	r2, [pc, #80]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003d28:	fb02 f203 	mul.w	r2, r2, r3
 8003d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8003d34:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003d38:	461a      	mov	r2, r3
 8003d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d108      	bne.n	8003d52 <HAL_RCC_GetSysClockFreq+0x19a>
        {
          pllclk = pllclk / 2;
 8003d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d42:	085b      	lsrs	r3, r3, #1
 8003d44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d46:	e004      	b.n	8003d52 <HAL_RCC_GetSysClockFreq+0x19a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d4a:	4a0c      	ldr	r2, [pc, #48]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x1c4>)
 8003d4c:	fb02 f303 	mul.w	r3, r2, r3
 8003d50:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8003d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d54:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d56:	e002      	b.n	8003d5e <HAL_RCC_GetSysClockFreq+0x1a6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d58:	4b07      	ldr	r3, [pc, #28]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003d5a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3744      	adds	r7, #68	; 0x44
 8003d64:	46bd      	mov	sp, r7
 8003d66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d6a:	bf00      	nop
 8003d6c:	08014430 	.word	0x08014430
 8003d70:	08014440 	.word	0x08014440
 8003d74:	40021000 	.word	0x40021000
 8003d78:	007a1200 	.word	0x007a1200
 8003d7c:	003d0900 	.word	0x003d0900

08003d80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d84:	4b02      	ldr	r3, [pc, #8]	; (8003d90 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d86:	681b      	ldr	r3, [r3, #0]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bc80      	pop	{r7}
 8003d8e:	4770      	bx	lr
 8003d90:	2000000c 	.word	0x2000000c

08003d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d98:	f7ff fff2 	bl	8003d80 <HAL_RCC_GetHCLKFreq>
 8003d9c:	4601      	mov	r1, r0
 8003d9e:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	0a1b      	lsrs	r3, r3, #8
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	4a03      	ldr	r2, [pc, #12]	; (8003db8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003daa:	5cd3      	ldrb	r3, [r2, r3]
 8003dac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40021000 	.word	0x40021000
 8003db8:	08016498 	.word	0x08016498

08003dbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003dc0:	f7ff ffde 	bl	8003d80 <HAL_RCC_GetHCLKFreq>
 8003dc4:	4601      	mov	r1, r0
 8003dc6:	4b05      	ldr	r3, [pc, #20]	; (8003ddc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	0adb      	lsrs	r3, r3, #11
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	4a03      	ldr	r2, [pc, #12]	; (8003de0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dd2:	5cd3      	ldrb	r3, [r2, r3]
 8003dd4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	08016498 	.word	0x08016498

08003de4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003de8:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <HAL_RCC_NMI_IRQHandler+0x20>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df0:	2b80      	cmp	r3, #128	; 0x80
 8003df2:	d104      	bne.n	8003dfe <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003df4:	f000 f828 	bl	8003e48 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003df8:	4b03      	ldr	r3, [pc, #12]	; (8003e08 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003dfa:	2280      	movs	r2, #128	; 0x80
 8003dfc:	701a      	strb	r2, [r3, #0]
  }
}
 8003dfe:	bf00      	nop
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	40021000 	.word	0x40021000
 8003e08:	4002100a 	.word	0x4002100a

08003e0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e14:	4b0a      	ldr	r3, [pc, #40]	; (8003e40 <RCC_Delay+0x34>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a0a      	ldr	r2, [pc, #40]	; (8003e44 <RCC_Delay+0x38>)
 8003e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1e:	0a5b      	lsrs	r3, r3, #9
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	fb02 f303 	mul.w	r3, r2, r3
 8003e26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e28:	bf00      	nop
  }
  while (Delay --);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	1e5a      	subs	r2, r3, #1
 8003e2e:	60fa      	str	r2, [r7, #12]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1f9      	bne.n	8003e28 <RCC_Delay+0x1c>
}
 8003e34:	bf00      	nop
 8003e36:	3714      	adds	r7, #20
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bc80      	pop	{r7}
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	2000000c 	.word	0x2000000c
 8003e44:	10624dd3 	.word	0x10624dd3

08003e48 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8003e4c:	bf00      	nop
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bc80      	pop	{r7}
 8003e52:	4770      	bx	lr

08003e54 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b088      	sub	sp, #32
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	617b      	str	r3, [r7, #20]
 8003e60:	2300      	movs	r3, #0
 8003e62:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8003e64:	2300      	movs	r3, #0
 8003e66:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d07d      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003e74:	2300      	movs	r3, #0
 8003e76:	76fb      	strb	r3, [r7, #27]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e78:	4b8b      	ldr	r3, [pc, #556]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10d      	bne.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e84:	4b88      	ldr	r3, [pc, #544]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003e86:	69db      	ldr	r3, [r3, #28]
 8003e88:	4a87      	ldr	r2, [pc, #540]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e8e:	61d3      	str	r3, [r2, #28]
 8003e90:	4b85      	ldr	r3, [pc, #532]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003e92:	69db      	ldr	r3, [r3, #28]
 8003e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e98:	60fb      	str	r3, [r7, #12]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea0:	4b82      	ldr	r3, [pc, #520]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d118      	bne.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eac:	4b7f      	ldr	r3, [pc, #508]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a7e      	ldr	r2, [pc, #504]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eb6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eb8:	f7fd f9aa 	bl	8001210 <HAL_GetTick>
 8003ebc:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ec0:	f7fd f9a6 	bl	8001210 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b64      	cmp	r3, #100	; 0x64
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e0e5      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ed2:	4b76      	ldr	r3, [pc, #472]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0f0      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ede:	4b72      	ldr	r3, [pc, #456]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ee6:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d02e      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d027      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003efc:	4b6a      	ldr	r3, [pc, #424]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f04:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f06:	4b6a      	ldr	r3, [pc, #424]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003f08:	2201      	movs	r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f0c:	4b68      	ldr	r3, [pc, #416]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f12:	4a65      	ldr	r2, [pc, #404]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d014      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f22:	f7fd f975 	bl	8001210 <HAL_GetTick>
 8003f26:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f28:	e00a      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f2a:	f7fd f971 	bl	8001210 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e0ae      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f40:	4b59      	ldr	r3, [pc, #356]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0ee      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f4c:	4b56      	ldr	r3, [pc, #344]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	4953      	ldr	r1, [pc, #332]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f5e:	7efb      	ldrb	r3, [r7, #27]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d105      	bne.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f64:	4b50      	ldr	r3, [pc, #320]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f66:	69db      	ldr	r3, [r3, #28]
 8003f68:	4a4f      	ldr	r2, [pc, #316]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f6e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d008      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f7c:	4b4a      	ldr	r3, [pc, #296]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	4947      	ldr	r1, [pc, #284]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0304 	and.w	r3, r3, #4
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d008      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003f9a:	4b43      	ldr	r3, [pc, #268]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	4940      	ldr	r1, [pc, #256]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0308 	and.w	r3, r3, #8
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d008      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8003fb8:	4b3b      	ldr	r3, [pc, #236]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	4938      	ldr	r1, [pc, #224]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8003fca:	4b37      	ldr	r3, [pc, #220]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d105      	bne.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8003fd6:	4b34      	ldr	r3, [pc, #208]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d148      	bne.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8003fec:	4b2e      	ldr	r3, [pc, #184]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d138      	bne.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8003ff8:	4b2b      	ldr	r3, [pc, #172]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d009      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8004004:	4b28      	ldr	r3, [pc, #160]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004008:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8004010:	429a      	cmp	r2, r3
 8004012:	d001      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e042      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8004018:	4b23      	ldr	r3, [pc, #140]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800401a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	4920      	ldr	r1, [pc, #128]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004026:	4313      	orrs	r3, r2
 8004028:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 800402a:	4b1f      	ldr	r3, [pc, #124]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800402c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402e:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	491c      	ldr	r1, [pc, #112]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004038:	4313      	orrs	r3, r2
 800403a:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 800403c:	4b1d      	ldr	r3, [pc, #116]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800403e:	2201      	movs	r2, #1
 8004040:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004042:	f7fd f8e5 	bl	8001210 <HAL_GetTick>
 8004046:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004048:	e008      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800404a:	f7fd f8e1 	bl	8001210 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b64      	cmp	r3, #100	; 0x64
 8004056:	d901      	bls.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e020      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800405c:	4b12      	ldr	r3, [pc, #72]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d0f0      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004068:	e009      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 800406a:	4b0f      	ldr	r3, [pc, #60]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800406c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406e:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	429a      	cmp	r2, r3
 8004078:	d001      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e00f      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0310 	and.w	r3, r3, #16
 8004086:	2b00      	cmp	r3, #0
 8004088:	d008      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800408a:	4b07      	ldr	r3, [pc, #28]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	4904      	ldr	r1, [pc, #16]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004098:	4313      	orrs	r3, r2
 800409a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3720      	adds	r7, #32
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40021000 	.word	0x40021000
 80040ac:	40007000 	.word	0x40007000
 80040b0:	42420440 	.word	0x42420440
 80040b4:	42420070 	.word	0x42420070

080040b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80040b8:	b590      	push	{r4, r7, lr}
 80040ba:	b093      	sub	sp, #76	; 0x4c
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
#if defined(STM32F105xC) || defined(STM32F107xC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80040c0:	4ba9      	ldr	r3, [pc, #676]	; (8004368 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 80040c2:	f107 0418 	add.w	r4, r7, #24
 80040c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040c8:	c407      	stmia	r4!, {r0, r1, r2}
 80040ca:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80040cc:	4ba7      	ldr	r3, [pc, #668]	; (800436c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80040ce:	f107 0408 	add.w	r4, r7, #8
 80040d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80040d8:	2300      	movs	r3, #0
 80040da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040dc:	2300      	movs	r3, #0
 80040de:	647b      	str	r3, [r7, #68]	; 0x44
 80040e0:	2300      	movs	r3, #0
 80040e2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
 80040e4:	2300      	movs	r3, #0
 80040e6:	637b      	str	r3, [r7, #52]	; 0x34
 80040e8:	2300      	movs	r3, #0
 80040ea:	633b      	str	r3, [r7, #48]	; 0x30
 80040ec:	2300      	movs	r3, #0
 80040ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[2] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80040f4:	2300      	movs	r3, #0
 80040f6:	643b      	str	r3, [r7, #64]	; 0x40

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	3b01      	subs	r3, #1
 80040fc:	2b0f      	cmp	r3, #15
 80040fe:	f200 8124 	bhi.w	800434a <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 8004102:	a201      	add	r2, pc, #4	; (adr r2, 8004108 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 8004104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004108:	080042c9 	.word	0x080042c9
 800410c:	0800432f 	.word	0x0800432f
 8004110:	0800434b 	.word	0x0800434b
 8004114:	08004227 	.word	0x08004227
 8004118:	0800434b 	.word	0x0800434b
 800411c:	0800434b 	.word	0x0800434b
 8004120:	0800434b 	.word	0x0800434b
 8004124:	08004279 	.word	0x08004279
 8004128:	0800434b 	.word	0x0800434b
 800412c:	0800434b 	.word	0x0800434b
 8004130:	0800434b 	.word	0x0800434b
 8004134:	0800434b 	.word	0x0800434b
 8004138:	0800434b 	.word	0x0800434b
 800413c:	0800434b 	.word	0x0800434b
 8004140:	0800434b 	.word	0x0800434b
 8004144:	08004149 	.word	0x08004149
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8004148:	4b89      	ldr	r3, [pc, #548]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800414e:	4b88      	ldr	r3, [pc, #544]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	f000 80f9 	beq.w	800434e <HAL_RCCEx_GetPeriphCLKFreq+0x296>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800415c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415e:	0c9b      	lsrs	r3, r3, #18
 8004160:	f003 030f 	and.w	r3, r3, #15
 8004164:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004168:	4413      	add	r3, r2
 800416a:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800416e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d03e      	beq.n	80041f8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800417a:	4b7d      	ldr	r3, [pc, #500]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800417c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004186:	4413      	add	r3, r2
 8004188:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 800418c:	63fb      	str	r3, [r7, #60]	; 0x3c
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */

#if defined(STM32F105xC) || defined(STM32F107xC)
          if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800418e:	4b78      	ldr	r3, [pc, #480]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d01c      	beq.n	80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
          {
            /* PLL2 selected as Prediv1 source */
            /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
            prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800419a:	4b75      	ldr	r3, [pc, #468]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800419c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419e:	091b      	lsrs	r3, r3, #4
 80041a0:	f003 030f 	and.w	r3, r3, #15
 80041a4:	3301      	adds	r3, #1
 80041a6:	62fb      	str	r3, [r7, #44]	; 0x2c
            pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80041a8:	4b71      	ldr	r3, [pc, #452]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80041aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ac:	0a1b      	lsrs	r3, r3, #8
 80041ae:	f003 030f 	and.w	r3, r3, #15
 80041b2:	3302      	adds	r3, #2
 80041b4:	637b      	str	r3, [r7, #52]	; 0x34
            pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv1) * pllmul);
 80041b6:	4a6f      	ldr	r2, [pc, #444]	; (8004374 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80041b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80041be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041c0:	fb02 f203 	mul.w	r2, r2, r3
 80041c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80041ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041cc:	fb02 f303 	mul.w	r3, r2, r3
 80041d0:	647b      	str	r3, [r7, #68]	; 0x44
 80041d2:	e007      	b.n	80041e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
          }
          else
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80041d4:	4a67      	ldr	r2, [pc, #412]	; (8004374 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80041d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80041dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041de:	fb02 f303 	mul.w	r3, r2, r3
 80041e2:	647b      	str	r3, [r7, #68]	; 0x44
          }

          /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
          /* In this case need to divide pllclk by 2 */
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80041e4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80041e8:	461a      	mov	r2, r3
 80041ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d108      	bne.n	8004202 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
          {
            pllclk = pllclk / 2;
 80041f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041f2:	085b      	lsrs	r3, r3, #1
 80041f4:	647b      	str	r3, [r7, #68]	; 0x44
 80041f6:	e004      	b.n	8004202 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80041f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fa:	4a5f      	ldr	r2, [pc, #380]	; (8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80041fc:	fb02 f303 	mul.w	r3, r2, r3
 8004200:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Calcul of the USB frequency*/
#if defined(STM32F105xC) || defined(STM32F107xC)
        /* USBCLK = PLLVCO = (2 x PLLCLK) / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL_DIV2)
 8004202:	4b5b      	ldr	r3, [pc, #364]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800420a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800420e:	d102      	bne.n	8004216 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        {
          /* Prescaler of 2 selected for USB */
          frequency = pllclk;
 8004210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004212:	643b      	str	r3, [r7, #64]	; 0x40
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8004214:	e09b      	b.n	800434e <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          frequency = (2 * pllclk) / 3;
 8004216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	4a58      	ldr	r2, [pc, #352]	; (800437c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800421c:	fba2 2303 	umull	r2, r3, r2, r3
 8004220:	085b      	lsrs	r3, r3, #1
 8004222:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004224:	e093      	b.n	800434e <HAL_RCCEx_GetPeriphCLKFreq+0x296>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S2_SOURCE() == RCC_I2S2CLKSOURCE_SYSCLK)
 8004226:	4b52      	ldr	r3, [pc, #328]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d103      	bne.n	800423a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        /* SYSCLK used as source clock for I2S2 */
        frequency = HAL_RCC_GetSysClockFreq();
 8004232:	f7ff fcc1 	bl	8003bb8 <HAL_RCC_GetSysClockFreq>
 8004236:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004238:	e08b      	b.n	8004352 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 800423a:	4b4d      	ldr	r3, [pc, #308]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004242:	2b00      	cmp	r3, #0
 8004244:	f000 8085 	beq.w	8004352 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8004248:	4b49      	ldr	r3, [pc, #292]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800424a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424c:	091b      	lsrs	r3, r3, #4
 800424e:	f003 030f 	and.w	r3, r3, #15
 8004252:	3301      	adds	r3, #1
 8004254:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8004256:	4b46      	ldr	r3, [pc, #280]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425a:	0b1b      	lsrs	r3, r3, #12
 800425c:	f003 030f 	and.w	r3, r3, #15
 8004260:	3302      	adds	r3, #2
 8004262:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8004264:	4a43      	ldr	r2, [pc, #268]	; (8004374 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004268:	fbb2 f3f3 	udiv	r3, r2, r3
 800426c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800426e:	fb02 f303 	mul.w	r3, r2, r3
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004276:	e06c      	b.n	8004352 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S3_SOURCE() == RCC_I2S3CLKSOURCE_SYSCLK)
 8004278:	4b3d      	ldr	r3, [pc, #244]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800427a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d103      	bne.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
      {
        /* SYSCLK used as source clock for I2S3 */
        frequency = HAL_RCC_GetSysClockFreq();
 8004284:	f7ff fc98 	bl	8003bb8 <HAL_RCC_GetSysClockFreq>
 8004288:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800428a:	e064      	b.n	8004356 <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 800428c:	4b38      	ldr	r3, [pc, #224]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d05e      	beq.n	8004356 <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8004298:	4b35      	ldr	r3, [pc, #212]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800429a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429c:	091b      	lsrs	r3, r3, #4
 800429e:	f003 030f 	and.w	r3, r3, #15
 80042a2:	3301      	adds	r3, #1
 80042a4:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 80042a6:	4b32      	ldr	r3, [pc, #200]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80042a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042aa:	0b1b      	lsrs	r3, r3, #12
 80042ac:	f003 030f 	and.w	r3, r3, #15
 80042b0:	3302      	adds	r3, #2
 80042b2:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 80042b4:	4a2f      	ldr	r2, [pc, #188]	; (8004374 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80042b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042be:	fb02 f303 	mul.w	r3, r2, r3
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80042c6:	e046      	b.n	8004356 <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80042c8:	4b29      	ldr	r3, [pc, #164]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80042ca:	6a1b      	ldr	r3, [r3, #32]
 80042cc:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80042ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042d8:	d108      	bne.n	80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 80042da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x234>
      {
        frequency = LSE_VALUE;
 80042e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042e8:	643b      	str	r3, [r7, #64]	; 0x40
 80042ea:	e01f      	b.n	800432c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80042ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042f6:	d109      	bne.n	800430c <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80042f8:	4b1d      	ldr	r3, [pc, #116]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80042fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <HAL_RCCEx_GetPeriphCLKFreq+0x254>
      {
        frequency = LSI_VALUE;
 8004304:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004308:	643b      	str	r3, [r7, #64]	; 0x40
 800430a:	e00f      	b.n	800432c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800430c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004312:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004316:	d120      	bne.n	800435a <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 8004318:	4b15      	ldr	r3, [pc, #84]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d01a      	beq.n	800435a <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
      {
        frequency = HSE_VALUE / 128U;
 8004324:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004328:	643b      	str	r3, [r7, #64]	; 0x40
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 800432a:	e016      	b.n	800435a <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 800432c:	e015      	b.n	800435a <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800432e:	f7ff fd45 	bl	8003dbc <HAL_RCC_GetPCLK2Freq>
 8004332:	4602      	mov	r2, r0
 8004334:	4b0e      	ldr	r3, [pc, #56]	; (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	0b9b      	lsrs	r3, r3, #14
 800433a:	f003 0303 	and.w	r3, r3, #3
 800433e:	3301      	adds	r3, #1
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	fbb2 f3f3 	udiv	r3, r2, r3
 8004346:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004348:	e008      	b.n	800435c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
    }
    default:
    {
      break;
 800434a:	bf00      	nop
 800434c:	e006      	b.n	800435c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 800434e:	bf00      	nop
 8004350:	e004      	b.n	800435c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 8004352:	bf00      	nop
 8004354:	e002      	b.n	800435c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 8004356:	bf00      	nop
 8004358:	e000      	b.n	800435c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 800435a:	bf00      	nop
    }
  }
  return (frequency);
 800435c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800435e:	4618      	mov	r0, r3
 8004360:	374c      	adds	r7, #76	; 0x4c
 8004362:	46bd      	mov	sp, r7
 8004364:	bd90      	pop	{r4, r7, pc}
 8004366:	bf00      	nop
 8004368:	08014450 	.word	0x08014450
 800436c:	08014460 	.word	0x08014460
 8004370:	40021000 	.word	0x40021000
 8004374:	007a1200 	.word	0x007a1200
 8004378:	003d0900 	.word	0x003d0900
 800437c:	aaaaaaab 	.word	0xaaaaaaab

08004380 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e03f      	b.n	8004412 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d106      	bne.n	80043ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f00b fd48 	bl	800fe3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2224      	movs	r2, #36	; 0x24
 80043b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68da      	ldr	r2, [r3, #12]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 f905 	bl	80045d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	691a      	ldr	r2, [r3, #16]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	695a      	ldr	r2, [r3, #20]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68da      	ldr	r2, [r3, #12]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2220      	movs	r2, #32
 8004404:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2220      	movs	r2, #32
 800440c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b08a      	sub	sp, #40	; 0x28
 800441e:	af02      	add	r7, sp, #8
 8004420:	60f8      	str	r0, [r7, #12]
 8004422:	60b9      	str	r1, [r7, #8]
 8004424:	603b      	str	r3, [r7, #0]
 8004426:	4613      	mov	r3, r2
 8004428:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800442a:	2300      	movs	r3, #0
 800442c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b20      	cmp	r3, #32
 8004438:	d17c      	bne.n	8004534 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d002      	beq.n	8004446 <HAL_UART_Transmit+0x2c>
 8004440:	88fb      	ldrh	r3, [r7, #6]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e075      	b.n	8004536 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004450:	2b01      	cmp	r3, #1
 8004452:	d101      	bne.n	8004458 <HAL_UART_Transmit+0x3e>
 8004454:	2302      	movs	r3, #2
 8004456:	e06e      	b.n	8004536 <HAL_UART_Transmit+0x11c>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2221      	movs	r2, #33	; 0x21
 800446a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800446e:	f7fc fecf 	bl	8001210 <HAL_GetTick>
 8004472:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	88fa      	ldrh	r2, [r7, #6]
 8004478:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	88fa      	ldrh	r2, [r7, #6]
 800447e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004488:	d108      	bne.n	800449c <HAL_UART_Transmit+0x82>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d104      	bne.n	800449c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004492:	2300      	movs	r3, #0
 8004494:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	61bb      	str	r3, [r7, #24]
 800449a:	e003      	b.n	80044a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044a0:	2300      	movs	r3, #0
 80044a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80044ac:	e02a      	b.n	8004504 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	2200      	movs	r2, #0
 80044b6:	2180      	movs	r1, #128	; 0x80
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f000 f840 	bl	800453e <UART_WaitOnFlagUntilTimeout>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e036      	b.n	8004536 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10b      	bne.n	80044e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	881b      	ldrh	r3, [r3, #0]
 80044d2:	461a      	mov	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	3302      	adds	r3, #2
 80044e2:	61bb      	str	r3, [r7, #24]
 80044e4:	e007      	b.n	80044f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	781a      	ldrb	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	3301      	adds	r3, #1
 80044f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	3b01      	subs	r3, #1
 80044fe:	b29a      	uxth	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004508:	b29b      	uxth	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1cf      	bne.n	80044ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	2200      	movs	r2, #0
 8004516:	2140      	movs	r1, #64	; 0x40
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 f810 	bl	800453e <UART_WaitOnFlagUntilTimeout>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e006      	b.n	8004536 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2220      	movs	r2, #32
 800452c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004530:	2300      	movs	r3, #0
 8004532:	e000      	b.n	8004536 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004534:	2302      	movs	r3, #2
  }
}
 8004536:	4618      	mov	r0, r3
 8004538:	3720      	adds	r7, #32
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b084      	sub	sp, #16
 8004542:	af00      	add	r7, sp, #0
 8004544:	60f8      	str	r0, [r7, #12]
 8004546:	60b9      	str	r1, [r7, #8]
 8004548:	603b      	str	r3, [r7, #0]
 800454a:	4613      	mov	r3, r2
 800454c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800454e:	e02c      	b.n	80045aa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004556:	d028      	beq.n	80045aa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d007      	beq.n	800456e <UART_WaitOnFlagUntilTimeout+0x30>
 800455e:	f7fc fe57 	bl	8001210 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	429a      	cmp	r2, r3
 800456c:	d21d      	bcs.n	80045aa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800457c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	695a      	ldr	r2, [r3, #20]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 0201 	bic.w	r2, r2, #1
 800458c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2220      	movs	r2, #32
 8004592:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2220      	movs	r2, #32
 800459a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e00f      	b.n	80045ca <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	4013      	ands	r3, r2
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	bf0c      	ite	eq
 80045ba:	2301      	moveq	r3, #1
 80045bc:	2300      	movne	r3, #0
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	461a      	mov	r2, r3
 80045c2:	79fb      	ldrb	r3, [r7, #7]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d0c3      	beq.n	8004550 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
	...

080045d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68da      	ldr	r2, [r3, #12]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	689a      	ldr	r2, [r3, #8]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	431a      	orrs	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	4313      	orrs	r3, r2
 8004602:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800460e:	f023 030c 	bic.w	r3, r3, #12
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	6812      	ldr	r2, [r2, #0]
 8004616:	68b9      	ldr	r1, [r7, #8]
 8004618:	430b      	orrs	r3, r1
 800461a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	699a      	ldr	r2, [r3, #24]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a2c      	ldr	r2, [pc, #176]	; (80046e8 <UART_SetConfig+0x114>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d103      	bne.n	8004644 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800463c:	f7ff fbbe 	bl	8003dbc <HAL_RCC_GetPCLK2Freq>
 8004640:	60f8      	str	r0, [r7, #12]
 8004642:	e002      	b.n	800464a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004644:	f7ff fba6 	bl	8003d94 <HAL_RCC_GetPCLK1Freq>
 8004648:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	4613      	mov	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	009a      	lsls	r2, r3, #2
 8004654:	441a      	add	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004660:	4a22      	ldr	r2, [pc, #136]	; (80046ec <UART_SetConfig+0x118>)
 8004662:	fba2 2303 	umull	r2, r3, r2, r3
 8004666:	095b      	lsrs	r3, r3, #5
 8004668:	0119      	lsls	r1, r3, #4
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	4613      	mov	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4413      	add	r3, r2
 8004672:	009a      	lsls	r2, r3, #2
 8004674:	441a      	add	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004680:	4b1a      	ldr	r3, [pc, #104]	; (80046ec <UART_SetConfig+0x118>)
 8004682:	fba3 0302 	umull	r0, r3, r3, r2
 8004686:	095b      	lsrs	r3, r3, #5
 8004688:	2064      	movs	r0, #100	; 0x64
 800468a:	fb00 f303 	mul.w	r3, r0, r3
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	011b      	lsls	r3, r3, #4
 8004692:	3332      	adds	r3, #50	; 0x32
 8004694:	4a15      	ldr	r2, [pc, #84]	; (80046ec <UART_SetConfig+0x118>)
 8004696:	fba2 2303 	umull	r2, r3, r2, r3
 800469a:	095b      	lsrs	r3, r3, #5
 800469c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046a0:	4419      	add	r1, r3
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	4613      	mov	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4413      	add	r3, r2
 80046aa:	009a      	lsls	r2, r3, #2
 80046ac:	441a      	add	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80046b8:	4b0c      	ldr	r3, [pc, #48]	; (80046ec <UART_SetConfig+0x118>)
 80046ba:	fba3 0302 	umull	r0, r3, r3, r2
 80046be:	095b      	lsrs	r3, r3, #5
 80046c0:	2064      	movs	r0, #100	; 0x64
 80046c2:	fb00 f303 	mul.w	r3, r0, r3
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	011b      	lsls	r3, r3, #4
 80046ca:	3332      	adds	r3, #50	; 0x32
 80046cc:	4a07      	ldr	r2, [pc, #28]	; (80046ec <UART_SetConfig+0x118>)
 80046ce:	fba2 2303 	umull	r2, r3, r2, r3
 80046d2:	095b      	lsrs	r3, r3, #5
 80046d4:	f003 020f 	and.w	r2, r3, #15
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	440a      	add	r2, r1
 80046de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80046e0:	bf00      	nop
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	40013800 	.word	0x40013800
 80046ec:	51eb851f 	.word	0x51eb851f

080046f0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	4603      	mov	r3, r0
 80046f8:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 80046fa:	88fb      	ldrh	r3, [r7, #6]
 80046fc:	ba5b      	rev16	r3, r3
 80046fe:	b29b      	uxth	r3, r3
}
 8004700:	4618      	mov	r0, r3
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	bc80      	pop	{r7}
 8004708:	4770      	bx	lr

0800470a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800470a:	b480      	push	{r7}
 800470c:	b083      	sub	sp, #12
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	061a      	lsls	r2, r3, #24
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	021b      	lsls	r3, r3, #8
 800471a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800471e:	431a      	orrs	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	0a1b      	lsrs	r3, r3, #8
 8004724:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004728:	431a      	orrs	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	0e1b      	lsrs	r3, r3, #24
 800472e:	4313      	orrs	r3, r2
}
 8004730:	4618      	mov	r0, r3
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	bc80      	pop	{r7}
 8004738:	4770      	bx	lr

0800473a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b082      	sub	sp, #8
 800473e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8004740:	2300      	movs	r3, #0
 8004742:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8004744:	f000 f8a6 	bl	8004894 <mem_init>
  memp_init();
 8004748:	f000 fb36 	bl	8004db8 <memp_init>
  pbuf_init();
  netif_init();
 800474c:	f000 fbee 	bl	8004f2c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004750:	f006 fe30 	bl	800b3b4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8004754:	f001 fb60 	bl	8005e18 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8004758:	f006 fd0e 	bl	800b178 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800475c:	bf00      	nop
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800476c:	4b40      	ldr	r3, [pc, #256]	; (8004870 <plug_holes+0x10c>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	429a      	cmp	r2, r3
 8004774:	d206      	bcs.n	8004784 <plug_holes+0x20>
 8004776:	4b3f      	ldr	r3, [pc, #252]	; (8004874 <plug_holes+0x110>)
 8004778:	f240 125d 	movw	r2, #349	; 0x15d
 800477c:	493e      	ldr	r1, [pc, #248]	; (8004878 <plug_holes+0x114>)
 800477e:	483f      	ldr	r0, [pc, #252]	; (800487c <plug_holes+0x118>)
 8004780:	f00c fa44 	bl	8010c0c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004784:	4b3e      	ldr	r3, [pc, #248]	; (8004880 <plug_holes+0x11c>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	429a      	cmp	r2, r3
 800478c:	d306      	bcc.n	800479c <plug_holes+0x38>
 800478e:	4b39      	ldr	r3, [pc, #228]	; (8004874 <plug_holes+0x110>)
 8004790:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8004794:	493b      	ldr	r1, [pc, #236]	; (8004884 <plug_holes+0x120>)
 8004796:	4839      	ldr	r0, [pc, #228]	; (800487c <plug_holes+0x118>)
 8004798:	f00c fa38 	bl	8010c0c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	791b      	ldrb	r3, [r3, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d006      	beq.n	80047b2 <plug_holes+0x4e>
 80047a4:	4b33      	ldr	r3, [pc, #204]	; (8004874 <plug_holes+0x110>)
 80047a6:	f240 125f 	movw	r2, #351	; 0x15f
 80047aa:	4937      	ldr	r1, [pc, #220]	; (8004888 <plug_holes+0x124>)
 80047ac:	4833      	ldr	r0, [pc, #204]	; (800487c <plug_holes+0x118>)
 80047ae:	f00c fa2d 	bl	8010c0c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	881b      	ldrh	r3, [r3, #0]
 80047b6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80047ba:	d906      	bls.n	80047ca <plug_holes+0x66>
 80047bc:	4b2d      	ldr	r3, [pc, #180]	; (8004874 <plug_holes+0x110>)
 80047be:	f44f 72b1 	mov.w	r2, #354	; 0x162
 80047c2:	4932      	ldr	r1, [pc, #200]	; (800488c <plug_holes+0x128>)
 80047c4:	482d      	ldr	r0, [pc, #180]	; (800487c <plug_holes+0x118>)
 80047c6:	f00c fa21 	bl	8010c0c <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 80047ca:	4b29      	ldr	r3, [pc, #164]	; (8004870 <plug_holes+0x10c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	8812      	ldrh	r2, [r2, #0]
 80047d2:	4413      	add	r3, r2
 80047d4:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d01f      	beq.n	800481e <plug_holes+0xba>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	791b      	ldrb	r3, [r3, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d11b      	bne.n	800481e <plug_holes+0xba>
 80047e6:	4b26      	ldr	r3, [pc, #152]	; (8004880 <plug_holes+0x11c>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d016      	beq.n	800481e <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80047f0:	4b27      	ldr	r3, [pc, #156]	; (8004890 <plug_holes+0x12c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d102      	bne.n	8004800 <plug_holes+0x9c>
      lfree = mem;
 80047fa:	4a25      	ldr	r2, [pc, #148]	; (8004890 <plug_holes+0x12c>)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	881a      	ldrh	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a19      	ldr	r2, [pc, #100]	; (8004870 <plug_holes+0x10c>)
 800480c:	6812      	ldr	r2, [r2, #0]
 800480e:	1a99      	subs	r1, r3, r2
 8004810:	4b17      	ldr	r3, [pc, #92]	; (8004870 <plug_holes+0x10c>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	8812      	ldrh	r2, [r2, #0]
 8004818:	4413      	add	r3, r2
 800481a:	b28a      	uxth	r2, r1
 800481c:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800481e:	4b14      	ldr	r3, [pc, #80]	; (8004870 <plug_holes+0x10c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	8852      	ldrh	r2, [r2, #2]
 8004826:	4413      	add	r3, r2
 8004828:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	429a      	cmp	r2, r3
 8004830:	d01a      	beq.n	8004868 <plug_holes+0x104>
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	791b      	ldrb	r3, [r3, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d116      	bne.n	8004868 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800483a:	4b15      	ldr	r3, [pc, #84]	; (8004890 <plug_holes+0x12c>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	429a      	cmp	r2, r3
 8004842:	d102      	bne.n	800484a <plug_holes+0xe6>
      lfree = pmem;
 8004844:	4a12      	ldr	r2, [pc, #72]	; (8004890 <plug_holes+0x12c>)
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	881a      	ldrh	r2, [r3, #0]
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	4a06      	ldr	r2, [pc, #24]	; (8004870 <plug_holes+0x10c>)
 8004856:	6812      	ldr	r2, [r2, #0]
 8004858:	1a99      	subs	r1, r3, r2
 800485a:	4b05      	ldr	r3, [pc, #20]	; (8004870 <plug_holes+0x10c>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	8812      	ldrh	r2, [r2, #0]
 8004862:	4413      	add	r3, r2
 8004864:	b28a      	uxth	r2, r1
 8004866:	805a      	strh	r2, [r3, #2]
  }
}
 8004868:	bf00      	nop
 800486a:	3710      	adds	r7, #16
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	200001fc 	.word	0x200001fc
 8004874:	08014470 	.word	0x08014470
 8004878:	080144a0 	.word	0x080144a0
 800487c:	080144b8 	.word	0x080144b8
 8004880:	20000200 	.word	0x20000200
 8004884:	080144e0 	.word	0x080144e0
 8004888:	080144fc 	.word	0x080144fc
 800488c:	08014518 	.word	0x08014518
 8004890:	20000204 	.word	0x20000204

08004894 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800489a:	4b18      	ldr	r3, [pc, #96]	; (80048fc <mem_init+0x68>)
 800489c:	3303      	adds	r3, #3
 800489e:	f023 0303 	bic.w	r3, r3, #3
 80048a2:	461a      	mov	r2, r3
 80048a4:	4b16      	ldr	r3, [pc, #88]	; (8004900 <mem_init+0x6c>)
 80048a6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80048a8:	4b15      	ldr	r3, [pc, #84]	; (8004900 <mem_init+0x6c>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80048b4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 80048c2:	4b0f      	ldr	r3, [pc, #60]	; (8004900 <mem_init+0x6c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 80048ca:	4a0e      	ldr	r2, [pc, #56]	; (8004904 <mem_init+0x70>)
 80048cc:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80048ce:	4b0d      	ldr	r3, [pc, #52]	; (8004904 <mem_init+0x70>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2201      	movs	r2, #1
 80048d4:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80048d6:	4b0b      	ldr	r3, [pc, #44]	; (8004904 <mem_init+0x70>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80048de:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80048e0:	4b08      	ldr	r3, [pc, #32]	; (8004904 <mem_init+0x70>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80048e8:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80048ea:	4b05      	ldr	r3, [pc, #20]	; (8004900 <mem_init+0x6c>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a06      	ldr	r2, [pc, #24]	; (8004908 <mem_init+0x74>)
 80048f0:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80048f2:	bf00      	nop
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bc80      	pop	{r7}
 80048fa:	4770      	bx	lr
 80048fc:	200003ac 	.word	0x200003ac
 8004900:	200001fc 	.word	0x200001fc
 8004904:	20000200 	.word	0x20000200
 8004908:	20000204 	.word	0x20000204

0800490c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d043      	beq.n	80049a2 <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f003 0303 	and.w	r3, r3, #3
 8004920:	2b00      	cmp	r3, #0
 8004922:	d006      	beq.n	8004932 <mem_free+0x26>
 8004924:	4b22      	ldr	r3, [pc, #136]	; (80049b0 <mem_free+0xa4>)
 8004926:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800492a:	4922      	ldr	r1, [pc, #136]	; (80049b4 <mem_free+0xa8>)
 800492c:	4822      	ldr	r0, [pc, #136]	; (80049b8 <mem_free+0xac>)
 800492e:	f00c f96d 	bl	8010c0c <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004932:	4b22      	ldr	r3, [pc, #136]	; (80049bc <mem_free+0xb0>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	429a      	cmp	r2, r3
 800493a:	d304      	bcc.n	8004946 <mem_free+0x3a>
 800493c:	4b20      	ldr	r3, [pc, #128]	; (80049c0 <mem_free+0xb4>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	429a      	cmp	r2, r3
 8004944:	d306      	bcc.n	8004954 <mem_free+0x48>
 8004946:	4b1a      	ldr	r3, [pc, #104]	; (80049b0 <mem_free+0xa4>)
 8004948:	f240 12af 	movw	r2, #431	; 0x1af
 800494c:	491d      	ldr	r1, [pc, #116]	; (80049c4 <mem_free+0xb8>)
 800494e:	481a      	ldr	r0, [pc, #104]	; (80049b8 <mem_free+0xac>)
 8004950:	f00c f95c 	bl	8010c0c <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004954:	4b19      	ldr	r3, [pc, #100]	; (80049bc <mem_free+0xb0>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	429a      	cmp	r2, r3
 800495c:	d323      	bcc.n	80049a6 <mem_free+0x9a>
 800495e:	4b18      	ldr	r3, [pc, #96]	; (80049c0 <mem_free+0xb4>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	429a      	cmp	r2, r3
 8004966:	d21e      	bcs.n	80049a6 <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	3b08      	subs	r3, #8
 800496c:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	791b      	ldrb	r3, [r3, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d106      	bne.n	8004984 <mem_free+0x78>
 8004976:	4b0e      	ldr	r3, [pc, #56]	; (80049b0 <mem_free+0xa4>)
 8004978:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800497c:	4912      	ldr	r1, [pc, #72]	; (80049c8 <mem_free+0xbc>)
 800497e:	480e      	ldr	r0, [pc, #56]	; (80049b8 <mem_free+0xac>)
 8004980:	f00c f944 	bl	8010c0c <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800498a:	4b10      	ldr	r3, [pc, #64]	; (80049cc <mem_free+0xc0>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	429a      	cmp	r2, r3
 8004992:	d202      	bcs.n	800499a <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004994:	4a0d      	ldr	r2, [pc, #52]	; (80049cc <mem_free+0xc0>)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f7ff fee2 	bl	8004764 <plug_holes>
 80049a0:	e002      	b.n	80049a8 <mem_free+0x9c>
    return;
 80049a2:	bf00      	nop
 80049a4:	e000      	b.n	80049a8 <mem_free+0x9c>
    return;
 80049a6:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	08014470 	.word	0x08014470
 80049b4:	08014544 	.word	0x08014544
 80049b8:	080144b8 	.word	0x080144b8
 80049bc:	200001fc 	.word	0x200001fc
 80049c0:	20000200 	.word	0x20000200
 80049c4:	08014568 	.word	0x08014568
 80049c8:	08014580 	.word	0x08014580
 80049cc:	20000204 	.word	0x20000204

080049d0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	460b      	mov	r3, r1
 80049da:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 80049dc:	887b      	ldrh	r3, [r7, #2]
 80049de:	3303      	adds	r3, #3
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	f023 0303 	bic.w	r3, r3, #3
 80049e6:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 80049e8:	887b      	ldrh	r3, [r7, #2]
 80049ea:	2b0b      	cmp	r3, #11
 80049ec:	d801      	bhi.n	80049f2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80049ee:	230c      	movs	r3, #12
 80049f0:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 80049f2:	887b      	ldrh	r3, [r7, #2]
 80049f4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80049f8:	d901      	bls.n	80049fe <mem_trim+0x2e>
    return NULL;
 80049fa:	2300      	movs	r3, #0
 80049fc:	e0b1      	b.n	8004b62 <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80049fe:	4b5b      	ldr	r3, [pc, #364]	; (8004b6c <mem_trim+0x19c>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d304      	bcc.n	8004a12 <mem_trim+0x42>
 8004a08:	4b59      	ldr	r3, [pc, #356]	; (8004b70 <mem_trim+0x1a0>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d306      	bcc.n	8004a20 <mem_trim+0x50>
 8004a12:	4b58      	ldr	r3, [pc, #352]	; (8004b74 <mem_trim+0x1a4>)
 8004a14:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004a18:	4957      	ldr	r1, [pc, #348]	; (8004b78 <mem_trim+0x1a8>)
 8004a1a:	4858      	ldr	r0, [pc, #352]	; (8004b7c <mem_trim+0x1ac>)
 8004a1c:	f00c f8f6 	bl	8010c0c <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004a20:	4b52      	ldr	r3, [pc, #328]	; (8004b6c <mem_trim+0x19c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d304      	bcc.n	8004a34 <mem_trim+0x64>
 8004a2a:	4b51      	ldr	r3, [pc, #324]	; (8004b70 <mem_trim+0x1a0>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d301      	bcc.n	8004a38 <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	e094      	b.n	8004b62 <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	3b08      	subs	r3, #8
 8004a3c:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	4a4a      	ldr	r2, [pc, #296]	; (8004b6c <mem_trim+0x19c>)
 8004a42:	6812      	ldr	r2, [r2, #0]
 8004a44:	1a9b      	subs	r3, r3, r2
 8004a46:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	881a      	ldrh	r2, [r3, #0]
 8004a4c:	8a7b      	ldrh	r3, [r7, #18]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	3b08      	subs	r3, #8
 8004a54:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004a56:	887a      	ldrh	r2, [r7, #2]
 8004a58:	8a3b      	ldrh	r3, [r7, #16]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d906      	bls.n	8004a6c <mem_trim+0x9c>
 8004a5e:	4b45      	ldr	r3, [pc, #276]	; (8004b74 <mem_trim+0x1a4>)
 8004a60:	f240 2206 	movw	r2, #518	; 0x206
 8004a64:	4946      	ldr	r1, [pc, #280]	; (8004b80 <mem_trim+0x1b0>)
 8004a66:	4845      	ldr	r0, [pc, #276]	; (8004b7c <mem_trim+0x1ac>)
 8004a68:	f00c f8d0 	bl	8010c0c <iprintf>
  if (newsize > size) {
 8004a6c:	887a      	ldrh	r2, [r7, #2]
 8004a6e:	8a3b      	ldrh	r3, [r7, #16]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d901      	bls.n	8004a78 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 8004a74:	2300      	movs	r3, #0
 8004a76:	e074      	b.n	8004b62 <mem_trim+0x192>
  }
  if (newsize == size) {
 8004a78:	887a      	ldrh	r2, [r7, #2]
 8004a7a:	8a3b      	ldrh	r3, [r7, #16]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d101      	bne.n	8004a84 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	e06e      	b.n	8004b62 <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8004a84:	4b39      	ldr	r3, [pc, #228]	; (8004b6c <mem_trim+0x19c>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	8812      	ldrh	r2, [r2, #0]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	791b      	ldrb	r3, [r3, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d131      	bne.n	8004afc <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	881b      	ldrh	r3, [r3, #0]
 8004a9c:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8004a9e:	8a7a      	ldrh	r2, [r7, #18]
 8004aa0:	887b      	ldrh	r3, [r7, #2]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	3308      	adds	r3, #8
 8004aa8:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 8004aaa:	4b36      	ldr	r3, [pc, #216]	; (8004b84 <mem_trim+0x1b4>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d105      	bne.n	8004ac0 <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8004ab4:	4b2d      	ldr	r3, [pc, #180]	; (8004b6c <mem_trim+0x19c>)
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	897b      	ldrh	r3, [r7, #10]
 8004aba:	4413      	add	r3, r2
 8004abc:	4a31      	ldr	r2, [pc, #196]	; (8004b84 <mem_trim+0x1b4>)
 8004abe:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8004ac0:	4b2a      	ldr	r3, [pc, #168]	; (8004b6c <mem_trim+0x19c>)
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	897b      	ldrh	r3, [r7, #10]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	893a      	ldrh	r2, [r7, #8]
 8004ad4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	8a7a      	ldrh	r2, [r7, #18]
 8004ada:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	897a      	ldrh	r2, [r7, #10]
 8004ae0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	881b      	ldrh	r3, [r3, #0]
 8004ae6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004aea:	d039      	beq.n	8004b60 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8004aec:	4b1f      	ldr	r3, [pc, #124]	; (8004b6c <mem_trim+0x19c>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	8812      	ldrh	r2, [r2, #0]
 8004af4:	4413      	add	r3, r2
 8004af6:	897a      	ldrh	r2, [r7, #10]
 8004af8:	805a      	strh	r2, [r3, #2]
 8004afa:	e031      	b.n	8004b60 <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004afc:	887b      	ldrh	r3, [r7, #2]
 8004afe:	f103 0214 	add.w	r2, r3, #20
 8004b02:	8a3b      	ldrh	r3, [r7, #16]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d82b      	bhi.n	8004b60 <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8004b08:	8a7a      	ldrh	r2, [r7, #18]
 8004b0a:	887b      	ldrh	r3, [r7, #2]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	3308      	adds	r3, #8
 8004b12:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8004b14:	4b15      	ldr	r3, [pc, #84]	; (8004b6c <mem_trim+0x19c>)
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	897b      	ldrh	r3, [r7, #10]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 8004b1e:	4b19      	ldr	r3, [pc, #100]	; (8004b84 <mem_trim+0x1b4>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d202      	bcs.n	8004b2e <mem_trim+0x15e>
      lfree = mem2;
 8004b28:	4a16      	ldr	r2, [pc, #88]	; (8004b84 <mem_trim+0x1b4>)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	881a      	ldrh	r2, [r3, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8a7a      	ldrh	r2, [r7, #18]
 8004b40:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	897a      	ldrh	r2, [r7, #10]
 8004b46:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	881b      	ldrh	r3, [r3, #0]
 8004b4c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004b50:	d006      	beq.n	8004b60 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8004b52:	4b06      	ldr	r3, [pc, #24]	; (8004b6c <mem_trim+0x19c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	8812      	ldrh	r2, [r2, #0]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	897a      	ldrh	r2, [r7, #10]
 8004b5e:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004b60:	687b      	ldr	r3, [r7, #4]
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3718      	adds	r7, #24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	200001fc 	.word	0x200001fc
 8004b70:	20000200 	.word	0x20000200
 8004b74:	08014470 	.word	0x08014470
 8004b78:	08014594 	.word	0x08014594
 8004b7c:	080144b8 	.word	0x080144b8
 8004b80:	080145ac 	.word	0x080145ac
 8004b84:	20000204 	.word	0x20000204

08004b88 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b088      	sub	sp, #32
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	4603      	mov	r3, r0
 8004b90:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8004b92:	88fb      	ldrh	r3, [r7, #6]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d101      	bne.n	8004b9c <mem_malloc+0x14>
    return NULL;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	e0c8      	b.n	8004d2e <mem_malloc+0x1a6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8004b9c:	88fb      	ldrh	r3, [r7, #6]
 8004b9e:	3303      	adds	r3, #3
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	f023 0303 	bic.w	r3, r3, #3
 8004ba6:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 8004ba8:	88fb      	ldrh	r3, [r7, #6]
 8004baa:	2b0b      	cmp	r3, #11
 8004bac:	d801      	bhi.n	8004bb2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004bae:	230c      	movs	r3, #12
 8004bb0:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 8004bb2:	88fb      	ldrh	r3, [r7, #6]
 8004bb4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004bb8:	d901      	bls.n	8004bbe <mem_malloc+0x36>
    return NULL;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	e0b7      	b.n	8004d2e <mem_malloc+0x1a6>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8004bbe:	4b5e      	ldr	r3, [pc, #376]	; (8004d38 <mem_malloc+0x1b0>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	4b5d      	ldr	r3, [pc, #372]	; (8004d3c <mem_malloc+0x1b4>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	83fb      	strh	r3, [r7, #30]
 8004bcc:	e0a7      	b.n	8004d1e <mem_malloc+0x196>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8004bce:	4b5b      	ldr	r3, [pc, #364]	; (8004d3c <mem_malloc+0x1b4>)
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	8bfb      	ldrh	r3, [r7, #30]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	791b      	ldrb	r3, [r3, #4]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f040 8098 	bne.w	8004d12 <mem_malloc+0x18a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	881b      	ldrh	r3, [r3, #0]
 8004be6:	461a      	mov	r2, r3
 8004be8:	8bfb      	ldrh	r3, [r7, #30]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	f1a3 0208 	sub.w	r2, r3, #8
 8004bf0:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	f0c0 808d 	bcc.w	8004d12 <mem_malloc+0x18a>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	881b      	ldrh	r3, [r3, #0]
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	8bfb      	ldrh	r3, [r7, #30]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	f1a3 0208 	sub.w	r2, r3, #8
 8004c06:	88fb      	ldrh	r3, [r7, #6]
 8004c08:	3314      	adds	r3, #20
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d327      	bcc.n	8004c5e <mem_malloc+0xd6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8004c0e:	8bfa      	ldrh	r2, [r7, #30]
 8004c10:	88fb      	ldrh	r3, [r7, #6]
 8004c12:	4413      	add	r3, r2
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	3308      	adds	r3, #8
 8004c18:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8004c1a:	4b48      	ldr	r3, [pc, #288]	; (8004d3c <mem_malloc+0x1b4>)
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	8a7b      	ldrh	r3, [r7, #18]
 8004c20:	4413      	add	r3, r2
 8004c22:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	881a      	ldrh	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8bfa      	ldrh	r2, [r7, #30]
 8004c36:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	8a7a      	ldrh	r2, [r7, #18]
 8004c3c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	2201      	movs	r2, #1
 8004c42:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	881b      	ldrh	r3, [r3, #0]
 8004c48:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004c4c:	d00a      	beq.n	8004c64 <mem_malloc+0xdc>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8004c4e:	4b3b      	ldr	r3, [pc, #236]	; (8004d3c <mem_malloc+0x1b4>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	8812      	ldrh	r2, [r2, #0]
 8004c56:	4413      	add	r3, r2
 8004c58:	8a7a      	ldrh	r2, [r7, #18]
 8004c5a:	805a      	strh	r2, [r3, #2]
 8004c5c:	e002      	b.n	8004c64 <mem_malloc+0xdc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	2201      	movs	r2, #1
 8004c62:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8004c64:	4b34      	ldr	r3, [pc, #208]	; (8004d38 <mem_malloc+0x1b0>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d127      	bne.n	8004cbe <mem_malloc+0x136>
          struct mem *cur = lfree;
 8004c6e:	4b32      	ldr	r3, [pc, #200]	; (8004d38 <mem_malloc+0x1b0>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8004c74:	e005      	b.n	8004c82 <mem_malloc+0xfa>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8004c76:	4b31      	ldr	r3, [pc, #196]	; (8004d3c <mem_malloc+0x1b4>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	69ba      	ldr	r2, [r7, #24]
 8004c7c:	8812      	ldrh	r2, [r2, #0]
 8004c7e:	4413      	add	r3, r2
 8004c80:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	791b      	ldrb	r3, [r3, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d004      	beq.n	8004c94 <mem_malloc+0x10c>
 8004c8a:	4b2d      	ldr	r3, [pc, #180]	; (8004d40 <mem_malloc+0x1b8>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d1f0      	bne.n	8004c76 <mem_malloc+0xee>
          }
          lfree = cur;
 8004c94:	4a28      	ldr	r2, [pc, #160]	; (8004d38 <mem_malloc+0x1b0>)
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8004c9a:	4b27      	ldr	r3, [pc, #156]	; (8004d38 <mem_malloc+0x1b0>)
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	4b28      	ldr	r3, [pc, #160]	; (8004d40 <mem_malloc+0x1b8>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d00b      	beq.n	8004cbe <mem_malloc+0x136>
 8004ca6:	4b24      	ldr	r3, [pc, #144]	; (8004d38 <mem_malloc+0x1b0>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	791b      	ldrb	r3, [r3, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d006      	beq.n	8004cbe <mem_malloc+0x136>
 8004cb0:	4b24      	ldr	r3, [pc, #144]	; (8004d44 <mem_malloc+0x1bc>)
 8004cb2:	f240 22cf 	movw	r2, #719	; 0x2cf
 8004cb6:	4924      	ldr	r1, [pc, #144]	; (8004d48 <mem_malloc+0x1c0>)
 8004cb8:	4824      	ldr	r0, [pc, #144]	; (8004d4c <mem_malloc+0x1c4>)
 8004cba:	f00b ffa7 	bl	8010c0c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004cbe:	88fa      	ldrh	r2, [r7, #6]
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	3308      	adds	r3, #8
 8004cc6:	4a1e      	ldr	r2, [pc, #120]	; (8004d40 <mem_malloc+0x1b8>)
 8004cc8:	6812      	ldr	r2, [r2, #0]
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d906      	bls.n	8004cdc <mem_malloc+0x154>
 8004cce:	4b1d      	ldr	r3, [pc, #116]	; (8004d44 <mem_malloc+0x1bc>)
 8004cd0:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8004cd4:	491e      	ldr	r1, [pc, #120]	; (8004d50 <mem_malloc+0x1c8>)
 8004cd6:	481d      	ldr	r0, [pc, #116]	; (8004d4c <mem_malloc+0x1c4>)
 8004cd8:	f00b ff98 	bl	8010c0c <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f003 0303 	and.w	r3, r3, #3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d006      	beq.n	8004cf4 <mem_malloc+0x16c>
 8004ce6:	4b17      	ldr	r3, [pc, #92]	; (8004d44 <mem_malloc+0x1bc>)
 8004ce8:	f240 22d6 	movw	r2, #726	; 0x2d6
 8004cec:	4919      	ldr	r1, [pc, #100]	; (8004d54 <mem_malloc+0x1cc>)
 8004cee:	4817      	ldr	r0, [pc, #92]	; (8004d4c <mem_malloc+0x1c4>)
 8004cf0:	f00b ff8c 	bl	8010c0c <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	f003 0303 	and.w	r3, r3, #3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d006      	beq.n	8004d0c <mem_malloc+0x184>
 8004cfe:	4b11      	ldr	r3, [pc, #68]	; (8004d44 <mem_malloc+0x1bc>)
 8004d00:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8004d04:	4914      	ldr	r1, [pc, #80]	; (8004d58 <mem_malloc+0x1d0>)
 8004d06:	4811      	ldr	r0, [pc, #68]	; (8004d4c <mem_malloc+0x1c4>)
 8004d08:	f00b ff80 	bl	8010c0c <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	3308      	adds	r3, #8
 8004d10:	e00d      	b.n	8004d2e <mem_malloc+0x1a6>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8004d12:	4b0a      	ldr	r3, [pc, #40]	; (8004d3c <mem_malloc+0x1b4>)
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	8bfb      	ldrh	r3, [r7, #30]
 8004d18:	4413      	add	r3, r2
 8004d1a:	881b      	ldrh	r3, [r3, #0]
 8004d1c:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8004d1e:	8bfa      	ldrh	r2, [r7, #30]
 8004d20:	88fb      	ldrh	r3, [r7, #6]
 8004d22:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8004d26:	429a      	cmp	r2, r3
 8004d28:	f4ff af51 	bcc.w	8004bce <mem_malloc+0x46>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3720      	adds	r7, #32
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	20000204 	.word	0x20000204
 8004d3c:	200001fc 	.word	0x200001fc
 8004d40:	20000200 	.word	0x20000200
 8004d44:	08014470 	.word	0x08014470
 8004d48:	080145cc 	.word	0x080145cc
 8004d4c:	080144b8 	.word	0x080144b8
 8004d50:	080145e8 	.word	0x080145e8
 8004d54:	08014618 	.word	0x08014618
 8004d58:	08014648 	.word	0x08014648

08004d5c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	3303      	adds	r3, #3
 8004d72:	f023 0303 	bic.w	r3, r3, #3
 8004d76:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8004d78:	2300      	movs	r3, #0
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	e011      	b.n	8004da2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	881b      	ldrh	r3, [r3, #0]
 8004d94:	461a      	mov	r2, r3
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	4413      	add	r3, r2
 8004d9a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	60fb      	str	r3, [r7, #12]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	885b      	ldrh	r3, [r3, #2]
 8004da6:	461a      	mov	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	4293      	cmp	r3, r2
 8004dac:	dbe7      	blt.n	8004d7e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8004dae:	bf00      	nop
 8004db0:	3714      	adds	r7, #20
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bc80      	pop	{r7}
 8004db6:	4770      	bx	lr

08004db8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	80fb      	strh	r3, [r7, #6]
 8004dc2:	e009      	b.n	8004dd8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8004dc4:	88fb      	ldrh	r3, [r7, #6]
 8004dc6:	4a08      	ldr	r2, [pc, #32]	; (8004de8 <memp_init+0x30>)
 8004dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7ff ffc5 	bl	8004d5c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004dd2:	88fb      	ldrh	r3, [r7, #6]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	80fb      	strh	r3, [r7, #6]
 8004dd8:	88fb      	ldrh	r3, [r7, #6]
 8004dda:	2b08      	cmp	r3, #8
 8004ddc:	d9f2      	bls.n	8004dc4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8004dde:	bf00      	nop
 8004de0:	3708      	adds	r7, #8
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	08016410 	.word	0x08016410

08004dec <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d012      	beq.n	8004e28 <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	6812      	ldr	r2, [r2, #0]
 8004e0a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f003 0303 	and.w	r3, r3, #3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d006      	beq.n	8004e24 <do_memp_malloc_pool+0x38>
 8004e16:	4b07      	ldr	r3, [pc, #28]	; (8004e34 <do_memp_malloc_pool+0x48>)
 8004e18:	f240 1249 	movw	r2, #329	; 0x149
 8004e1c:	4906      	ldr	r1, [pc, #24]	; (8004e38 <do_memp_malloc_pool+0x4c>)
 8004e1e:	4807      	ldr	r0, [pc, #28]	; (8004e3c <do_memp_malloc_pool+0x50>)
 8004e20:	f00b fef4 	bl	8010c0c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	e000      	b.n	8004e2a <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	0801466c 	.word	0x0801466c
 8004e38:	0801469c 	.word	0x0801469c
 8004e3c:	080146c0 	.word	0x080146c0

08004e40 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	4603      	mov	r3, r0
 8004e48:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004e4a:	79fb      	ldrb	r3, [r7, #7]
 8004e4c:	2b08      	cmp	r3, #8
 8004e4e:	d908      	bls.n	8004e62 <memp_malloc+0x22>
 8004e50:	4b0a      	ldr	r3, [pc, #40]	; (8004e7c <memp_malloc+0x3c>)
 8004e52:	f240 1287 	movw	r2, #391	; 0x187
 8004e56:	490a      	ldr	r1, [pc, #40]	; (8004e80 <memp_malloc+0x40>)
 8004e58:	480a      	ldr	r0, [pc, #40]	; (8004e84 <memp_malloc+0x44>)
 8004e5a:	f00b fed7 	bl	8010c0c <iprintf>
 8004e5e:	2300      	movs	r3, #0
 8004e60:	e008      	b.n	8004e74 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8004e62:	79fb      	ldrb	r3, [r7, #7]
 8004e64:	4a08      	ldr	r2, [pc, #32]	; (8004e88 <memp_malloc+0x48>)
 8004e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7ff ffbe 	bl	8004dec <do_memp_malloc_pool>
 8004e70:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8004e72:	68fb      	ldr	r3, [r7, #12]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	0801466c 	.word	0x0801466c
 8004e80:	080146fc 	.word	0x080146fc
 8004e84:	080146c0 	.word	0x080146c0
 8004e88:	08016410 	.word	0x08016410

08004e8c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	f003 0303 	and.w	r3, r3, #3
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d006      	beq.n	8004eae <do_memp_free_pool+0x22>
 8004ea0:	4b0a      	ldr	r3, [pc, #40]	; (8004ecc <do_memp_free_pool+0x40>)
 8004ea2:	f240 129d 	movw	r2, #413	; 0x19d
 8004ea6:	490a      	ldr	r1, [pc, #40]	; (8004ed0 <do_memp_free_pool+0x44>)
 8004ea8:	480a      	ldr	r0, [pc, #40]	; (8004ed4 <do_memp_free_pool+0x48>)
 8004eaa:	f00b feaf 	bl	8010c0c <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004ec4:	bf00      	nop
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	0801466c 	.word	0x0801466c
 8004ed0:	0801471c 	.word	0x0801471c
 8004ed4:	080146c0 	.word	0x080146c0

08004ed8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	4603      	mov	r3, r0
 8004ee0:	6039      	str	r1, [r7, #0]
 8004ee2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004ee4:	79fb      	ldrb	r3, [r7, #7]
 8004ee6:	2b08      	cmp	r3, #8
 8004ee8:	d907      	bls.n	8004efa <memp_free+0x22>
 8004eea:	4b0c      	ldr	r3, [pc, #48]	; (8004f1c <memp_free+0x44>)
 8004eec:	f240 12db 	movw	r2, #475	; 0x1db
 8004ef0:	490b      	ldr	r1, [pc, #44]	; (8004f20 <memp_free+0x48>)
 8004ef2:	480c      	ldr	r0, [pc, #48]	; (8004f24 <memp_free+0x4c>)
 8004ef4:	f00b fe8a 	bl	8010c0c <iprintf>
 8004ef8:	e00c      	b.n	8004f14 <memp_free+0x3c>

  if (mem == NULL) {
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d008      	beq.n	8004f12 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004f00:	79fb      	ldrb	r3, [r7, #7]
 8004f02:	4a09      	ldr	r2, [pc, #36]	; (8004f28 <memp_free+0x50>)
 8004f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f08:	6839      	ldr	r1, [r7, #0]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7ff ffbe 	bl	8004e8c <do_memp_free_pool>
 8004f10:	e000      	b.n	8004f14 <memp_free+0x3c>
    return;
 8004f12:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	0801466c 	.word	0x0801466c
 8004f20:	0801473c 	.word	0x0801473c
 8004f24:	080146c0 	.word	0x080146c0
 8004f28:	08016410 	.word	0x08016410

08004f2c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8004f30:	bf00      	nop
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bc80      	pop	{r7}
 8004f36:	4770      	bx	lr

08004f38 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
 8004f44:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d105      	bne.n	8004f58 <netif_add+0x20>
 8004f4c:	4b21      	ldr	r3, [pc, #132]	; (8004fd4 <netif_add+0x9c>)
 8004f4e:	22fb      	movs	r2, #251	; 0xfb
 8004f50:	4921      	ldr	r1, [pc, #132]	; (8004fd8 <netif_add+0xa0>)
 8004f52:	4822      	ldr	r0, [pc, #136]	; (8004fdc <netif_add+0xa4>)
 8004f54:	f00b fe5a 	bl	8010c0c <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2203      	movs	r2, #3
 8004f76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	69ba      	ldr	r2, [r7, #24]
 8004f84:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 8004f86:	4b16      	ldr	r3, [pc, #88]	; (8004fe0 <netif_add+0xa8>)
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	1c5a      	adds	r2, r3, #1
 8004f8c:	b2d1      	uxtb	r1, r2
 8004f8e:	4a14      	ldr	r2, [pc, #80]	; (8004fe0 <netif_add+0xa8>)
 8004f90:	7011      	strb	r1, [r2, #0]
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6a3a      	ldr	r2, [r7, #32]
 8004f9c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	68b9      	ldr	r1, [r7, #8]
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f000 f81f 	bl	8004fe8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	4798      	blx	r3
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <netif_add+0x82>
    return NULL;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	e007      	b.n	8004fca <netif_add+0x92>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8004fba:	4b0a      	ldr	r3, [pc, #40]	; (8004fe4 <netif_add+0xac>)
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8004fc2:	4a08      	ldr	r2, [pc, #32]	; (8004fe4 <netif_add+0xac>)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	08014758 	.word	0x08014758
 8004fd8:	0801478c 	.word	0x0801478c
 8004fdc:	080147a4 	.word	0x080147a4
 8004fe0:	2000022c 	.word	0x2000022c
 8004fe4:	200038b4 	.word	0x200038b4

08004fe8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
 8004ff4:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <netif_set_addr+0x1c>
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d10c      	bne.n	800501e <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8005004:	68b9      	ldr	r1, [r7, #8]
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f000 f81a 	bl	8005040 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800500c:	6879      	ldr	r1, [r7, #4]
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f000 f861 	bl	80050d6 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8005014:	6839      	ldr	r1, [r7, #0]
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f000 f84a 	bl	80050b0 <netif_set_gw>
 800501c:	e00b      	b.n	8005036 <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 800501e:	6879      	ldr	r1, [r7, #4]
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f000 f858 	bl	80050d6 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8005026:	6839      	ldr	r1, [r7, #0]
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f000 f841 	bl	80050b0 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800502e:	68b9      	ldr	r1, [r7, #8]
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f000 f805 	bl	8005040 <netif_set_ipaddr>
  }
}
 8005036:	bf00      	nop
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d003      	beq.n	8005058 <netif_set_ipaddr+0x18>
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	60fb      	str	r3, [r7, #12]
 8005056:	e002      	b.n	800505e <netif_set_ipaddr+0x1e>
 8005058:	4b14      	ldr	r3, [pc, #80]	; (80050ac <netif_set_ipaddr+0x6c>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	3304      	adds	r3, #4
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	429a      	cmp	r2, r3
 8005068:	d01c      	beq.n	80050a4 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	3304      	adds	r3, #4
 800506e:	f107 020c 	add.w	r2, r7, #12
 8005072:	4611      	mov	r1, r2
 8005074:	4618      	mov	r0, r3
 8005076:	f002 fa4b 	bl	8007510 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	3304      	adds	r3, #4
 800507e:	f107 020c 	add.w	r2, r7, #12
 8005082:	4611      	mov	r1, r2
 8005084:	4618      	mov	r0, r3
 8005086:	f006 fabb 	bl	800b600 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d002      	beq.n	8005096 <netif_set_ipaddr+0x56>
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	e000      	b.n	8005098 <netif_set_ipaddr+0x58>
 8005096:	2300      	movs	r3, #0
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800509c:	2101      	movs	r1, #1
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f85d 	bl	800515e <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 80050a4:	bf00      	nop
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	08016474 	.word	0x08016474

080050b0 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d002      	beq.n	80050c6 <netif_set_gw+0x16>
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	e000      	b.n	80050c8 <netif_set_gw+0x18>
 80050c6:	2300      	movs	r3, #0
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bc80      	pop	{r7}
 80050d4:	4770      	bx	lr

080050d6 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 80050d6:	b480      	push	{r7}
 80050d8:	b083      	sub	sp, #12
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
 80050de:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d002      	beq.n	80050ec <netif_set_netmask+0x16>
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	e000      	b.n	80050ee <netif_set_netmask+0x18>
 80050ec:	2300      	movs	r3, #0
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 80050f2:	bf00      	nop
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bc80      	pop	{r7}
 80050fa:	4770      	bx	lr

080050fc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005104:	4a03      	ldr	r2, [pc, #12]	; (8005114 <netif_set_default+0x18>)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800510a:	bf00      	nop
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	bc80      	pop	{r7}
 8005112:	4770      	bx	lr
 8005114:	200038b8 	.word	0x200038b8

08005118 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b00      	cmp	r3, #0
 800512c:	d113      	bne.n	8005156 <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005134:	f043 0301 	orr.w	r3, r3, #1
 8005138:	b2da      	uxtb	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005146:	f003 0304 	and.w	r3, r3, #4
 800514a:	2b00      	cmp	r3, #0
 800514c:	d003      	beq.n	8005156 <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800514e:	2103      	movs	r1, #3
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 f804 	bl	800515e <netif_issue_reports>
    }
  }
}
 8005156:	bf00      	nop
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b082      	sub	sp, #8
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
 8005166:	460b      	mov	r3, r1
 8005168:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800516a:	78fb      	ldrb	r3, [r7, #3]
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b00      	cmp	r3, #0
 8005172:	d011      	beq.n	8005198 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	3304      	adds	r3, #4
 8005178:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00c      	beq.n	8005198 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005184:	f003 0308 	and.w	r3, r3, #8
 8005188:	2b00      	cmp	r3, #0
 800518a:	d005      	beq.n	8005198 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	3304      	adds	r3, #4
 8005190:	4619      	mov	r1, r3
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f007 f966 	bl	800c464 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8005198:	bf00      	nop
 800519a:	3708      	adds	r7, #8
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d012      	beq.n	80051dc <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80051bc:	f023 0301 	bic.w	r3, r3, #1
 80051c0:	b2da      	uxtb	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80051ce:	f003 0308 	and.w	r3, r3, #8
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d002      	beq.n	80051dc <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f006 fd0a 	bl	800bbf0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80051dc:	bf00      	nop
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  if (netif) {
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d002      	beq.n	80051fa <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	683a      	ldr	r2, [r7, #0]
 80051f8:	61da      	str	r2, [r3, #28]
  }
}
 80051fa:	bf00      	nop
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	bc80      	pop	{r7}
 8005202:	4770      	bx	lr

08005204 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800520a:	4b0e      	ldr	r3, [pc, #56]	; (8005244 <pbuf_free_ooseq+0x40>)
 800520c:	2200      	movs	r2, #0
 800520e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005210:	4b0d      	ldr	r3, [pc, #52]	; (8005248 <pbuf_free_ooseq+0x44>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	607b      	str	r3, [r7, #4]
 8005216:	e00f      	b.n	8005238 <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521c:	2b00      	cmp	r3, #0
 800521e:	d008      	beq.n	8005232 <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005224:	4618      	mov	r0, r3
 8005226:	f001 fe4e 	bl	8006ec6 <tcp_segs_free>
      pcb->ooseq = NULL;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 8005230:	e005      	b.n	800523e <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	607b      	str	r3, [r7, #4]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1ec      	bne.n	8005218 <pbuf_free_ooseq+0x14>
    }
  }
}
 800523e:	3708      	adds	r7, #8
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	200038bc 	.word	0x200038bc
 8005248:	200038c4 	.word	0x200038c4

0800524c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800524c:	b480      	push	{r7}
 800524e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005250:	4b03      	ldr	r3, [pc, #12]	; (8005260 <pbuf_pool_is_empty+0x14>)
 8005252:	2201      	movs	r2, #1
 8005254:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005256:	bf00      	nop
 8005258:	46bd      	mov	sp, r7
 800525a:	bc80      	pop	{r7}
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	200038bc 	.word	0x200038bc

08005264 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b088      	sub	sp, #32
 8005268:	af00      	add	r7, sp, #0
 800526a:	4603      	mov	r3, r0
 800526c:	71fb      	strb	r3, [r7, #7]
 800526e:	460b      	mov	r3, r1
 8005270:	80bb      	strh	r3, [r7, #4]
 8005272:	4613      	mov	r3, r2
 8005274:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 8005276:	79fb      	ldrb	r3, [r7, #7]
 8005278:	2b04      	cmp	r3, #4
 800527a:	d81c      	bhi.n	80052b6 <pbuf_alloc+0x52>
 800527c:	a201      	add	r2, pc, #4	; (adr r2, 8005284 <pbuf_alloc+0x20>)
 800527e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005282:	bf00      	nop
 8005284:	08005299 	.word	0x08005299
 8005288:	0800529f 	.word	0x0800529f
 800528c:	080052a5 	.word	0x080052a5
 8005290:	080052ab 	.word	0x080052ab
 8005294:	080052b1 	.word	0x080052b1
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8005298:	2336      	movs	r3, #54	; 0x36
 800529a:	82fb      	strh	r3, [r7, #22]
    break;
 800529c:	e014      	b.n	80052c8 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800529e:	2322      	movs	r3, #34	; 0x22
 80052a0:	82fb      	strh	r3, [r7, #22]
    break;
 80052a2:	e011      	b.n	80052c8 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80052a4:	230e      	movs	r3, #14
 80052a6:	82fb      	strh	r3, [r7, #22]
    break;
 80052a8:	e00e      	b.n	80052c8 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80052aa:	2300      	movs	r3, #0
 80052ac:	82fb      	strh	r3, [r7, #22]
    break;
 80052ae:	e00b      	b.n	80052c8 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 80052b0:	2300      	movs	r3, #0
 80052b2:	82fb      	strh	r3, [r7, #22]
    break;
 80052b4:	e008      	b.n	80052c8 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 80052b6:	4ba5      	ldr	r3, [pc, #660]	; (800554c <pbuf_alloc+0x2e8>)
 80052b8:	f44f 728b 	mov.w	r2, #278	; 0x116
 80052bc:	49a4      	ldr	r1, [pc, #656]	; (8005550 <pbuf_alloc+0x2ec>)
 80052be:	48a5      	ldr	r0, [pc, #660]	; (8005554 <pbuf_alloc+0x2f0>)
 80052c0:	f00b fca4 	bl	8010c0c <iprintf>
    return NULL;
 80052c4:	2300      	movs	r3, #0
 80052c6:	e15d      	b.n	8005584 <pbuf_alloc+0x320>
  }

  switch (type) {
 80052c8:	79bb      	ldrb	r3, [r7, #6]
 80052ca:	2b03      	cmp	r3, #3
 80052cc:	f200 8134 	bhi.w	8005538 <pbuf_alloc+0x2d4>
 80052d0:	a201      	add	r2, pc, #4	; (adr r2, 80052d8 <pbuf_alloc+0x74>)
 80052d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d6:	bf00      	nop
 80052d8:	08005479 	.word	0x08005479
 80052dc:	08005505 	.word	0x08005505
 80052e0:	08005505 	.word	0x08005505
 80052e4:	080052e9 	.word	0x080052e9
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80052e8:	2008      	movs	r0, #8
 80052ea:	f7ff fda9 	bl	8004e40 <memp_malloc>
 80052ee:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d103      	bne.n	80052fe <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 80052f6:	f7ff ffa9 	bl	800524c <pbuf_pool_is_empty>
      return NULL;
 80052fa:	2300      	movs	r3, #0
 80052fc:	e142      	b.n	8005584 <pbuf_alloc+0x320>
    }
    p->type = type;
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	79ba      	ldrb	r2, [r7, #6]
 8005302:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	2200      	movs	r2, #0
 8005308:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800530a:	8afb      	ldrh	r3, [r7, #22]
 800530c:	3310      	adds	r3, #16
 800530e:	69fa      	ldr	r2, [r7, #28]
 8005310:	4413      	add	r3, r2
 8005312:	3303      	adds	r3, #3
 8005314:	f023 0303 	bic.w	r3, r3, #3
 8005318:	461a      	mov	r2, r3
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f003 0303 	and.w	r3, r3, #3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d006      	beq.n	8005338 <pbuf_alloc+0xd4>
 800532a:	4b88      	ldr	r3, [pc, #544]	; (800554c <pbuf_alloc+0x2e8>)
 800532c:	f240 1229 	movw	r2, #297	; 0x129
 8005330:	4989      	ldr	r1, [pc, #548]	; (8005558 <pbuf_alloc+0x2f4>)
 8005332:	4888      	ldr	r0, [pc, #544]	; (8005554 <pbuf_alloc+0x2f0>)
 8005334:	f00b fc6a 	bl	8010c0c <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	88ba      	ldrh	r2, [r7, #4]
 800533c:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800533e:	8afb      	ldrh	r3, [r7, #22]
 8005340:	3303      	adds	r3, #3
 8005342:	f023 0303 	bic.w	r3, r3, #3
 8005346:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 800534a:	88bb      	ldrh	r3, [r7, #4]
 800534c:	4293      	cmp	r3, r2
 800534e:	bf28      	it	cs
 8005350:	4613      	movcs	r3, r2
 8005352:	b29a      	uxth	r2, r3
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	69fa      	ldr	r2, [r7, #28]
 800535e:	8952      	ldrh	r2, [r2, #10]
 8005360:	441a      	add	r2, r3
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8005368:	429a      	cmp	r2, r3
 800536a:	d906      	bls.n	800537a <pbuf_alloc+0x116>
 800536c:	4b77      	ldr	r3, [pc, #476]	; (800554c <pbuf_alloc+0x2e8>)
 800536e:	f44f 7298 	mov.w	r2, #304	; 0x130
 8005372:	497a      	ldr	r1, [pc, #488]	; (800555c <pbuf_alloc+0x2f8>)
 8005374:	4877      	ldr	r0, [pc, #476]	; (8005554 <pbuf_alloc+0x2f0>)
 8005376:	f00b fc49 	bl	8010c0c <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800537a:	8afb      	ldrh	r3, [r7, #22]
 800537c:	3303      	adds	r3, #3
 800537e:	f023 0303 	bic.w	r3, r3, #3
 8005382:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005386:	d106      	bne.n	8005396 <pbuf_alloc+0x132>
 8005388:	4b70      	ldr	r3, [pc, #448]	; (800554c <pbuf_alloc+0x2e8>)
 800538a:	f44f 7299 	mov.w	r2, #306	; 0x132
 800538e:	4974      	ldr	r1, [pc, #464]	; (8005560 <pbuf_alloc+0x2fc>)
 8005390:	4870      	ldr	r0, [pc, #448]	; (8005554 <pbuf_alloc+0x2f0>)
 8005392:	f00b fc3b 	bl	8010c0c <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	2201      	movs	r2, #1
 800539a:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 80053a0:	88bb      	ldrh	r3, [r7, #4]
 80053a2:	69fa      	ldr	r2, [r7, #28]
 80053a4:	8952      	ldrh	r2, [r2, #10]
 80053a6:	1a9b      	subs	r3, r3, r2
 80053a8:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 80053aa:	e061      	b.n	8005470 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80053ac:	2008      	movs	r0, #8
 80053ae:	f7ff fd47 	bl	8004e40 <memp_malloc>
 80053b2:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d106      	bne.n	80053c8 <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 80053ba:	f7ff ff47 	bl	800524c <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 80053be:	69f8      	ldr	r0, [r7, #28]
 80053c0:	f000 fac2 	bl	8005948 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 80053c4:	2300      	movs	r3, #0
 80053c6:	e0dd      	b.n	8005584 <pbuf_alloc+0x320>
      }
      q->type = type;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	79ba      	ldrb	r2, [r7, #6]
 80053cc:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80053e6:	4293      	cmp	r3, r2
 80053e8:	dd06      	ble.n	80053f8 <pbuf_alloc+0x194>
 80053ea:	4b58      	ldr	r3, [pc, #352]	; (800554c <pbuf_alloc+0x2e8>)
 80053ec:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 80053f0:	495c      	ldr	r1, [pc, #368]	; (8005564 <pbuf_alloc+0x300>)
 80053f2:	4858      	ldr	r0, [pc, #352]	; (8005554 <pbuf_alloc+0x2f0>)
 80053f4:	f00b fc0a 	bl	8010c0c <iprintf>
      q->tot_len = (u16_t)rem_len;
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	b29b      	uxth	r3, r3
 8005404:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005408:	bf28      	it	cs
 800540a:	f44f 7314 	movcs.w	r3, #592	; 0x250
 800540e:	b29a      	uxth	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f103 0210 	add.w	r2, r3, #16
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f003 0303 	and.w	r3, r3, #3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d006      	beq.n	8005438 <pbuf_alloc+0x1d4>
 800542a:	4b48      	ldr	r3, [pc, #288]	; (800554c <pbuf_alloc+0x2e8>)
 800542c:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8005430:	494d      	ldr	r1, [pc, #308]	; (8005568 <pbuf_alloc+0x304>)
 8005432:	4848      	ldr	r0, [pc, #288]	; (8005554 <pbuf_alloc+0x2f0>)
 8005434:	f00b fbea 	bl	8010c0c <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	69fa      	ldr	r2, [r7, #28]
 800543e:	8952      	ldrh	r2, [r2, #10]
 8005440:	441a      	add	r2, r3
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8005448:	429a      	cmp	r2, r3
 800544a:	d906      	bls.n	800545a <pbuf_alloc+0x1f6>
 800544c:	4b3f      	ldr	r3, [pc, #252]	; (800554c <pbuf_alloc+0x2e8>)
 800544e:	f240 1255 	movw	r2, #341	; 0x155
 8005452:	4942      	ldr	r1, [pc, #264]	; (800555c <pbuf_alloc+0x2f8>)
 8005454:	483f      	ldr	r0, [pc, #252]	; (8005554 <pbuf_alloc+0x2f0>)
 8005456:	f00b fbd9 	bl	8010c0c <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2201      	movs	r2, #1
 800545e:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	895b      	ldrh	r3, [r3, #10]
 8005464:	461a      	mov	r2, r3
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	1a9b      	subs	r3, r3, r2
 800546a:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	2b00      	cmp	r3, #0
 8005474:	dc9a      	bgt.n	80053ac <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8005476:	e07e      	b.n	8005576 <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8005478:	8afb      	ldrh	r3, [r7, #22]
 800547a:	3313      	adds	r3, #19
 800547c:	b29b      	uxth	r3, r3
 800547e:	f023 0303 	bic.w	r3, r3, #3
 8005482:	b29a      	uxth	r2, r3
 8005484:	88bb      	ldrh	r3, [r7, #4]
 8005486:	3303      	adds	r3, #3
 8005488:	b29b      	uxth	r3, r3
 800548a:	f023 0303 	bic.w	r3, r3, #3
 800548e:	b29b      	uxth	r3, r3
 8005490:	4413      	add	r3, r2
 8005492:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8005494:	897a      	ldrh	r2, [r7, #10]
 8005496:	88bb      	ldrh	r3, [r7, #4]
 8005498:	3303      	adds	r3, #3
 800549a:	f023 0303 	bic.w	r3, r3, #3
 800549e:	429a      	cmp	r2, r3
 80054a0:	d201      	bcs.n	80054a6 <pbuf_alloc+0x242>
        return NULL;
 80054a2:	2300      	movs	r3, #0
 80054a4:	e06e      	b.n	8005584 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 80054a6:	897b      	ldrh	r3, [r7, #10]
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7ff fb6d 	bl	8004b88 <mem_malloc>
 80054ae:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <pbuf_alloc+0x256>
      return NULL;
 80054b6:	2300      	movs	r3, #0
 80054b8:	e064      	b.n	8005584 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 80054ba:	8afb      	ldrh	r3, [r7, #22]
 80054bc:	3310      	adds	r3, #16
 80054be:	69fa      	ldr	r2, [r7, #28]
 80054c0:	4413      	add	r3, r2
 80054c2:	3303      	adds	r3, #3
 80054c4:	f023 0303 	bic.w	r3, r3, #3
 80054c8:	461a      	mov	r2, r3
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	88ba      	ldrh	r2, [r7, #4]
 80054d2:	811a      	strh	r2, [r3, #8]
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	891a      	ldrh	r2, [r3, #8]
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	2200      	movs	r2, #0
 80054e0:	601a      	str	r2, [r3, #0]
    p->type = type;
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	79ba      	ldrb	r2, [r7, #6]
 80054e6:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f003 0303 	and.w	r3, r3, #3
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d03f      	beq.n	8005574 <pbuf_alloc+0x310>
 80054f4:	4b15      	ldr	r3, [pc, #84]	; (800554c <pbuf_alloc+0x2e8>)
 80054f6:	f240 1277 	movw	r2, #375	; 0x177
 80054fa:	491c      	ldr	r1, [pc, #112]	; (800556c <pbuf_alloc+0x308>)
 80054fc:	4815      	ldr	r0, [pc, #84]	; (8005554 <pbuf_alloc+0x2f0>)
 80054fe:	f00b fb85 	bl	8010c0c <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 8005502:	e037      	b.n	8005574 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005504:	2007      	movs	r0, #7
 8005506:	f7ff fc9b 	bl	8004e40 <memp_malloc>
 800550a:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 8005512:	2300      	movs	r3, #0
 8005514:	e036      	b.n	8005584 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	2200      	movs	r2, #0
 800551a:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	88ba      	ldrh	r2, [r7, #4]
 8005520:	811a      	strh	r2, [r3, #8]
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	891a      	ldrh	r2, [r3, #8]
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	2200      	movs	r2, #0
 800552e:	601a      	str	r2, [r3, #0]
    p->type = type;
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	79ba      	ldrb	r2, [r7, #6]
 8005534:	731a      	strb	r2, [r3, #12]
    break;
 8005536:	e01e      	b.n	8005576 <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005538:	4b04      	ldr	r3, [pc, #16]	; (800554c <pbuf_alloc+0x2e8>)
 800553a:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800553e:	490c      	ldr	r1, [pc, #48]	; (8005570 <pbuf_alloc+0x30c>)
 8005540:	4804      	ldr	r0, [pc, #16]	; (8005554 <pbuf_alloc+0x2f0>)
 8005542:	f00b fb63 	bl	8010c0c <iprintf>
    return NULL;
 8005546:	2300      	movs	r3, #0
 8005548:	e01c      	b.n	8005584 <pbuf_alloc+0x320>
 800554a:	bf00      	nop
 800554c:	080147cc 	.word	0x080147cc
 8005550:	080147fc 	.word	0x080147fc
 8005554:	08014818 	.word	0x08014818
 8005558:	08014840 	.word	0x08014840
 800555c:	08014870 	.word	0x08014870
 8005560:	080148a4 	.word	0x080148a4
 8005564:	080148d8 	.word	0x080148d8
 8005568:	080148ec 	.word	0x080148ec
 800556c:	0801491c 	.word	0x0801491c
 8005570:	08014948 	.word	0x08014948
    break;
 8005574:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	2201      	movs	r2, #1
 800557a:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	2200      	movs	r2, #0
 8005580:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005582:	69fb      	ldr	r3, [r7, #28]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3720      	adds	r7, #32
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	603b      	str	r3, [r7, #0]
 8005594:	4603      	mov	r3, r0
 8005596:	71fb      	strb	r3, [r7, #7]
 8005598:	460b      	mov	r3, r1
 800559a:	80bb      	strh	r3, [r7, #4]
 800559c:	4613      	mov	r3, r2
 800559e:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 80055a0:	79fb      	ldrb	r3, [r7, #7]
 80055a2:	2b04      	cmp	r3, #4
 80055a4:	d81b      	bhi.n	80055de <pbuf_alloced_custom+0x52>
 80055a6:	a201      	add	r2, pc, #4	; (adr r2, 80055ac <pbuf_alloced_custom+0x20>)
 80055a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ac:	080055c1 	.word	0x080055c1
 80055b0:	080055c7 	.word	0x080055c7
 80055b4:	080055cd 	.word	0x080055cd
 80055b8:	080055d3 	.word	0x080055d3
 80055bc:	080055d9 	.word	0x080055d9
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80055c0:	2336      	movs	r3, #54	; 0x36
 80055c2:	81fb      	strh	r3, [r7, #14]
    break;
 80055c4:	e014      	b.n	80055f0 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80055c6:	2322      	movs	r3, #34	; 0x22
 80055c8:	81fb      	strh	r3, [r7, #14]
    break;
 80055ca:	e011      	b.n	80055f0 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80055cc:	230e      	movs	r3, #14
 80055ce:	81fb      	strh	r3, [r7, #14]
    break;
 80055d0:	e00e      	b.n	80055f0 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80055d2:	2300      	movs	r3, #0
 80055d4:	81fb      	strh	r3, [r7, #14]
    break;
 80055d6:	e00b      	b.n	80055f0 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 80055d8:	2300      	movs	r3, #0
 80055da:	81fb      	strh	r3, [r7, #14]
    break;
 80055dc:	e008      	b.n	80055f0 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 80055de:	4b1d      	ldr	r3, [pc, #116]	; (8005654 <pbuf_alloced_custom+0xc8>)
 80055e0:	f240 12c5 	movw	r2, #453	; 0x1c5
 80055e4:	491c      	ldr	r1, [pc, #112]	; (8005658 <pbuf_alloced_custom+0xcc>)
 80055e6:	481d      	ldr	r0, [pc, #116]	; (800565c <pbuf_alloced_custom+0xd0>)
 80055e8:	f00b fb10 	bl	8010c0c <iprintf>
    return NULL;
 80055ec:	2300      	movs	r3, #0
 80055ee:	e02d      	b.n	800564c <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80055f0:	89fb      	ldrh	r3, [r7, #14]
 80055f2:	3303      	adds	r3, #3
 80055f4:	f023 0203 	bic.w	r2, r3, #3
 80055f8:	88bb      	ldrh	r3, [r7, #4]
 80055fa:	441a      	add	r2, r3
 80055fc:	8bbb      	ldrh	r3, [r7, #28]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d901      	bls.n	8005606 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005602:	2300      	movs	r3, #0
 8005604:	e022      	b.n	800564c <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	2200      	movs	r2, #0
 800560a:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d008      	beq.n	8005624 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005612:	89fb      	ldrh	r3, [r7, #14]
 8005614:	3303      	adds	r3, #3
 8005616:	f023 0303 	bic.w	r3, r3, #3
 800561a:	69ba      	ldr	r2, [r7, #24]
 800561c:	441a      	add	r2, r3
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	605a      	str	r2, [r3, #4]
 8005622:	e002      	b.n	800562a <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	2200      	movs	r2, #0
 8005628:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	2202      	movs	r2, #2
 800562e:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	88ba      	ldrh	r2, [r7, #4]
 8005634:	811a      	strh	r2, [r3, #8]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	891a      	ldrh	r2, [r3, #8]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	79ba      	ldrb	r2, [r7, #6]
 8005642:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	2201      	movs	r2, #1
 8005648:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800564a:	683b      	ldr	r3, [r7, #0]
}
 800564c:	4618      	mov	r0, r3
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	080147cc 	.word	0x080147cc
 8005658:	08014964 	.word	0x08014964
 800565c:	08014818 	.word	0x08014818

08005660 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	460b      	mov	r3, r1
 800566a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d106      	bne.n	8005680 <pbuf_realloc+0x20>
 8005672:	4b4b      	ldr	r3, [pc, #300]	; (80057a0 <pbuf_realloc+0x140>)
 8005674:	f240 12f3 	movw	r2, #499	; 0x1f3
 8005678:	494a      	ldr	r1, [pc, #296]	; (80057a4 <pbuf_realloc+0x144>)
 800567a:	484b      	ldr	r0, [pc, #300]	; (80057a8 <pbuf_realloc+0x148>)
 800567c:	f00b fac6 	bl	8010c0c <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	7b1b      	ldrb	r3, [r3, #12]
 8005684:	2b03      	cmp	r3, #3
 8005686:	d012      	beq.n	80056ae <pbuf_realloc+0x4e>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	7b1b      	ldrb	r3, [r3, #12]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d00e      	beq.n	80056ae <pbuf_realloc+0x4e>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	7b1b      	ldrb	r3, [r3, #12]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00a      	beq.n	80056ae <pbuf_realloc+0x4e>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	7b1b      	ldrb	r3, [r3, #12]
 800569c:	2b02      	cmp	r3, #2
 800569e:	d006      	beq.n	80056ae <pbuf_realloc+0x4e>
 80056a0:	4b3f      	ldr	r3, [pc, #252]	; (80057a0 <pbuf_realloc+0x140>)
 80056a2:	f240 12f7 	movw	r2, #503	; 0x1f7
 80056a6:	4941      	ldr	r1, [pc, #260]	; (80057ac <pbuf_realloc+0x14c>)
 80056a8:	483f      	ldr	r0, [pc, #252]	; (80057a8 <pbuf_realloc+0x148>)
 80056aa:	f00b faaf 	bl	8010c0c <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	891b      	ldrh	r3, [r3, #8]
 80056b2:	887a      	ldrh	r2, [r7, #2]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d26f      	bcs.n	8005798 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 80056b8:	887b      	ldrh	r3, [r7, #2]
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	8912      	ldrh	r2, [r2, #8]
 80056be:	1a9b      	subs	r3, r3, r2
 80056c0:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80056c2:	887b      	ldrh	r3, [r7, #2]
 80056c4:	827b      	strh	r3, [r7, #18]
  q = p;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80056ca:	e025      	b.n	8005718 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	895b      	ldrh	r3, [r3, #10]
 80056d0:	8a7a      	ldrh	r2, [r7, #18]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80056dc:	4293      	cmp	r3, r2
 80056de:	dd06      	ble.n	80056ee <pbuf_realloc+0x8e>
 80056e0:	4b2f      	ldr	r3, [pc, #188]	; (80057a0 <pbuf_realloc+0x140>)
 80056e2:	f240 220b 	movw	r2, #523	; 0x20b
 80056e6:	4932      	ldr	r1, [pc, #200]	; (80057b0 <pbuf_realloc+0x150>)
 80056e8:	482f      	ldr	r0, [pc, #188]	; (80057a8 <pbuf_realloc+0x148>)
 80056ea:	f00b fa8f 	bl	8010c0c <iprintf>
    q->tot_len += (u16_t)grow;
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	891a      	ldrh	r2, [r3, #8]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	4413      	add	r3, r2
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d106      	bne.n	8005718 <pbuf_realloc+0xb8>
 800570a:	4b25      	ldr	r3, [pc, #148]	; (80057a0 <pbuf_realloc+0x140>)
 800570c:	f240 220f 	movw	r2, #527	; 0x20f
 8005710:	4928      	ldr	r1, [pc, #160]	; (80057b4 <pbuf_realloc+0x154>)
 8005712:	4825      	ldr	r0, [pc, #148]	; (80057a8 <pbuf_realloc+0x148>)
 8005714:	f00b fa7a 	bl	8010c0c <iprintf>
  while (rem_len > q->len) {
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	895b      	ldrh	r3, [r3, #10]
 800571c:	8a7a      	ldrh	r2, [r7, #18]
 800571e:	429a      	cmp	r2, r3
 8005720:	d8d4      	bhi.n	80056cc <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	7b1b      	ldrb	r3, [r3, #12]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d122      	bne.n	8005770 <pbuf_realloc+0x110>
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	895b      	ldrh	r3, [r3, #10]
 800572e:	8a7a      	ldrh	r2, [r7, #18]
 8005730:	429a      	cmp	r2, r3
 8005732:	d01d      	beq.n	8005770 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	7b5b      	ldrb	r3, [r3, #13]
 8005738:	f003 0302 	and.w	r3, r3, #2
 800573c:	2b00      	cmp	r3, #0
 800573e:	d117      	bne.n	8005770 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	461a      	mov	r2, r3
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	b29a      	uxth	r2, r3
 800574c:	8a7b      	ldrh	r3, [r7, #18]
 800574e:	4413      	add	r3, r2
 8005750:	b29b      	uxth	r3, r3
 8005752:	4619      	mov	r1, r3
 8005754:	6978      	ldr	r0, [r7, #20]
 8005756:	f7ff f93b 	bl	80049d0 <mem_trim>
 800575a:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d106      	bne.n	8005770 <pbuf_realloc+0x110>
 8005762:	4b0f      	ldr	r3, [pc, #60]	; (80057a0 <pbuf_realloc+0x140>)
 8005764:	f240 221d 	movw	r2, #541	; 0x21d
 8005768:	4913      	ldr	r1, [pc, #76]	; (80057b8 <pbuf_realloc+0x158>)
 800576a:	480f      	ldr	r0, [pc, #60]	; (80057a8 <pbuf_realloc+0x148>)
 800576c:	f00b fa4e 	bl	8010c0c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	8a7a      	ldrh	r2, [r7, #18]
 8005774:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	895a      	ldrh	r2, [r3, #10]
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d004      	beq.n	8005790 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4618      	mov	r0, r3
 800578c:	f000 f8dc 	bl	8005948 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	2200      	movs	r2, #0
 8005794:	601a      	str	r2, [r3, #0]
 8005796:	e000      	b.n	800579a <pbuf_realloc+0x13a>
    return;
 8005798:	bf00      	nop

}
 800579a:	3718      	adds	r7, #24
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	080147cc 	.word	0x080147cc
 80057a4:	08014988 	.word	0x08014988
 80057a8:	08014818 	.word	0x08014818
 80057ac:	080149a0 	.word	0x080149a0
 80057b0:	080149bc 	.word	0x080149bc
 80057b4:	080149d0 	.word	0x080149d0
 80057b8:	080149e8 	.word	0x080149e8

080057bc <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	460b      	mov	r3, r1
 80057c6:	807b      	strh	r3, [r7, #2]
 80057c8:	4613      	mov	r3, r2
 80057ca:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d106      	bne.n	80057e0 <pbuf_header_impl+0x24>
 80057d2:	4b46      	ldr	r3, [pc, #280]	; (80058ec <pbuf_header_impl+0x130>)
 80057d4:	f240 223f 	movw	r2, #575	; 0x23f
 80057d8:	4945      	ldr	r1, [pc, #276]	; (80058f0 <pbuf_header_impl+0x134>)
 80057da:	4846      	ldr	r0, [pc, #280]	; (80058f4 <pbuf_header_impl+0x138>)
 80057dc:	f00b fa16 	bl	8010c0c <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 80057e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d002      	beq.n	80057ee <pbuf_header_impl+0x32>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <pbuf_header_impl+0x36>
    return 0;
 80057ee:	2300      	movs	r3, #0
 80057f0:	e078      	b.n	80058e4 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 80057f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	da10      	bge.n	800581c <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 80057fa:	887b      	ldrh	r3, [r7, #2]
 80057fc:	425b      	negs	r3, r3
 80057fe:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	895b      	ldrh	r3, [r3, #10]
 8005804:	89fa      	ldrh	r2, [r7, #14]
 8005806:	429a      	cmp	r2, r3
 8005808:	d90a      	bls.n	8005820 <pbuf_header_impl+0x64>
 800580a:	4b38      	ldr	r3, [pc, #224]	; (80058ec <pbuf_header_impl+0x130>)
 800580c:	f240 2247 	movw	r2, #583	; 0x247
 8005810:	4939      	ldr	r1, [pc, #228]	; (80058f8 <pbuf_header_impl+0x13c>)
 8005812:	4838      	ldr	r0, [pc, #224]	; (80058f4 <pbuf_header_impl+0x138>)
 8005814:	f00b f9fa 	bl	8010c0c <iprintf>
 8005818:	2301      	movs	r3, #1
 800581a:	e063      	b.n	80058e4 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800581c:	887b      	ldrh	r3, [r7, #2]
 800581e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	7b1b      	ldrb	r3, [r3, #12]
 8005824:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800582c:	89bb      	ldrh	r3, [r7, #12]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d002      	beq.n	8005838 <pbuf_header_impl+0x7c>
 8005832:	89bb      	ldrh	r3, [r7, #12]
 8005834:	2b03      	cmp	r3, #3
 8005836:	d112      	bne.n	800585e <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685a      	ldr	r2, [r3, #4]
 800583c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005840:	425b      	negs	r3, r3
 8005842:	441a      	add	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	3310      	adds	r3, #16
 8005850:	429a      	cmp	r2, r3
 8005852:	d238      	bcs.n	80058c6 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	68ba      	ldr	r2, [r7, #8]
 8005858:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800585a:	2301      	movs	r3, #1
 800585c:	e042      	b.n	80058e4 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800585e:	89bb      	ldrh	r3, [r7, #12]
 8005860:	2b02      	cmp	r3, #2
 8005862:	d002      	beq.n	800586a <pbuf_header_impl+0xae>
 8005864:	89bb      	ldrh	r3, [r7, #12]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d124      	bne.n	80058b4 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800586a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800586e:	2b00      	cmp	r3, #0
 8005870:	da0d      	bge.n	800588e <pbuf_header_impl+0xd2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	895b      	ldrh	r3, [r3, #10]
 8005876:	89fa      	ldrh	r2, [r7, #14]
 8005878:	429a      	cmp	r2, r3
 800587a:	d808      	bhi.n	800588e <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005884:	425b      	negs	r3, r3
 8005886:	441a      	add	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	605a      	str	r2, [r3, #4]
 800588c:	e011      	b.n	80058b2 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800588e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005892:	2b00      	cmp	r3, #0
 8005894:	dd0b      	ble.n	80058ae <pbuf_header_impl+0xf2>
 8005896:	787b      	ldrb	r3, [r7, #1]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d008      	beq.n	80058ae <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685a      	ldr	r2, [r3, #4]
 80058a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80058a4:	425b      	negs	r3, r3
 80058a6:	441a      	add	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	605a      	str	r2, [r3, #4]
 80058ac:	e001      	b.n	80058b2 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e018      	b.n	80058e4 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80058b2:	e008      	b.n	80058c6 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 80058b4:	4b0d      	ldr	r3, [pc, #52]	; (80058ec <pbuf_header_impl+0x130>)
 80058b6:	f240 2277 	movw	r2, #631	; 0x277
 80058ba:	4910      	ldr	r1, [pc, #64]	; (80058fc <pbuf_header_impl+0x140>)
 80058bc:	480d      	ldr	r0, [pc, #52]	; (80058f4 <pbuf_header_impl+0x138>)
 80058be:	f00b f9a5 	bl	8010c0c <iprintf>
    return 1;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e00e      	b.n	80058e4 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	895a      	ldrh	r2, [r3, #10]
 80058ca:	887b      	ldrh	r3, [r7, #2]
 80058cc:	4413      	add	r3, r2
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	891a      	ldrh	r2, [r3, #8]
 80058d8:	887b      	ldrh	r3, [r7, #2]
 80058da:	4413      	add	r3, r2
 80058dc:	b29a      	uxth	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	080147cc 	.word	0x080147cc
 80058f0:	08014a04 	.word	0x08014a04
 80058f4:	08014818 	.word	0x08014818
 80058f8:	08014a10 	.word	0x08014a10
 80058fc:	08014a30 	.word	0x08014a30

08005900 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	460b      	mov	r3, r1
 800590a:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800590c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005910:	2200      	movs	r2, #0
 8005912:	4619      	mov	r1, r3
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f7ff ff51 	bl	80057bc <pbuf_header_impl>
 800591a:	4603      	mov	r3, r0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	460b      	mov	r3, r1
 800592e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8005930:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005934:	2201      	movs	r2, #1
 8005936:	4619      	mov	r1, r3
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f7ff ff3f 	bl	80057bc <pbuf_header_impl>
 800593e:	4603      	mov	r3, r0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3708      	adds	r7, #8
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d10b      	bne.n	800596e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d106      	bne.n	800596a <pbuf_free+0x22>
 800595c:	4b3e      	ldr	r3, [pc, #248]	; (8005a58 <pbuf_free+0x110>)
 800595e:	f240 22d2 	movw	r2, #722	; 0x2d2
 8005962:	493e      	ldr	r1, [pc, #248]	; (8005a5c <pbuf_free+0x114>)
 8005964:	483e      	ldr	r0, [pc, #248]	; (8005a60 <pbuf_free+0x118>)
 8005966:	f00b f951 	bl	8010c0c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800596a:	2300      	movs	r3, #0
 800596c:	e070      	b.n	8005a50 <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	7b1b      	ldrb	r3, [r3, #12]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d012      	beq.n	800599c <pbuf_free+0x54>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	7b1b      	ldrb	r3, [r3, #12]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d00e      	beq.n	800599c <pbuf_free+0x54>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	7b1b      	ldrb	r3, [r3, #12]
 8005982:	2b02      	cmp	r3, #2
 8005984:	d00a      	beq.n	800599c <pbuf_free+0x54>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	7b1b      	ldrb	r3, [r3, #12]
 800598a:	2b03      	cmp	r3, #3
 800598c:	d006      	beq.n	800599c <pbuf_free+0x54>
 800598e:	4b32      	ldr	r3, [pc, #200]	; (8005a58 <pbuf_free+0x110>)
 8005990:	f240 22de 	movw	r2, #734	; 0x2de
 8005994:	4933      	ldr	r1, [pc, #204]	; (8005a64 <pbuf_free+0x11c>)
 8005996:	4832      	ldr	r0, [pc, #200]	; (8005a60 <pbuf_free+0x118>)
 8005998:	f00b f938 	bl	8010c0c <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800599c:	2300      	movs	r3, #0
 800599e:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80059a0:	e052      	b.n	8005a48 <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	89db      	ldrh	r3, [r3, #14]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d106      	bne.n	80059b8 <pbuf_free+0x70>
 80059aa:	4b2b      	ldr	r3, [pc, #172]	; (8005a58 <pbuf_free+0x110>)
 80059ac:	f240 22eb 	movw	r2, #747	; 0x2eb
 80059b0:	492d      	ldr	r1, [pc, #180]	; (8005a68 <pbuf_free+0x120>)
 80059b2:	482b      	ldr	r0, [pc, #172]	; (8005a60 <pbuf_free+0x118>)
 80059b4:	f00b f92a 	bl	8010c0c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	89db      	ldrh	r3, [r3, #14]
 80059bc:	3b01      	subs	r3, #1
 80059be:	b29a      	uxth	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	81da      	strh	r2, [r3, #14]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	89db      	ldrh	r3, [r3, #14]
 80059c8:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80059ca:	8abb      	ldrh	r3, [r7, #20]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d139      	bne.n	8005a44 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	7b1b      	ldrb	r3, [r3, #12]
 80059da:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	7b5b      	ldrb	r3, [r3, #13]
 80059e0:	f003 0302 	and.w	r3, r3, #2
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d011      	beq.n	8005a0c <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d106      	bne.n	8005a02 <pbuf_free+0xba>
 80059f4:	4b18      	ldr	r3, [pc, #96]	; (8005a58 <pbuf_free+0x110>)
 80059f6:	f240 22f9 	movw	r2, #761	; 0x2f9
 80059fa:	491c      	ldr	r1, [pc, #112]	; (8005a6c <pbuf_free+0x124>)
 80059fc:	4818      	ldr	r0, [pc, #96]	; (8005a60 <pbuf_free+0x118>)
 80059fe:	f00b f905 	bl	8010c0c <iprintf>
        pc->custom_free_function(p);
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	4798      	blx	r3
 8005a0a:	e015      	b.n	8005a38 <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8005a0c:	89fb      	ldrh	r3, [r7, #14]
 8005a0e:	2b03      	cmp	r3, #3
 8005a10:	d104      	bne.n	8005a1c <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 8005a12:	6879      	ldr	r1, [r7, #4]
 8005a14:	2008      	movs	r0, #8
 8005a16:	f7ff fa5f 	bl	8004ed8 <memp_free>
 8005a1a:	e00d      	b.n	8005a38 <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8005a1c:	89fb      	ldrh	r3, [r7, #14]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d002      	beq.n	8005a28 <pbuf_free+0xe0>
 8005a22:	89fb      	ldrh	r3, [r7, #14]
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d104      	bne.n	8005a32 <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 8005a28:	6879      	ldr	r1, [r7, #4]
 8005a2a:	2007      	movs	r0, #7
 8005a2c:	f7ff fa54 	bl	8004ed8 <memp_free>
 8005a30:	e002      	b.n	8005a38 <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7fe ff6a 	bl	800490c <mem_free>
        }
      }
      count++;
 8005a38:	7dfb      	ldrb	r3, [r7, #23]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	607b      	str	r3, [r7, #4]
 8005a42:	e001      	b.n	8005a48 <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8005a44:	2300      	movs	r3, #0
 8005a46:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1a9      	bne.n	80059a2 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8005a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3718      	adds	r7, #24
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	080147cc 	.word	0x080147cc
 8005a5c:	08014a04 	.word	0x08014a04
 8005a60:	08014818 	.word	0x08014818
 8005a64:	08014a40 	.word	0x08014a40
 8005a68:	08014a58 	.word	0x08014a58
 8005a6c:	08014a70 	.word	0x08014a70

08005a70 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8005a7c:	e005      	b.n	8005a8a <pbuf_clen+0x1a>
    ++len;
 8005a7e:	89fb      	ldrh	r3, [r7, #14]
 8005a80:	3301      	adds	r3, #1
 8005a82:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1f6      	bne.n	8005a7e <pbuf_clen+0xe>
  }
  return len;
 8005a90:	89fb      	ldrh	r3, [r7, #14]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3714      	adds	r7, #20
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bc80      	pop	{r7}
 8005a9a:	4770      	bx	lr

08005a9c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d010      	beq.n	8005acc <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	89db      	ldrh	r3, [r3, #14]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	89db      	ldrh	r3, [r3, #14]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d106      	bne.n	8005acc <pbuf_ref+0x30>
 8005abe:	4b05      	ldr	r3, [pc, #20]	; (8005ad4 <pbuf_ref+0x38>)
 8005ac0:	f240 3239 	movw	r2, #825	; 0x339
 8005ac4:	4904      	ldr	r1, [pc, #16]	; (8005ad8 <pbuf_ref+0x3c>)
 8005ac6:	4805      	ldr	r0, [pc, #20]	; (8005adc <pbuf_ref+0x40>)
 8005ac8:	f00b f8a0 	bl	8010c0c <iprintf>
  }
}
 8005acc:	bf00      	nop
 8005ace:	3708      	adds	r7, #8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	080147cc 	.word	0x080147cc
 8005ad8:	08014a94 	.word	0x08014a94
 8005adc:	08014818 	.word	0x08014818

08005ae0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d002      	beq.n	8005af6 <pbuf_cat+0x16>
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d107      	bne.n	8005b06 <pbuf_cat+0x26>
 8005af6:	4b20      	ldr	r3, [pc, #128]	; (8005b78 <pbuf_cat+0x98>)
 8005af8:	f240 324d 	movw	r2, #845	; 0x34d
 8005afc:	491f      	ldr	r1, [pc, #124]	; (8005b7c <pbuf_cat+0x9c>)
 8005afe:	4820      	ldr	r0, [pc, #128]	; (8005b80 <pbuf_cat+0xa0>)
 8005b00:	f00b f884 	bl	8010c0c <iprintf>
 8005b04:	e034      	b.n	8005b70 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	60fb      	str	r3, [r7, #12]
 8005b0a:	e00a      	b.n	8005b22 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	891a      	ldrh	r2, [r3, #8]
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	891b      	ldrh	r3, [r3, #8]
 8005b14:	4413      	add	r3, r2
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	60fb      	str	r3, [r7, #12]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1f0      	bne.n	8005b0c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	891a      	ldrh	r2, [r3, #8]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	895b      	ldrh	r3, [r3, #10]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d006      	beq.n	8005b44 <pbuf_cat+0x64>
 8005b36:	4b10      	ldr	r3, [pc, #64]	; (8005b78 <pbuf_cat+0x98>)
 8005b38:	f240 3255 	movw	r2, #853	; 0x355
 8005b3c:	4911      	ldr	r1, [pc, #68]	; (8005b84 <pbuf_cat+0xa4>)
 8005b3e:	4810      	ldr	r0, [pc, #64]	; (8005b80 <pbuf_cat+0xa0>)
 8005b40:	f00b f864 	bl	8010c0c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d006      	beq.n	8005b5a <pbuf_cat+0x7a>
 8005b4c:	4b0a      	ldr	r3, [pc, #40]	; (8005b78 <pbuf_cat+0x98>)
 8005b4e:	f240 3256 	movw	r2, #854	; 0x356
 8005b52:	490d      	ldr	r1, [pc, #52]	; (8005b88 <pbuf_cat+0xa8>)
 8005b54:	480a      	ldr	r0, [pc, #40]	; (8005b80 <pbuf_cat+0xa0>)
 8005b56:	f00b f859 	bl	8010c0c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	891a      	ldrh	r2, [r3, #8]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	891b      	ldrh	r3, [r3, #8]
 8005b62:	4413      	add	r3, r2
 8005b64:	b29a      	uxth	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	683a      	ldr	r2, [r7, #0]
 8005b6e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	080147cc 	.word	0x080147cc
 8005b7c:	08014aa8 	.word	0x08014aa8
 8005b80:	08014818 	.word	0x08014818
 8005b84:	08014ae0 	.word	0x08014ae0
 8005b88:	08014b10 	.word	0x08014b10

08005b8c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8005b96:	2300      	movs	r3, #0
 8005b98:	81fb      	strh	r3, [r7, #14]
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d008      	beq.n	8005bb6 <pbuf_copy+0x2a>
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d005      	beq.n	8005bb6 <pbuf_copy+0x2a>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	891a      	ldrh	r2, [r3, #8]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	891b      	ldrh	r3, [r3, #8]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d209      	bcs.n	8005bca <pbuf_copy+0x3e>
 8005bb6:	4b54      	ldr	r3, [pc, #336]	; (8005d08 <pbuf_copy+0x17c>)
 8005bb8:	f240 32bd 	movw	r2, #957	; 0x3bd
 8005bbc:	4953      	ldr	r1, [pc, #332]	; (8005d0c <pbuf_copy+0x180>)
 8005bbe:	4854      	ldr	r0, [pc, #336]	; (8005d10 <pbuf_copy+0x184>)
 8005bc0:	f00b f824 	bl	8010c0c <iprintf>
 8005bc4:	f06f 030f 	mvn.w	r3, #15
 8005bc8:	e099      	b.n	8005cfe <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	895b      	ldrh	r3, [r3, #10]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	89fb      	ldrh	r3, [r7, #14]
 8005bd2:	1ad2      	subs	r2, r2, r3
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	895b      	ldrh	r3, [r3, #10]
 8005bd8:	4619      	mov	r1, r3
 8005bda:	89bb      	ldrh	r3, [r7, #12]
 8005bdc:	1acb      	subs	r3, r1, r3
 8005bde:	429a      	cmp	r2, r3
 8005be0:	db05      	blt.n	8005bee <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	895a      	ldrh	r2, [r3, #10]
 8005be6:	89bb      	ldrh	r3, [r7, #12]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	817b      	strh	r3, [r7, #10]
 8005bec:	e004      	b.n	8005bf8 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	895a      	ldrh	r2, [r3, #10]
 8005bf2:	89fb      	ldrh	r3, [r7, #14]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685a      	ldr	r2, [r3, #4]
 8005bfc:	89fb      	ldrh	r3, [r7, #14]
 8005bfe:	18d0      	adds	r0, r2, r3
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	89bb      	ldrh	r3, [r7, #12]
 8005c06:	4413      	add	r3, r2
 8005c08:	897a      	ldrh	r2, [r7, #10]
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	f00a f9bb 	bl	800ff86 <memcpy>
    offset_to += len;
 8005c10:	89fa      	ldrh	r2, [r7, #14]
 8005c12:	897b      	ldrh	r3, [r7, #10]
 8005c14:	4413      	add	r3, r2
 8005c16:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8005c18:	89ba      	ldrh	r2, [r7, #12]
 8005c1a:	897b      	ldrh	r3, [r7, #10]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	895b      	ldrh	r3, [r3, #10]
 8005c24:	89fa      	ldrh	r2, [r7, #14]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d906      	bls.n	8005c38 <pbuf_copy+0xac>
 8005c2a:	4b37      	ldr	r3, [pc, #220]	; (8005d08 <pbuf_copy+0x17c>)
 8005c2c:	f240 32cd 	movw	r2, #973	; 0x3cd
 8005c30:	4938      	ldr	r1, [pc, #224]	; (8005d14 <pbuf_copy+0x188>)
 8005c32:	4837      	ldr	r0, [pc, #220]	; (8005d10 <pbuf_copy+0x184>)
 8005c34:	f00a ffea 	bl	8010c0c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	895b      	ldrh	r3, [r3, #10]
 8005c3c:	89ba      	ldrh	r2, [r7, #12]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d906      	bls.n	8005c50 <pbuf_copy+0xc4>
 8005c42:	4b31      	ldr	r3, [pc, #196]	; (8005d08 <pbuf_copy+0x17c>)
 8005c44:	f240 32ce 	movw	r2, #974	; 0x3ce
 8005c48:	4933      	ldr	r1, [pc, #204]	; (8005d18 <pbuf_copy+0x18c>)
 8005c4a:	4831      	ldr	r0, [pc, #196]	; (8005d10 <pbuf_copy+0x184>)
 8005c4c:	f00a ffde 	bl	8010c0c <iprintf>
    if (offset_from >= p_from->len) {
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	895b      	ldrh	r3, [r3, #10]
 8005c54:	89ba      	ldrh	r2, [r7, #12]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d304      	bcc.n	8005c64 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	895b      	ldrh	r3, [r3, #10]
 8005c68:	89fa      	ldrh	r2, [r7, #14]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d114      	bne.n	8005c98 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10c      	bne.n	8005c98 <pbuf_copy+0x10c>
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d009      	beq.n	8005c98 <pbuf_copy+0x10c>
 8005c84:	4b20      	ldr	r3, [pc, #128]	; (8005d08 <pbuf_copy+0x17c>)
 8005c86:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8005c8a:	4924      	ldr	r1, [pc, #144]	; (8005d1c <pbuf_copy+0x190>)
 8005c8c:	4820      	ldr	r0, [pc, #128]	; (8005d10 <pbuf_copy+0x184>)
 8005c8e:	f00a ffbd 	bl	8010c0c <iprintf>
 8005c92:	f06f 030f 	mvn.w	r3, #15
 8005c96:	e032      	b.n	8005cfe <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d013      	beq.n	8005cc6 <pbuf_copy+0x13a>
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	895a      	ldrh	r2, [r3, #10]
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	891b      	ldrh	r3, [r3, #8]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d10d      	bne.n	8005cc6 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d009      	beq.n	8005cc6 <pbuf_copy+0x13a>
 8005cb2:	4b15      	ldr	r3, [pc, #84]	; (8005d08 <pbuf_copy+0x17c>)
 8005cb4:	f240 32de 	movw	r2, #990	; 0x3de
 8005cb8:	4919      	ldr	r1, [pc, #100]	; (8005d20 <pbuf_copy+0x194>)
 8005cba:	4815      	ldr	r0, [pc, #84]	; (8005d10 <pbuf_copy+0x184>)
 8005cbc:	f00a ffa6 	bl	8010c0c <iprintf>
 8005cc0:	f06f 0305 	mvn.w	r3, #5
 8005cc4:	e01b      	b.n	8005cfe <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d013      	beq.n	8005cf4 <pbuf_copy+0x168>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	895a      	ldrh	r2, [r3, #10]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	891b      	ldrh	r3, [r3, #8]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d10d      	bne.n	8005cf4 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d009      	beq.n	8005cf4 <pbuf_copy+0x168>
 8005ce0:	4b09      	ldr	r3, [pc, #36]	; (8005d08 <pbuf_copy+0x17c>)
 8005ce2:	f240 32e3 	movw	r2, #995	; 0x3e3
 8005ce6:	490e      	ldr	r1, [pc, #56]	; (8005d20 <pbuf_copy+0x194>)
 8005ce8:	4809      	ldr	r0, [pc, #36]	; (8005d10 <pbuf_copy+0x184>)
 8005cea:	f00a ff8f 	bl	8010c0c <iprintf>
 8005cee:	f06f 0305 	mvn.w	r3, #5
 8005cf2:	e004      	b.n	8005cfe <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	f47f af67 	bne.w	8005bca <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3710      	adds	r7, #16
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	080147cc 	.word	0x080147cc
 8005d0c:	08014b5c 	.word	0x08014b5c
 8005d10:	08014818 	.word	0x08014818
 8005d14:	08014b8c 	.word	0x08014b8c
 8005d18:	08014ba4 	.word	0x08014ba4
 8005d1c:	08014bc0 	.word	0x08014bc0
 8005d20:	08014bd0 	.word	0x08014bd0

08005d24 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b088      	sub	sp, #32
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	4611      	mov	r1, r2
 8005d30:	461a      	mov	r2, r3
 8005d32:	460b      	mov	r3, r1
 8005d34:	80fb      	strh	r3, [r7, #6]
 8005d36:	4613      	mov	r3, r2
 8005d38:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d108      	bne.n	8005d56 <pbuf_copy_partial+0x32>
 8005d44:	4b30      	ldr	r3, [pc, #192]	; (8005e08 <pbuf_copy_partial+0xe4>)
 8005d46:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8005d4a:	4930      	ldr	r1, [pc, #192]	; (8005e0c <pbuf_copy_partial+0xe8>)
 8005d4c:	4830      	ldr	r0, [pc, #192]	; (8005e10 <pbuf_copy_partial+0xec>)
 8005d4e:	f00a ff5d 	bl	8010c0c <iprintf>
 8005d52:	2300      	movs	r3, #0
 8005d54:	e054      	b.n	8005e00 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d108      	bne.n	8005d6e <pbuf_copy_partial+0x4a>
 8005d5c:	4b2a      	ldr	r3, [pc, #168]	; (8005e08 <pbuf_copy_partial+0xe4>)
 8005d5e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8005d62:	492c      	ldr	r1, [pc, #176]	; (8005e14 <pbuf_copy_partial+0xf0>)
 8005d64:	482a      	ldr	r0, [pc, #168]	; (8005e10 <pbuf_copy_partial+0xec>)
 8005d66:	f00a ff51 	bl	8010c0c <iprintf>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	e048      	b.n	8005e00 <pbuf_copy_partial+0xdc>

  left = 0;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d002      	beq.n	8005d7e <pbuf_copy_partial+0x5a>
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d101      	bne.n	8005d82 <pbuf_copy_partial+0x5e>
    return 0;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	e03e      	b.n	8005e00 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	61fb      	str	r3, [r7, #28]
 8005d86:	e034      	b.n	8005df2 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8005d88:	88bb      	ldrh	r3, [r7, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00a      	beq.n	8005da4 <pbuf_copy_partial+0x80>
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	895b      	ldrh	r3, [r3, #10]
 8005d92:	88ba      	ldrh	r2, [r7, #4]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d305      	bcc.n	8005da4 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	895b      	ldrh	r3, [r3, #10]
 8005d9c:	88ba      	ldrh	r2, [r7, #4]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	80bb      	strh	r3, [r7, #4]
 8005da2:	e023      	b.n	8005dec <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	895a      	ldrh	r2, [r3, #10]
 8005da8:	88bb      	ldrh	r3, [r7, #4]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8005dae:	8b3a      	ldrh	r2, [r7, #24]
 8005db0:	88fb      	ldrh	r3, [r7, #6]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d901      	bls.n	8005dba <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 8005db6:	88fb      	ldrh	r3, [r7, #6]
 8005db8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8005dba:	8b7b      	ldrh	r3, [r7, #26]
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	18d0      	adds	r0, r2, r3
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	88bb      	ldrh	r3, [r7, #4]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	8b3a      	ldrh	r2, [r7, #24]
 8005dca:	4619      	mov	r1, r3
 8005dcc:	f00a f8db 	bl	800ff86 <memcpy>
      copied_total += buf_copy_len;
 8005dd0:	8afa      	ldrh	r2, [r7, #22]
 8005dd2:	8b3b      	ldrh	r3, [r7, #24]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8005dd8:	8b7a      	ldrh	r2, [r7, #26]
 8005dda:	8b3b      	ldrh	r3, [r7, #24]
 8005ddc:	4413      	add	r3, r2
 8005dde:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 8005de0:	88fa      	ldrh	r2, [r7, #6]
 8005de2:	8b3b      	ldrh	r3, [r7, #24]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8005de8:	2300      	movs	r3, #0
 8005dea:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	61fb      	str	r3, [r7, #28]
 8005df2:	88fb      	ldrh	r3, [r7, #6]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d002      	beq.n	8005dfe <pbuf_copy_partial+0xda>
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1c4      	bne.n	8005d88 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 8005dfe:	8afb      	ldrh	r3, [r7, #22]
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3720      	adds	r7, #32
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	080147cc 	.word	0x080147cc
 8005e0c:	08014bfc 	.word	0x08014bfc
 8005e10:	08014818 	.word	0x08014818
 8005e14:	08014c1c 	.word	0x08014c1c

08005e18 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8005e1c:	bf00      	nop
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bc80      	pop	{r7}
 8005e22:	4770      	bx	lr

08005e24 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8005e28:	f000 ff80 	bl	8006d2c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005e2c:	4b07      	ldr	r3, [pc, #28]	; (8005e4c <tcp_tmr+0x28>)
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	3301      	adds	r3, #1
 8005e32:	b2da      	uxtb	r2, r3
 8005e34:	4b05      	ldr	r3, [pc, #20]	; (8005e4c <tcp_tmr+0x28>)
 8005e36:	701a      	strb	r2, [r3, #0]
 8005e38:	4b04      	ldr	r3, [pc, #16]	; (8005e4c <tcp_tmr+0x28>)
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d001      	beq.n	8005e48 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005e44:	f000 fcb2 	bl	80067ac <tcp_slowtmr>
  }
}
 8005e48:	bf00      	nop
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	2000022d 	.word	0x2000022d

08005e50 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	60fb      	str	r3, [r7, #12]
 8005e5e:	e00a      	b.n	8005e76 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e64:	683a      	ldr	r2, [r7, #0]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d102      	bne.n	8005e70 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	60fb      	str	r3, [r7, #12]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1f1      	bne.n	8005e60 <tcp_remove_listener+0x10>
      }
   }
}
 8005e7c:	bf00      	nop
 8005e7e:	3714      	adds	r7, #20
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bc80      	pop	{r7}
 8005e84:	4770      	bx	lr
	...

08005e88 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d105      	bne.n	8005ea2 <tcp_listen_closed+0x1a>
 8005e96:	4b13      	ldr	r3, [pc, #76]	; (8005ee4 <tcp_listen_closed+0x5c>)
 8005e98:	22c0      	movs	r2, #192	; 0xc0
 8005e9a:	4913      	ldr	r1, [pc, #76]	; (8005ee8 <tcp_listen_closed+0x60>)
 8005e9c:	4813      	ldr	r0, [pc, #76]	; (8005eec <tcp_listen_closed+0x64>)
 8005e9e:	f00a feb5 	bl	8010c0c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	7d1b      	ldrb	r3, [r3, #20]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d005      	beq.n	8005eb6 <tcp_listen_closed+0x2e>
 8005eaa:	4b0e      	ldr	r3, [pc, #56]	; (8005ee4 <tcp_listen_closed+0x5c>)
 8005eac:	22c1      	movs	r2, #193	; 0xc1
 8005eae:	4910      	ldr	r1, [pc, #64]	; (8005ef0 <tcp_listen_closed+0x68>)
 8005eb0:	480e      	ldr	r0, [pc, #56]	; (8005eec <tcp_listen_closed+0x64>)
 8005eb2:	f00a feab 	bl	8010c0c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	60fb      	str	r3, [r7, #12]
 8005eba:	e00b      	b.n	8005ed4 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8005ebc:	4a0d      	ldr	r2, [pc, #52]	; (8005ef4 <tcp_listen_closed+0x6c>)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	6879      	ldr	r1, [r7, #4]
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7ff ffc1 	bl	8005e50 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	60fb      	str	r3, [r7, #12]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2b03      	cmp	r3, #3
 8005ed8:	d9f0      	bls.n	8005ebc <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8005eda:	bf00      	nop
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	08014d50 	.word	0x08014d50
 8005ee8:	08014d80 	.word	0x08014d80
 8005eec:	08014d8c 	.word	0x08014d8c
 8005ef0:	08014db4 	.word	0x08014db4
 8005ef4:	0801644c 	.word	0x0801644c

08005ef8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8005ef8:	b5b0      	push	{r4, r5, r7, lr}
 8005efa:	b086      	sub	sp, #24
 8005efc:	af02      	add	r7, sp, #8
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	460b      	mov	r3, r1
 8005f02:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005f04:	78fb      	ldrb	r3, [r7, #3]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d075      	beq.n	8005ff6 <tcp_close_shutdown+0xfe>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	7d1b      	ldrb	r3, [r3, #20]
 8005f0e:	2b04      	cmp	r3, #4
 8005f10:	d003      	beq.n	8005f1a <tcp_close_shutdown+0x22>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	7d1b      	ldrb	r3, [r3, #20]
 8005f16:	2b07      	cmp	r3, #7
 8005f18:	d16d      	bne.n	8005ff6 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d104      	bne.n	8005f2c <tcp_close_shutdown+0x34>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f26:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005f2a:	d064      	beq.n	8005ff6 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	7e9b      	ldrb	r3, [r3, #26]
 8005f30:	f003 0310 	and.w	r3, r3, #16
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d106      	bne.n	8005f46 <tcp_close_shutdown+0x4e>
 8005f38:	4b59      	ldr	r3, [pc, #356]	; (80060a0 <tcp_close_shutdown+0x1a8>)
 8005f3a:	f240 120f 	movw	r2, #271	; 0x10f
 8005f3e:	4959      	ldr	r1, [pc, #356]	; (80060a4 <tcp_close_shutdown+0x1ac>)
 8005f40:	4859      	ldr	r0, [pc, #356]	; (80060a8 <tcp_close_shutdown+0x1b0>)
 8005f42:	f00a fe63 	bl	8010c0c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005f4e:	687c      	ldr	r4, [r7, #4]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	1d1d      	adds	r5, r3, #4
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	8adb      	ldrh	r3, [r3, #22]
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	8b12      	ldrh	r2, [r2, #24]
 8005f5c:	9201      	str	r2, [sp, #4]
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	462b      	mov	r3, r5
 8005f62:	4622      	mov	r2, r4
 8005f64:	f004 fe82 	bl	800ac6c <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f001 f9b7 	bl	80072dc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005f6e:	4b4f      	ldr	r3, [pc, #316]	; (80060ac <tcp_close_shutdown+0x1b4>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d105      	bne.n	8005f84 <tcp_close_shutdown+0x8c>
 8005f78:	4b4c      	ldr	r3, [pc, #304]	; (80060ac <tcp_close_shutdown+0x1b4>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	4a4b      	ldr	r2, [pc, #300]	; (80060ac <tcp_close_shutdown+0x1b4>)
 8005f80:	6013      	str	r3, [r2, #0]
 8005f82:	e013      	b.n	8005fac <tcp_close_shutdown+0xb4>
 8005f84:	4b49      	ldr	r3, [pc, #292]	; (80060ac <tcp_close_shutdown+0x1b4>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	60fb      	str	r3, [r7, #12]
 8005f8a:	e00c      	b.n	8005fa6 <tcp_close_shutdown+0xae>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d104      	bne.n	8005fa0 <tcp_close_shutdown+0xa8>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	68da      	ldr	r2, [r3, #12]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	60da      	str	r2, [r3, #12]
 8005f9e:	e005      	b.n	8005fac <tcp_close_shutdown+0xb4>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	60fb      	str	r3, [r7, #12]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1ef      	bne.n	8005f8c <tcp_close_shutdown+0x94>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	60da      	str	r2, [r3, #12]
 8005fb2:	4b3f      	ldr	r3, [pc, #252]	; (80060b0 <tcp_close_shutdown+0x1b8>)
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	7d1b      	ldrb	r3, [r3, #20]
 8005fbc:	2b04      	cmp	r3, #4
 8005fbe:	d10c      	bne.n	8005fda <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	220a      	movs	r2, #10
 8005fc4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8005fc6:	4b3b      	ldr	r3, [pc, #236]	; (80060b4 <tcp_close_shutdown+0x1bc>)
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	60da      	str	r2, [r3, #12]
 8005fce:	4a39      	ldr	r2, [pc, #228]	; (80060b4 <tcp_close_shutdown+0x1bc>)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6013      	str	r3, [r2, #0]
 8005fd4:	f005 f89a 	bl	800b10c <tcp_timer_needed>
 8005fd8:	e00b      	b.n	8005ff2 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 8005fda:	4b37      	ldr	r3, [pc, #220]	; (80060b8 <tcp_close_shutdown+0x1c0>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d102      	bne.n	8005fea <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8005fe4:	f003 fcda 	bl	800999c <tcp_trigger_input_pcb_close>
 8005fe8:	e003      	b.n	8005ff2 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 8005fea:	6879      	ldr	r1, [r7, #4]
 8005fec:	2001      	movs	r0, #1
 8005fee:	f7fe ff73 	bl	8004ed8 <memp_free>
        }
      }
      return ERR_OK;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	e050      	b.n	8006098 <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	7d1b      	ldrb	r3, [r3, #20]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d02e      	beq.n	800605c <tcp_close_shutdown+0x164>
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d038      	beq.n	8006074 <tcp_close_shutdown+0x17c>
 8006002:	2b00      	cmp	r3, #0
 8006004:	d142      	bne.n	800608c <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	8adb      	ldrh	r3, [r3, #22]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d021      	beq.n	8006052 <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800600e:	4b2b      	ldr	r3, [pc, #172]	; (80060bc <tcp_close_shutdown+0x1c4>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	429a      	cmp	r2, r3
 8006016:	d105      	bne.n	8006024 <tcp_close_shutdown+0x12c>
 8006018:	4b28      	ldr	r3, [pc, #160]	; (80060bc <tcp_close_shutdown+0x1c4>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	4a27      	ldr	r2, [pc, #156]	; (80060bc <tcp_close_shutdown+0x1c4>)
 8006020:	6013      	str	r3, [r2, #0]
 8006022:	e013      	b.n	800604c <tcp_close_shutdown+0x154>
 8006024:	4b25      	ldr	r3, [pc, #148]	; (80060bc <tcp_close_shutdown+0x1c4>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	60bb      	str	r3, [r7, #8]
 800602a:	e00c      	b.n	8006046 <tcp_close_shutdown+0x14e>
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	429a      	cmp	r2, r3
 8006034:	d104      	bne.n	8006040 <tcp_close_shutdown+0x148>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	68da      	ldr	r2, [r3, #12]
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	60da      	str	r2, [r3, #12]
 800603e:	e005      	b.n	800604c <tcp_close_shutdown+0x154>
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	60bb      	str	r3, [r7, #8]
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1ef      	bne.n	800602c <tcp_close_shutdown+0x134>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8006052:	6879      	ldr	r1, [r7, #4]
 8006054:	2001      	movs	r0, #1
 8006056:	f7fe ff3f 	bl	8004ed8 <memp_free>
    break;
 800605a:	e01c      	b.n	8006096 <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f7ff ff13 	bl	8005e88 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006062:	6879      	ldr	r1, [r7, #4]
 8006064:	4816      	ldr	r0, [pc, #88]	; (80060c0 <tcp_close_shutdown+0x1c8>)
 8006066:	f001 f97b 	bl	8007360 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800606a:	6879      	ldr	r1, [r7, #4]
 800606c:	2002      	movs	r0, #2
 800606e:	f7fe ff33 	bl	8004ed8 <memp_free>
    break;
 8006072:	e010      	b.n	8006096 <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8006074:	6879      	ldr	r1, [r7, #4]
 8006076:	480d      	ldr	r0, [pc, #52]	; (80060ac <tcp_close_shutdown+0x1b4>)
 8006078:	f001 f972 	bl	8007360 <tcp_pcb_remove>
 800607c:	4b0c      	ldr	r3, [pc, #48]	; (80060b0 <tcp_close_shutdown+0x1b8>)
 800607e:	2201      	movs	r2, #1
 8006080:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8006082:	6879      	ldr	r1, [r7, #4]
 8006084:	2001      	movs	r0, #1
 8006086:	f7fe ff27 	bl	8004ed8 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 800608a:	e004      	b.n	8006096 <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f819 	bl	80060c4 <tcp_close_shutdown_fin>
 8006092:	4603      	mov	r3, r0
 8006094:	e000      	b.n	8006098 <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bdb0      	pop	{r4, r5, r7, pc}
 80060a0:	08014d50 	.word	0x08014d50
 80060a4:	08014dcc 	.word	0x08014dcc
 80060a8:	08014d8c 	.word	0x08014d8c
 80060ac:	200038c4 	.word	0x200038c4
 80060b0:	200038c0 	.word	0x200038c0
 80060b4:	200038d4 	.word	0x200038d4
 80060b8:	200038d8 	.word	0x200038d8
 80060bc:	200038d0 	.word	0x200038d0
 80060c0:	200038cc 	.word	0x200038cc

080060c4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d106      	bne.n	80060e0 <tcp_close_shutdown_fin+0x1c>
 80060d2:	4b2c      	ldr	r3, [pc, #176]	; (8006184 <tcp_close_shutdown_fin+0xc0>)
 80060d4:	f240 124d 	movw	r2, #333	; 0x14d
 80060d8:	492b      	ldr	r1, [pc, #172]	; (8006188 <tcp_close_shutdown_fin+0xc4>)
 80060da:	482c      	ldr	r0, [pc, #176]	; (800618c <tcp_close_shutdown_fin+0xc8>)
 80060dc:	f00a fd96 	bl	8010c0c <iprintf>

  switch (pcb->state) {
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	7d1b      	ldrb	r3, [r3, #20]
 80060e4:	2b04      	cmp	r3, #4
 80060e6:	d010      	beq.n	800610a <tcp_close_shutdown_fin+0x46>
 80060e8:	2b07      	cmp	r3, #7
 80060ea:	d01b      	beq.n	8006124 <tcp_close_shutdown_fin+0x60>
 80060ec:	2b03      	cmp	r3, #3
 80060ee:	d126      	bne.n	800613e <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f003 fcdf 	bl	8009ab4 <tcp_send_fin>
 80060f6:	4603      	mov	r3, r0
 80060f8:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80060fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d11f      	bne.n	8006142 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2205      	movs	r2, #5
 8006106:	751a      	strb	r2, [r3, #20]
    }
    break;
 8006108:	e01b      	b.n	8006142 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f003 fcd2 	bl	8009ab4 <tcp_send_fin>
 8006110:	4603      	mov	r3, r0
 8006112:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006114:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d114      	bne.n	8006146 <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2205      	movs	r2, #5
 8006120:	751a      	strb	r2, [r3, #20]
    }
    break;
 8006122:	e010      	b.n	8006146 <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f003 fcc5 	bl	8009ab4 <tcp_send_fin>
 800612a:	4603      	mov	r3, r0
 800612c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800612e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d109      	bne.n	800614a <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2209      	movs	r2, #9
 800613a:	751a      	strb	r2, [r3, #20]
    }
    break;
 800613c:	e005      	b.n	800614a <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 800613e:	2300      	movs	r3, #0
 8006140:	e01c      	b.n	800617c <tcp_close_shutdown_fin+0xb8>
    break;
 8006142:	bf00      	nop
 8006144:	e002      	b.n	800614c <tcp_close_shutdown_fin+0x88>
    break;
 8006146:	bf00      	nop
 8006148:	e000      	b.n	800614c <tcp_close_shutdown_fin+0x88>
    break;
 800614a:	bf00      	nop
  }

  if (err == ERR_OK) {
 800614c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d103      	bne.n	800615c <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f004 faff 	bl	800a758 <tcp_output>
 800615a:	e00d      	b.n	8006178 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800615c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006164:	d108      	bne.n	8006178 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	7e9b      	ldrb	r3, [r3, #26]
 800616a:	f043 0308 	orr.w	r3, r3, #8
 800616e:	b2da      	uxtb	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006174:	2300      	movs	r3, #0
 8006176:	e001      	b.n	800617c <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8006178:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800617c:	4618      	mov	r0, r3
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	08014d50 	.word	0x08014d50
 8006188:	08014d80 	.word	0x08014d80
 800618c:	08014d8c 	.word	0x08014d8c

08006190 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	7d1b      	ldrb	r3, [r3, #20]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d006      	beq.n	80061ae <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	7e9b      	ldrb	r3, [r3, #26]
 80061a4:	f043 0310 	orr.w	r3, r3, #16
 80061a8:	b2da      	uxtb	r2, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80061ae:	2101      	movs	r1, #1
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f7ff fea1 	bl	8005ef8 <tcp_close_shutdown>
 80061b6:	4603      	mov	r3, r0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3708      	adds	r7, #8
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b08c      	sub	sp, #48	; 0x30
 80061c4:	af02      	add	r7, sp, #8
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	7d1b      	ldrb	r3, [r3, #20]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d106      	bne.n	80061e0 <tcp_abandon+0x20>
 80061d2:	4b4d      	ldr	r3, [pc, #308]	; (8006308 <tcp_abandon+0x148>)
 80061d4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80061d8:	494c      	ldr	r1, [pc, #304]	; (800630c <tcp_abandon+0x14c>)
 80061da:	484d      	ldr	r0, [pc, #308]	; (8006310 <tcp_abandon+0x150>)
 80061dc:	f00a fd16 	bl	8010c0c <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	7d1b      	ldrb	r3, [r3, #20]
 80061e4:	2b0a      	cmp	r3, #10
 80061e6:	d108      	bne.n	80061fa <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80061e8:	6879      	ldr	r1, [r7, #4]
 80061ea:	484a      	ldr	r0, [pc, #296]	; (8006314 <tcp_abandon+0x154>)
 80061ec:	f001 f8b8 	bl	8007360 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80061f0:	6879      	ldr	r1, [r7, #4]
 80061f2:	2001      	movs	r0, #1
 80061f4:	f7fe fe70 	bl	8004ed8 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 80061f8:	e081      	b.n	80062fe <tcp_abandon+0x13e>
    int send_rst = 0;
 80061fa:	2300      	movs	r3, #0
 80061fc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80061fe:	2300      	movs	r3, #0
 8006200:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006206:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620c:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006214:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	7d1b      	ldrb	r3, [r3, #20]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d126      	bne.n	8006272 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	8adb      	ldrh	r3, [r3, #22]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d02e      	beq.n	800628a <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800622c:	4b3a      	ldr	r3, [pc, #232]	; (8006318 <tcp_abandon+0x158>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	429a      	cmp	r2, r3
 8006234:	d105      	bne.n	8006242 <tcp_abandon+0x82>
 8006236:	4b38      	ldr	r3, [pc, #224]	; (8006318 <tcp_abandon+0x158>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	4a36      	ldr	r2, [pc, #216]	; (8006318 <tcp_abandon+0x158>)
 800623e:	6013      	str	r3, [r2, #0]
 8006240:	e013      	b.n	800626a <tcp_abandon+0xaa>
 8006242:	4b35      	ldr	r3, [pc, #212]	; (8006318 <tcp_abandon+0x158>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	61fb      	str	r3, [r7, #28]
 8006248:	e00c      	b.n	8006264 <tcp_abandon+0xa4>
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	429a      	cmp	r2, r3
 8006252:	d104      	bne.n	800625e <tcp_abandon+0x9e>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	68da      	ldr	r2, [r3, #12]
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	60da      	str	r2, [r3, #12]
 800625c:	e005      	b.n	800626a <tcp_abandon+0xaa>
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	61fb      	str	r3, [r7, #28]
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1ef      	bne.n	800624a <tcp_abandon+0x8a>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	60da      	str	r2, [r3, #12]
 8006270:	e00b      	b.n	800628a <tcp_abandon+0xca>
      send_rst = reset;
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	8adb      	ldrh	r3, [r3, #22]
 800627a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800627c:	6879      	ldr	r1, [r7, #4]
 800627e:	4827      	ldr	r0, [pc, #156]	; (800631c <tcp_abandon+0x15c>)
 8006280:	f001 f86e 	bl	8007360 <tcp_pcb_remove>
 8006284:	4b26      	ldr	r3, [pc, #152]	; (8006320 <tcp_abandon+0x160>)
 8006286:	2201      	movs	r2, #1
 8006288:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800628e:	2b00      	cmp	r3, #0
 8006290:	d004      	beq.n	800629c <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006296:	4618      	mov	r0, r3
 8006298:	f000 fe15 	bl	8006ec6 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d004      	beq.n	80062ae <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062a8:	4618      	mov	r0, r3
 80062aa:	f000 fe0c 	bl	8006ec6 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d004      	beq.n	80062c0 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ba:	4618      	mov	r0, r3
 80062bc:	f000 fe03 	bl	8006ec6 <tcp_segs_free>
    if (send_rst) {
 80062c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00c      	beq.n	80062e0 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	1d19      	adds	r1, r3, #4
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	8b1b      	ldrh	r3, [r3, #24]
 80062d0:	9301      	str	r3, [sp, #4]
 80062d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80062d4:	9300      	str	r3, [sp, #0]
 80062d6:	460b      	mov	r3, r1
 80062d8:	6979      	ldr	r1, [r7, #20]
 80062da:	69b8      	ldr	r0, [r7, #24]
 80062dc:	f004 fcc6 	bl	800ac6c <tcp_rst>
    last_state = pcb->state;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	7d1b      	ldrb	r3, [r3, #20]
 80062e4:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 80062e6:	6879      	ldr	r1, [r7, #4]
 80062e8:	2001      	movs	r0, #1
 80062ea:	f7fe fdf5 	bl	8004ed8 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d004      	beq.n	80062fe <tcp_abandon+0x13e>
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	f06f 010c 	mvn.w	r1, #12
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	4798      	blx	r3
}
 80062fe:	bf00      	nop
 8006300:	3728      	adds	r7, #40	; 0x28
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	08014d50 	.word	0x08014d50
 800630c:	08014de8 	.word	0x08014de8
 8006310:	08014d8c 	.word	0x08014d8c
 8006314:	200038d4 	.word	0x200038d4
 8006318:	200038d0 	.word	0x200038d0
 800631c:	200038c4 	.word	0x200038c4
 8006320:	200038c0 	.word	0x200038c0

08006324 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800632c:	2101      	movs	r1, #1
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f7ff ff46 	bl	80061c0 <tcp_abandon>
}
 8006334:	bf00      	nop
 8006336:	3708      	adds	r7, #8
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b088      	sub	sp, #32
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	4613      	mov	r3, r2
 8006348:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800634a:	2304      	movs	r3, #4
 800634c:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d101      	bne.n	8006358 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8006354:	4b3c      	ldr	r3, [pc, #240]	; (8006448 <tcp_bind+0x10c>)
 8006356:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d002      	beq.n	8006364 <tcp_bind+0x28>
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d102      	bne.n	800636a <tcp_bind+0x2e>
    return ERR_VAL;
 8006364:	f06f 0305 	mvn.w	r3, #5
 8006368:	e06a      	b.n	8006440 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	7d1b      	ldrb	r3, [r3, #20]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d009      	beq.n	8006386 <tcp_bind+0x4a>
 8006372:	4b36      	ldr	r3, [pc, #216]	; (800644c <tcp_bind+0x110>)
 8006374:	f44f 7211 	mov.w	r2, #580	; 0x244
 8006378:	4935      	ldr	r1, [pc, #212]	; (8006450 <tcp_bind+0x114>)
 800637a:	4836      	ldr	r0, [pc, #216]	; (8006454 <tcp_bind+0x118>)
 800637c:	f00a fc46 	bl	8010c0c <iprintf>
 8006380:	f06f 0305 	mvn.w	r3, #5
 8006384:	e05c      	b.n	8006440 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 8006386:	88fb      	ldrh	r3, [r7, #6]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d109      	bne.n	80063a0 <tcp_bind+0x64>
    port = tcp_new_port();
 800638c:	f000 f9ca 	bl	8006724 <tcp_new_port>
 8006390:	4603      	mov	r3, r0
 8006392:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8006394:	88fb      	ldrh	r3, [r7, #6]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d135      	bne.n	8006406 <tcp_bind+0xca>
      return ERR_BUF;
 800639a:	f06f 0301 	mvn.w	r3, #1
 800639e:	e04f      	b.n	8006440 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80063a0:	2300      	movs	r3, #0
 80063a2:	61fb      	str	r3, [r7, #28]
 80063a4:	e02b      	b.n	80063fe <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80063a6:	4a2c      	ldr	r2, [pc, #176]	; (8006458 <tcp_bind+0x11c>)
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	61bb      	str	r3, [r7, #24]
 80063b2:	e01e      	b.n	80063f2 <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	8adb      	ldrh	r3, [r3, #22]
 80063b8:	88fa      	ldrh	r2, [r7, #6]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d116      	bne.n	80063ec <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80063be:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d010      	beq.n	80063e6 <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00c      	beq.n	80063e6 <tcp_bind+0xaa>
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d009      	beq.n	80063e6 <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d005      	beq.n	80063e6 <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d102      	bne.n	80063ec <tcp_bind+0xb0>
              return ERR_USE;
 80063e6:	f06f 0307 	mvn.w	r3, #7
 80063ea:	e029      	b.n	8006440 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	61bb      	str	r3, [r7, #24]
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d1dd      	bne.n	80063b4 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	3301      	adds	r3, #1
 80063fc:	61fb      	str	r3, [r7, #28]
 80063fe:	69fa      	ldr	r2, [r7, #28]
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	429a      	cmp	r2, r3
 8006404:	dbcf      	blt.n	80063a6 <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00c      	beq.n	8006426 <tcp_bind+0xea>
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d008      	beq.n	8006426 <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d002      	beq.n	8006420 <tcp_bind+0xe4>
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	e000      	b.n	8006422 <tcp_bind+0xe6>
 8006420:	2300      	movs	r3, #0
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	88fa      	ldrh	r2, [r7, #6]
 800642a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800642c:	4b0b      	ldr	r3, [pc, #44]	; (800645c <tcp_bind+0x120>)
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	60da      	str	r2, [r3, #12]
 8006434:	4a09      	ldr	r2, [pc, #36]	; (800645c <tcp_bind+0x120>)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6013      	str	r3, [r2, #0]
 800643a:	f004 fe67 	bl	800b10c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3720      	adds	r7, #32
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	08016474 	.word	0x08016474
 800644c:	08014d50 	.word	0x08014d50
 8006450:	08014e1c 	.word	0x08014e1c
 8006454:	08014d8c 	.word	0x08014d8c
 8006458:	0801644c 	.word	0x0801644c
 800645c:	200038d0 	.word	0x200038d0

08006460 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	4613      	mov	r3, r2
 800646c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 800646e:	68b8      	ldr	r0, [r7, #8]
 8006470:	f7ff ff58 	bl	8006324 <tcp_abort>

  return ERR_ABRT;
 8006474:	f06f 030c 	mvn.w	r3, #12
}
 8006478:	4618      	mov	r0, r3
 800647a:	3710      	adds	r7, #16
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	460b      	mov	r3, r1
 800648a:	70fb      	strb	r3, [r7, #3]
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800648c:	78fb      	ldrb	r3, [r7, #3]
 800648e:	2200      	movs	r2, #0
 8006490:	4619      	mov	r1, r3
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f806 	bl	80064a4 <tcp_listen_with_backlog_and_err>
 8006498:	4603      	mov	r3, r0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3708      	adds	r7, #8
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
	...

080064a4 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b088      	sub	sp, #32
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	460b      	mov	r3, r1
 80064ae:	607a      	str	r2, [r7, #4]
 80064b0:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80064b2:	2300      	movs	r3, #0
 80064b4:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	7d1b      	ldrb	r3, [r3, #20]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d009      	beq.n	80064d2 <tcp_listen_with_backlog_and_err+0x2e>
 80064be:	4b3f      	ldr	r3, [pc, #252]	; (80065bc <tcp_listen_with_backlog_and_err+0x118>)
 80064c0:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 80064c4:	493e      	ldr	r1, [pc, #248]	; (80065c0 <tcp_listen_with_backlog_and_err+0x11c>)
 80064c6:	483f      	ldr	r0, [pc, #252]	; (80065c4 <tcp_listen_with_backlog_and_err+0x120>)
 80064c8:	f00a fba0 	bl	8010c0c <iprintf>
 80064cc:	23f1      	movs	r3, #241	; 0xf1
 80064ce:	76fb      	strb	r3, [r7, #27]
 80064d0:	e069      	b.n	80065a6 <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	7d1b      	ldrb	r3, [r3, #20]
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d104      	bne.n	80064e4 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80064de:	23f7      	movs	r3, #247	; 0xf7
 80064e0:	76fb      	strb	r3, [r7, #27]
    goto done;
 80064e2:	e060      	b.n	80065a6 <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80064e4:	2002      	movs	r0, #2
 80064e6:	f7fe fcab 	bl	8004e40 <memp_malloc>
 80064ea:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d102      	bne.n	80064f8 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 80064f2:	23ff      	movs	r3, #255	; 0xff
 80064f4:	76fb      	strb	r3, [r7, #27]
    goto done;
 80064f6:	e056      	b.n	80065a6 <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	691a      	ldr	r2, [r3, #16]
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	8ada      	ldrh	r2, [r3, #22]
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	2201      	movs	r2, #1
 800650c:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	7d5a      	ldrb	r2, [r3, #21]
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	7a1a      	ldrb	r2, [r3, #8]
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	7a9a      	ldrb	r2, [r3, #10]
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	7a5a      	ldrb	r2, [r3, #9]
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	8adb      	ldrh	r3, [r3, #22]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d021      	beq.n	8006582 <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800653e:	4b22      	ldr	r3, [pc, #136]	; (80065c8 <tcp_listen_with_backlog_and_err+0x124>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	429a      	cmp	r2, r3
 8006546:	d105      	bne.n	8006554 <tcp_listen_with_backlog_and_err+0xb0>
 8006548:	4b1f      	ldr	r3, [pc, #124]	; (80065c8 <tcp_listen_with_backlog_and_err+0x124>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	4a1e      	ldr	r2, [pc, #120]	; (80065c8 <tcp_listen_with_backlog_and_err+0x124>)
 8006550:	6013      	str	r3, [r2, #0]
 8006552:	e013      	b.n	800657c <tcp_listen_with_backlog_and_err+0xd8>
 8006554:	4b1c      	ldr	r3, [pc, #112]	; (80065c8 <tcp_listen_with_backlog_and_err+0x124>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	617b      	str	r3, [r7, #20]
 800655a:	e00c      	b.n	8006576 <tcp_listen_with_backlog_and_err+0xd2>
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	429a      	cmp	r2, r3
 8006564:	d104      	bne.n	8006570 <tcp_listen_with_backlog_and_err+0xcc>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	68da      	ldr	r2, [r3, #12]
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	60da      	str	r2, [r3, #12]
 800656e:	e005      	b.n	800657c <tcp_listen_with_backlog_and_err+0xd8>
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	617b      	str	r3, [r7, #20]
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1ef      	bne.n	800655c <tcp_listen_with_backlog_and_err+0xb8>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 8006582:	68f9      	ldr	r1, [r7, #12]
 8006584:	2001      	movs	r0, #1
 8006586:	f7fe fca7 	bl	8004ed8 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	4a0f      	ldr	r2, [pc, #60]	; (80065cc <tcp_listen_with_backlog_and_err+0x128>)
 800658e:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8006590:	4b0f      	ldr	r3, [pc, #60]	; (80065d0 <tcp_listen_with_backlog_and_err+0x12c>)
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	60da      	str	r2, [r3, #12]
 8006598:	4a0d      	ldr	r2, [pc, #52]	; (80065d0 <tcp_listen_with_backlog_and_err+0x12c>)
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	6013      	str	r3, [r2, #0]
 800659e:	f004 fdb5 	bl	800b10c <tcp_timer_needed>
  res = ERR_OK;
 80065a2:	2300      	movs	r3, #0
 80065a4:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d002      	beq.n	80065b2 <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	7efa      	ldrb	r2, [r7, #27]
 80065b0:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80065b2:	69fb      	ldr	r3, [r7, #28]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3720      	adds	r7, #32
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	08014d50 	.word	0x08014d50
 80065c0:	08014e44 	.word	0x08014e44
 80065c4:	08014d8c 	.word	0x08014d8c
 80065c8:	200038d0 	.word	0x200038d0
 80065cc:	08006461 	.word	0x08006461
 80065d0:	200038cc 	.word	0x200038cc

080065d4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80065e4:	4413      	add	r3, r2
 80065e6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80065f0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80065f4:	bf28      	it	cs
 80065f6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80065fa:	b292      	uxth	r2, r2
 80065fc:	4413      	add	r3, r2
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	2b00      	cmp	r3, #0
 8006604:	db08      	blt.n	8006618 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	e020      	b.n	800665a <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	2b00      	cmp	r3, #0
 8006624:	dd03      	ble.n	800662e <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800662c:	e014      	b.n	8006658 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006640:	d306      	bcc.n	8006650 <tcp_update_rcv_ann_wnd+0x7c>
 8006642:	4b08      	ldr	r3, [pc, #32]	; (8006664 <tcp_update_rcv_ann_wnd+0x90>)
 8006644:	f44f 7242 	mov.w	r2, #776	; 0x308
 8006648:	4907      	ldr	r1, [pc, #28]	; (8006668 <tcp_update_rcv_ann_wnd+0x94>)
 800664a:	4808      	ldr	r0, [pc, #32]	; (800666c <tcp_update_rcv_ann_wnd+0x98>)
 800664c:	f00a fade 	bl	8010c0c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	b29a      	uxth	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8006658:	2300      	movs	r3, #0
  }
}
 800665a:	4618      	mov	r0, r3
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	08014d50 	.word	0x08014d50
 8006668:	08014e68 	.word	0x08014e68
 800666c:	08014d8c 	.word	0x08014d8c

08006670 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	460b      	mov	r3, r1
 800667a:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	7d1b      	ldrb	r3, [r3, #20]
 8006680:	2b01      	cmp	r3, #1
 8006682:	d106      	bne.n	8006692 <tcp_recved+0x22>
 8006684:	4b23      	ldr	r3, [pc, #140]	; (8006714 <tcp_recved+0xa4>)
 8006686:	f44f 7248 	mov.w	r2, #800	; 0x320
 800668a:	4923      	ldr	r1, [pc, #140]	; (8006718 <tcp_recved+0xa8>)
 800668c:	4823      	ldr	r0, [pc, #140]	; (800671c <tcp_recved+0xac>)
 800668e:	f00a fabd 	bl	8010c0c <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006696:	887b      	ldrh	r3, [r7, #2]
 8006698:	4413      	add	r3, r2
 800669a:	b29a      	uxth	r2, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066a4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80066a8:	d904      	bls.n	80066b4 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80066b0:	851a      	strh	r2, [r3, #40]	; 0x28
 80066b2:	e017      	b.n	80066e4 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d113      	bne.n	80066e4 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	7d1b      	ldrb	r3, [r3, #20]
 80066c0:	2b07      	cmp	r3, #7
 80066c2:	d003      	beq.n	80066cc <tcp_recved+0x5c>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	7d1b      	ldrb	r3, [r3, #20]
 80066c8:	2b09      	cmp	r3, #9
 80066ca:	d104      	bne.n	80066d6 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80066d2:	851a      	strh	r2, [r3, #40]	; 0x28
 80066d4:	e006      	b.n	80066e4 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 80066d6:	4b0f      	ldr	r3, [pc, #60]	; (8006714 <tcp_recved+0xa4>)
 80066d8:	f240 322d 	movw	r2, #813	; 0x32d
 80066dc:	4910      	ldr	r1, [pc, #64]	; (8006720 <tcp_recved+0xb0>)
 80066de:	480f      	ldr	r0, [pc, #60]	; (800671c <tcp_recved+0xac>)
 80066e0:	f00a fa94 	bl	8010c0c <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f7ff ff75 	bl	80065d4 <tcp_update_rcv_ann_wnd>
 80066ea:	4603      	mov	r3, r0
 80066ec:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80066f4:	db09      	blt.n	800670a <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	7e9b      	ldrb	r3, [r3, #26]
 80066fa:	f043 0302 	orr.w	r3, r3, #2
 80066fe:	b2da      	uxtb	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f004 f827 	bl	800a758 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800670a:	bf00      	nop
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	08014d50 	.word	0x08014d50
 8006718:	08014e84 	.word	0x08014e84
 800671c:	08014d8c 	.word	0x08014d8c
 8006720:	08014eac 	.word	0x08014eac

08006724 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800672a:	2300      	movs	r3, #0
 800672c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800672e:	4b1d      	ldr	r3, [pc, #116]	; (80067a4 <tcp_new_port+0x80>)
 8006730:	881b      	ldrh	r3, [r3, #0]
 8006732:	1c5a      	adds	r2, r3, #1
 8006734:	b291      	uxth	r1, r2
 8006736:	4a1b      	ldr	r2, [pc, #108]	; (80067a4 <tcp_new_port+0x80>)
 8006738:	8011      	strh	r1, [r2, #0]
 800673a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800673e:	4293      	cmp	r3, r2
 8006740:	d103      	bne.n	800674a <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8006742:	4b18      	ldr	r3, [pc, #96]	; (80067a4 <tcp_new_port+0x80>)
 8006744:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8006748:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800674a:	2300      	movs	r3, #0
 800674c:	71fb      	strb	r3, [r7, #7]
 800674e:	e01e      	b.n	800678e <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8006750:	79fb      	ldrb	r3, [r7, #7]
 8006752:	4a15      	ldr	r2, [pc, #84]	; (80067a8 <tcp_new_port+0x84>)
 8006754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	603b      	str	r3, [r7, #0]
 800675c:	e011      	b.n	8006782 <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	8ada      	ldrh	r2, [r3, #22]
 8006762:	4b10      	ldr	r3, [pc, #64]	; (80067a4 <tcp_new_port+0x80>)
 8006764:	881b      	ldrh	r3, [r3, #0]
 8006766:	429a      	cmp	r2, r3
 8006768:	d108      	bne.n	800677c <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800676a:	88bb      	ldrh	r3, [r7, #4]
 800676c:	3301      	adds	r3, #1
 800676e:	80bb      	strh	r3, [r7, #4]
 8006770:	88bb      	ldrh	r3, [r7, #4]
 8006772:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006776:	d3da      	bcc.n	800672e <tcp_new_port+0xa>
          return 0;
 8006778:	2300      	movs	r3, #0
 800677a:	e00d      	b.n	8006798 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	603b      	str	r3, [r7, #0]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d1ea      	bne.n	800675e <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8006788:	79fb      	ldrb	r3, [r7, #7]
 800678a:	3301      	adds	r3, #1
 800678c:	71fb      	strb	r3, [r7, #7]
 800678e:	79fb      	ldrb	r3, [r7, #7]
 8006790:	2b03      	cmp	r3, #3
 8006792:	d9dd      	bls.n	8006750 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8006794:	4b03      	ldr	r3, [pc, #12]	; (80067a4 <tcp_new_port+0x80>)
 8006796:	881b      	ldrh	r3, [r3, #0]
}
 8006798:	4618      	mov	r0, r3
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	bc80      	pop	{r7}
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop
 80067a4:	20000006 	.word	0x20000006
 80067a8:	0801644c 	.word	0x0801644c

080067ac <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80067ac:	b5b0      	push	{r4, r5, r7, lr}
 80067ae:	b08c      	sub	sp, #48	; 0x30
 80067b0:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80067b2:	2300      	movs	r3, #0
 80067b4:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 80067b6:	4b97      	ldr	r3, [pc, #604]	; (8006a14 <tcp_slowtmr+0x268>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	3301      	adds	r3, #1
 80067bc:	4a95      	ldr	r2, [pc, #596]	; (8006a14 <tcp_slowtmr+0x268>)
 80067be:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80067c0:	4b95      	ldr	r3, [pc, #596]	; (8006a18 <tcp_slowtmr+0x26c>)
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	3301      	adds	r3, #1
 80067c6:	b2da      	uxtb	r2, r3
 80067c8:	4b93      	ldr	r3, [pc, #588]	; (8006a18 <tcp_slowtmr+0x26c>)
 80067ca:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80067cc:	2300      	movs	r3, #0
 80067ce:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 80067d0:	4b92      	ldr	r3, [pc, #584]	; (8006a1c <tcp_slowtmr+0x270>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80067d6:	e227      	b.n	8006c28 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80067d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067da:	7d1b      	ldrb	r3, [r3, #20]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d106      	bne.n	80067ee <tcp_slowtmr+0x42>
 80067e0:	4b8f      	ldr	r3, [pc, #572]	; (8006a20 <tcp_slowtmr+0x274>)
 80067e2:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 80067e6:	498f      	ldr	r1, [pc, #572]	; (8006a24 <tcp_slowtmr+0x278>)
 80067e8:	488f      	ldr	r0, [pc, #572]	; (8006a28 <tcp_slowtmr+0x27c>)
 80067ea:	f00a fa0f 	bl	8010c0c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80067ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f0:	7d1b      	ldrb	r3, [r3, #20]
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d106      	bne.n	8006804 <tcp_slowtmr+0x58>
 80067f6:	4b8a      	ldr	r3, [pc, #552]	; (8006a20 <tcp_slowtmr+0x274>)
 80067f8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80067fc:	498b      	ldr	r1, [pc, #556]	; (8006a2c <tcp_slowtmr+0x280>)
 80067fe:	488a      	ldr	r0, [pc, #552]	; (8006a28 <tcp_slowtmr+0x27c>)
 8006800:	f00a fa04 	bl	8010c0c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006806:	7d1b      	ldrb	r3, [r3, #20]
 8006808:	2b0a      	cmp	r3, #10
 800680a:	d106      	bne.n	800681a <tcp_slowtmr+0x6e>
 800680c:	4b84      	ldr	r3, [pc, #528]	; (8006a20 <tcp_slowtmr+0x274>)
 800680e:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8006812:	4987      	ldr	r1, [pc, #540]	; (8006a30 <tcp_slowtmr+0x284>)
 8006814:	4884      	ldr	r0, [pc, #528]	; (8006a28 <tcp_slowtmr+0x27c>)
 8006816:	f00a f9f9 	bl	8010c0c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800681a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681c:	7f5a      	ldrb	r2, [r3, #29]
 800681e:	4b7e      	ldr	r3, [pc, #504]	; (8006a18 <tcp_slowtmr+0x26c>)
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	429a      	cmp	r2, r3
 8006824:	d103      	bne.n	800682e <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 8006826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 800682c:	e1fc      	b.n	8006c28 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 800682e:	4b7a      	ldr	r3, [pc, #488]	; (8006a18 <tcp_slowtmr+0x26c>)
 8006830:	781a      	ldrb	r2, [r3, #0]
 8006832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006834:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 8006836:	2300      	movs	r3, #0
 8006838:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800683a:	2300      	movs	r3, #0
 800683c:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800683e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006840:	7d1b      	ldrb	r3, [r3, #20]
 8006842:	2b02      	cmp	r3, #2
 8006844:	d108      	bne.n	8006858 <tcp_slowtmr+0xac>
 8006846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006848:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800684c:	2b05      	cmp	r3, #5
 800684e:	d903      	bls.n	8006858 <tcp_slowtmr+0xac>
      ++pcb_remove;
 8006850:	7ffb      	ldrb	r3, [r7, #31]
 8006852:	3301      	adds	r3, #1
 8006854:	77fb      	strb	r3, [r7, #31]
 8006856:	e0a2      	b.n	800699e <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8006858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800685e:	2b0b      	cmp	r3, #11
 8006860:	d903      	bls.n	800686a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8006862:	7ffb      	ldrb	r3, [r7, #31]
 8006864:	3301      	adds	r3, #1
 8006866:	77fb      	strb	r3, [r7, #31]
 8006868:	e099      	b.n	800699e <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8006870:	2b00      	cmp	r3, #0
 8006872:	d032      	beq.n	80068da <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8006874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006876:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800687a:	3b01      	subs	r3, #1
 800687c:	4a6d      	ldr	r2, [pc, #436]	; (8006a34 <tcp_slowtmr+0x288>)
 800687e:	5cd3      	ldrb	r3, [r2, r3]
 8006880:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 8006882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006884:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8006888:	7cfa      	ldrb	r2, [r7, #19]
 800688a:	429a      	cmp	r2, r3
 800688c:	d907      	bls.n	800689e <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 800688e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006890:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8006894:	3301      	adds	r3, #1
 8006896:	b2da      	uxtb	r2, r3
 8006898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800689e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a0:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80068a4:	7cfa      	ldrb	r2, [r7, #19]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d879      	bhi.n	800699e <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 80068aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068ac:	f004 fb6e 	bl	800af8c <tcp_zero_window_probe>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d173      	bne.n	800699e <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 80068b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80068be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c0:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80068c4:	2b06      	cmp	r3, #6
 80068c6:	d86a      	bhi.n	800699e <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 80068c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ca:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80068ce:	3301      	adds	r3, #1
 80068d0:	b2da      	uxtb	r2, r3
 80068d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d4:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 80068d8:	e061      	b.n	800699e <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 80068da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068dc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	db08      	blt.n	80068f6 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 80068e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	3301      	adds	r3, #1
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	b21a      	sxth	r2, r3
 80068f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f4:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 80068f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d04f      	beq.n	800699e <tcp_slowtmr+0x1f2>
 80068fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006900:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800690a:	429a      	cmp	r2, r3
 800690c:	db47      	blt.n	800699e <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 800690e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006910:	7d1b      	ldrb	r3, [r3, #20]
 8006912:	2b02      	cmp	r3, #2
 8006914:	d018      	beq.n	8006948 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8006916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006918:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800691c:	2b0c      	cmp	r3, #12
 800691e:	bf28      	it	cs
 8006920:	230c      	movcs	r3, #12
 8006922:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8006924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006926:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800692a:	10db      	asrs	r3, r3, #3
 800692c:	b21b      	sxth	r3, r3
 800692e:	461a      	mov	r2, r3
 8006930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006932:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006936:	4413      	add	r3, r2
 8006938:	7dfa      	ldrb	r2, [r7, #23]
 800693a:	493f      	ldr	r1, [pc, #252]	; (8006a38 <tcp_slowtmr+0x28c>)
 800693c:	5c8a      	ldrb	r2, [r1, r2]
 800693e:	4093      	lsls	r3, r2
 8006940:	b21a      	sxth	r2, r3
 8006942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006944:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 8006948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694a:	2200      	movs	r2, #0
 800694c:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800694e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006950:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006956:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800695a:	4293      	cmp	r3, r2
 800695c:	bf28      	it	cs
 800695e:	4613      	movcs	r3, r2
 8006960:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 8006962:	8abb      	ldrh	r3, [r7, #20]
 8006964:	085b      	lsrs	r3, r3, #1
 8006966:	b29a      	uxth	r2, r3
 8006968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800696e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006970:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8006974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006976:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006978:	005b      	lsls	r3, r3, #1
 800697a:	b29b      	uxth	r3, r3
 800697c:	429a      	cmp	r2, r3
 800697e:	d206      	bcs.n	800698e <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 8006980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006982:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006984:	005b      	lsls	r3, r3, #1
 8006986:	b29a      	uxth	r2, r3
 8006988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800698e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006990:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 8006998:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800699a:	f004 f9dd 	bl	800ad58 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800699e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a0:	7d1b      	ldrb	r3, [r3, #20]
 80069a2:	2b06      	cmp	r3, #6
 80069a4:	d10f      	bne.n	80069c6 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80069a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a8:	7e9b      	ldrb	r3, [r3, #26]
 80069aa:	f003 0310 	and.w	r3, r3, #16
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d009      	beq.n	80069c6 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80069b2:	4b18      	ldr	r3, [pc, #96]	; (8006a14 <tcp_slowtmr+0x268>)
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	2b28      	cmp	r3, #40	; 0x28
 80069be:	d902      	bls.n	80069c6 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80069c0:	7ffb      	ldrb	r3, [r7, #31]
 80069c2:	3301      	adds	r3, #1
 80069c4:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80069c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c8:	7a1b      	ldrb	r3, [r3, #8]
 80069ca:	f003 0308 	and.w	r3, r3, #8
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d05d      	beq.n	8006a8e <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 80069d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d4:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80069d6:	2b04      	cmp	r3, #4
 80069d8:	d003      	beq.n	80069e2 <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 80069da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069dc:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 80069de:	2b07      	cmp	r3, #7
 80069e0:	d155      	bne.n	8006a8e <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80069e2:	4b0c      	ldr	r3, [pc, #48]	; (8006a14 <tcp_slowtmr+0x268>)
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 80069ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069f2:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80069f6:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80069fa:	4910      	ldr	r1, [pc, #64]	; (8006a3c <tcp_slowtmr+0x290>)
 80069fc:	fba1 1303 	umull	r1, r3, r1, r3
 8006a00:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d91c      	bls.n	8006a40 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8006a06:	7ffb      	ldrb	r3, [r7, #31]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8006a0c:	7fbb      	ldrb	r3, [r7, #30]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	77bb      	strb	r3, [r7, #30]
 8006a12:	e03c      	b.n	8006a8e <tcp_slowtmr+0x2e2>
 8006a14:	200038c8 	.word	0x200038c8
 8006a18:	2000022e 	.word	0x2000022e
 8006a1c:	200038c4 	.word	0x200038c4
 8006a20:	08014d50 	.word	0x08014d50
 8006a24:	08014f00 	.word	0x08014f00
 8006a28:	08014d8c 	.word	0x08014d8c
 8006a2c:	08014f2c 	.word	0x08014f2c
 8006a30:	08014f58 	.word	0x08014f58
 8006a34:	08016444 	.word	0x08016444
 8006a38:	08016434 	.word	0x08016434
 8006a3c:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006a40:	4b97      	ldr	r3, [pc, #604]	; (8006ca0 <tcp_slowtmr+0x4f4>)
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a46:	6a1b      	ldr	r3, [r3, #32]
 8006a48:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4c:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8006a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a52:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8006a56:	4618      	mov	r0, r3
 8006a58:	4b92      	ldr	r3, [pc, #584]	; (8006ca4 <tcp_slowtmr+0x4f8>)
 8006a5a:	fb03 f300 	mul.w	r3, r3, r0
 8006a5e:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 8006a60:	4991      	ldr	r1, [pc, #580]	; (8006ca8 <tcp_slowtmr+0x4fc>)
 8006a62:	fba1 1303 	umull	r1, r3, r1, r3
 8006a66:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d910      	bls.n	8006a8e <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 8006a6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a6e:	f004 fa50 	bl	800af12 <tcp_keepalive>
 8006a72:	4603      	mov	r3, r0
 8006a74:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 8006a76:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d107      	bne.n	8006a8e <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a80:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8006a84:	3301      	adds	r3, #1
 8006a86:	b2da      	uxtb	r2, r3
 8006a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8a:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d016      	beq.n	8006ac4 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8006a96:	4b82      	ldr	r3, [pc, #520]	; (8006ca0 <tcp_slowtmr+0x4f4>)
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	1ad2      	subs	r2, r2, r3
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	005b      	lsls	r3, r3, #1
 8006aac:	440b      	add	r3, r1
 8006aae:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d307      	bcc.n	8006ac4 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f000 fa04 	bl	8006ec6 <tcp_segs_free>
      pcb->ooseq = NULL;
 8006abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac6:	7d1b      	ldrb	r3, [r3, #20]
 8006ac8:	2b03      	cmp	r3, #3
 8006aca:	d109      	bne.n	8006ae0 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006acc:	4b74      	ldr	r3, [pc, #464]	; (8006ca0 <tcp_slowtmr+0x4f4>)
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad2:	6a1b      	ldr	r3, [r3, #32]
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	2b28      	cmp	r3, #40	; 0x28
 8006ad8:	d902      	bls.n	8006ae0 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8006ada:	7ffb      	ldrb	r3, [r7, #31]
 8006adc:	3301      	adds	r3, #1
 8006ade:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae2:	7d1b      	ldrb	r3, [r3, #20]
 8006ae4:	2b09      	cmp	r3, #9
 8006ae6:	d109      	bne.n	8006afc <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006ae8:	4b6d      	ldr	r3, [pc, #436]	; (8006ca0 <tcp_slowtmr+0x4f4>)
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aee:	6a1b      	ldr	r3, [r3, #32]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	2bf0      	cmp	r3, #240	; 0xf0
 8006af4:	d902      	bls.n	8006afc <tcp_slowtmr+0x350>
        ++pcb_remove;
 8006af6:	7ffb      	ldrb	r3, [r7, #31]
 8006af8:	3301      	adds	r3, #1
 8006afa:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006afc:	7ffb      	ldrb	r3, [r7, #31]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d05d      	beq.n	8006bbe <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8006b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b08:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8006b0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b0c:	f000 fbe6 	bl	80072dc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8006b10:	6a3b      	ldr	r3, [r7, #32]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d010      	beq.n	8006b38 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006b16:	4b65      	ldr	r3, [pc, #404]	; (8006cac <tcp_slowtmr+0x500>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d106      	bne.n	8006b2e <tcp_slowtmr+0x382>
 8006b20:	4b63      	ldr	r3, [pc, #396]	; (8006cb0 <tcp_slowtmr+0x504>)
 8006b22:	f240 4289 	movw	r2, #1161	; 0x489
 8006b26:	4963      	ldr	r1, [pc, #396]	; (8006cb4 <tcp_slowtmr+0x508>)
 8006b28:	4863      	ldr	r0, [pc, #396]	; (8006cb8 <tcp_slowtmr+0x50c>)
 8006b2a:	f00a f86f 	bl	8010c0c <iprintf>
        prev->next = pcb->next;
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b30:	68da      	ldr	r2, [r3, #12]
 8006b32:	6a3b      	ldr	r3, [r7, #32]
 8006b34:	60da      	str	r2, [r3, #12]
 8006b36:	e00f      	b.n	8006b58 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006b38:	4b5c      	ldr	r3, [pc, #368]	; (8006cac <tcp_slowtmr+0x500>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d006      	beq.n	8006b50 <tcp_slowtmr+0x3a4>
 8006b42:	4b5b      	ldr	r3, [pc, #364]	; (8006cb0 <tcp_slowtmr+0x504>)
 8006b44:	f240 428d 	movw	r2, #1165	; 0x48d
 8006b48:	495c      	ldr	r1, [pc, #368]	; (8006cbc <tcp_slowtmr+0x510>)
 8006b4a:	485b      	ldr	r0, [pc, #364]	; (8006cb8 <tcp_slowtmr+0x50c>)
 8006b4c:	f00a f85e 	bl	8010c0c <iprintf>
        tcp_active_pcbs = pcb->next;
 8006b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	4a55      	ldr	r2, [pc, #340]	; (8006cac <tcp_slowtmr+0x500>)
 8006b56:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8006b58:	7fbb      	ldrb	r3, [r7, #30]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d010      	beq.n	8006b80 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b60:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b64:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006b66:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8006b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6a:	1d1d      	adds	r5, r3, #4
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6e:	8adb      	ldrh	r3, [r3, #22]
 8006b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b72:	8b12      	ldrh	r2, [r2, #24]
 8006b74:	9201      	str	r2, [sp, #4]
 8006b76:	9300      	str	r3, [sp, #0]
 8006b78:	462b      	mov	r3, r5
 8006b7a:	4622      	mov	r2, r4
 8006b7c:	f004 f876 	bl	800ac6c <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8006b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8006b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b88:	7d1b      	ldrb	r3, [r3, #20]
 8006b8a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8006b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8006b96:	6839      	ldr	r1, [r7, #0]
 8006b98:	2001      	movs	r0, #1
 8006b9a:	f7fe f99d 	bl	8004ed8 <memp_free>

      tcp_active_pcbs_changed = 0;
 8006b9e:	4b48      	ldr	r3, [pc, #288]	; (8006cc0 <tcp_slowtmr+0x514>)
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d004      	beq.n	8006bb4 <tcp_slowtmr+0x408>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f06f 010c 	mvn.w	r1, #12
 8006bb0:	68b8      	ldr	r0, [r7, #8]
 8006bb2:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8006bb4:	4b42      	ldr	r3, [pc, #264]	; (8006cc0 <tcp_slowtmr+0x514>)
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d035      	beq.n	8006c28 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 8006bbc:	e606      	b.n	80067cc <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc0:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8006bc8:	6a3b      	ldr	r3, [r7, #32]
 8006bca:	7edb      	ldrb	r3, [r3, #27]
 8006bcc:	3301      	adds	r3, #1
 8006bce:	b2da      	uxtb	r2, r3
 8006bd0:	6a3b      	ldr	r3, [r7, #32]
 8006bd2:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8006bd4:	6a3b      	ldr	r3, [r7, #32]
 8006bd6:	7eda      	ldrb	r2, [r3, #27]
 8006bd8:	6a3b      	ldr	r3, [r7, #32]
 8006bda:	7f1b      	ldrb	r3, [r3, #28]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d323      	bcc.n	8006c28 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 8006be0:	6a3b      	ldr	r3, [r7, #32]
 8006be2:	2200      	movs	r2, #0
 8006be4:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8006be6:	4b36      	ldr	r3, [pc, #216]	; (8006cc0 <tcp_slowtmr+0x514>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8006bec:	6a3b      	ldr	r3, [r7, #32]
 8006bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00a      	beq.n	8006c0c <tcp_slowtmr+0x460>
 8006bf6:	6a3b      	ldr	r3, [r7, #32]
 8006bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bfc:	6a3a      	ldr	r2, [r7, #32]
 8006bfe:	6912      	ldr	r2, [r2, #16]
 8006c00:	6a39      	ldr	r1, [r7, #32]
 8006c02:	4610      	mov	r0, r2
 8006c04:	4798      	blx	r3
 8006c06:	4603      	mov	r3, r0
 8006c08:	777b      	strb	r3, [r7, #29]
 8006c0a:	e001      	b.n	8006c10 <tcp_slowtmr+0x464>
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8006c10:	4b2b      	ldr	r3, [pc, #172]	; (8006cc0 <tcp_slowtmr+0x514>)
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d000      	beq.n	8006c1a <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 8006c18:	e5d8      	b.n	80067cc <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8006c1a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d102      	bne.n	8006c28 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 8006c22:	6a38      	ldr	r0, [r7, #32]
 8006c24:	f003 fd98 	bl	800a758 <tcp_output>
  while (pcb != NULL) {
 8006c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	f47f add4 	bne.w	80067d8 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8006c30:	2300      	movs	r3, #0
 8006c32:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8006c34:	4b23      	ldr	r3, [pc, #140]	; (8006cc4 <tcp_slowtmr+0x518>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8006c3a:	e068      	b.n	8006d0e <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3e:	7d1b      	ldrb	r3, [r3, #20]
 8006c40:	2b0a      	cmp	r3, #10
 8006c42:	d006      	beq.n	8006c52 <tcp_slowtmr+0x4a6>
 8006c44:	4b1a      	ldr	r3, [pc, #104]	; (8006cb0 <tcp_slowtmr+0x504>)
 8006c46:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8006c4a:	491f      	ldr	r1, [pc, #124]	; (8006cc8 <tcp_slowtmr+0x51c>)
 8006c4c:	481a      	ldr	r0, [pc, #104]	; (8006cb8 <tcp_slowtmr+0x50c>)
 8006c4e:	f009 ffdd 	bl	8010c0c <iprintf>
    pcb_remove = 0;
 8006c52:	2300      	movs	r3, #0
 8006c54:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006c56:	4b12      	ldr	r3, [pc, #72]	; (8006ca0 <tcp_slowtmr+0x4f4>)
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	2bf0      	cmp	r3, #240	; 0xf0
 8006c62:	d902      	bls.n	8006c6a <tcp_slowtmr+0x4be>
      ++pcb_remove;
 8006c64:	7ffb      	ldrb	r3, [r7, #31]
 8006c66:	3301      	adds	r3, #1
 8006c68:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006c6a:	7ffb      	ldrb	r3, [r7, #31]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d049      	beq.n	8006d04 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8006c70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c72:	f000 fb33 	bl	80072dc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8006c76:	6a3b      	ldr	r3, [r7, #32]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d029      	beq.n	8006cd0 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006c7c:	4b11      	ldr	r3, [pc, #68]	; (8006cc4 <tcp_slowtmr+0x518>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d106      	bne.n	8006c94 <tcp_slowtmr+0x4e8>
 8006c86:	4b0a      	ldr	r3, [pc, #40]	; (8006cb0 <tcp_slowtmr+0x504>)
 8006c88:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8006c8c:	490f      	ldr	r1, [pc, #60]	; (8006ccc <tcp_slowtmr+0x520>)
 8006c8e:	480a      	ldr	r0, [pc, #40]	; (8006cb8 <tcp_slowtmr+0x50c>)
 8006c90:	f009 ffbc 	bl	8010c0c <iprintf>
        prev->next = pcb->next;
 8006c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c96:	68da      	ldr	r2, [r3, #12]
 8006c98:	6a3b      	ldr	r3, [r7, #32]
 8006c9a:	60da      	str	r2, [r3, #12]
 8006c9c:	e028      	b.n	8006cf0 <tcp_slowtmr+0x544>
 8006c9e:	bf00      	nop
 8006ca0:	200038c8 	.word	0x200038c8
 8006ca4:	000124f8 	.word	0x000124f8
 8006ca8:	10624dd3 	.word	0x10624dd3
 8006cac:	200038c4 	.word	0x200038c4
 8006cb0:	08014d50 	.word	0x08014d50
 8006cb4:	08014f88 	.word	0x08014f88
 8006cb8:	08014d8c 	.word	0x08014d8c
 8006cbc:	08014fb4 	.word	0x08014fb4
 8006cc0:	200038c0 	.word	0x200038c0
 8006cc4:	200038d4 	.word	0x200038d4
 8006cc8:	08014fe0 	.word	0x08014fe0
 8006ccc:	08015010 	.word	0x08015010
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006cd0:	4b12      	ldr	r3, [pc, #72]	; (8006d1c <tcp_slowtmr+0x570>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d006      	beq.n	8006ce8 <tcp_slowtmr+0x53c>
 8006cda:	4b11      	ldr	r3, [pc, #68]	; (8006d20 <tcp_slowtmr+0x574>)
 8006cdc:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8006ce0:	4910      	ldr	r1, [pc, #64]	; (8006d24 <tcp_slowtmr+0x578>)
 8006ce2:	4811      	ldr	r0, [pc, #68]	; (8006d28 <tcp_slowtmr+0x57c>)
 8006ce4:	f009 ff92 	bl	8010c0c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8006ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	4a0b      	ldr	r2, [pc, #44]	; (8006d1c <tcp_slowtmr+0x570>)
 8006cee:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf2:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8006cfa:	69b9      	ldr	r1, [r7, #24]
 8006cfc:	2001      	movs	r0, #1
 8006cfe:	f7fe f8eb 	bl	8004ed8 <memp_free>
 8006d02:	e004      	b.n	8006d0e <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 8006d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d06:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8006d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d193      	bne.n	8006c3c <tcp_slowtmr+0x490>
    }
  }
}
 8006d14:	bf00      	nop
 8006d16:	3728      	adds	r7, #40	; 0x28
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bdb0      	pop	{r4, r5, r7, pc}
 8006d1c:	200038d4 	.word	0x200038d4
 8006d20:	08014d50 	.word	0x08014d50
 8006d24:	08015038 	.word	0x08015038
 8006d28:	08014d8c 	.word	0x08014d8c

08006d2c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8006d32:	4b2d      	ldr	r3, [pc, #180]	; (8006de8 <tcp_fasttmr+0xbc>)
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	3301      	adds	r3, #1
 8006d38:	b2da      	uxtb	r2, r3
 8006d3a:	4b2b      	ldr	r3, [pc, #172]	; (8006de8 <tcp_fasttmr+0xbc>)
 8006d3c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8006d3e:	4b2b      	ldr	r3, [pc, #172]	; (8006dec <tcp_fasttmr+0xc0>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006d44:	e048      	b.n	8006dd8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	7f5a      	ldrb	r2, [r3, #29]
 8006d4a:	4b27      	ldr	r3, [pc, #156]	; (8006de8 <tcp_fasttmr+0xbc>)
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d03f      	beq.n	8006dd2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8006d52:	4b25      	ldr	r3, [pc, #148]	; (8006de8 <tcp_fasttmr+0xbc>)
 8006d54:	781a      	ldrb	r2, [r3, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	7e9b      	ldrb	r3, [r3, #26]
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d010      	beq.n	8006d88 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	7e9b      	ldrb	r3, [r3, #26]
 8006d6a:	f043 0302 	orr.w	r3, r3, #2
 8006d6e:	b2da      	uxtb	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f003 fcef 	bl	800a758 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	7e9b      	ldrb	r3, [r3, #26]
 8006d7e:	f023 0303 	bic.w	r3, r3, #3
 8006d82:	b2da      	uxtb	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	7e9b      	ldrb	r3, [r3, #26]
 8006d8c:	f003 0308 	and.w	r3, r3, #8
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d009      	beq.n	8006da8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	7e9b      	ldrb	r3, [r3, #26]
 8006d98:	f023 0308 	bic.w	r3, r3, #8
 8006d9c:	b2da      	uxtb	r2, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f7ff f98e 	bl	80060c4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00a      	beq.n	8006dcc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8006db6:	4b0e      	ldr	r3, [pc, #56]	; (8006df0 <tcp_fasttmr+0xc4>)
 8006db8:	2200      	movs	r2, #0
 8006dba:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 f819 	bl	8006df4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8006dc2:	4b0b      	ldr	r3, [pc, #44]	; (8006df0 <tcp_fasttmr+0xc4>)
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d000      	beq.n	8006dcc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8006dca:	e7b8      	b.n	8006d3e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	607b      	str	r3, [r7, #4]
 8006dd0:	e002      	b.n	8006dd8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1b3      	bne.n	8006d46 <tcp_fasttmr+0x1a>
    }
  }
}
 8006dde:	bf00      	nop
 8006de0:	3708      	adds	r7, #8
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	2000022e 	.word	0x2000022e
 8006dec:	200038c4 	.word	0x200038c4
 8006df0:	200038c0 	.word	0x200038c0

08006df4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006df4:	b590      	push	{r4, r7, lr}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e00:	7b5b      	ldrb	r3, [r3, #13]
 8006e02:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e08:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00b      	beq.n	8006e32 <tcp_process_refused_data+0x3e>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6918      	ldr	r0, [r3, #16]
 8006e24:	2300      	movs	r3, #0
 8006e26:	68ba      	ldr	r2, [r7, #8]
 8006e28:	6879      	ldr	r1, [r7, #4]
 8006e2a:	47a0      	blx	r4
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	73fb      	strb	r3, [r7, #15]
 8006e30:	e007      	b.n	8006e42 <tcp_process_refused_data+0x4e>
 8006e32:	2300      	movs	r3, #0
 8006e34:	68ba      	ldr	r2, [r7, #8]
 8006e36:	6879      	ldr	r1, [r7, #4]
 8006e38:	2000      	movs	r0, #0
 8006e3a:	f000 f88c 	bl	8006f56 <tcp_recv_null>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d12a      	bne.n	8006ea0 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8006e4a:	7bbb      	ldrb	r3, [r7, #14]
 8006e4c:	f003 0320 	and.w	r3, r3, #32
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d033      	beq.n	8006ebc <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e58:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006e5c:	d005      	beq.n	8006e6a <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e62:	3301      	adds	r3, #1
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00b      	beq.n	8006e8c <tcp_process_refused_data+0x98>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6918      	ldr	r0, [r3, #16]
 8006e7e:	2300      	movs	r3, #0
 8006e80:	2200      	movs	r2, #0
 8006e82:	6879      	ldr	r1, [r7, #4]
 8006e84:	47a0      	blx	r4
 8006e86:	4603      	mov	r3, r0
 8006e88:	73fb      	strb	r3, [r7, #15]
 8006e8a:	e001      	b.n	8006e90 <tcp_process_refused_data+0x9c>
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8006e90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e94:	f113 0f0d 	cmn.w	r3, #13
 8006e98:	d110      	bne.n	8006ebc <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 8006e9a:	f06f 030c 	mvn.w	r3, #12
 8006e9e:	e00e      	b.n	8006ebe <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 8006ea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ea4:	f113 0f0d 	cmn.w	r3, #13
 8006ea8:	d102      	bne.n	8006eb0 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8006eaa:	f06f 030c 	mvn.w	r3, #12
 8006eae:	e006      	b.n	8006ebe <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	68ba      	ldr	r2, [r7, #8]
 8006eb4:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 8006eb6:	f06f 0304 	mvn.w	r3, #4
 8006eba:	e000      	b.n	8006ebe <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3714      	adds	r7, #20
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd90      	pop	{r4, r7, pc}

08006ec6 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b084      	sub	sp, #16
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8006ece:	e007      	b.n	8006ee0 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f809 	bl	8006eee <tcp_seg_free>
    seg = next;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1f4      	bne.n	8006ed0 <tcp_segs_free+0xa>
  }
}
 8006ee6:	bf00      	nop
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b082      	sub	sp, #8
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00c      	beq.n	8006f16 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d004      	beq.n	8006f0e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7fe fd1d 	bl	8005948 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8006f0e:	6879      	ldr	r1, [r7, #4]
 8006f10:	2003      	movs	r0, #3
 8006f12:	f7fd ffe1 	bl	8004ed8 <memp_free>
  }
}
 8006f16:	bf00      	nop
 8006f18:	3708      	adds	r7, #8
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b084      	sub	sp, #16
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8006f26:	2003      	movs	r0, #3
 8006f28:	f7fd ff8a 	bl	8004e40 <memp_malloc>
 8006f2c:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d101      	bne.n	8006f38 <tcp_seg_copy+0x1a>
    return NULL;
 8006f34:	2300      	movs	r3, #0
 8006f36:	e00a      	b.n	8006f4e <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8006f38:	2210      	movs	r2, #16
 8006f3a:	6879      	ldr	r1, [r7, #4]
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f009 f822 	bl	800ff86 <memcpy>
  pbuf_ref(cseg->p);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7fe fda8 	bl	8005a9c <pbuf_ref>
  return cseg;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b084      	sub	sp, #16
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	60f8      	str	r0, [r7, #12]
 8006f5e:	60b9      	str	r1, [r7, #8]
 8006f60:	607a      	str	r2, [r7, #4]
 8006f62:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d009      	beq.n	8006f7e <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	891b      	ldrh	r3, [r3, #8]
 8006f6e:	4619      	mov	r1, r3
 8006f70:	68b8      	ldr	r0, [r7, #8]
 8006f72:	f7ff fb7d 	bl	8006670 <tcp_recved>
    pbuf_free(p);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f7fe fce6 	bl	8005948 <pbuf_free>
 8006f7c:	e008      	b.n	8006f90 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 8006f7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d104      	bne.n	8006f90 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 8006f86:	68b8      	ldr	r0, [r7, #8]
 8006f88:	f7ff f902 	bl	8006190 <tcp_close>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	e000      	b.n	8006f92 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
	...

08006f9c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b086      	sub	sp, #24
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8006fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	db01      	blt.n	8006fb2 <tcp_kill_prio+0x16>
 8006fae:	79fb      	ldrb	r3, [r7, #7]
 8006fb0:	e000      	b.n	8006fb4 <tcp_kill_prio+0x18>
 8006fb2:	237f      	movs	r3, #127	; 0x7f
 8006fb4:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006fbe:	4b16      	ldr	r3, [pc, #88]	; (8007018 <tcp_kill_prio+0x7c>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	617b      	str	r3, [r7, #20]
 8006fc4:	e01a      	b.n	8006ffc <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	7d5b      	ldrb	r3, [r3, #21]
 8006fca:	7afa      	ldrb	r2, [r7, #11]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d312      	bcc.n	8006ff6 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006fd0:	4b12      	ldr	r3, [pc, #72]	; (800701c <tcp_kill_prio+0x80>)
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	6a1b      	ldr	r3, [r3, #32]
 8006fd8:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d80a      	bhi.n	8006ff6 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 8006fe0:	4b0e      	ldr	r3, [pc, #56]	; (800701c <tcp_kill_prio+0x80>)
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	6a1b      	ldr	r3, [r3, #32]
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	7d5b      	ldrb	r3, [r3, #21]
 8006ff4:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	617b      	str	r3, [r7, #20]
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1e1      	bne.n	8006fc6 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d002      	beq.n	800700e <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007008:	6938      	ldr	r0, [r7, #16]
 800700a:	f7ff f98b 	bl	8006324 <tcp_abort>
  }
}
 800700e:	bf00      	nop
 8007010:	3718      	adds	r7, #24
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	200038c4 	.word	0x200038c4
 800701c:	200038c8 	.word	0x200038c8

08007020 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b086      	sub	sp, #24
 8007024:	af00      	add	r7, sp, #0
 8007026:	4603      	mov	r3, r0
 8007028:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800702a:	79fb      	ldrb	r3, [r7, #7]
 800702c:	2b08      	cmp	r3, #8
 800702e:	d009      	beq.n	8007044 <tcp_kill_state+0x24>
 8007030:	79fb      	ldrb	r3, [r7, #7]
 8007032:	2b09      	cmp	r3, #9
 8007034:	d006      	beq.n	8007044 <tcp_kill_state+0x24>
 8007036:	4b1a      	ldr	r3, [pc, #104]	; (80070a0 <tcp_kill_state+0x80>)
 8007038:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800703c:	4919      	ldr	r1, [pc, #100]	; (80070a4 <tcp_kill_state+0x84>)
 800703e:	481a      	ldr	r0, [pc, #104]	; (80070a8 <tcp_kill_state+0x88>)
 8007040:	f009 fde4 	bl	8010c0c <iprintf>

  inactivity = 0;
 8007044:	2300      	movs	r3, #0
 8007046:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007048:	2300      	movs	r3, #0
 800704a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800704c:	4b17      	ldr	r3, [pc, #92]	; (80070ac <tcp_kill_state+0x8c>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	617b      	str	r3, [r7, #20]
 8007052:	e017      	b.n	8007084 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	7d1b      	ldrb	r3, [r3, #20]
 8007058:	79fa      	ldrb	r2, [r7, #7]
 800705a:	429a      	cmp	r2, r3
 800705c:	d10f      	bne.n	800707e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800705e:	4b14      	ldr	r3, [pc, #80]	; (80070b0 <tcp_kill_state+0x90>)
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	1ad3      	subs	r3, r2, r3
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	429a      	cmp	r2, r3
 800706c:	d807      	bhi.n	800707e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800706e:	4b10      	ldr	r3, [pc, #64]	; (80070b0 <tcp_kill_state+0x90>)
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	617b      	str	r3, [r7, #20]
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1e4      	bne.n	8007054 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d003      	beq.n	8007098 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007090:	2100      	movs	r1, #0
 8007092:	6938      	ldr	r0, [r7, #16]
 8007094:	f7ff f894 	bl	80061c0 <tcp_abandon>
  }
}
 8007098:	bf00      	nop
 800709a:	3718      	adds	r7, #24
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	08014d50 	.word	0x08014d50
 80070a4:	08015060 	.word	0x08015060
 80070a8:	08014d8c 	.word	0x08014d8c
 80070ac:	200038c4 	.word	0x200038c4
 80070b0:	200038c8 	.word	0x200038c8

080070b4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80070ba:	2300      	movs	r3, #0
 80070bc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80070be:	2300      	movs	r3, #0
 80070c0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80070c2:	4b12      	ldr	r3, [pc, #72]	; (800710c <tcp_kill_timewait+0x58>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	60fb      	str	r3, [r7, #12]
 80070c8:	e012      	b.n	80070f0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80070ca:	4b11      	ldr	r3, [pc, #68]	; (8007110 <tcp_kill_timewait+0x5c>)
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d807      	bhi.n	80070ea <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80070da:	4b0d      	ldr	r3, [pc, #52]	; (8007110 <tcp_kill_timewait+0x5c>)
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6a1b      	ldr	r3, [r3, #32]
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	60fb      	str	r3, [r7, #12]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d1e9      	bne.n	80070ca <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d002      	beq.n	8007102 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 80070fc:	68b8      	ldr	r0, [r7, #8]
 80070fe:	f7ff f911 	bl	8006324 <tcp_abort>
  }
}
 8007102:	bf00      	nop
 8007104:	3710      	adds	r7, #16
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	200038d4 	.word	0x200038d4
 8007110:	200038c8 	.word	0x200038c8

08007114 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	4603      	mov	r3, r0
 800711c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800711e:	2001      	movs	r0, #1
 8007120:	f7fd fe8e 	bl	8004e40 <memp_malloc>
 8007124:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d124      	bne.n	8007176 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800712c:	f7ff ffc2 	bl	80070b4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007130:	2001      	movs	r0, #1
 8007132:	f7fd fe85 	bl	8004e40 <memp_malloc>
 8007136:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d11b      	bne.n	8007176 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800713e:	2009      	movs	r0, #9
 8007140:	f7ff ff6e 	bl	8007020 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007144:	2001      	movs	r0, #1
 8007146:	f7fd fe7b 	bl	8004e40 <memp_malloc>
 800714a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d111      	bne.n	8007176 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8007152:	2008      	movs	r0, #8
 8007154:	f7ff ff64 	bl	8007020 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007158:	2001      	movs	r0, #1
 800715a:	f7fd fe71 	bl	8004e40 <memp_malloc>
 800715e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d107      	bne.n	8007176 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8007166:	79fb      	ldrb	r3, [r7, #7]
 8007168:	4618      	mov	r0, r3
 800716a:	f7ff ff17 	bl	8006f9c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800716e:	2001      	movs	r0, #1
 8007170:	f7fd fe66 	bl	8004e40 <memp_malloc>
 8007174:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d03f      	beq.n	80071fc <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800717c:	2298      	movs	r2, #152	; 0x98
 800717e:	2100      	movs	r1, #0
 8007180:	68f8      	ldr	r0, [r7, #12]
 8007182:	f008 ff0b 	bl	800ff9c <memset>
    pcb->prio = prio;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	79fa      	ldrb	r2, [r7, #7]
 800718a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007192:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800719c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	22ff      	movs	r2, #255	; 0xff
 80071aa:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f44f 7206 	mov.w	r2, #536	; 0x218
 80071b2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2206      	movs	r2, #6
 80071b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2206      	movs	r2, #6
 80071c0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80071c8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80071d2:	4b0d      	ldr	r3, [pc, #52]	; (8007208 <tcp_alloc+0xf4>)
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80071da:	4b0c      	ldr	r3, [pc, #48]	; (800720c <tcp_alloc+0xf8>)
 80071dc:	781a      	ldrb	r2, [r3, #0]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80071e8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	4a08      	ldr	r2, [pc, #32]	; (8007210 <tcp_alloc+0xfc>)
 80071f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	4a07      	ldr	r2, [pc, #28]	; (8007214 <tcp_alloc+0x100>)
 80071f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80071fc:	68fb      	ldr	r3, [r7, #12]
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3710      	adds	r7, #16
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	200038c8 	.word	0x200038c8
 800720c:	2000022e 	.word	0x2000022e
 8007210:	08006f57 	.word	0x08006f57
 8007214:	006ddd00 	.word	0x006ddd00

08007218 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800721c:	2040      	movs	r0, #64	; 0x40
 800721e:	f7ff ff79 	bl	8007114 <tcp_alloc>
 8007222:	4603      	mov	r3, r0
}
 8007224:	4618      	mov	r0, r3
 8007226:	bd80      	pop	{r7, pc}

08007228 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d00e      	beq.n	8007256 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	7d1b      	ldrb	r3, [r3, #20]
 800723c:	2b01      	cmp	r3, #1
 800723e:	d106      	bne.n	800724e <tcp_recv+0x26>
 8007240:	4b07      	ldr	r3, [pc, #28]	; (8007260 <tcp_recv+0x38>)
 8007242:	f240 62bb 	movw	r2, #1723	; 0x6bb
 8007246:	4907      	ldr	r1, [pc, #28]	; (8007264 <tcp_recv+0x3c>)
 8007248:	4807      	ldr	r0, [pc, #28]	; (8007268 <tcp_recv+0x40>)
 800724a:	f009 fcdf 	bl	8010c0c <iprintf>
    pcb->recv = recv;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	683a      	ldr	r2, [r7, #0]
 8007252:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8007256:	bf00      	nop
 8007258:	3708      	adds	r7, #8
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	08014d50 	.word	0x08014d50
 8007264:	08015070 	.word	0x08015070
 8007268:	08014d8c 	.word	0x08014d8c

0800726c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d00e      	beq.n	800729a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	7d1b      	ldrb	r3, [r3, #20]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d106      	bne.n	8007292 <tcp_err+0x26>
 8007284:	4b07      	ldr	r3, [pc, #28]	; (80072a4 <tcp_err+0x38>)
 8007286:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800728a:	4907      	ldr	r1, [pc, #28]	; (80072a8 <tcp_err+0x3c>)
 800728c:	4807      	ldr	r0, [pc, #28]	; (80072ac <tcp_err+0x40>)
 800728e:	f009 fcbd 	bl	8010c0c <iprintf>
    pcb->errf = err;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	683a      	ldr	r2, [r7, #0]
 8007296:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 800729a:	bf00      	nop
 800729c:	3708      	adds	r7, #8
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	08014d50 	.word	0x08014d50
 80072a8:	080150c0 	.word	0x080150c0
 80072ac:	08014d8c 	.word	0x08014d8c

080072b0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d008      	beq.n	80072d2 <tcp_accept+0x22>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	7d1b      	ldrb	r3, [r3, #20]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d104      	bne.n	80072d2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	683a      	ldr	r2, [r7, #0]
 80072d0:	619a      	str	r2, [r3, #24]
  }
}
 80072d2:	bf00      	nop
 80072d4:	3714      	adds	r7, #20
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bc80      	pop	{r7}
 80072da:	4770      	bx	lr

080072dc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	7d1b      	ldrb	r3, [r3, #20]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d034      	beq.n	8007356 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80072f0:	2b0a      	cmp	r3, #10
 80072f2:	d030      	beq.n	8007356 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d02c      	beq.n	8007356 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007300:	2b00      	cmp	r3, #0
 8007302:	d007      	beq.n	8007314 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007308:	4618      	mov	r0, r3
 800730a:	f7fe fb1d 	bl	8005948 <pbuf_free>
      pcb->refused_data = NULL;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007318:	4618      	mov	r0, r3
 800731a:	f7ff fdd4 	bl	8006ec6 <tcp_segs_free>
    pcb->ooseq = NULL;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800732a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007330:	4618      	mov	r0, r3
 8007332:	f7ff fdc8 	bl	8006ec6 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800733a:	4618      	mov	r0, r3
 800733c:	f7ff fdc3 	bl	8006ec6 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	669a      	str	r2, [r3, #104]	; 0x68
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 8007356:	bf00      	nop
 8007358:	3708      	adds	r7, #8
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
	...

08007360 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	683a      	ldr	r2, [r7, #0]
 8007370:	429a      	cmp	r2, r3
 8007372:	d105      	bne.n	8007380 <tcp_pcb_remove+0x20>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	68da      	ldr	r2, [r3, #12]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	601a      	str	r2, [r3, #0]
 800737e:	e013      	b.n	80073a8 <tcp_pcb_remove+0x48>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	60fb      	str	r3, [r7, #12]
 8007386:	e00c      	b.n	80073a2 <tcp_pcb_remove+0x42>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	683a      	ldr	r2, [r7, #0]
 800738e:	429a      	cmp	r2, r3
 8007390:	d104      	bne.n	800739c <tcp_pcb_remove+0x3c>
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	68da      	ldr	r2, [r3, #12]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	60da      	str	r2, [r3, #12]
 800739a:	e005      	b.n	80073a8 <tcp_pcb_remove+0x48>
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	60fb      	str	r3, [r7, #12]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d1ef      	bne.n	8007388 <tcp_pcb_remove+0x28>
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	2200      	movs	r2, #0
 80073ac:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80073ae:	6838      	ldr	r0, [r7, #0]
 80073b0:	f7ff ff94 	bl	80072dc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	7d1b      	ldrb	r3, [r3, #20]
 80073b8:	2b0a      	cmp	r3, #10
 80073ba:	d013      	beq.n	80073e4 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d00f      	beq.n	80073e4 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	7e9b      	ldrb	r3, [r3, #26]
 80073c8:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d009      	beq.n	80073e4 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	7e9b      	ldrb	r3, [r3, #26]
 80073d4:	f043 0302 	orr.w	r3, r3, #2
 80073d8:	b2da      	uxtb	r2, r3
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80073de:	6838      	ldr	r0, [r7, #0]
 80073e0:	f003 f9ba 	bl	800a758 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	7d1b      	ldrb	r3, [r3, #20]
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d020      	beq.n	800742e <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d006      	beq.n	8007402 <tcp_pcb_remove+0xa2>
 80073f4:	4b13      	ldr	r3, [pc, #76]	; (8007444 <tcp_pcb_remove+0xe4>)
 80073f6:	f240 7253 	movw	r2, #1875	; 0x753
 80073fa:	4913      	ldr	r1, [pc, #76]	; (8007448 <tcp_pcb_remove+0xe8>)
 80073fc:	4813      	ldr	r0, [pc, #76]	; (800744c <tcp_pcb_remove+0xec>)
 80073fe:	f009 fc05 	bl	8010c0c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007406:	2b00      	cmp	r3, #0
 8007408:	d006      	beq.n	8007418 <tcp_pcb_remove+0xb8>
 800740a:	4b0e      	ldr	r3, [pc, #56]	; (8007444 <tcp_pcb_remove+0xe4>)
 800740c:	f240 7254 	movw	r2, #1876	; 0x754
 8007410:	490f      	ldr	r1, [pc, #60]	; (8007450 <tcp_pcb_remove+0xf0>)
 8007412:	480e      	ldr	r0, [pc, #56]	; (800744c <tcp_pcb_remove+0xec>)
 8007414:	f009 fbfa 	bl	8010c0c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800741c:	2b00      	cmp	r3, #0
 800741e:	d006      	beq.n	800742e <tcp_pcb_remove+0xce>
 8007420:	4b08      	ldr	r3, [pc, #32]	; (8007444 <tcp_pcb_remove+0xe4>)
 8007422:	f240 7256 	movw	r2, #1878	; 0x756
 8007426:	490b      	ldr	r1, [pc, #44]	; (8007454 <tcp_pcb_remove+0xf4>)
 8007428:	4808      	ldr	r0, [pc, #32]	; (800744c <tcp_pcb_remove+0xec>)
 800742a:	f009 fbef 	bl	8010c0c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	2200      	movs	r2, #0
 8007432:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	2200      	movs	r2, #0
 8007438:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800743a:	bf00      	nop
 800743c:	3710      	adds	r7, #16
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	08014d50 	.word	0x08014d50
 8007448:	08015108 	.word	0x08015108
 800744c:	08014d8c 	.word	0x08014d8c
 8007450:	08015120 	.word	0x08015120
 8007454:	0801513c 	.word	0x0801513c

08007458 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007460:	4b06      	ldr	r3, [pc, #24]	; (800747c <tcp_next_iss+0x24>)
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	4b06      	ldr	r3, [pc, #24]	; (8007480 <tcp_next_iss+0x28>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4413      	add	r3, r2
 800746a:	4a04      	ldr	r2, [pc, #16]	; (800747c <tcp_next_iss+0x24>)
 800746c:	6013      	str	r3, [r2, #0]
  return iss;
 800746e:	4b03      	ldr	r3, [pc, #12]	; (800747c <tcp_next_iss+0x24>)
 8007470:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8007472:	4618      	mov	r0, r3
 8007474:	370c      	adds	r7, #12
 8007476:	46bd      	mov	sp, r7
 8007478:	bc80      	pop	{r7}
 800747a:	4770      	bx	lr
 800747c:	20000008 	.word	0x20000008
 8007480:	200038c8 	.word	0x200038c8

08007484 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	4603      	mov	r3, r0
 800748c:	6039      	str	r1, [r7, #0]
 800748e:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 8007490:	6838      	ldr	r0, [r7, #0]
 8007492:	f005 f987 	bl	800c7a4 <ip4_route>
 8007496:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d101      	bne.n	80074a2 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800749e:	88fb      	ldrh	r3, [r7, #6]
 80074a0:	e010      	b.n	80074c4 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80074a6:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80074a8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d008      	beq.n	80074c2 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 80074b0:	897b      	ldrh	r3, [r7, #10]
 80074b2:	3b28      	subs	r3, #40	; 0x28
 80074b4:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80074b6:	893a      	ldrh	r2, [r7, #8]
 80074b8:	88fb      	ldrh	r3, [r7, #6]
 80074ba:	4293      	cmp	r3, r2
 80074bc:	bf28      	it	cs
 80074be:	4613      	movcs	r3, r2
 80074c0:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 80074c2:	88fb      	ldrh	r3, [r7, #6]
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3710      	adds	r7, #16
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80074da:	e011      	b.n	8007500 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d108      	bne.n	80074fa <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	f7fe ff18 	bl	8006324 <tcp_abort>
      pcb = next;
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	60fb      	str	r3, [r7, #12]
 80074f8:	e002      	b.n	8007500 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1ea      	bne.n	80074dc <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 8007506:	bf00      	nop
 8007508:	3710      	adds	r7, #16
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
	...

08007510 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d02c      	beq.n	800757a <tcp_netif_ip_addr_changed+0x6a>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d028      	beq.n	800757a <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007528:	4b16      	ldr	r3, [pc, #88]	; (8007584 <tcp_netif_ip_addr_changed+0x74>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4619      	mov	r1, r3
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f7ff ffcc 	bl	80074cc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007534:	4b14      	ldr	r3, [pc, #80]	; (8007588 <tcp_netif_ip_addr_changed+0x78>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4619      	mov	r1, r3
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f7ff ffc6 	bl	80074cc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d019      	beq.n	800757a <tcp_netif_ip_addr_changed+0x6a>
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d015      	beq.n	800757a <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800754e:	4b0f      	ldr	r3, [pc, #60]	; (800758c <tcp_netif_ip_addr_changed+0x7c>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	60fb      	str	r3, [r7, #12]
 8007554:	e00e      	b.n	8007574 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	429a      	cmp	r2, r3
 8007566:	d103      	bne.n	8007570 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	60fb      	str	r3, [r7, #12]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d1ed      	bne.n	8007556 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800757a:	bf00      	nop
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	200038c4 	.word	0x200038c4
 8007588:	200038d0 	.word	0x200038d0
 800758c:	200038cc 	.word	0x200038cc

08007590 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8007590:	b590      	push	{r4, r7, lr}
 8007592:	b08b      	sub	sp, #44	; 0x2c
 8007594:	af02      	add	r7, sp, #8
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	4a82      	ldr	r2, [pc, #520]	; (80077a8 <tcp_input+0x218>)
 80075a0:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	895b      	ldrh	r3, [r3, #10]
 80075a6:	2b13      	cmp	r3, #19
 80075a8:	f240 838a 	bls.w	8007cc0 <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80075ac:	4b7f      	ldr	r3, [pc, #508]	; (80077ac <tcp_input+0x21c>)
 80075ae:	695a      	ldr	r2, [r3, #20]
 80075b0:	4b7e      	ldr	r3, [pc, #504]	; (80077ac <tcp_input+0x21c>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4619      	mov	r1, r3
 80075b6:	4610      	mov	r0, r2
 80075b8:	f005 fb6e 	bl	800cc98 <ip4_addr_isbroadcast_u32>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	f040 8380 	bne.w	8007cc4 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80075c4:	4b79      	ldr	r3, [pc, #484]	; (80077ac <tcp_input+0x21c>)
 80075c6:	695b      	ldr	r3, [r3, #20]
 80075c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80075cc:	2be0      	cmp	r3, #224	; 0xe0
 80075ce:	f000 8379 	beq.w	8007cc4 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 80075d2:	4b75      	ldr	r3, [pc, #468]	; (80077a8 <tcp_input+0x218>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	899b      	ldrh	r3, [r3, #12]
 80075d8:	b29b      	uxth	r3, r3
 80075da:	4618      	mov	r0, r3
 80075dc:	f7fd f888 	bl	80046f0 <lwip_htons>
 80075e0:	4603      	mov	r3, r0
 80075e2:	0b1b      	lsrs	r3, r3, #12
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80075ec:	7cbb      	ldrb	r3, [r7, #18]
 80075ee:	2b13      	cmp	r3, #19
 80075f0:	f240 8368 	bls.w	8007cc4 <tcp_input+0x734>
 80075f4:	7cbb      	ldrb	r3, [r7, #18]
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	891b      	ldrh	r3, [r3, #8]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	f200 8361 	bhi.w	8007cc4 <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8007602:	7cbb      	ldrb	r3, [r7, #18]
 8007604:	b29b      	uxth	r3, r3
 8007606:	3b14      	subs	r3, #20
 8007608:	b29a      	uxth	r2, r3
 800760a:	4b69      	ldr	r3, [pc, #420]	; (80077b0 <tcp_input+0x220>)
 800760c:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800760e:	4b69      	ldr	r3, [pc, #420]	; (80077b4 <tcp_input+0x224>)
 8007610:	2200      	movs	r2, #0
 8007612:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	895a      	ldrh	r2, [r3, #10]
 8007618:	7cbb      	ldrb	r3, [r7, #18]
 800761a:	b29b      	uxth	r3, r3
 800761c:	429a      	cmp	r2, r3
 800761e:	d30d      	bcc.n	800763c <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8007620:	4b63      	ldr	r3, [pc, #396]	; (80077b0 <tcp_input+0x220>)
 8007622:	881a      	ldrh	r2, [r3, #0]
 8007624:	4b64      	ldr	r3, [pc, #400]	; (80077b8 <tcp_input+0x228>)
 8007626:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8007628:	7cbb      	ldrb	r3, [r7, #18]
 800762a:	b29b      	uxth	r3, r3
 800762c:	425b      	negs	r3, r3
 800762e:	b29b      	uxth	r3, r3
 8007630:	b21b      	sxth	r3, r3
 8007632:	4619      	mov	r1, r3
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f7fe f963 	bl	8005900 <pbuf_header>
 800763a:	e055      	b.n	80076e8 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d105      	bne.n	8007650 <tcp_input+0xc0>
 8007644:	4b5d      	ldr	r3, [pc, #372]	; (80077bc <tcp_input+0x22c>)
 8007646:	22b2      	movs	r2, #178	; 0xb2
 8007648:	495d      	ldr	r1, [pc, #372]	; (80077c0 <tcp_input+0x230>)
 800764a:	485e      	ldr	r0, [pc, #376]	; (80077c4 <tcp_input+0x234>)
 800764c:	f009 fade 	bl	8010c0c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 8007650:	f06f 0113 	mvn.w	r1, #19
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f7fe f953 	bl	8005900 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	895a      	ldrh	r2, [r3, #10]
 800765e:	4b56      	ldr	r3, [pc, #344]	; (80077b8 <tcp_input+0x228>)
 8007660:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8007662:	4b53      	ldr	r3, [pc, #332]	; (80077b0 <tcp_input+0x220>)
 8007664:	881a      	ldrh	r2, [r3, #0]
 8007666:	4b54      	ldr	r3, [pc, #336]	; (80077b8 <tcp_input+0x228>)
 8007668:	881b      	ldrh	r3, [r3, #0]
 800766a:	1ad3      	subs	r3, r2, r3
 800766c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800766e:	4b52      	ldr	r3, [pc, #328]	; (80077b8 <tcp_input+0x228>)
 8007670:	881b      	ldrh	r3, [r3, #0]
 8007672:	425b      	negs	r3, r3
 8007674:	b29b      	uxth	r3, r3
 8007676:	b21b      	sxth	r3, r3
 8007678:	4619      	mov	r1, r3
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f7fe f940 	bl	8005900 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	895b      	ldrh	r3, [r3, #10]
 8007686:	8a3a      	ldrh	r2, [r7, #16]
 8007688:	429a      	cmp	r2, r3
 800768a:	f200 831d 	bhi.w	8007cc8 <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	4a47      	ldr	r2, [pc, #284]	; (80077b4 <tcp_input+0x224>)
 8007696:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	8a3b      	ldrh	r3, [r7, #16]
 800769e:	425b      	negs	r3, r3
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	b21b      	sxth	r3, r3
 80076a4:	4619      	mov	r1, r3
 80076a6:	4610      	mov	r0, r2
 80076a8:	f7fe f92a 	bl	8005900 <pbuf_header>
    p->tot_len -= opt2len;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	891a      	ldrh	r2, [r3, #8]
 80076b0:	8a3b      	ldrh	r3, [r7, #16]
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	b29a      	uxth	r2, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	895b      	ldrh	r3, [r3, #10]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d005      	beq.n	80076ce <tcp_input+0x13e>
 80076c2:	4b3e      	ldr	r3, [pc, #248]	; (80077bc <tcp_input+0x22c>)
 80076c4:	22cf      	movs	r2, #207	; 0xcf
 80076c6:	4940      	ldr	r1, [pc, #256]	; (80077c8 <tcp_input+0x238>)
 80076c8:	483e      	ldr	r0, [pc, #248]	; (80077c4 <tcp_input+0x234>)
 80076ca:	f009 fa9f 	bl	8010c0c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	891a      	ldrh	r2, [r3, #8]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	891b      	ldrh	r3, [r3, #8]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d005      	beq.n	80076e8 <tcp_input+0x158>
 80076dc:	4b37      	ldr	r3, [pc, #220]	; (80077bc <tcp_input+0x22c>)
 80076de:	22d0      	movs	r2, #208	; 0xd0
 80076e0:	493a      	ldr	r1, [pc, #232]	; (80077cc <tcp_input+0x23c>)
 80076e2:	4838      	ldr	r0, [pc, #224]	; (80077c4 <tcp_input+0x234>)
 80076e4:	f009 fa92 	bl	8010c0c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80076e8:	4b2f      	ldr	r3, [pc, #188]	; (80077a8 <tcp_input+0x218>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	881b      	ldrh	r3, [r3, #0]
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	4b2d      	ldr	r3, [pc, #180]	; (80077a8 <tcp_input+0x218>)
 80076f2:	681c      	ldr	r4, [r3, #0]
 80076f4:	4610      	mov	r0, r2
 80076f6:	f7fc fffb 	bl	80046f0 <lwip_htons>
 80076fa:	4603      	mov	r3, r0
 80076fc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80076fe:	4b2a      	ldr	r3, [pc, #168]	; (80077a8 <tcp_input+0x218>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	885b      	ldrh	r3, [r3, #2]
 8007704:	b29a      	uxth	r2, r3
 8007706:	4b28      	ldr	r3, [pc, #160]	; (80077a8 <tcp_input+0x218>)
 8007708:	681c      	ldr	r4, [r3, #0]
 800770a:	4610      	mov	r0, r2
 800770c:	f7fc fff0 	bl	80046f0 <lwip_htons>
 8007710:	4603      	mov	r3, r0
 8007712:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007714:	4b24      	ldr	r3, [pc, #144]	; (80077a8 <tcp_input+0x218>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	685a      	ldr	r2, [r3, #4]
 800771a:	4b23      	ldr	r3, [pc, #140]	; (80077a8 <tcp_input+0x218>)
 800771c:	681c      	ldr	r4, [r3, #0]
 800771e:	4610      	mov	r0, r2
 8007720:	f7fc fff3 	bl	800470a <lwip_htonl>
 8007724:	4603      	mov	r3, r0
 8007726:	6063      	str	r3, [r4, #4]
 8007728:	6863      	ldr	r3, [r4, #4]
 800772a:	4a29      	ldr	r2, [pc, #164]	; (80077d0 <tcp_input+0x240>)
 800772c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800772e:	4b1e      	ldr	r3, [pc, #120]	; (80077a8 <tcp_input+0x218>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	689a      	ldr	r2, [r3, #8]
 8007734:	4b1c      	ldr	r3, [pc, #112]	; (80077a8 <tcp_input+0x218>)
 8007736:	681c      	ldr	r4, [r3, #0]
 8007738:	4610      	mov	r0, r2
 800773a:	f7fc ffe6 	bl	800470a <lwip_htonl>
 800773e:	4603      	mov	r3, r0
 8007740:	60a3      	str	r3, [r4, #8]
 8007742:	68a3      	ldr	r3, [r4, #8]
 8007744:	4a23      	ldr	r2, [pc, #140]	; (80077d4 <tcp_input+0x244>)
 8007746:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007748:	4b17      	ldr	r3, [pc, #92]	; (80077a8 <tcp_input+0x218>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	89db      	ldrh	r3, [r3, #14]
 800774e:	b29a      	uxth	r2, r3
 8007750:	4b15      	ldr	r3, [pc, #84]	; (80077a8 <tcp_input+0x218>)
 8007752:	681c      	ldr	r4, [r3, #0]
 8007754:	4610      	mov	r0, r2
 8007756:	f7fc ffcb 	bl	80046f0 <lwip_htons>
 800775a:	4603      	mov	r3, r0
 800775c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800775e:	4b12      	ldr	r3, [pc, #72]	; (80077a8 <tcp_input+0x218>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	899b      	ldrh	r3, [r3, #12]
 8007764:	b29b      	uxth	r3, r3
 8007766:	4618      	mov	r0, r3
 8007768:	f7fc ffc2 	bl	80046f0 <lwip_htons>
 800776c:	4603      	mov	r3, r0
 800776e:	b2db      	uxtb	r3, r3
 8007770:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007774:	b2da      	uxtb	r2, r3
 8007776:	4b18      	ldr	r3, [pc, #96]	; (80077d8 <tcp_input+0x248>)
 8007778:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	891a      	ldrh	r2, [r3, #8]
 800777e:	4b16      	ldr	r3, [pc, #88]	; (80077d8 <tcp_input+0x248>)
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	f003 0303 	and.w	r3, r3, #3
 8007786:	2b00      	cmp	r3, #0
 8007788:	bf14      	ite	ne
 800778a:	2301      	movne	r3, #1
 800778c:	2300      	moveq	r3, #0
 800778e:	b2db      	uxtb	r3, r3
 8007790:	b29b      	uxth	r3, r3
 8007792:	4413      	add	r3, r2
 8007794:	b29a      	uxth	r2, r3
 8007796:	4b11      	ldr	r3, [pc, #68]	; (80077dc <tcp_input+0x24c>)
 8007798:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800779a:	2300      	movs	r3, #0
 800779c:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800779e:	4b10      	ldr	r3, [pc, #64]	; (80077e0 <tcp_input+0x250>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	61fb      	str	r3, [r7, #28]
 80077a4:	e082      	b.n	80078ac <tcp_input+0x31c>
 80077a6:	bf00      	nop
 80077a8:	20000240 	.word	0x20000240
 80077ac:	20000394 	.word	0x20000394
 80077b0:	20000244 	.word	0x20000244
 80077b4:	20000248 	.word	0x20000248
 80077b8:	20000246 	.word	0x20000246
 80077bc:	08015154 	.word	0x08015154
 80077c0:	08015188 	.word	0x08015188
 80077c4:	08015198 	.word	0x08015198
 80077c8:	080151c0 	.word	0x080151c0
 80077cc:	080151cc 	.word	0x080151cc
 80077d0:	20000250 	.word	0x20000250
 80077d4:	20000254 	.word	0x20000254
 80077d8:	2000025c 	.word	0x2000025c
 80077dc:	2000025a 	.word	0x2000025a
 80077e0:	200038c4 	.word	0x200038c4
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	7d1b      	ldrb	r3, [r3, #20]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d105      	bne.n	80077f8 <tcp_input+0x268>
 80077ec:	4b8f      	ldr	r3, [pc, #572]	; (8007a2c <tcp_input+0x49c>)
 80077ee:	22e2      	movs	r2, #226	; 0xe2
 80077f0:	498f      	ldr	r1, [pc, #572]	; (8007a30 <tcp_input+0x4a0>)
 80077f2:	4890      	ldr	r0, [pc, #576]	; (8007a34 <tcp_input+0x4a4>)
 80077f4:	f009 fa0a 	bl	8010c0c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	7d1b      	ldrb	r3, [r3, #20]
 80077fc:	2b0a      	cmp	r3, #10
 80077fe:	d105      	bne.n	800780c <tcp_input+0x27c>
 8007800:	4b8a      	ldr	r3, [pc, #552]	; (8007a2c <tcp_input+0x49c>)
 8007802:	22e3      	movs	r2, #227	; 0xe3
 8007804:	498c      	ldr	r1, [pc, #560]	; (8007a38 <tcp_input+0x4a8>)
 8007806:	488b      	ldr	r0, [pc, #556]	; (8007a34 <tcp_input+0x4a4>)
 8007808:	f009 fa00 	bl	8010c0c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	7d1b      	ldrb	r3, [r3, #20]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d105      	bne.n	8007820 <tcp_input+0x290>
 8007814:	4b85      	ldr	r3, [pc, #532]	; (8007a2c <tcp_input+0x49c>)
 8007816:	22e4      	movs	r2, #228	; 0xe4
 8007818:	4988      	ldr	r1, [pc, #544]	; (8007a3c <tcp_input+0x4ac>)
 800781a:	4886      	ldr	r0, [pc, #536]	; (8007a34 <tcp_input+0x4a4>)
 800781c:	f009 f9f6 	bl	8010c0c <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	8b1a      	ldrh	r2, [r3, #24]
 8007824:	4b86      	ldr	r3, [pc, #536]	; (8007a40 <tcp_input+0x4b0>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	881b      	ldrh	r3, [r3, #0]
 800782a:	b29b      	uxth	r3, r3
 800782c:	429a      	cmp	r2, r3
 800782e:	d138      	bne.n	80078a2 <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	8ada      	ldrh	r2, [r3, #22]
 8007834:	4b82      	ldr	r3, [pc, #520]	; (8007a40 <tcp_input+0x4b0>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	885b      	ldrh	r3, [r3, #2]
 800783a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800783c:	429a      	cmp	r2, r3
 800783e:	d130      	bne.n	80078a2 <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	685a      	ldr	r2, [r3, #4]
 8007844:	4b7f      	ldr	r3, [pc, #508]	; (8007a44 <tcp_input+0x4b4>)
 8007846:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8007848:	429a      	cmp	r2, r3
 800784a:	d12a      	bne.n	80078a2 <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	4b7c      	ldr	r3, [pc, #496]	; (8007a44 <tcp_input+0x4b4>)
 8007852:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007854:	429a      	cmp	r2, r3
 8007856:	d124      	bne.n	80078a2 <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	69fa      	ldr	r2, [r7, #28]
 800785e:	429a      	cmp	r2, r3
 8007860:	d105      	bne.n	800786e <tcp_input+0x2de>
 8007862:	4b72      	ldr	r3, [pc, #456]	; (8007a2c <tcp_input+0x49c>)
 8007864:	22ec      	movs	r2, #236	; 0xec
 8007866:	4978      	ldr	r1, [pc, #480]	; (8007a48 <tcp_input+0x4b8>)
 8007868:	4872      	ldr	r0, [pc, #456]	; (8007a34 <tcp_input+0x4a4>)
 800786a:	f009 f9cf 	bl	8010c0c <iprintf>
      if (prev != NULL) {
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d00a      	beq.n	800788a <tcp_input+0x2fa>
        prev->next = pcb->next;
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	68da      	ldr	r2, [r3, #12]
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800787c:	4b73      	ldr	r3, [pc, #460]	; (8007a4c <tcp_input+0x4bc>)
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8007884:	4a71      	ldr	r2, [pc, #452]	; (8007a4c <tcp_input+0x4bc>)
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	69fa      	ldr	r2, [r7, #28]
 8007890:	429a      	cmp	r2, r3
 8007892:	d10f      	bne.n	80078b4 <tcp_input+0x324>
 8007894:	4b65      	ldr	r3, [pc, #404]	; (8007a2c <tcp_input+0x49c>)
 8007896:	22f4      	movs	r2, #244	; 0xf4
 8007898:	496d      	ldr	r1, [pc, #436]	; (8007a50 <tcp_input+0x4c0>)
 800789a:	4866      	ldr	r0, [pc, #408]	; (8007a34 <tcp_input+0x4a4>)
 800789c:	f009 f9b6 	bl	8010c0c <iprintf>
      break;
 80078a0:	e008      	b.n	80078b4 <tcp_input+0x324>
    }
    prev = pcb;
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	61fb      	str	r3, [r7, #28]
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d198      	bne.n	80077e4 <tcp_input+0x254>
 80078b2:	e000      	b.n	80078b6 <tcp_input+0x326>
      break;
 80078b4:	bf00      	nop
  }

  if (pcb == NULL) {
 80078b6:	69fb      	ldr	r3, [r7, #28]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d173      	bne.n	80079a4 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80078bc:	4b65      	ldr	r3, [pc, #404]	; (8007a54 <tcp_input+0x4c4>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	61fb      	str	r3, [r7, #28]
 80078c2:	e02f      	b.n	8007924 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	7d1b      	ldrb	r3, [r3, #20]
 80078c8:	2b0a      	cmp	r3, #10
 80078ca:	d005      	beq.n	80078d8 <tcp_input+0x348>
 80078cc:	4b57      	ldr	r3, [pc, #348]	; (8007a2c <tcp_input+0x49c>)
 80078ce:	22fe      	movs	r2, #254	; 0xfe
 80078d0:	4961      	ldr	r1, [pc, #388]	; (8007a58 <tcp_input+0x4c8>)
 80078d2:	4858      	ldr	r0, [pc, #352]	; (8007a34 <tcp_input+0x4a4>)
 80078d4:	f009 f99a 	bl	8010c0c <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	8b1a      	ldrh	r2, [r3, #24]
 80078dc:	4b58      	ldr	r3, [pc, #352]	; (8007a40 <tcp_input+0x4b0>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	881b      	ldrh	r3, [r3, #0]
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d11a      	bne.n	800791e <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	8ada      	ldrh	r2, [r3, #22]
 80078ec:	4b54      	ldr	r3, [pc, #336]	; (8007a40 <tcp_input+0x4b0>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	885b      	ldrh	r3, [r3, #2]
 80078f2:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d112      	bne.n	800791e <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	685a      	ldr	r2, [r3, #4]
 80078fc:	4b51      	ldr	r3, [pc, #324]	; (8007a44 <tcp_input+0x4b4>)
 80078fe:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8007900:	429a      	cmp	r2, r3
 8007902:	d10c      	bne.n	800791e <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	4b4e      	ldr	r3, [pc, #312]	; (8007a44 <tcp_input+0x4b4>)
 800790a:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800790c:	429a      	cmp	r2, r3
 800790e:	d106      	bne.n	800791e <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 8007910:	69f8      	ldr	r0, [r7, #28]
 8007912:	f000 fb15 	bl	8007f40 <tcp_timewait_input>
        pbuf_free(p);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f7fe f816 	bl	8005948 <pbuf_free>
        return;
 800791c:	e1da      	b.n	8007cd4 <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	61fb      	str	r3, [r7, #28]
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d1cc      	bne.n	80078c4 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800792a:	2300      	movs	r3, #0
 800792c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800792e:	4b4b      	ldr	r3, [pc, #300]	; (8007a5c <tcp_input+0x4cc>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	617b      	str	r3, [r7, #20]
 8007934:	e019      	b.n	800796a <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	8ada      	ldrh	r2, [r3, #22]
 800793a:	4b41      	ldr	r3, [pc, #260]	; (8007a40 <tcp_input+0x4b0>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	885b      	ldrh	r3, [r3, #2]
 8007940:	b29b      	uxth	r3, r3
 8007942:	429a      	cmp	r2, r3
 8007944:	d10c      	bne.n	8007960 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	4b3e      	ldr	r3, [pc, #248]	; (8007a44 <tcp_input+0x4b4>)
 800794c:	695b      	ldr	r3, [r3, #20]
 800794e:	429a      	cmp	r2, r3
 8007950:	d00f      	beq.n	8007972 <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d00d      	beq.n	8007974 <tcp_input+0x3e4>
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d009      	beq.n	8007974 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	617b      	str	r3, [r7, #20]
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d1e2      	bne.n	8007936 <tcp_input+0x3a6>
 8007970:	e000      	b.n	8007974 <tcp_input+0x3e4>
            break;
 8007972:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d014      	beq.n	80079a4 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00a      	beq.n	8007996 <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	68da      	ldr	r2, [r3, #12]
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8007988:	4b34      	ldr	r3, [pc, #208]	; (8007a5c <tcp_input+0x4cc>)
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8007990:	4a32      	ldr	r2, [pc, #200]	; (8007a5c <tcp_input+0x4cc>)
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 8007996:	6978      	ldr	r0, [r7, #20]
 8007998:	f000 f9f0 	bl	8007d7c <tcp_listen_input>
      pbuf_free(p);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f7fd ffd3 	bl	8005948 <pbuf_free>
      return;
 80079a2:	e197      	b.n	8007cd4 <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f000 8164 	beq.w	8007c74 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80079ac:	4b2c      	ldr	r3, [pc, #176]	; (8007a60 <tcp_input+0x4d0>)
 80079ae:	2200      	movs	r2, #0
 80079b0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	891a      	ldrh	r2, [r3, #8]
 80079b6:	4b2a      	ldr	r3, [pc, #168]	; (8007a60 <tcp_input+0x4d0>)
 80079b8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80079ba:	4a29      	ldr	r2, [pc, #164]	; (8007a60 <tcp_input+0x4d0>)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80079c0:	4b1f      	ldr	r3, [pc, #124]	; (8007a40 <tcp_input+0x4b0>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a26      	ldr	r2, [pc, #152]	; (8007a60 <tcp_input+0x4d0>)
 80079c6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80079c8:	4b26      	ldr	r3, [pc, #152]	; (8007a64 <tcp_input+0x4d4>)
 80079ca:	2200      	movs	r2, #0
 80079cc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80079ce:	4b26      	ldr	r3, [pc, #152]	; (8007a68 <tcp_input+0x4d8>)
 80079d0:	2200      	movs	r2, #0
 80079d2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80079d4:	4b25      	ldr	r3, [pc, #148]	; (8007a6c <tcp_input+0x4dc>)
 80079d6:	2200      	movs	r2, #0
 80079d8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80079da:	4b25      	ldr	r3, [pc, #148]	; (8007a70 <tcp_input+0x4e0>)
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	f003 0308 	and.w	r3, r3, #8
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d006      	beq.n	80079f4 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	7b5b      	ldrb	r3, [r3, #13]
 80079ea:	f043 0301 	orr.w	r3, r3, #1
 80079ee:	b2da      	uxtb	r2, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d03d      	beq.n	8007a78 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80079fc:	69f8      	ldr	r0, [r7, #28]
 80079fe:	f7ff f9f9 	bl	8006df4 <tcp_process_refused_data>
 8007a02:	4603      	mov	r3, r0
 8007a04:	f113 0f0d 	cmn.w	r3, #13
 8007a08:	d007      	beq.n	8007a1a <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d032      	beq.n	8007a78 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007a12:	4b18      	ldr	r3, [pc, #96]	; (8007a74 <tcp_input+0x4e4>)
 8007a14:	881b      	ldrh	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d02e      	beq.n	8007a78 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	f040 8108 	bne.w	8007c34 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8007a24:	69f8      	ldr	r0, [r7, #28]
 8007a26:	f002 fe3b 	bl	800a6a0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8007a2a:	e103      	b.n	8007c34 <tcp_input+0x6a4>
 8007a2c:	08015154 	.word	0x08015154
 8007a30:	080151ec 	.word	0x080151ec
 8007a34:	08015198 	.word	0x08015198
 8007a38:	08015214 	.word	0x08015214
 8007a3c:	08015240 	.word	0x08015240
 8007a40:	20000240 	.word	0x20000240
 8007a44:	20000394 	.word	0x20000394
 8007a48:	08015268 	.word	0x08015268
 8007a4c:	200038c4 	.word	0x200038c4
 8007a50:	08015294 	.word	0x08015294
 8007a54:	200038d4 	.word	0x200038d4
 8007a58:	080152c0 	.word	0x080152c0
 8007a5c:	200038cc 	.word	0x200038cc
 8007a60:	20000230 	.word	0x20000230
 8007a64:	20000260 	.word	0x20000260
 8007a68:	2000025d 	.word	0x2000025d
 8007a6c:	20000258 	.word	0x20000258
 8007a70:	2000025c 	.word	0x2000025c
 8007a74:	2000025a 	.word	0x2000025a
      }
    }
    tcp_input_pcb = pcb;
 8007a78:	4a98      	ldr	r2, [pc, #608]	; (8007cdc <tcp_input+0x74c>)
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8007a7e:	69f8      	ldr	r0, [r7, #28]
 8007a80:	f000 fac6 	bl	8008010 <tcp_process>
 8007a84:	4603      	mov	r3, r0
 8007a86:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007a88:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007a8c:	f113 0f0d 	cmn.w	r3, #13
 8007a90:	f000 80d2 	beq.w	8007c38 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 8007a94:	4b92      	ldr	r3, [pc, #584]	; (8007ce0 <tcp_input+0x750>)
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	f003 0308 	and.w	r3, r3, #8
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d016      	beq.n	8007ace <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d008      	beq.n	8007abc <tcp_input+0x52c>
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ab0:	69fa      	ldr	r2, [r7, #28]
 8007ab2:	6912      	ldr	r2, [r2, #16]
 8007ab4:	f06f 010d 	mvn.w	r1, #13
 8007ab8:	4610      	mov	r0, r2
 8007aba:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007abc:	69f9      	ldr	r1, [r7, #28]
 8007abe:	4889      	ldr	r0, [pc, #548]	; (8007ce4 <tcp_input+0x754>)
 8007ac0:	f7ff fc4e 	bl	8007360 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8007ac4:	69f9      	ldr	r1, [r7, #28]
 8007ac6:	2001      	movs	r0, #1
 8007ac8:	f7fd fa06 	bl	8004ed8 <memp_free>
 8007acc:	e0bf      	b.n	8007c4e <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8007ad2:	4b85      	ldr	r3, [pc, #532]	; (8007ce8 <tcp_input+0x758>)
 8007ad4:	881b      	ldrh	r3, [r3, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d01b      	beq.n	8007b12 <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8007ada:	4b83      	ldr	r3, [pc, #524]	; (8007ce8 <tcp_input+0x758>)
 8007adc:	881b      	ldrh	r3, [r3, #0]
 8007ade:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d009      	beq.n	8007afc <tcp_input+0x56c>
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007aec:	69fa      	ldr	r2, [r7, #28]
 8007aee:	6910      	ldr	r0, [r2, #16]
 8007af0:	89fa      	ldrh	r2, [r7, #14]
 8007af2:	69f9      	ldr	r1, [r7, #28]
 8007af4:	4798      	blx	r3
 8007af6:	4603      	mov	r3, r0
 8007af8:	74fb      	strb	r3, [r7, #19]
 8007afa:	e001      	b.n	8007b00 <tcp_input+0x570>
 8007afc:	2300      	movs	r3, #0
 8007afe:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007b00:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007b04:	f113 0f0d 	cmn.w	r3, #13
 8007b08:	f000 8098 	beq.w	8007c3c <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 8007b0c:	4b76      	ldr	r3, [pc, #472]	; (8007ce8 <tcp_input+0x758>)
 8007b0e:	2200      	movs	r2, #0
 8007b10:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8007b12:	69f8      	ldr	r0, [r7, #28]
 8007b14:	f000 f900 	bl	8007d18 <tcp_input_delayed_close>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	f040 8090 	bne.w	8007c40 <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8007b20:	4b72      	ldr	r3, [pc, #456]	; (8007cec <tcp_input+0x75c>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d041      	beq.n	8007bac <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8007b28:	69fb      	ldr	r3, [r7, #28]
 8007b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d006      	beq.n	8007b3e <tcp_input+0x5ae>
 8007b30:	4b6f      	ldr	r3, [pc, #444]	; (8007cf0 <tcp_input+0x760>)
 8007b32:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8007b36:	496f      	ldr	r1, [pc, #444]	; (8007cf4 <tcp_input+0x764>)
 8007b38:	486f      	ldr	r0, [pc, #444]	; (8007cf8 <tcp_input+0x768>)
 8007b3a:	f009 f867 	bl	8010c0c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	7e9b      	ldrb	r3, [r3, #26]
 8007b42:	f003 0310 	and.w	r3, r3, #16
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d008      	beq.n	8007b5c <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8007b4a:	4b68      	ldr	r3, [pc, #416]	; (8007cec <tcp_input+0x75c>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7fd fefa 	bl	8005948 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8007b54:	69f8      	ldr	r0, [r7, #28]
 8007b56:	f7fe fbe5 	bl	8006324 <tcp_abort>
            goto aborted;
 8007b5a:	e078      	b.n	8007c4e <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d00c      	beq.n	8007b80 <tcp_input+0x5f0>
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	6918      	ldr	r0, [r3, #16]
 8007b70:	4b5e      	ldr	r3, [pc, #376]	; (8007cec <tcp_input+0x75c>)
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	2300      	movs	r3, #0
 8007b76:	69f9      	ldr	r1, [r7, #28]
 8007b78:	47a0      	blx	r4
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	74fb      	strb	r3, [r7, #19]
 8007b7e:	e008      	b.n	8007b92 <tcp_input+0x602>
 8007b80:	4b5a      	ldr	r3, [pc, #360]	; (8007cec <tcp_input+0x75c>)
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	2300      	movs	r3, #0
 8007b86:	69f9      	ldr	r1, [r7, #28]
 8007b88:	2000      	movs	r0, #0
 8007b8a:	f7ff f9e4 	bl	8006f56 <tcp_recv_null>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8007b92:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007b96:	f113 0f0d 	cmn.w	r3, #13
 8007b9a:	d053      	beq.n	8007c44 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8007b9c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d003      	beq.n	8007bac <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8007ba4:	4b51      	ldr	r3, [pc, #324]	; (8007cec <tcp_input+0x75c>)
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	69fb      	ldr	r3, [r7, #28]
 8007baa:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8007bac:	4b4c      	ldr	r3, [pc, #304]	; (8007ce0 <tcp_input+0x750>)
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	f003 0320 	and.w	r3, r3, #32
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d030      	beq.n	8007c1a <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d009      	beq.n	8007bd4 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bc4:	7b5a      	ldrb	r2, [r3, #13]
 8007bc6:	69fb      	ldr	r3, [r7, #28]
 8007bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bca:	f042 0220 	orr.w	r2, r2, #32
 8007bce:	b2d2      	uxtb	r2, r2
 8007bd0:	735a      	strb	r2, [r3, #13]
 8007bd2:	e022      	b.n	8007c1a <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bd8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007bdc:	d005      	beq.n	8007bea <tcp_input+0x65a>
              pcb->rcv_wnd++;
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007be2:	3301      	adds	r3, #1
 8007be4:	b29a      	uxth	r2, r3
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8007bea:	69fb      	ldr	r3, [r7, #28]
 8007bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00b      	beq.n	8007c0c <tcp_input+0x67c>
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	6918      	ldr	r0, [r3, #16]
 8007bfe:	2300      	movs	r3, #0
 8007c00:	2200      	movs	r2, #0
 8007c02:	69f9      	ldr	r1, [r7, #28]
 8007c04:	47a0      	blx	r4
 8007c06:	4603      	mov	r3, r0
 8007c08:	74fb      	strb	r3, [r7, #19]
 8007c0a:	e001      	b.n	8007c10 <tcp_input+0x680>
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007c10:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007c14:	f113 0f0d 	cmn.w	r3, #13
 8007c18:	d016      	beq.n	8007c48 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8007c1a:	4b30      	ldr	r3, [pc, #192]	; (8007cdc <tcp_input+0x74c>)
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007c20:	69f8      	ldr	r0, [r7, #28]
 8007c22:	f000 f879 	bl	8007d18 <tcp_input_delayed_close>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d10f      	bne.n	8007c4c <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8007c2c:	69f8      	ldr	r0, [r7, #28]
 8007c2e:	f002 fd93 	bl	800a758 <tcp_output>
 8007c32:	e00c      	b.n	8007c4e <tcp_input+0x6be>
        goto aborted;
 8007c34:	bf00      	nop
 8007c36:	e00a      	b.n	8007c4e <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8007c38:	bf00      	nop
 8007c3a:	e008      	b.n	8007c4e <tcp_input+0x6be>
              goto aborted;
 8007c3c:	bf00      	nop
 8007c3e:	e006      	b.n	8007c4e <tcp_input+0x6be>
          goto aborted;
 8007c40:	bf00      	nop
 8007c42:	e004      	b.n	8007c4e <tcp_input+0x6be>
            goto aborted;
 8007c44:	bf00      	nop
 8007c46:	e002      	b.n	8007c4e <tcp_input+0x6be>
              goto aborted;
 8007c48:	bf00      	nop
 8007c4a:	e000      	b.n	8007c4e <tcp_input+0x6be>
          goto aborted;
 8007c4c:	bf00      	nop
    tcp_input_pcb = NULL;
 8007c4e:	4b23      	ldr	r3, [pc, #140]	; (8007cdc <tcp_input+0x74c>)
 8007c50:	2200      	movs	r2, #0
 8007c52:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8007c54:	4b25      	ldr	r3, [pc, #148]	; (8007cec <tcp_input+0x75c>)
 8007c56:	2200      	movs	r2, #0
 8007c58:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 8007c5a:	4b28      	ldr	r3, [pc, #160]	; (8007cfc <tcp_input+0x76c>)
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d037      	beq.n	8007cd2 <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 8007c62:	4b26      	ldr	r3, [pc, #152]	; (8007cfc <tcp_input+0x76c>)
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7fd fe6e 	bl	8005948 <pbuf_free>
      inseg.p = NULL;
 8007c6c:	4b23      	ldr	r3, [pc, #140]	; (8007cfc <tcp_input+0x76c>)
 8007c6e:	2200      	movs	r2, #0
 8007c70:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8007c72:	e02e      	b.n	8007cd2 <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007c74:	4b22      	ldr	r3, [pc, #136]	; (8007d00 <tcp_input+0x770>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	899b      	ldrh	r3, [r3, #12]
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7fc fd37 	bl	80046f0 <lwip_htons>
 8007c82:	4603      	mov	r3, r0
 8007c84:	f003 0304 	and.w	r3, r3, #4
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d115      	bne.n	8007cb8 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c8c:	4b1d      	ldr	r3, [pc, #116]	; (8007d04 <tcp_input+0x774>)
 8007c8e:	6818      	ldr	r0, [r3, #0]
 8007c90:	4b1d      	ldr	r3, [pc, #116]	; (8007d08 <tcp_input+0x778>)
 8007c92:	881b      	ldrh	r3, [r3, #0]
 8007c94:	461a      	mov	r2, r3
 8007c96:	4b1d      	ldr	r3, [pc, #116]	; (8007d0c <tcp_input+0x77c>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007c9c:	4b18      	ldr	r3, [pc, #96]	; (8007d00 <tcp_input+0x770>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ca0:	885b      	ldrh	r3, [r3, #2]
 8007ca2:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007ca4:	4a16      	ldr	r2, [pc, #88]	; (8007d00 <tcp_input+0x770>)
 8007ca6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ca8:	8812      	ldrh	r2, [r2, #0]
 8007caa:	b292      	uxth	r2, r2
 8007cac:	9201      	str	r2, [sp, #4]
 8007cae:	9300      	str	r3, [sp, #0]
 8007cb0:	4b17      	ldr	r3, [pc, #92]	; (8007d10 <tcp_input+0x780>)
 8007cb2:	4a18      	ldr	r2, [pc, #96]	; (8007d14 <tcp_input+0x784>)
 8007cb4:	f002 ffda 	bl	800ac6c <tcp_rst>
    pbuf_free(p);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f7fd fe45 	bl	8005948 <pbuf_free>
  return;
 8007cbe:	e008      	b.n	8007cd2 <tcp_input+0x742>
    goto dropped;
 8007cc0:	bf00      	nop
 8007cc2:	e002      	b.n	8007cca <tcp_input+0x73a>
dropped:
 8007cc4:	bf00      	nop
 8007cc6:	e000      	b.n	8007cca <tcp_input+0x73a>
      goto dropped;
 8007cc8:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f7fd fe3c 	bl	8005948 <pbuf_free>
 8007cd0:	e000      	b.n	8007cd4 <tcp_input+0x744>
  return;
 8007cd2:	bf00      	nop
}
 8007cd4:	3724      	adds	r7, #36	; 0x24
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd90      	pop	{r4, r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	200038d8 	.word	0x200038d8
 8007ce0:	2000025d 	.word	0x2000025d
 8007ce4:	200038c4 	.word	0x200038c4
 8007ce8:	20000258 	.word	0x20000258
 8007cec:	20000260 	.word	0x20000260
 8007cf0:	08015154 	.word	0x08015154
 8007cf4:	080152f0 	.word	0x080152f0
 8007cf8:	08015198 	.word	0x08015198
 8007cfc:	20000230 	.word	0x20000230
 8007d00:	20000240 	.word	0x20000240
 8007d04:	20000254 	.word	0x20000254
 8007d08:	2000025a 	.word	0x2000025a
 8007d0c:	20000250 	.word	0x20000250
 8007d10:	200003a4 	.word	0x200003a4
 8007d14:	200003a8 	.word	0x200003a8

08007d18 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 8007d20:	4b14      	ldr	r3, [pc, #80]	; (8007d74 <tcp_input_delayed_close+0x5c>)
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	f003 0310 	and.w	r3, r3, #16
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d01d      	beq.n	8007d68 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	7e9b      	ldrb	r3, [r3, #26]
 8007d30:	f003 0310 	and.w	r3, r3, #16
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d10d      	bne.n	8007d54 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d008      	beq.n	8007d54 <tcp_input_delayed_close+0x3c>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	6912      	ldr	r2, [r2, #16]
 8007d4c:	f06f 010e 	mvn.w	r1, #14
 8007d50:	4610      	mov	r0, r2
 8007d52:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007d54:	6879      	ldr	r1, [r7, #4]
 8007d56:	4808      	ldr	r0, [pc, #32]	; (8007d78 <tcp_input_delayed_close+0x60>)
 8007d58:	f7ff fb02 	bl	8007360 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8007d5c:	6879      	ldr	r1, [r7, #4]
 8007d5e:	2001      	movs	r0, #1
 8007d60:	f7fd f8ba 	bl	8004ed8 <memp_free>
    return 1;
 8007d64:	2301      	movs	r3, #1
 8007d66:	e000      	b.n	8007d6a <tcp_input_delayed_close+0x52>
  }
  return 0;
 8007d68:	2300      	movs	r3, #0
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3708      	adds	r7, #8
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	2000025d 	.word	0x2000025d
 8007d78:	200038c4 	.word	0x200038c4

08007d7c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b088      	sub	sp, #32
 8007d80:	af02      	add	r7, sp, #8
 8007d82:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8007d84:	4b64      	ldr	r3, [pc, #400]	; (8007f18 <tcp_listen_input+0x19c>)
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	f003 0304 	and.w	r3, r3, #4
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	f040 80bc 	bne.w	8007f0a <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8007d92:	4b61      	ldr	r3, [pc, #388]	; (8007f18 <tcp_listen_input+0x19c>)
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	f003 0310 	and.w	r3, r3, #16
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d016      	beq.n	8007dcc <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007d9e:	4b5f      	ldr	r3, [pc, #380]	; (8007f1c <tcp_listen_input+0x1a0>)
 8007da0:	6818      	ldr	r0, [r3, #0]
 8007da2:	4b5f      	ldr	r3, [pc, #380]	; (8007f20 <tcp_listen_input+0x1a4>)
 8007da4:	881b      	ldrh	r3, [r3, #0]
 8007da6:	461a      	mov	r2, r3
 8007da8:	4b5e      	ldr	r3, [pc, #376]	; (8007f24 <tcp_listen_input+0x1a8>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007dae:	4b5e      	ldr	r3, [pc, #376]	; (8007f28 <tcp_listen_input+0x1ac>)
 8007db0:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007db2:	885b      	ldrh	r3, [r3, #2]
 8007db4:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007db6:	4a5c      	ldr	r2, [pc, #368]	; (8007f28 <tcp_listen_input+0x1ac>)
 8007db8:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007dba:	8812      	ldrh	r2, [r2, #0]
 8007dbc:	b292      	uxth	r2, r2
 8007dbe:	9201      	str	r2, [sp, #4]
 8007dc0:	9300      	str	r3, [sp, #0]
 8007dc2:	4b5a      	ldr	r3, [pc, #360]	; (8007f2c <tcp_listen_input+0x1b0>)
 8007dc4:	4a5a      	ldr	r2, [pc, #360]	; (8007f30 <tcp_listen_input+0x1b4>)
 8007dc6:	f002 ff51 	bl	800ac6c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8007dca:	e0a0      	b.n	8007f0e <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 8007dcc:	4b52      	ldr	r3, [pc, #328]	; (8007f18 <tcp_listen_input+0x19c>)
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	f003 0302 	and.w	r3, r3, #2
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f000 809a 	beq.w	8007f0e <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	7d5b      	ldrb	r3, [r3, #21]
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7ff f998 	bl	8007114 <tcp_alloc>
 8007de4:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d111      	bne.n	8007e10 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	699b      	ldr	r3, [r3, #24]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00a      	beq.n	8007e0a <tcp_listen_input+0x8e>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	6910      	ldr	r0, [r2, #16]
 8007dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8007e00:	2100      	movs	r1, #0
 8007e02:	4798      	blx	r3
 8007e04:	4603      	mov	r3, r0
 8007e06:	73bb      	strb	r3, [r7, #14]
      return;
 8007e08:	e082      	b.n	8007f10 <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007e0a:	23f0      	movs	r3, #240	; 0xf0
 8007e0c:	73bb      	strb	r3, [r7, #14]
      return;
 8007e0e:	e07f      	b.n	8007f10 <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007e10:	4b48      	ldr	r3, [pc, #288]	; (8007f34 <tcp_listen_input+0x1b8>)
 8007e12:	695a      	ldr	r2, [r3, #20]
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8007e18:	4b46      	ldr	r3, [pc, #280]	; (8007f34 <tcp_listen_input+0x1b8>)
 8007e1a:	691a      	ldr	r2, [r3, #16]
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	8ada      	ldrh	r2, [r3, #22]
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8007e28:	4b3f      	ldr	r3, [pc, #252]	; (8007f28 <tcp_listen_input+0x1ac>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	881b      	ldrh	r3, [r3, #0]
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	2203      	movs	r2, #3
 8007e38:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8007e3a:	4b3a      	ldr	r3, [pc, #232]	; (8007f24 <tcp_listen_input+0x1a8>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	1c5a      	adds	r2, r3, #1
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8007e4c:	6978      	ldr	r0, [r7, #20]
 8007e4e:	f7ff fb03 	bl	8007458 <tcp_next_iss>
 8007e52:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	693a      	ldr	r2, [r7, #16]
 8007e58:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	693a      	ldr	r2, [r7, #16]
 8007e5e:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	693a      	ldr	r2, [r7, #16]
 8007e64:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	693a      	ldr	r2, [r7, #16]
 8007e6a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007e6c:	4b2d      	ldr	r3, [pc, #180]	; (8007f24 <tcp_listen_input+0x1a8>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	1e5a      	subs	r2, r3, #1
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	691a      	ldr	r2, [r3, #16]
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	7a1b      	ldrb	r3, [r3, #8]
 8007e88:	f003 030c 	and.w	r3, r3, #12
 8007e8c:	b2da      	uxtb	r2, r3
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8007e92:	4b29      	ldr	r3, [pc, #164]	; (8007f38 <tcp_listen_input+0x1bc>)
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	60da      	str	r2, [r3, #12]
 8007e9a:	4a27      	ldr	r2, [pc, #156]	; (8007f38 <tcp_listen_input+0x1bc>)
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	6013      	str	r3, [r2, #0]
 8007ea0:	f003 f934 	bl	800b10c <tcp_timer_needed>
 8007ea4:	4b25      	ldr	r3, [pc, #148]	; (8007f3c <tcp_listen_input+0x1c0>)
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8007eaa:	6978      	ldr	r0, [r7, #20]
 8007eac:	f001 fd12 	bl	80098d4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8007eb0:	4b1d      	ldr	r3, [pc, #116]	; (8007f28 <tcp_listen_input+0x1ac>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	89db      	ldrh	r3, [r3, #14]
 8007eb6:	b29a      	uxth	r2, r3
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	3304      	adds	r3, #4
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	4610      	mov	r0, r2
 8007ed6:	f7ff fad5 	bl	8007484 <tcp_eff_send_mss_impl>
 8007eda:	4603      	mov	r3, r0
 8007edc:	461a      	mov	r2, r3
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007ee2:	2112      	movs	r1, #18
 8007ee4:	6978      	ldr	r0, [r7, #20]
 8007ee6:	f002 fadf 	bl	800a4a8 <tcp_enqueue_flags>
 8007eea:	4603      	mov	r3, r0
 8007eec:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8007eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d004      	beq.n	8007f00 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	6978      	ldr	r0, [r7, #20]
 8007efa:	f7fe f961 	bl	80061c0 <tcp_abandon>
      return;
 8007efe:	e007      	b.n	8007f10 <tcp_listen_input+0x194>
    tcp_output(npcb);
 8007f00:	6978      	ldr	r0, [r7, #20]
 8007f02:	f002 fc29 	bl	800a758 <tcp_output>
  return;
 8007f06:	bf00      	nop
 8007f08:	e001      	b.n	8007f0e <tcp_listen_input+0x192>
    return;
 8007f0a:	bf00      	nop
 8007f0c:	e000      	b.n	8007f10 <tcp_listen_input+0x194>
  return;
 8007f0e:	bf00      	nop
}
 8007f10:	3718      	adds	r7, #24
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop
 8007f18:	2000025c 	.word	0x2000025c
 8007f1c:	20000254 	.word	0x20000254
 8007f20:	2000025a 	.word	0x2000025a
 8007f24:	20000250 	.word	0x20000250
 8007f28:	20000240 	.word	0x20000240
 8007f2c:	200003a4 	.word	0x200003a4
 8007f30:	200003a8 	.word	0x200003a8
 8007f34:	20000394 	.word	0x20000394
 8007f38:	200038c4 	.word	0x200038c4
 8007f3c:	200038c0 	.word	0x200038c0

08007f40 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af02      	add	r7, sp, #8
 8007f46:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8007f48:	4b29      	ldr	r3, [pc, #164]	; (8007ff0 <tcp_timewait_input+0xb0>)
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	f003 0304 	and.w	r3, r3, #4
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d147      	bne.n	8007fe4 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8007f54:	4b26      	ldr	r3, [pc, #152]	; (8007ff0 <tcp_timewait_input+0xb0>)
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	f003 0302 	and.w	r3, r3, #2
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d027      	beq.n	8007fb0 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007f60:	4b24      	ldr	r3, [pc, #144]	; (8007ff4 <tcp_timewait_input+0xb4>)
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f68:	1ad3      	subs	r3, r2, r3
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	db2a      	blt.n	8007fc4 <tcp_timewait_input+0x84>
 8007f6e:	4b21      	ldr	r3, [pc, #132]	; (8007ff4 <tcp_timewait_input+0xb4>)
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f76:	6879      	ldr	r1, [r7, #4]
 8007f78:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007f7a:	440b      	add	r3, r1
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	dc20      	bgt.n	8007fc4 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007f82:	4b1d      	ldr	r3, [pc, #116]	; (8007ff8 <tcp_timewait_input+0xb8>)
 8007f84:	6818      	ldr	r0, [r3, #0]
 8007f86:	4b1d      	ldr	r3, [pc, #116]	; (8007ffc <tcp_timewait_input+0xbc>)
 8007f88:	881b      	ldrh	r3, [r3, #0]
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	4b19      	ldr	r3, [pc, #100]	; (8007ff4 <tcp_timewait_input+0xb4>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007f92:	4b1b      	ldr	r3, [pc, #108]	; (8008000 <tcp_timewait_input+0xc0>)
 8007f94:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007f96:	885b      	ldrh	r3, [r3, #2]
 8007f98:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007f9a:	4a19      	ldr	r2, [pc, #100]	; (8008000 <tcp_timewait_input+0xc0>)
 8007f9c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007f9e:	8812      	ldrh	r2, [r2, #0]
 8007fa0:	b292      	uxth	r2, r2
 8007fa2:	9201      	str	r2, [sp, #4]
 8007fa4:	9300      	str	r3, [sp, #0]
 8007fa6:	4b17      	ldr	r3, [pc, #92]	; (8008004 <tcp_timewait_input+0xc4>)
 8007fa8:	4a17      	ldr	r2, [pc, #92]	; (8008008 <tcp_timewait_input+0xc8>)
 8007faa:	f002 fe5f 	bl	800ac6c <tcp_rst>
      return;
 8007fae:	e01c      	b.n	8007fea <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 8007fb0:	4b0f      	ldr	r3, [pc, #60]	; (8007ff0 <tcp_timewait_input+0xb0>)
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	f003 0301 	and.w	r3, r3, #1
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d003      	beq.n	8007fc4 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8007fbc:	4b13      	ldr	r3, [pc, #76]	; (800800c <tcp_timewait_input+0xcc>)
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8007fc4:	4b0d      	ldr	r3, [pc, #52]	; (8007ffc <tcp_timewait_input+0xbc>)
 8007fc6:	881b      	ldrh	r3, [r3, #0]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00d      	beq.n	8007fe8 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	7e9b      	ldrb	r3, [r3, #26]
 8007fd0:	f043 0302 	orr.w	r3, r3, #2
 8007fd4:	b2da      	uxtb	r2, r3
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f002 fbbc 	bl	800a758 <tcp_output>
  }
  return;
 8007fe0:	bf00      	nop
 8007fe2:	e001      	b.n	8007fe8 <tcp_timewait_input+0xa8>
    return;
 8007fe4:	bf00      	nop
 8007fe6:	e000      	b.n	8007fea <tcp_timewait_input+0xaa>
  return;
 8007fe8:	bf00      	nop
}
 8007fea:	3708      	adds	r7, #8
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	2000025c 	.word	0x2000025c
 8007ff4:	20000250 	.word	0x20000250
 8007ff8:	20000254 	.word	0x20000254
 8007ffc:	2000025a 	.word	0x2000025a
 8008000:	20000240 	.word	0x20000240
 8008004:	200003a4 	.word	0x200003a4
 8008008:	200003a8 	.word	0x200003a8
 800800c:	200038c8 	.word	0x200038c8

08008010 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b08a      	sub	sp, #40	; 0x28
 8008014:	af02      	add	r7, sp, #8
 8008016:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008018:	2300      	movs	r3, #0
 800801a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800801c:	2300      	movs	r3, #0
 800801e:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8008020:	4ba4      	ldr	r3, [pc, #656]	; (80082b4 <tcp_process+0x2a4>)
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	f003 0304 	and.w	r3, r3, #4
 8008028:	2b00      	cmp	r3, #0
 800802a:	d04e      	beq.n	80080ca <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	7d1b      	ldrb	r3, [r3, #20]
 8008030:	2b02      	cmp	r3, #2
 8008032:	d108      	bne.n	8008046 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008038:	4b9f      	ldr	r3, [pc, #636]	; (80082b8 <tcp_process+0x2a8>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	429a      	cmp	r2, r3
 800803e:	d123      	bne.n	8008088 <tcp_process+0x78>
        acceptable = 1;
 8008040:	2301      	movs	r3, #1
 8008042:	76fb      	strb	r3, [r7, #27]
 8008044:	e020      	b.n	8008088 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800804a:	4b9c      	ldr	r3, [pc, #624]	; (80082bc <tcp_process+0x2ac>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	429a      	cmp	r2, r3
 8008050:	d102      	bne.n	8008058 <tcp_process+0x48>
        acceptable = 1;
 8008052:	2301      	movs	r3, #1
 8008054:	76fb      	strb	r3, [r7, #27]
 8008056:	e017      	b.n	8008088 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008058:	4b98      	ldr	r3, [pc, #608]	; (80082bc <tcp_process+0x2ac>)
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008060:	1ad3      	subs	r3, r2, r3
 8008062:	2b00      	cmp	r3, #0
 8008064:	db10      	blt.n	8008088 <tcp_process+0x78>
 8008066:	4b95      	ldr	r3, [pc, #596]	; (80082bc <tcp_process+0x2ac>)
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806e:	6879      	ldr	r1, [r7, #4]
 8008070:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008072:	440b      	add	r3, r1
 8008074:	1ad3      	subs	r3, r2, r3
 8008076:	2b00      	cmp	r3, #0
 8008078:	dc06      	bgt.n	8008088 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	7e9b      	ldrb	r3, [r3, #26]
 800807e:	f043 0302 	orr.w	r3, r3, #2
 8008082:	b2da      	uxtb	r2, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008088:	7efb      	ldrb	r3, [r7, #27]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d01b      	beq.n	80080c6 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	7d1b      	ldrb	r3, [r3, #20]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d106      	bne.n	80080a4 <tcp_process+0x94>
 8008096:	4b8a      	ldr	r3, [pc, #552]	; (80082c0 <tcp_process+0x2b0>)
 8008098:	f240 22e7 	movw	r2, #743	; 0x2e7
 800809c:	4989      	ldr	r1, [pc, #548]	; (80082c4 <tcp_process+0x2b4>)
 800809e:	488a      	ldr	r0, [pc, #552]	; (80082c8 <tcp_process+0x2b8>)
 80080a0:	f008 fdb4 	bl	8010c0c <iprintf>
      recv_flags |= TF_RESET;
 80080a4:	4b89      	ldr	r3, [pc, #548]	; (80082cc <tcp_process+0x2bc>)
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	f043 0308 	orr.w	r3, r3, #8
 80080ac:	b2da      	uxtb	r2, r3
 80080ae:	4b87      	ldr	r3, [pc, #540]	; (80082cc <tcp_process+0x2bc>)
 80080b0:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	7e9b      	ldrb	r3, [r3, #26]
 80080b6:	f023 0301 	bic.w	r3, r3, #1
 80080ba:	b2da      	uxtb	r2, r3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 80080c0:	f06f 030d 	mvn.w	r3, #13
 80080c4:	e34d      	b.n	8008762 <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 80080c6:	2300      	movs	r3, #0
 80080c8:	e34b      	b.n	8008762 <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80080ca:	4b7a      	ldr	r3, [pc, #488]	; (80082b4 <tcp_process+0x2a4>)
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	f003 0302 	and.w	r3, r3, #2
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d010      	beq.n	80080f8 <tcp_process+0xe8>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	7d1b      	ldrb	r3, [r3, #20]
 80080da:	2b02      	cmp	r3, #2
 80080dc:	d00c      	beq.n	80080f8 <tcp_process+0xe8>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	7d1b      	ldrb	r3, [r3, #20]
 80080e2:	2b03      	cmp	r3, #3
 80080e4:	d008      	beq.n	80080f8 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	7e9b      	ldrb	r3, [r3, #26]
 80080ea:	f043 0302 	orr.w	r3, r3, #2
 80080ee:	b2da      	uxtb	r2, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 80080f4:	2300      	movs	r3, #0
 80080f6:	e334      	b.n	8008762 <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	7e9b      	ldrb	r3, [r3, #26]
 80080fc:	f003 0310 	and.w	r3, r3, #16
 8008100:	2b00      	cmp	r3, #0
 8008102:	d103      	bne.n	800810c <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008104:	4b72      	ldr	r3, [pc, #456]	; (80082d0 <tcp_process+0x2c0>)
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f001 fbdd 	bl	80098d4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	7d1b      	ldrb	r3, [r3, #20]
 800811e:	3b02      	subs	r3, #2
 8008120:	2b07      	cmp	r3, #7
 8008122:	f200 830e 	bhi.w	8008742 <tcp_process+0x732>
 8008126:	a201      	add	r2, pc, #4	; (adr r2, 800812c <tcp_process+0x11c>)
 8008128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812c:	0800814d 	.word	0x0800814d
 8008130:	08008345 	.word	0x08008345
 8008134:	0800849d 	.word	0x0800849d
 8008138:	080084c7 	.word	0x080084c7
 800813c:	080085f1 	.word	0x080085f1
 8008140:	0800849d 	.word	0x0800849d
 8008144:	0800867d 	.word	0x0800867d
 8008148:	0800870d 	.word	0x0800870d
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800814c:	4b59      	ldr	r3, [pc, #356]	; (80082b4 <tcp_process+0x2a4>)
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	f003 0310 	and.w	r3, r3, #16
 8008154:	2b00      	cmp	r3, #0
 8008156:	f000 80cb 	beq.w	80082f0 <tcp_process+0x2e0>
 800815a:	4b56      	ldr	r3, [pc, #344]	; (80082b4 <tcp_process+0x2a4>)
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	f003 0302 	and.w	r3, r3, #2
 8008162:	2b00      	cmp	r3, #0
 8008164:	f000 80c4 	beq.w	80082f0 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800816c:	1c5a      	adds	r2, r3, #1
 800816e:	4b52      	ldr	r3, [pc, #328]	; (80082b8 <tcp_process+0x2a8>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	429a      	cmp	r2, r3
 8008174:	f040 80bc 	bne.w	80082f0 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 8008178:	4b50      	ldr	r3, [pc, #320]	; (80082bc <tcp_process+0x2ac>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	1c5a      	adds	r2, r3, #1
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800818a:	4b4b      	ldr	r3, [pc, #300]	; (80082b8 <tcp_process+0x2a8>)
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 8008192:	4b50      	ldr	r3, [pc, #320]	; (80082d4 <tcp_process+0x2c4>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	89db      	ldrh	r3, [r3, #14]
 8008198:	b29a      	uxth	r2, r3
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80081ac:	4b43      	ldr	r3, [pc, #268]	; (80082bc <tcp_process+0x2ac>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	1e5a      	subs	r2, r3, #1
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2204      	movs	r2, #4
 80081ba:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	3304      	adds	r3, #4
 80081c4:	4619      	mov	r1, r3
 80081c6:	4610      	mov	r0, r2
 80081c8:	f7ff f95c 	bl	8007484 <tcp_eff_send_mss_impl>
 80081cc:	4603      	mov	r3, r0
 80081ce:	461a      	mov	r2, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80081d8:	005b      	lsls	r3, r3, #1
 80081da:	f241 121c 	movw	r2, #4380	; 0x111c
 80081de:	429a      	cmp	r2, r3
 80081e0:	bf38      	it	cc
 80081e2:	461a      	movcc	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	4293      	cmp	r3, r2
 80081ec:	bf28      	it	cs
 80081ee:	4613      	movcs	r3, r2
 80081f0:	b29a      	uxth	r2, r3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d106      	bne.n	8008210 <tcp_process+0x200>
 8008202:	4b2f      	ldr	r3, [pc, #188]	; (80082c0 <tcp_process+0x2b0>)
 8008204:	f240 321a 	movw	r2, #794	; 0x31a
 8008208:	4933      	ldr	r1, [pc, #204]	; (80082d8 <tcp_process+0x2c8>)
 800820a:	482f      	ldr	r0, [pc, #188]	; (80082c8 <tcp_process+0x2b8>)
 800820c:	f008 fcfe 	bl	8010c0c <iprintf>
      --pcb->snd_queuelen;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008216:	3b01      	subs	r3, #1
 8008218:	b29a      	uxth	r2, r3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008224:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d111      	bne.n	8008250 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008230:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d106      	bne.n	8008246 <tcp_process+0x236>
 8008238:	4b21      	ldr	r3, [pc, #132]	; (80082c0 <tcp_process+0x2b0>)
 800823a:	f240 3222 	movw	r2, #802	; 0x322
 800823e:	4927      	ldr	r1, [pc, #156]	; (80082dc <tcp_process+0x2cc>)
 8008240:	4821      	ldr	r0, [pc, #132]	; (80082c8 <tcp_process+0x2b8>)
 8008242:	f008 fce3 	bl	8010c0c <iprintf>
        pcb->unsent = rseg->next;
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	669a      	str	r2, [r3, #104]	; 0x68
 800824e:	e003      	b.n	8008258 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 8008258:	69f8      	ldr	r0, [r7, #28]
 800825a:	f7fe fe48 	bl	8006eee <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008262:	2b00      	cmp	r3, #0
 8008264:	d104      	bne.n	8008270 <tcp_process+0x260>
        pcb->rtime = -1;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800826c:	861a      	strh	r2, [r3, #48]	; 0x30
 800826e:	e006      	b.n	800827e <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008284:	2b00      	cmp	r3, #0
 8008286:	d00a      	beq.n	800829e <tcp_process+0x28e>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	6910      	ldr	r0, [r2, #16]
 8008292:	2200      	movs	r2, #0
 8008294:	6879      	ldr	r1, [r7, #4]
 8008296:	4798      	blx	r3
 8008298:	4603      	mov	r3, r0
 800829a:	76bb      	strb	r3, [r7, #26]
 800829c:	e001      	b.n	80082a2 <tcp_process+0x292>
 800829e:	2300      	movs	r3, #0
 80082a0:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 80082a2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80082a6:	f113 0f0d 	cmn.w	r3, #13
 80082aa:	d119      	bne.n	80082e0 <tcp_process+0x2d0>
        return ERR_ABRT;
 80082ac:	f06f 030c 	mvn.w	r3, #12
 80082b0:	e257      	b.n	8008762 <tcp_process+0x752>
 80082b2:	bf00      	nop
 80082b4:	2000025c 	.word	0x2000025c
 80082b8:	20000254 	.word	0x20000254
 80082bc:	20000250 	.word	0x20000250
 80082c0:	08015154 	.word	0x08015154
 80082c4:	0801530c 	.word	0x0801530c
 80082c8:	08015198 	.word	0x08015198
 80082cc:	2000025d 	.word	0x2000025d
 80082d0:	200038c8 	.word	0x200038c8
 80082d4:	20000240 	.word	0x20000240
 80082d8:	0801532c 	.word	0x0801532c
 80082dc:	08015344 	.word	0x08015344
      }
      tcp_ack_now(pcb);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	7e9b      	ldrb	r3, [r3, #26]
 80082e4:	f043 0302 	orr.w	r3, r3, #2
 80082e8:	b2da      	uxtb	r2, r3
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 80082ee:	e22a      	b.n	8008746 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 80082f0:	4b9f      	ldr	r3, [pc, #636]	; (8008570 <tcp_process+0x560>)
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	f003 0310 	and.w	r3, r3, #16
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	f000 8224 	beq.w	8008746 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80082fe:	4b9d      	ldr	r3, [pc, #628]	; (8008574 <tcp_process+0x564>)
 8008300:	6818      	ldr	r0, [r3, #0]
 8008302:	4b9d      	ldr	r3, [pc, #628]	; (8008578 <tcp_process+0x568>)
 8008304:	881b      	ldrh	r3, [r3, #0]
 8008306:	461a      	mov	r2, r3
 8008308:	4b9c      	ldr	r3, [pc, #624]	; (800857c <tcp_process+0x56c>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800830e:	4b9c      	ldr	r3, [pc, #624]	; (8008580 <tcp_process+0x570>)
 8008310:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008312:	885b      	ldrh	r3, [r3, #2]
 8008314:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008316:	4a9a      	ldr	r2, [pc, #616]	; (8008580 <tcp_process+0x570>)
 8008318:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800831a:	8812      	ldrh	r2, [r2, #0]
 800831c:	b292      	uxth	r2, r2
 800831e:	9201      	str	r2, [sp, #4]
 8008320:	9300      	str	r3, [sp, #0]
 8008322:	4b98      	ldr	r3, [pc, #608]	; (8008584 <tcp_process+0x574>)
 8008324:	4a98      	ldr	r2, [pc, #608]	; (8008588 <tcp_process+0x578>)
 8008326:	f002 fca1 	bl	800ac6c <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008330:	2b05      	cmp	r3, #5
 8008332:	f200 8208 	bhi.w	8008746 <tcp_process+0x736>
        pcb->rtime = 0;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f002 fd0b 	bl	800ad58 <tcp_rexmit_rto>
    break;
 8008342:	e200      	b.n	8008746 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 8008344:	4b8a      	ldr	r3, [pc, #552]	; (8008570 <tcp_process+0x560>)
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	f003 0310 	and.w	r3, r3, #16
 800834c:	2b00      	cmp	r3, #0
 800834e:	f000 8091 	beq.w	8008474 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8008352:	4b88      	ldr	r3, [pc, #544]	; (8008574 <tcp_process+0x564>)
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800835a:	1ad3      	subs	r3, r2, r3
 800835c:	3b01      	subs	r3, #1
 800835e:	2b00      	cmp	r3, #0
 8008360:	db71      	blt.n	8008446 <tcp_process+0x436>
 8008362:	4b84      	ldr	r3, [pc, #528]	; (8008574 <tcp_process+0x564>)
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800836a:	1ad3      	subs	r3, r2, r3
 800836c:	2b00      	cmp	r3, #0
 800836e:	dc6a      	bgt.n	8008446 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2204      	movs	r2, #4
 8008374:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00b      	beq.n	8008396 <tcp_process+0x386>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008382:	699b      	ldr	r3, [r3, #24]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d106      	bne.n	8008396 <tcp_process+0x386>
 8008388:	4b80      	ldr	r3, [pc, #512]	; (800858c <tcp_process+0x57c>)
 800838a:	f240 3251 	movw	r2, #849	; 0x351
 800838e:	4980      	ldr	r1, [pc, #512]	; (8008590 <tcp_process+0x580>)
 8008390:	4880      	ldr	r0, [pc, #512]	; (8008594 <tcp_process+0x584>)
 8008392:	f008 fc3b 	bl	8010c0c <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800839a:	2b00      	cmp	r3, #0
 800839c:	d102      	bne.n	80083a4 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800839e:	23fa      	movs	r3, #250	; 0xfa
 80083a0:	76bb      	strb	r3, [r7, #26]
 80083a2:	e011      	b.n	80083c8 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083a8:	699b      	ldr	r3, [r3, #24]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00a      	beq.n	80083c4 <tcp_process+0x3b4>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083b2:	699b      	ldr	r3, [r3, #24]
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	6910      	ldr	r0, [r2, #16]
 80083b8:	2200      	movs	r2, #0
 80083ba:	6879      	ldr	r1, [r7, #4]
 80083bc:	4798      	blx	r3
 80083be:	4603      	mov	r3, r0
 80083c0:	76bb      	strb	r3, [r7, #26]
 80083c2:	e001      	b.n	80083c8 <tcp_process+0x3b8>
 80083c4:	23f0      	movs	r3, #240	; 0xf0
 80083c6:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 80083c8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00a      	beq.n	80083e6 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 80083d0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80083d4:	f113 0f0d 	cmn.w	r3, #13
 80083d8:	d002      	beq.n	80083e0 <tcp_process+0x3d0>
            tcp_abort(pcb);
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f7fd ffa2 	bl	8006324 <tcp_abort>
          }
          return ERR_ABRT;
 80083e0:	f06f 030c 	mvn.w	r3, #12
 80083e4:	e1bd      	b.n	8008762 <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 fa42 	bl	8008870 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 80083ec:	4b6a      	ldr	r3, [pc, #424]	; (8008598 <tcp_process+0x588>)
 80083ee:	881b      	ldrh	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d005      	beq.n	8008400 <tcp_process+0x3f0>
          recv_acked--;
 80083f4:	4b68      	ldr	r3, [pc, #416]	; (8008598 <tcp_process+0x588>)
 80083f6:	881b      	ldrh	r3, [r3, #0]
 80083f8:	3b01      	subs	r3, #1
 80083fa:	b29a      	uxth	r2, r3
 80083fc:	4b66      	ldr	r3, [pc, #408]	; (8008598 <tcp_process+0x588>)
 80083fe:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008404:	005b      	lsls	r3, r3, #1
 8008406:	f241 121c 	movw	r2, #4380	; 0x111c
 800840a:	429a      	cmp	r2, r3
 800840c:	bf38      	it	cc
 800840e:	461a      	movcc	r2, r3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	4293      	cmp	r3, r2
 8008418:	bf28      	it	cs
 800841a:	4613      	movcs	r3, r2
 800841c:	b29a      	uxth	r2, r3
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 8008424:	4b5d      	ldr	r3, [pc, #372]	; (800859c <tcp_process+0x58c>)
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	f003 0320 	and.w	r3, r3, #32
 800842c:	2b00      	cmp	r3, #0
 800842e:	d034      	beq.n	800849a <tcp_process+0x48a>
          tcp_ack_now(pcb);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	7e9b      	ldrb	r3, [r3, #26]
 8008434:	f043 0302 	orr.w	r3, r3, #2
 8008438:	b2da      	uxtb	r2, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2207      	movs	r2, #7
 8008442:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 8008444:	e029      	b.n	800849a <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008446:	4b4b      	ldr	r3, [pc, #300]	; (8008574 <tcp_process+0x564>)
 8008448:	6818      	ldr	r0, [r3, #0]
 800844a:	4b4b      	ldr	r3, [pc, #300]	; (8008578 <tcp_process+0x568>)
 800844c:	881b      	ldrh	r3, [r3, #0]
 800844e:	461a      	mov	r2, r3
 8008450:	4b4a      	ldr	r3, [pc, #296]	; (800857c <tcp_process+0x56c>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008456:	4b4a      	ldr	r3, [pc, #296]	; (8008580 <tcp_process+0x570>)
 8008458:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800845a:	885b      	ldrh	r3, [r3, #2]
 800845c:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800845e:	4a48      	ldr	r2, [pc, #288]	; (8008580 <tcp_process+0x570>)
 8008460:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008462:	8812      	ldrh	r2, [r2, #0]
 8008464:	b292      	uxth	r2, r2
 8008466:	9201      	str	r2, [sp, #4]
 8008468:	9300      	str	r3, [sp, #0]
 800846a:	4b46      	ldr	r3, [pc, #280]	; (8008584 <tcp_process+0x574>)
 800846c:	4a46      	ldr	r2, [pc, #280]	; (8008588 <tcp_process+0x578>)
 800846e:	f002 fbfd 	bl	800ac6c <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 8008472:	e16a      	b.n	800874a <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008474:	4b3e      	ldr	r3, [pc, #248]	; (8008570 <tcp_process+0x560>)
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	f003 0302 	and.w	r3, r3, #2
 800847c:	2b00      	cmp	r3, #0
 800847e:	f000 8164 	beq.w	800874a <tcp_process+0x73a>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008486:	1e5a      	subs	r2, r3, #1
 8008488:	4b3c      	ldr	r3, [pc, #240]	; (800857c <tcp_process+0x56c>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	429a      	cmp	r2, r3
 800848e:	f040 815c 	bne.w	800874a <tcp_process+0x73a>
      tcp_rexmit(pcb);
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f002 fc96 	bl	800adc4 <tcp_rexmit>
    break;
 8008498:	e157      	b.n	800874a <tcp_process+0x73a>
 800849a:	e156      	b.n	800874a <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 f9e7 	bl	8008870 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 80084a2:	4b3e      	ldr	r3, [pc, #248]	; (800859c <tcp_process+0x58c>)
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	f003 0320 	and.w	r3, r3, #32
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	f000 814f 	beq.w	800874e <tcp_process+0x73e>
      tcp_ack_now(pcb);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	7e9b      	ldrb	r3, [r3, #26]
 80084b4:	f043 0302 	orr.w	r3, r3, #2
 80084b8:	b2da      	uxtb	r2, r3
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2207      	movs	r2, #7
 80084c2:	751a      	strb	r2, [r3, #20]
    }
    break;
 80084c4:	e143      	b.n	800874e <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 f9d2 	bl	8008870 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80084cc:	4b33      	ldr	r3, [pc, #204]	; (800859c <tcp_process+0x58c>)
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	f003 0320 	and.w	r3, r3, #32
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d074      	beq.n	80085c2 <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80084d8:	4b25      	ldr	r3, [pc, #148]	; (8008570 <tcp_process+0x560>)
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	f003 0310 	and.w	r3, r3, #16
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d063      	beq.n	80085ac <tcp_process+0x59c>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80084e8:	4b22      	ldr	r3, [pc, #136]	; (8008574 <tcp_process+0x564>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d15d      	bne.n	80085ac <tcp_process+0x59c>
          pcb->unsent == NULL) {
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d159      	bne.n	80085ac <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	7e9b      	ldrb	r3, [r3, #26]
 80084fc:	f043 0302 	orr.w	r3, r3, #2
 8008500:	b2da      	uxtb	r2, r3
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f7fe fee8 	bl	80072dc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800850c:	4b24      	ldr	r3, [pc, #144]	; (80085a0 <tcp_process+0x590>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	429a      	cmp	r2, r3
 8008514:	d105      	bne.n	8008522 <tcp_process+0x512>
 8008516:	4b22      	ldr	r3, [pc, #136]	; (80085a0 <tcp_process+0x590>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	4a20      	ldr	r2, [pc, #128]	; (80085a0 <tcp_process+0x590>)
 800851e:	6013      	str	r3, [r2, #0]
 8008520:	e013      	b.n	800854a <tcp_process+0x53a>
 8008522:	4b1f      	ldr	r3, [pc, #124]	; (80085a0 <tcp_process+0x590>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	617b      	str	r3, [r7, #20]
 8008528:	e00c      	b.n	8008544 <tcp_process+0x534>
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	68db      	ldr	r3, [r3, #12]
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	429a      	cmp	r2, r3
 8008532:	d104      	bne.n	800853e <tcp_process+0x52e>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	68da      	ldr	r2, [r3, #12]
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	60da      	str	r2, [r3, #12]
 800853c:	e005      	b.n	800854a <tcp_process+0x53a>
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	617b      	str	r3, [r7, #20]
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d1ef      	bne.n	800852a <tcp_process+0x51a>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	60da      	str	r2, [r3, #12]
 8008550:	4b14      	ldr	r3, [pc, #80]	; (80085a4 <tcp_process+0x594>)
 8008552:	2201      	movs	r2, #1
 8008554:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	220a      	movs	r2, #10
 800855a:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800855c:	4b12      	ldr	r3, [pc, #72]	; (80085a8 <tcp_process+0x598>)
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	60da      	str	r2, [r3, #12]
 8008564:	4a10      	ldr	r2, [pc, #64]	; (80085a8 <tcp_process+0x598>)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6013      	str	r3, [r2, #0]
 800856a:	f002 fdcf 	bl	800b10c <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800856e:	e0f0      	b.n	8008752 <tcp_process+0x742>
 8008570:	2000025c 	.word	0x2000025c
 8008574:	20000254 	.word	0x20000254
 8008578:	2000025a 	.word	0x2000025a
 800857c:	20000250 	.word	0x20000250
 8008580:	20000240 	.word	0x20000240
 8008584:	200003a4 	.word	0x200003a4
 8008588:	200003a8 	.word	0x200003a8
 800858c:	08015154 	.word	0x08015154
 8008590:	08015358 	.word	0x08015358
 8008594:	08015198 	.word	0x08015198
 8008598:	20000258 	.word	0x20000258
 800859c:	2000025d 	.word	0x2000025d
 80085a0:	200038c4 	.word	0x200038c4
 80085a4:	200038c0 	.word	0x200038c0
 80085a8:	200038d4 	.word	0x200038d4
        tcp_ack_now(pcb);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	7e9b      	ldrb	r3, [r3, #26]
 80085b0:	f043 0302 	orr.w	r3, r3, #2
 80085b4:	b2da      	uxtb	r2, r3
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2208      	movs	r2, #8
 80085be:	751a      	strb	r2, [r3, #20]
    break;
 80085c0:	e0c7      	b.n	8008752 <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80085c2:	4b6a      	ldr	r3, [pc, #424]	; (800876c <tcp_process+0x75c>)
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	f003 0310 	and.w	r3, r3, #16
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	f000 80c1 	beq.w	8008752 <tcp_process+0x742>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80085d4:	4b66      	ldr	r3, [pc, #408]	; (8008770 <tcp_process+0x760>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	429a      	cmp	r2, r3
 80085da:	f040 80ba 	bne.w	8008752 <tcp_process+0x742>
               pcb->unsent == NULL) {
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	f040 80b5 	bne.w	8008752 <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2206      	movs	r2, #6
 80085ec:	751a      	strb	r2, [r3, #20]
    break;
 80085ee:	e0b0      	b.n	8008752 <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 f93d 	bl	8008870 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80085f6:	4b5f      	ldr	r3, [pc, #380]	; (8008774 <tcp_process+0x764>)
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	f003 0320 	and.w	r3, r3, #32
 80085fe:	2b00      	cmp	r3, #0
 8008600:	f000 80a9 	beq.w	8008756 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	7e9b      	ldrb	r3, [r3, #26]
 8008608:	f043 0302 	orr.w	r3, r3, #2
 800860c:	b2da      	uxtb	r2, r3
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f7fe fe62 	bl	80072dc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008618:	4b57      	ldr	r3, [pc, #348]	; (8008778 <tcp_process+0x768>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	429a      	cmp	r2, r3
 8008620:	d105      	bne.n	800862e <tcp_process+0x61e>
 8008622:	4b55      	ldr	r3, [pc, #340]	; (8008778 <tcp_process+0x768>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	4a53      	ldr	r2, [pc, #332]	; (8008778 <tcp_process+0x768>)
 800862a:	6013      	str	r3, [r2, #0]
 800862c:	e013      	b.n	8008656 <tcp_process+0x646>
 800862e:	4b52      	ldr	r3, [pc, #328]	; (8008778 <tcp_process+0x768>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	613b      	str	r3, [r7, #16]
 8008634:	e00c      	b.n	8008650 <tcp_process+0x640>
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	429a      	cmp	r2, r3
 800863e:	d104      	bne.n	800864a <tcp_process+0x63a>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	68da      	ldr	r2, [r3, #12]
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	60da      	str	r2, [r3, #12]
 8008648:	e005      	b.n	8008656 <tcp_process+0x646>
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	613b      	str	r3, [r7, #16]
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d1ef      	bne.n	8008636 <tcp_process+0x626>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	60da      	str	r2, [r3, #12]
 800865c:	4b47      	ldr	r3, [pc, #284]	; (800877c <tcp_process+0x76c>)
 800865e:	2201      	movs	r2, #1
 8008660:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	220a      	movs	r2, #10
 8008666:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8008668:	4b45      	ldr	r3, [pc, #276]	; (8008780 <tcp_process+0x770>)
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	60da      	str	r2, [r3, #12]
 8008670:	4a43      	ldr	r2, [pc, #268]	; (8008780 <tcp_process+0x770>)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6013      	str	r3, [r2, #0]
 8008676:	f002 fd49 	bl	800b10c <tcp_timer_needed>
    }
    break;
 800867a:	e06c      	b.n	8008756 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 f8f7 	bl	8008870 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008682:	4b3a      	ldr	r3, [pc, #232]	; (800876c <tcp_process+0x75c>)
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	f003 0310 	and.w	r3, r3, #16
 800868a:	2b00      	cmp	r3, #0
 800868c:	d065      	beq.n	800875a <tcp_process+0x74a>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008692:	4b37      	ldr	r3, [pc, #220]	; (8008770 <tcp_process+0x760>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	429a      	cmp	r2, r3
 8008698:	d15f      	bne.n	800875a <tcp_process+0x74a>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d15b      	bne.n	800875a <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f7fe fe1a 	bl	80072dc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80086a8:	4b33      	ldr	r3, [pc, #204]	; (8008778 <tcp_process+0x768>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d105      	bne.n	80086be <tcp_process+0x6ae>
 80086b2:	4b31      	ldr	r3, [pc, #196]	; (8008778 <tcp_process+0x768>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	4a2f      	ldr	r2, [pc, #188]	; (8008778 <tcp_process+0x768>)
 80086ba:	6013      	str	r3, [r2, #0]
 80086bc:	e013      	b.n	80086e6 <tcp_process+0x6d6>
 80086be:	4b2e      	ldr	r3, [pc, #184]	; (8008778 <tcp_process+0x768>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	60fb      	str	r3, [r7, #12]
 80086c4:	e00c      	b.n	80086e0 <tcp_process+0x6d0>
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d104      	bne.n	80086da <tcp_process+0x6ca>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	68da      	ldr	r2, [r3, #12]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	60da      	str	r2, [r3, #12]
 80086d8:	e005      	b.n	80086e6 <tcp_process+0x6d6>
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	68db      	ldr	r3, [r3, #12]
 80086de:	60fb      	str	r3, [r7, #12]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d1ef      	bne.n	80086c6 <tcp_process+0x6b6>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2200      	movs	r2, #0
 80086ea:	60da      	str	r2, [r3, #12]
 80086ec:	4b23      	ldr	r3, [pc, #140]	; (800877c <tcp_process+0x76c>)
 80086ee:	2201      	movs	r2, #1
 80086f0:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	220a      	movs	r2, #10
 80086f6:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80086f8:	4b21      	ldr	r3, [pc, #132]	; (8008780 <tcp_process+0x770>)
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	60da      	str	r2, [r3, #12]
 8008700:	4a1f      	ldr	r2, [pc, #124]	; (8008780 <tcp_process+0x770>)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6013      	str	r3, [r2, #0]
 8008706:	f002 fd01 	bl	800b10c <tcp_timer_needed>
    }
    break;
 800870a:	e026      	b.n	800875a <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 f8af 	bl	8008870 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008712:	4b16      	ldr	r3, [pc, #88]	; (800876c <tcp_process+0x75c>)
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	f003 0310 	and.w	r3, r3, #16
 800871a:	2b00      	cmp	r3, #0
 800871c:	d01f      	beq.n	800875e <tcp_process+0x74e>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008722:	4b13      	ldr	r3, [pc, #76]	; (8008770 <tcp_process+0x760>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	429a      	cmp	r2, r3
 8008728:	d119      	bne.n	800875e <tcp_process+0x74e>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800872e:	2b00      	cmp	r3, #0
 8008730:	d115      	bne.n	800875e <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 8008732:	4b10      	ldr	r3, [pc, #64]	; (8008774 <tcp_process+0x764>)
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	f043 0310 	orr.w	r3, r3, #16
 800873a:	b2da      	uxtb	r2, r3
 800873c:	4b0d      	ldr	r3, [pc, #52]	; (8008774 <tcp_process+0x764>)
 800873e:	701a      	strb	r2, [r3, #0]
    }
    break;
 8008740:	e00d      	b.n	800875e <tcp_process+0x74e>
  default:
    break;
 8008742:	bf00      	nop
 8008744:	e00c      	b.n	8008760 <tcp_process+0x750>
    break;
 8008746:	bf00      	nop
 8008748:	e00a      	b.n	8008760 <tcp_process+0x750>
    break;
 800874a:	bf00      	nop
 800874c:	e008      	b.n	8008760 <tcp_process+0x750>
    break;
 800874e:	bf00      	nop
 8008750:	e006      	b.n	8008760 <tcp_process+0x750>
    break;
 8008752:	bf00      	nop
 8008754:	e004      	b.n	8008760 <tcp_process+0x750>
    break;
 8008756:	bf00      	nop
 8008758:	e002      	b.n	8008760 <tcp_process+0x750>
    break;
 800875a:	bf00      	nop
 800875c:	e000      	b.n	8008760 <tcp_process+0x750>
    break;
 800875e:	bf00      	nop
  }
  return ERR_OK;
 8008760:	2300      	movs	r3, #0
}
 8008762:	4618      	mov	r0, r3
 8008764:	3720      	adds	r7, #32
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	2000025c 	.word	0x2000025c
 8008770:	20000254 	.word	0x20000254
 8008774:	2000025d 	.word	0x2000025d
 8008778:	200038c4 	.word	0x200038c4
 800877c:	200038c0 	.word	0x200038c0
 8008780:	200038d4 	.word	0x200038d4

08008784 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8008784:	b590      	push	{r4, r7, lr}
 8008786:	b085      	sub	sp, #20
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	899b      	ldrh	r3, [r3, #12]
 8008794:	b29b      	uxth	r3, r3
 8008796:	4618      	mov	r0, r3
 8008798:	f7fb ffaa 	bl	80046f0 <lwip_htons>
 800879c:	4603      	mov	r3, r0
 800879e:	f003 0301 	and.w	r3, r3, #1
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d027      	beq.n	80087f6 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80087a6:	6838      	ldr	r0, [r7, #0]
 80087a8:	f7fe fb8d 	bl	8006ec6 <tcp_segs_free>
    next = NULL;
 80087ac:	2300      	movs	r3, #0
 80087ae:	603b      	str	r3, [r7, #0]
 80087b0:	e055      	b.n	800885e <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	899b      	ldrh	r3, [r3, #12]
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	4618      	mov	r0, r3
 80087bc:	f7fb ff98 	bl	80046f0 <lwip_htons>
 80087c0:	4603      	mov	r3, r0
 80087c2:	f003 0301 	and.w	r3, r3, #1
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00d      	beq.n	80087e6 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	68db      	ldr	r3, [r3, #12]
 80087ce:	899b      	ldrh	r3, [r3, #12]
 80087d0:	b29c      	uxth	r4, r3
 80087d2:	2001      	movs	r0, #1
 80087d4:	f7fb ff8c 	bl	80046f0 <lwip_htons>
 80087d8:	4603      	mov	r3, r0
 80087da:	461a      	mov	r2, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	68db      	ldr	r3, [r3, #12]
 80087e0:	4322      	orrs	r2, r4
 80087e2:	b292      	uxth	r2, r2
 80087e4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80087f0:	68f8      	ldr	r0, [r7, #12]
 80087f2:	f7fe fb7c 	bl	8006eee <tcp_seg_free>
    while (next &&
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d00e      	beq.n	800881a <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	891b      	ldrh	r3, [r3, #8]
 8008800:	461a      	mov	r2, r3
 8008802:	4b1a      	ldr	r3, [pc, #104]	; (800886c <tcp_oos_insert_segment+0xe8>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	441a      	add	r2, r3
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	6839      	ldr	r1, [r7, #0]
 8008810:	8909      	ldrh	r1, [r1, #8]
 8008812:	440b      	add	r3, r1
 8008814:	1ad3      	subs	r3, r2, r3
    while (next &&
 8008816:	2b00      	cmp	r3, #0
 8008818:	dacb      	bge.n	80087b2 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d01e      	beq.n	800885e <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	891b      	ldrh	r3, [r3, #8]
 8008824:	461a      	mov	r2, r3
 8008826:	4b11      	ldr	r3, [pc, #68]	; (800886c <tcp_oos_insert_segment+0xe8>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	441a      	add	r2, r3
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	1ad3      	subs	r3, r2, r3
    if (next &&
 8008834:	2b00      	cmp	r3, #0
 8008836:	dd12      	ble.n	800885e <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	b29a      	uxth	r2, r3
 8008840:	4b0a      	ldr	r3, [pc, #40]	; (800886c <tcp_oos_insert_segment+0xe8>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	b29b      	uxth	r3, r3
 8008846:	1ad3      	subs	r3, r2, r3
 8008848:	b29a      	uxth	r2, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	685a      	ldr	r2, [r3, #4]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	891b      	ldrh	r3, [r3, #8]
 8008856:	4619      	mov	r1, r3
 8008858:	4610      	mov	r0, r2
 800885a:	f7fc ff01 	bl	8005660 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	683a      	ldr	r2, [r7, #0]
 8008862:	601a      	str	r2, [r3, #0]
}
 8008864:	bf00      	nop
 8008866:	3714      	adds	r7, #20
 8008868:	46bd      	mov	sp, r7
 800886a:	bd90      	pop	{r4, r7, pc}
 800886c:	20000250 	.word	0x20000250

08008870 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8008870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008872:	b08d      	sub	sp, #52	; 0x34
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8008878:	2300      	movs	r3, #0
 800887a:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	7d1b      	ldrb	r3, [r3, #20]
 8008880:	2b03      	cmp	r3, #3
 8008882:	d806      	bhi.n	8008892 <tcp_receive+0x22>
 8008884:	4ba6      	ldr	r3, [pc, #664]	; (8008b20 <tcp_receive+0x2b0>)
 8008886:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800888a:	49a6      	ldr	r1, [pc, #664]	; (8008b24 <tcp_receive+0x2b4>)
 800888c:	48a6      	ldr	r0, [pc, #664]	; (8008b28 <tcp_receive+0x2b8>)
 800888e:	f008 f9bd 	bl	8010c0c <iprintf>

  if (flags & TCP_ACK) {
 8008892:	4ba6      	ldr	r3, [pc, #664]	; (8008b2c <tcp_receive+0x2bc>)
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	f003 0310 	and.w	r3, r3, #16
 800889a:	2b00      	cmp	r3, #0
 800889c:	f000 82bf 	beq.w	8008e1e <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80088a6:	461a      	mov	r2, r3
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088ac:	4413      	add	r3, r2
 80088ae:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80088b4:	4b9e      	ldr	r3, [pc, #632]	; (8008b30 <tcp_receive+0x2c0>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	1ad3      	subs	r3, r2, r3
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	db1b      	blt.n	80088f6 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80088c2:	4b9b      	ldr	r3, [pc, #620]	; (8008b30 <tcp_receive+0x2c0>)
 80088c4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d106      	bne.n	80088d8 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088ce:	4b99      	ldr	r3, [pc, #612]	; (8008b34 <tcp_receive+0x2c4>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	1ad3      	subs	r3, r2, r3
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	db0e      	blt.n	80088f6 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088dc:	4b95      	ldr	r3, [pc, #596]	; (8008b34 <tcp_receive+0x2c4>)
 80088de:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d141      	bne.n	8008968 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80088e4:	4b94      	ldr	r3, [pc, #592]	; (8008b38 <tcp_receive+0x2c8>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	89db      	ldrh	r3, [r3, #14]
 80088ea:	b29a      	uxth	r2, r3
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d938      	bls.n	8008968 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80088f6:	4b90      	ldr	r3, [pc, #576]	; (8008b38 <tcp_receive+0x2c8>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	89db      	ldrh	r3, [r3, #14]
 80088fc:	b29a      	uxth	r2, r3
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008910:	429a      	cmp	r2, r3
 8008912:	d205      	bcs.n	8008920 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 8008920:	4b83      	ldr	r3, [pc, #524]	; (8008b30 <tcp_receive+0x2c0>)
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 8008928:	4b82      	ldr	r3, [pc, #520]	; (8008b34 <tcp_receive+0x2c4>)
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008936:	2b00      	cmp	r3, #0
 8008938:	d10d      	bne.n	8008956 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8008940:	2b00      	cmp	r3, #0
 8008942:	d111      	bne.n	8008968 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8008954:	e008      	b.n	8008968 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800895c:	2b00      	cmp	r3, #0
 800895e:	d003      	beq.n	8008968 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2200      	movs	r2, #0
 8008964:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008968:	4b72      	ldr	r3, [pc, #456]	; (8008b34 <tcp_receive+0x2c4>)
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008970:	1ad3      	subs	r3, r2, r3
 8008972:	2b00      	cmp	r3, #0
 8008974:	dc53      	bgt.n	8008a1e <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 8008976:	4b71      	ldr	r3, [pc, #452]	; (8008b3c <tcp_receive+0x2cc>)
 8008978:	881b      	ldrh	r3, [r3, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d146      	bne.n	8008a0c <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8008988:	4413      	add	r3, r2
 800898a:	697a      	ldr	r2, [r7, #20]
 800898c:	429a      	cmp	r2, r3
 800898e:	d13d      	bne.n	8008a0c <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008996:	2b00      	cmp	r3, #0
 8008998:	db38      	blt.n	8008a0c <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800899e:	4b65      	ldr	r3, [pc, #404]	; (8008b34 <tcp_receive+0x2c4>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d132      	bne.n	8008a0c <tcp_receive+0x19c>
              found_dupack = 1;
 80089a6:	2301      	movs	r3, #1
 80089a8:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80089b0:	2bff      	cmp	r3, #255	; 0xff
 80089b2:	d007      	beq.n	80089c4 <tcp_receive+0x154>
                ++pcb->dupacks;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80089ba:	3301      	adds	r3, #1
 80089bc:	b2da      	uxtb	r2, r3
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80089ca:	2b03      	cmp	r3, #3
 80089cc:	d916      	bls.n	80089fc <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80089d8:	4413      	add	r3, r2
 80089da:	b29a      	uxth	r2, r3
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d912      	bls.n	8008a0c <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80089f0:	4413      	add	r3, r2
 80089f2:	b29a      	uxth	r2, r3
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80089fa:	e007      	b.n	8008a0c <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008a02:	2b03      	cmp	r3, #3
 8008a04:	d102      	bne.n	8008a0c <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f002 fa2c 	bl	800ae64 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	f040 8169 	bne.w	8008ce6 <tcp_receive+0x476>
        pcb->dupacks = 0;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008a1c:	e163      	b.n	8008ce6 <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8008a1e:	4b45      	ldr	r3, [pc, #276]	; (8008b34 <tcp_receive+0x2c4>)
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a26:	1ad3      	subs	r3, r2, r3
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	f2c0 8107 	blt.w	8008c3e <tcp_receive+0x3ce>
 8008a30:	4b40      	ldr	r3, [pc, #256]	; (8008b34 <tcp_receive+0x2c4>)
 8008a32:	681a      	ldr	r2, [r3, #0]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a38:	1ad3      	subs	r3, r2, r3
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	f300 80ff 	bgt.w	8008c3e <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	7e9b      	ldrb	r3, [r3, #26]
 8008a44:	f003 0304 	and.w	r3, r3, #4
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d00c      	beq.n	8008a66 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	7e9b      	ldrb	r3, [r3, #26]
 8008a50:	f023 0304 	bic.w	r3, r3, #4
 8008a54:	b2da      	uxtb	r2, r3
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008a74:	10db      	asrs	r3, r3, #3
 8008a76:	b21b      	sxth	r3, r3
 8008a78:	b29a      	uxth	r2, r3
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	4413      	add	r3, r2
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	b21a      	sxth	r2, r3
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8008a96:	4b27      	ldr	r3, [pc, #156]	; (8008b34 <tcp_receive+0x2c4>)
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	7d1b      	ldrb	r3, [r3, #20]
 8008aa2:	2b03      	cmp	r3, #3
 8008aa4:	f240 8094 	bls.w	8008bd0 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d216      	bcs.n	8008ae6 <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ac2:	4413      	add	r3, r2
 8008ac4:	b29a      	uxth	r2, r3
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d97f      	bls.n	8008bd0 <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ada:	4413      	add	r3, r2
 8008adc:	b29a      	uxth	r2, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008ae4:	e074      	b.n	8008bd0 <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008af0:	4619      	mov	r1, r3
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008af6:	fb03 f301 	mul.w	r3, r3, r1
 8008afa:	6879      	ldr	r1, [r7, #4]
 8008afc:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 8008b00:	fb93 f3f1 	sdiv	r3, r3, r1
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	4413      	add	r3, r2
 8008b08:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008b10:	8a7a      	ldrh	r2, [r7, #18]
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d95c      	bls.n	8008bd0 <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	8a7a      	ldrh	r2, [r7, #18]
 8008b1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 8008b1e:	e057      	b.n	8008bd0 <tcp_receive+0x360>
 8008b20:	08015154 	.word	0x08015154
 8008b24:	08015378 	.word	0x08015378
 8008b28:	08015198 	.word	0x08015198
 8008b2c:	2000025c 	.word	0x2000025c
 8008b30:	20000250 	.word	0x20000250
 8008b34:	20000254 	.word	0x20000254
 8008b38:	20000240 	.word	0x20000240
 8008b3c:	2000025a 	.word	0x2000025a
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b44:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8008b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7fc ff88 	bl	8005a70 <pbuf_clen>
 8008b60:	4603      	mov	r3, r0
 8008b62:	429c      	cmp	r4, r3
 8008b64:	d206      	bcs.n	8008b74 <tcp_receive+0x304>
 8008b66:	4b70      	ldr	r3, [pc, #448]	; (8008d28 <tcp_receive+0x4b8>)
 8008b68:	f240 429e 	movw	r2, #1182	; 0x49e
 8008b6c:	496f      	ldr	r1, [pc, #444]	; (8008d2c <tcp_receive+0x4bc>)
 8008b6e:	4870      	ldr	r0, [pc, #448]	; (8008d30 <tcp_receive+0x4c0>)
 8008b70:	f008 f84c 	bl	8010c0c <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8008b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f7fc ff79 	bl	8005a70 <pbuf_clen>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	461a      	mov	r2, r3
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008b88:	1a9b      	subs	r3, r3, r2
 8008b8a:	b29a      	uxth	r2, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 8008b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b94:	891a      	ldrh	r2, [r3, #8]
 8008b96:	4b67      	ldr	r3, [pc, #412]	; (8008d34 <tcp_receive+0x4c4>)
 8008b98:	881b      	ldrh	r3, [r3, #0]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	4b65      	ldr	r3, [pc, #404]	; (8008d34 <tcp_receive+0x4c4>)
 8008ba0:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 8008ba2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ba4:	f7fe f9a3 	bl	8006eee <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00e      	beq.n	8008bd0 <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d10a      	bne.n	8008bd0 <tcp_receive+0x360>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d106      	bne.n	8008bd0 <tcp_receive+0x360>
 8008bc2:	4b59      	ldr	r3, [pc, #356]	; (8008d28 <tcp_receive+0x4b8>)
 8008bc4:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8008bc8:	495b      	ldr	r1, [pc, #364]	; (8008d38 <tcp_receive+0x4c8>)
 8008bca:	4859      	ldr	r0, [pc, #356]	; (8008d30 <tcp_receive+0x4c0>)
 8008bcc:	f008 f81e 	bl	8010c0c <iprintf>
      while (pcb->unacked != NULL &&
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d022      	beq.n	8008c1e <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	4618      	mov	r0, r3
 8008be2:	f7fb fd92 	bl	800470a <lwip_htonl>
 8008be6:	4604      	mov	r4, r0
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bec:	891b      	ldrh	r3, [r3, #8]
 8008bee:	461d      	mov	r5, r3
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	899b      	ldrh	r3, [r3, #12]
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7fb fd78 	bl	80046f0 <lwip_htons>
 8008c00:	4603      	mov	r3, r0
 8008c02:	f003 0303 	and.w	r3, r3, #3
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d001      	beq.n	8008c0e <tcp_receive+0x39e>
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e000      	b.n	8008c10 <tcp_receive+0x3a0>
 8008c0e:	2300      	movs	r3, #0
 8008c10:	442b      	add	r3, r5
 8008c12:	18e2      	adds	r2, r4, r3
 8008c14:	4b49      	ldr	r3, [pc, #292]	; (8008d3c <tcp_receive+0x4cc>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	dd90      	ble.n	8008b40 <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d104      	bne.n	8008c30 <tcp_receive+0x3c0>
        pcb->rtime = -1;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c2c:	861a      	strh	r2, [r3, #48]	; 0x30
 8008c2e:	e002      	b.n	8008c36 <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2200      	movs	r2, #0
 8008c34:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	76da      	strb	r2, [r3, #27]
 8008c3c:	e002      	b.n	8008c44 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f001 fd2e 	bl	800a6a0 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8008c44:	e04f      	b.n	8008ce6 <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d103      	bne.n	8008c66 <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8008c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	4618      	mov	r0, r3
 8008c72:	f7fc fefd 	bl	8005a70 <pbuf_clen>
 8008c76:	4603      	mov	r3, r0
 8008c78:	429c      	cmp	r4, r3
 8008c7a:	d206      	bcs.n	8008c8a <tcp_receive+0x41a>
 8008c7c:	4b2a      	ldr	r3, [pc, #168]	; (8008d28 <tcp_receive+0x4b8>)
 8008c7e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8008c82:	492a      	ldr	r1, [pc, #168]	; (8008d2c <tcp_receive+0x4bc>)
 8008c84:	482a      	ldr	r0, [pc, #168]	; (8008d30 <tcp_receive+0x4c0>)
 8008c86:	f007 ffc1 	bl	8010c0c <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8008c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f7fc feee 	bl	8005a70 <pbuf_clen>
 8008c94:	4603      	mov	r3, r0
 8008c96:	461a      	mov	r2, r3
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008c9e:	1a9b      	subs	r3, r3, r2
 8008ca0:	b29a      	uxth	r2, r3
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 8008ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008caa:	891a      	ldrh	r2, [r3, #8]
 8008cac:	4b21      	ldr	r3, [pc, #132]	; (8008d34 <tcp_receive+0x4c4>)
 8008cae:	881b      	ldrh	r3, [r3, #0]
 8008cb0:	4413      	add	r3, r2
 8008cb2:	b29a      	uxth	r2, r3
 8008cb4:	4b1f      	ldr	r3, [pc, #124]	; (8008d34 <tcp_receive+0x4c4>)
 8008cb6:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 8008cb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008cba:	f7fe f918 	bl	8006eee <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d00e      	beq.n	8008ce6 <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d10a      	bne.n	8008ce6 <tcp_receive+0x476>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d106      	bne.n	8008ce6 <tcp_receive+0x476>
 8008cd8:	4b13      	ldr	r3, [pc, #76]	; (8008d28 <tcp_receive+0x4b8>)
 8008cda:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8008cde:	4916      	ldr	r1, [pc, #88]	; (8008d38 <tcp_receive+0x4c8>)
 8008ce0:	4813      	ldr	r0, [pc, #76]	; (8008d30 <tcp_receive+0x4c0>)
 8008ce2:	f007 ff93 	bl	8010c0c <iprintf>
    while (pcb->unsent != NULL &&
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d036      	beq.n	8008d5c <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8008cee:	4b13      	ldr	r3, [pc, #76]	; (8008d3c <tcp_receive+0x4cc>)
 8008cf0:	681c      	ldr	r4, [r3, #0]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f7fb fd05 	bl	800470a <lwip_htonl>
 8008d00:	4605      	mov	r5, r0
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d06:	891b      	ldrh	r3, [r3, #8]
 8008d08:	461e      	mov	r6, r3
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	899b      	ldrh	r3, [r3, #12]
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	4618      	mov	r0, r3
 8008d16:	f7fb fceb 	bl	80046f0 <lwip_htons>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	f003 0303 	and.w	r3, r3, #3
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d00d      	beq.n	8008d40 <tcp_receive+0x4d0>
 8008d24:	2301      	movs	r3, #1
 8008d26:	e00c      	b.n	8008d42 <tcp_receive+0x4d2>
 8008d28:	08015154 	.word	0x08015154
 8008d2c:	08015394 	.word	0x08015394
 8008d30:	08015198 	.word	0x08015198
 8008d34:	20000258 	.word	0x20000258
 8008d38:	080153bc 	.word	0x080153bc
 8008d3c:	20000254 	.word	0x20000254
 8008d40:	2300      	movs	r3, #0
 8008d42:	4433      	add	r3, r6
 8008d44:	442b      	add	r3, r5
 8008d46:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	db07      	blt.n	8008d5c <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8008d4c:	4b8d      	ldr	r3, [pc, #564]	; (8008f84 <tcp_receive+0x714>)
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d54:	1ad3      	subs	r3, r2, r3
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	f77f af75 	ble.w	8008c46 <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008d62:	4b89      	ldr	r3, [pc, #548]	; (8008f88 <tcp_receive+0x718>)
 8008d64:	881b      	ldrh	r3, [r3, #0]
 8008d66:	4413      	add	r3, r2
 8008d68:	b29a      	uxth	r2, r3
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d052      	beq.n	8008e1e <tcp_receive+0x5ae>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d7c:	4b81      	ldr	r3, [pc, #516]	; (8008f84 <tcp_receive+0x714>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	1ad3      	subs	r3, r2, r3
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	da4b      	bge.n	8008e1e <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8008d86:	4b81      	ldr	r3, [pc, #516]	; (8008f8c <tcp_receive+0x71c>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	b29a      	uxth	r2, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	1ad3      	subs	r3, r2, r3
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8008d98:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008da0:	10db      	asrs	r3, r3, #3
 8008da2:	b21b      	sxth	r3, r3
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	1ad3      	subs	r3, r2, r3
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008db2:	b29a      	uxth	r2, r3
 8008db4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008db6:	4413      	add	r3, r2
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	b21a      	sxth	r2, r3
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8008dc0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	da03      	bge.n	8008dd0 <tcp_receive+0x560>
        m = -m;
 8008dc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008dca:	425b      	negs	r3, r3
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 8008dd0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008dd8:	109b      	asrs	r3, r3, #2
 8008dda:	b21b      	sxth	r3, r3
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	1ad3      	subs	r3, r2, r3
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008dea:	b29a      	uxth	r2, r3
 8008dec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008dee:	4413      	add	r3, r2
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	b21a      	sxth	r2, r3
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008dfe:	10db      	asrs	r3, r3, #3
 8008e00:	b21b      	sxth	r3, r3
 8008e02:	b29a      	uxth	r2, r3
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	4413      	add	r3, r2
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	b21a      	sxth	r2, r3
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008e1e:	4b5c      	ldr	r3, [pc, #368]	; (8008f90 <tcp_receive+0x720>)
 8008e20:	881b      	ldrh	r3, [r3, #0]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	f000 84f1 	beq.w	800980a <tcp_receive+0xf9a>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	7d1b      	ldrb	r3, [r3, #20]
 8008e2c:	2b06      	cmp	r3, #6
 8008e2e:	f200 84ec 	bhi.w	800980a <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e36:	4b57      	ldr	r3, [pc, #348]	; (8008f94 <tcp_receive+0x724>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	1ad3      	subs	r3, r2, r3
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	f2c0 80b8 	blt.w	8008fb4 <tcp_receive+0x744>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e48:	4b51      	ldr	r3, [pc, #324]	; (8008f90 <tcp_receive+0x720>)
 8008e4a:	881b      	ldrh	r3, [r3, #0]
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	4b51      	ldr	r3, [pc, #324]	; (8008f94 <tcp_receive+0x724>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	440b      	add	r3, r1
 8008e54:	1ad3      	subs	r3, r2, r3
 8008e56:	3301      	adds	r3, #1
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	f300 80ab 	bgt.w	8008fb4 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8008e5e:	4b4e      	ldr	r3, [pc, #312]	; (8008f98 <tcp_receive+0x728>)
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e68:	4b4a      	ldr	r3, [pc, #296]	; (8008f94 <tcp_receive+0x724>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	1ad3      	subs	r3, r2, r3
 8008e6e:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008e70:	4b49      	ldr	r3, [pc, #292]	; (8008f98 <tcp_receive+0x728>)
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d106      	bne.n	8008e86 <tcp_receive+0x616>
 8008e78:	4b48      	ldr	r3, [pc, #288]	; (8008f9c <tcp_receive+0x72c>)
 8008e7a:	f240 523c 	movw	r2, #1340	; 0x53c
 8008e7e:	4948      	ldr	r1, [pc, #288]	; (8008fa0 <tcp_receive+0x730>)
 8008e80:	4848      	ldr	r0, [pc, #288]	; (8008fa4 <tcp_receive+0x734>)
 8008e82:	f007 fec3 	bl	8010c0c <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8008e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e88:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	dd06      	ble.n	8008e9e <tcp_receive+0x62e>
 8008e90:	4b42      	ldr	r3, [pc, #264]	; (8008f9c <tcp_receive+0x72c>)
 8008e92:	f240 523d 	movw	r2, #1341	; 0x53d
 8008e96:	4944      	ldr	r1, [pc, #272]	; (8008fa8 <tcp_receive+0x738>)
 8008e98:	4842      	ldr	r0, [pc, #264]	; (8008fa4 <tcp_receive+0x734>)
 8008e9a:	f007 feb7 	bl	8010c0c <iprintf>
      if (inseg.p->len < off) {
 8008e9e:	4b3e      	ldr	r3, [pc, #248]	; (8008f98 <tcp_receive+0x728>)
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	895b      	ldrh	r3, [r3, #10]
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	dd3e      	ble.n	8008f2a <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008eac:	4b3a      	ldr	r3, [pc, #232]	; (8008f98 <tcp_receive+0x728>)
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	891b      	ldrh	r3, [r3, #8]
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	dd06      	ble.n	8008ec8 <tcp_receive+0x658>
 8008eba:	4b38      	ldr	r3, [pc, #224]	; (8008f9c <tcp_receive+0x72c>)
 8008ebc:	f240 523f 	movw	r2, #1343	; 0x53f
 8008ec0:	493a      	ldr	r1, [pc, #232]	; (8008fac <tcp_receive+0x73c>)
 8008ec2:	4838      	ldr	r0, [pc, #224]	; (8008fa4 <tcp_receive+0x734>)
 8008ec4:	f007 fea2 	bl	8010c0c <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008ec8:	4b33      	ldr	r3, [pc, #204]	; (8008f98 <tcp_receive+0x728>)
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	891a      	ldrh	r2, [r3, #8]
 8008ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	1ad3      	subs	r3, r2, r3
 8008ed4:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 8008ed6:	e00e      	b.n	8008ef6 <tcp_receive+0x686>
          off -= p->len;
 8008ed8:	69bb      	ldr	r3, [r7, #24]
 8008eda:	895b      	ldrh	r3, [r3, #10]
 8008edc:	461a      	mov	r2, r3
 8008ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee0:	1a9b      	subs	r3, r3, r2
 8008ee2:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8008ee4:	69bb      	ldr	r3, [r7, #24]
 8008ee6:	8a3a      	ldrh	r2, [r7, #16]
 8008ee8:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 8008eea:	69bb      	ldr	r3, [r7, #24]
 8008eec:	2200      	movs	r2, #0
 8008eee:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 8008ef6:	69bb      	ldr	r3, [r7, #24]
 8008ef8:	895b      	ldrh	r3, [r3, #10]
 8008efa:	461a      	mov	r2, r3
 8008efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efe:	4293      	cmp	r3, r2
 8008f00:	dcea      	bgt.n	8008ed8 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8008f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	425b      	negs	r3, r3
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	b21b      	sxth	r3, r3
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	69b8      	ldr	r0, [r7, #24]
 8008f10:	f7fc fcf6 	bl	8005900 <pbuf_header>
 8008f14:	4603      	mov	r3, r0
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d01c      	beq.n	8008f54 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8008f1a:	4b20      	ldr	r3, [pc, #128]	; (8008f9c <tcp_receive+0x72c>)
 8008f1c:	f240 524c 	movw	r2, #1356	; 0x54c
 8008f20:	4923      	ldr	r1, [pc, #140]	; (8008fb0 <tcp_receive+0x740>)
 8008f22:	4820      	ldr	r0, [pc, #128]	; (8008fa4 <tcp_receive+0x734>)
 8008f24:	f007 fe72 	bl	8010c0c <iprintf>
 8008f28:	e014      	b.n	8008f54 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8008f2a:	4b1b      	ldr	r3, [pc, #108]	; (8008f98 <tcp_receive+0x728>)
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f30:	b292      	uxth	r2, r2
 8008f32:	4252      	negs	r2, r2
 8008f34:	b292      	uxth	r2, r2
 8008f36:	b212      	sxth	r2, r2
 8008f38:	4611      	mov	r1, r2
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f7fc fce0 	bl	8005900 <pbuf_header>
 8008f40:	4603      	mov	r3, r0
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d006      	beq.n	8008f54 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8008f46:	4b15      	ldr	r3, [pc, #84]	; (8008f9c <tcp_receive+0x72c>)
 8008f48:	f240 5251 	movw	r2, #1361	; 0x551
 8008f4c:	4918      	ldr	r1, [pc, #96]	; (8008fb0 <tcp_receive+0x740>)
 8008f4e:	4815      	ldr	r0, [pc, #84]	; (8008fa4 <tcp_receive+0x734>)
 8008f50:	f007 fe5c 	bl	8010c0c <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8008f54:	4b10      	ldr	r3, [pc, #64]	; (8008f98 <tcp_receive+0x728>)
 8008f56:	891a      	ldrh	r2, [r3, #8]
 8008f58:	4b0e      	ldr	r3, [pc, #56]	; (8008f94 <tcp_receive+0x724>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	b299      	uxth	r1, r3
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	1acb      	subs	r3, r1, r3
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	4413      	add	r3, r2
 8008f6a:	b29a      	uxth	r2, r3
 8008f6c:	4b0a      	ldr	r3, [pc, #40]	; (8008f98 <tcp_receive+0x728>)
 8008f6e:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f74:	4a07      	ldr	r2, [pc, #28]	; (8008f94 <tcp_receive+0x724>)
 8008f76:	6013      	str	r3, [r2, #0]
 8008f78:	4b07      	ldr	r3, [pc, #28]	; (8008f98 <tcp_receive+0x728>)
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	4a05      	ldr	r2, [pc, #20]	; (8008f94 <tcp_receive+0x724>)
 8008f7e:	6812      	ldr	r2, [r2, #0]
 8008f80:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008f82:	e025      	b.n	8008fd0 <tcp_receive+0x760>
 8008f84:	20000254 	.word	0x20000254
 8008f88:	20000258 	.word	0x20000258
 8008f8c:	200038c8 	.word	0x200038c8
 8008f90:	2000025a 	.word	0x2000025a
 8008f94:	20000250 	.word	0x20000250
 8008f98:	20000230 	.word	0x20000230
 8008f9c:	08015154 	.word	0x08015154
 8008fa0:	080153dc 	.word	0x080153dc
 8008fa4:	08015198 	.word	0x08015198
 8008fa8:	080153ec 	.word	0x080153ec
 8008fac:	080153fc 	.word	0x080153fc
 8008fb0:	0801540c 	.word	0x0801540c
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8008fb4:	4b87      	ldr	r3, [pc, #540]	; (80091d4 <tcp_receive+0x964>)
 8008fb6:	681a      	ldr	r2, [r3, #0]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fbc:	1ad3      	subs	r3, r2, r3
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	da06      	bge.n	8008fd0 <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	7e9b      	ldrb	r3, [r3, #26]
 8008fc6:	f043 0302 	orr.w	r3, r3, #2
 8008fca:	b2da      	uxtb	r2, r3
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008fd0:	4b80      	ldr	r3, [pc, #512]	; (80091d4 <tcp_receive+0x964>)
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd8:	1ad3      	subs	r3, r2, r3
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	f2c0 8410 	blt.w	8009800 <tcp_receive+0xf90>
 8008fe0:	4b7c      	ldr	r3, [pc, #496]	; (80091d4 <tcp_receive+0x964>)
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe8:	6879      	ldr	r1, [r7, #4]
 8008fea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008fec:	440b      	add	r3, r1
 8008fee:	1ad3      	subs	r3, r2, r3
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	f300 8404 	bgt.w	8009800 <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ffc:	4b75      	ldr	r3, [pc, #468]	; (80091d4 <tcp_receive+0x964>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	429a      	cmp	r2, r3
 8009002:	f040 8287 	bne.w	8009514 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009006:	4b74      	ldr	r3, [pc, #464]	; (80091d8 <tcp_receive+0x968>)
 8009008:	891c      	ldrh	r4, [r3, #8]
 800900a:	4b73      	ldr	r3, [pc, #460]	; (80091d8 <tcp_receive+0x968>)
 800900c:	68db      	ldr	r3, [r3, #12]
 800900e:	899b      	ldrh	r3, [r3, #12]
 8009010:	b29b      	uxth	r3, r3
 8009012:	4618      	mov	r0, r3
 8009014:	f7fb fb6c 	bl	80046f0 <lwip_htons>
 8009018:	4603      	mov	r3, r0
 800901a:	f003 0303 	and.w	r3, r3, #3
 800901e:	2b00      	cmp	r3, #0
 8009020:	d001      	beq.n	8009026 <tcp_receive+0x7b6>
 8009022:	2301      	movs	r3, #1
 8009024:	e000      	b.n	8009028 <tcp_receive+0x7b8>
 8009026:	2300      	movs	r3, #0
 8009028:	4423      	add	r3, r4
 800902a:	b29a      	uxth	r2, r3
 800902c:	4b6b      	ldr	r3, [pc, #428]	; (80091dc <tcp_receive+0x96c>)
 800902e:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009034:	4b69      	ldr	r3, [pc, #420]	; (80091dc <tcp_receive+0x96c>)
 8009036:	881b      	ldrh	r3, [r3, #0]
 8009038:	429a      	cmp	r2, r3
 800903a:	d26e      	bcs.n	800911a <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800903c:	4b66      	ldr	r3, [pc, #408]	; (80091d8 <tcp_receive+0x968>)
 800903e:	68db      	ldr	r3, [r3, #12]
 8009040:	899b      	ldrh	r3, [r3, #12]
 8009042:	b29b      	uxth	r3, r3
 8009044:	4618      	mov	r0, r3
 8009046:	f7fb fb53 	bl	80046f0 <lwip_htons>
 800904a:	4603      	mov	r3, r0
 800904c:	f003 0301 	and.w	r3, r3, #1
 8009050:	2b00      	cmp	r3, #0
 8009052:	d01b      	beq.n	800908c <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009054:	4b60      	ldr	r3, [pc, #384]	; (80091d8 <tcp_receive+0x968>)
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	899b      	ldrh	r3, [r3, #12]
 800905a:	b29b      	uxth	r3, r3
 800905c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009060:	b29c      	uxth	r4, r3
 8009062:	4b5d      	ldr	r3, [pc, #372]	; (80091d8 <tcp_receive+0x968>)
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	899b      	ldrh	r3, [r3, #12]
 8009068:	b29b      	uxth	r3, r3
 800906a:	4618      	mov	r0, r3
 800906c:	f7fb fb40 	bl	80046f0 <lwip_htons>
 8009070:	4603      	mov	r3, r0
 8009072:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009076:	b29b      	uxth	r3, r3
 8009078:	4618      	mov	r0, r3
 800907a:	f7fb fb39 	bl	80046f0 <lwip_htons>
 800907e:	4603      	mov	r3, r0
 8009080:	461a      	mov	r2, r3
 8009082:	4b55      	ldr	r3, [pc, #340]	; (80091d8 <tcp_receive+0x968>)
 8009084:	68db      	ldr	r3, [r3, #12]
 8009086:	4322      	orrs	r2, r4
 8009088:	b292      	uxth	r2, r2
 800908a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009090:	4b51      	ldr	r3, [pc, #324]	; (80091d8 <tcp_receive+0x968>)
 8009092:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009094:	4b50      	ldr	r3, [pc, #320]	; (80091d8 <tcp_receive+0x968>)
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	899b      	ldrh	r3, [r3, #12]
 800909a:	b29b      	uxth	r3, r3
 800909c:	4618      	mov	r0, r3
 800909e:	f7fb fb27 	bl	80046f0 <lwip_htons>
 80090a2:	4603      	mov	r3, r0
 80090a4:	f003 0302 	and.w	r3, r3, #2
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d005      	beq.n	80090b8 <tcp_receive+0x848>
            inseg.len -= 1;
 80090ac:	4b4a      	ldr	r3, [pc, #296]	; (80091d8 <tcp_receive+0x968>)
 80090ae:	891b      	ldrh	r3, [r3, #8]
 80090b0:	3b01      	subs	r3, #1
 80090b2:	b29a      	uxth	r2, r3
 80090b4:	4b48      	ldr	r3, [pc, #288]	; (80091d8 <tcp_receive+0x968>)
 80090b6:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80090b8:	4b47      	ldr	r3, [pc, #284]	; (80091d8 <tcp_receive+0x968>)
 80090ba:	685a      	ldr	r2, [r3, #4]
 80090bc:	4b46      	ldr	r3, [pc, #280]	; (80091d8 <tcp_receive+0x968>)
 80090be:	891b      	ldrh	r3, [r3, #8]
 80090c0:	4619      	mov	r1, r3
 80090c2:	4610      	mov	r0, r2
 80090c4:	f7fc facc 	bl	8005660 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80090c8:	4b43      	ldr	r3, [pc, #268]	; (80091d8 <tcp_receive+0x968>)
 80090ca:	891c      	ldrh	r4, [r3, #8]
 80090cc:	4b42      	ldr	r3, [pc, #264]	; (80091d8 <tcp_receive+0x968>)
 80090ce:	68db      	ldr	r3, [r3, #12]
 80090d0:	899b      	ldrh	r3, [r3, #12]
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	4618      	mov	r0, r3
 80090d6:	f7fb fb0b 	bl	80046f0 <lwip_htons>
 80090da:	4603      	mov	r3, r0
 80090dc:	f003 0303 	and.w	r3, r3, #3
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d001      	beq.n	80090e8 <tcp_receive+0x878>
 80090e4:	2301      	movs	r3, #1
 80090e6:	e000      	b.n	80090ea <tcp_receive+0x87a>
 80090e8:	2300      	movs	r3, #0
 80090ea:	4423      	add	r3, r4
 80090ec:	b29a      	uxth	r2, r3
 80090ee:	4b3b      	ldr	r3, [pc, #236]	; (80091dc <tcp_receive+0x96c>)
 80090f0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80090f2:	4b3a      	ldr	r3, [pc, #232]	; (80091dc <tcp_receive+0x96c>)
 80090f4:	881b      	ldrh	r3, [r3, #0]
 80090f6:	461a      	mov	r2, r3
 80090f8:	4b36      	ldr	r3, [pc, #216]	; (80091d4 <tcp_receive+0x964>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	441a      	add	r2, r3
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009102:	6879      	ldr	r1, [r7, #4]
 8009104:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009106:	440b      	add	r3, r1
 8009108:	429a      	cmp	r2, r3
 800910a:	d006      	beq.n	800911a <tcp_receive+0x8aa>
 800910c:	4b34      	ldr	r3, [pc, #208]	; (80091e0 <tcp_receive+0x970>)
 800910e:	f240 527f 	movw	r2, #1407	; 0x57f
 8009112:	4934      	ldr	r1, [pc, #208]	; (80091e4 <tcp_receive+0x974>)
 8009114:	4834      	ldr	r0, [pc, #208]	; (80091e8 <tcp_receive+0x978>)
 8009116:	f007 fd79 	bl	8010c0c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800911e:	2b00      	cmp	r3, #0
 8009120:	f000 80e1 	beq.w	80092e6 <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009124:	4b2c      	ldr	r3, [pc, #176]	; (80091d8 <tcp_receive+0x968>)
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	899b      	ldrh	r3, [r3, #12]
 800912a:	b29b      	uxth	r3, r3
 800912c:	4618      	mov	r0, r3
 800912e:	f7fb fadf 	bl	80046f0 <lwip_htons>
 8009132:	4603      	mov	r3, r0
 8009134:	f003 0301 	and.w	r3, r3, #1
 8009138:	2b00      	cmp	r3, #0
 800913a:	d010      	beq.n	800915e <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800913c:	e00a      	b.n	8009154 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009142:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800914e:	68b8      	ldr	r0, [r7, #8]
 8009150:	f7fd fecd 	bl	8006eee <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009158:	2b00      	cmp	r3, #0
 800915a:	d1f0      	bne.n	800913e <tcp_receive+0x8ce>
 800915c:	e0c3      	b.n	80092e6 <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009162:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8009164:	e04f      	b.n	8009206 <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	899b      	ldrh	r3, [r3, #12]
 800916c:	b29b      	uxth	r3, r3
 800916e:	4618      	mov	r0, r3
 8009170:	f7fb fabe 	bl	80046f0 <lwip_htons>
 8009174:	4603      	mov	r3, r0
 8009176:	f003 0301 	and.w	r3, r3, #1
 800917a:	2b00      	cmp	r3, #0
 800917c:	d03b      	beq.n	80091f6 <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800917e:	4b16      	ldr	r3, [pc, #88]	; (80091d8 <tcp_receive+0x968>)
 8009180:	68db      	ldr	r3, [r3, #12]
 8009182:	899b      	ldrh	r3, [r3, #12]
 8009184:	b29b      	uxth	r3, r3
 8009186:	4618      	mov	r0, r3
 8009188:	f7fb fab2 	bl	80046f0 <lwip_htons>
 800918c:	4603      	mov	r3, r0
 800918e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009192:	2b00      	cmp	r3, #0
 8009194:	d12f      	bne.n	80091f6 <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009196:	4b10      	ldr	r3, [pc, #64]	; (80091d8 <tcp_receive+0x968>)
 8009198:	68db      	ldr	r3, [r3, #12]
 800919a:	899b      	ldrh	r3, [r3, #12]
 800919c:	b29c      	uxth	r4, r3
 800919e:	2001      	movs	r0, #1
 80091a0:	f7fb faa6 	bl	80046f0 <lwip_htons>
 80091a4:	4603      	mov	r3, r0
 80091a6:	461a      	mov	r2, r3
 80091a8:	4b0b      	ldr	r3, [pc, #44]	; (80091d8 <tcp_receive+0x968>)
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	4322      	orrs	r2, r4
 80091ae:	b292      	uxth	r2, r2
 80091b0:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80091b2:	4b09      	ldr	r3, [pc, #36]	; (80091d8 <tcp_receive+0x968>)
 80091b4:	891c      	ldrh	r4, [r3, #8]
 80091b6:	4b08      	ldr	r3, [pc, #32]	; (80091d8 <tcp_receive+0x968>)
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	899b      	ldrh	r3, [r3, #12]
 80091bc:	b29b      	uxth	r3, r3
 80091be:	4618      	mov	r0, r3
 80091c0:	f7fb fa96 	bl	80046f0 <lwip_htons>
 80091c4:	4603      	mov	r3, r0
 80091c6:	f003 0303 	and.w	r3, r3, #3
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d00e      	beq.n	80091ec <tcp_receive+0x97c>
 80091ce:	2301      	movs	r3, #1
 80091d0:	e00d      	b.n	80091ee <tcp_receive+0x97e>
 80091d2:	bf00      	nop
 80091d4:	20000250 	.word	0x20000250
 80091d8:	20000230 	.word	0x20000230
 80091dc:	2000025a 	.word	0x2000025a
 80091e0:	08015154 	.word	0x08015154
 80091e4:	08015420 	.word	0x08015420
 80091e8:	08015198 	.word	0x08015198
 80091ec:	2300      	movs	r3, #0
 80091ee:	4423      	add	r3, r4
 80091f0:	b29a      	uxth	r2, r3
 80091f2:	4b95      	ldr	r3, [pc, #596]	; (8009448 <tcp_receive+0xbd8>)
 80091f4:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 80091f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f8:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 80091fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 8009200:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009202:	f7fd fe74 	bl	8006eee <tcp_seg_free>
            while (next &&
 8009206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009208:	2b00      	cmp	r3, #0
 800920a:	d00e      	beq.n	800922a <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800920c:	4b8e      	ldr	r3, [pc, #568]	; (8009448 <tcp_receive+0xbd8>)
 800920e:	881b      	ldrh	r3, [r3, #0]
 8009210:	461a      	mov	r2, r3
 8009212:	4b8e      	ldr	r3, [pc, #568]	; (800944c <tcp_receive+0xbdc>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	441a      	add	r2, r3
 8009218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800921a:	68db      	ldr	r3, [r3, #12]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009220:	8909      	ldrh	r1, [r1, #8]
 8009222:	440b      	add	r3, r1
 8009224:	1ad3      	subs	r3, r2, r3
            while (next &&
 8009226:	2b00      	cmp	r3, #0
 8009228:	da9d      	bge.n	8009166 <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800922a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800922c:	2b00      	cmp	r3, #0
 800922e:	d057      	beq.n	80092e0 <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 8009230:	4b85      	ldr	r3, [pc, #532]	; (8009448 <tcp_receive+0xbd8>)
 8009232:	881b      	ldrh	r3, [r3, #0]
 8009234:	461a      	mov	r2, r3
 8009236:	4b85      	ldr	r3, [pc, #532]	; (800944c <tcp_receive+0xbdc>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	441a      	add	r2, r3
 800923c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800923e:	68db      	ldr	r3, [r3, #12]
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009244:	2b00      	cmp	r3, #0
 8009246:	dd4b      	ble.n	80092e0 <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	b29a      	uxth	r2, r3
 8009250:	4b7e      	ldr	r3, [pc, #504]	; (800944c <tcp_receive+0xbdc>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	b29b      	uxth	r3, r3
 8009256:	1ad3      	subs	r3, r2, r3
 8009258:	b29a      	uxth	r2, r3
 800925a:	4b7d      	ldr	r3, [pc, #500]	; (8009450 <tcp_receive+0xbe0>)
 800925c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800925e:	4b7c      	ldr	r3, [pc, #496]	; (8009450 <tcp_receive+0xbe0>)
 8009260:	68db      	ldr	r3, [r3, #12]
 8009262:	899b      	ldrh	r3, [r3, #12]
 8009264:	b29b      	uxth	r3, r3
 8009266:	4618      	mov	r0, r3
 8009268:	f7fb fa42 	bl	80046f0 <lwip_htons>
 800926c:	4603      	mov	r3, r0
 800926e:	f003 0302 	and.w	r3, r3, #2
 8009272:	2b00      	cmp	r3, #0
 8009274:	d005      	beq.n	8009282 <tcp_receive+0xa12>
                inseg.len -= 1;
 8009276:	4b76      	ldr	r3, [pc, #472]	; (8009450 <tcp_receive+0xbe0>)
 8009278:	891b      	ldrh	r3, [r3, #8]
 800927a:	3b01      	subs	r3, #1
 800927c:	b29a      	uxth	r2, r3
 800927e:	4b74      	ldr	r3, [pc, #464]	; (8009450 <tcp_receive+0xbe0>)
 8009280:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009282:	4b73      	ldr	r3, [pc, #460]	; (8009450 <tcp_receive+0xbe0>)
 8009284:	685a      	ldr	r2, [r3, #4]
 8009286:	4b72      	ldr	r3, [pc, #456]	; (8009450 <tcp_receive+0xbe0>)
 8009288:	891b      	ldrh	r3, [r3, #8]
 800928a:	4619      	mov	r1, r3
 800928c:	4610      	mov	r0, r2
 800928e:	f7fc f9e7 	bl	8005660 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009292:	4b6f      	ldr	r3, [pc, #444]	; (8009450 <tcp_receive+0xbe0>)
 8009294:	891c      	ldrh	r4, [r3, #8]
 8009296:	4b6e      	ldr	r3, [pc, #440]	; (8009450 <tcp_receive+0xbe0>)
 8009298:	68db      	ldr	r3, [r3, #12]
 800929a:	899b      	ldrh	r3, [r3, #12]
 800929c:	b29b      	uxth	r3, r3
 800929e:	4618      	mov	r0, r3
 80092a0:	f7fb fa26 	bl	80046f0 <lwip_htons>
 80092a4:	4603      	mov	r3, r0
 80092a6:	f003 0303 	and.w	r3, r3, #3
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d001      	beq.n	80092b2 <tcp_receive+0xa42>
 80092ae:	2301      	movs	r3, #1
 80092b0:	e000      	b.n	80092b4 <tcp_receive+0xa44>
 80092b2:	2300      	movs	r3, #0
 80092b4:	4423      	add	r3, r4
 80092b6:	b29a      	uxth	r2, r3
 80092b8:	4b63      	ldr	r3, [pc, #396]	; (8009448 <tcp_receive+0xbd8>)
 80092ba:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80092bc:	4b62      	ldr	r3, [pc, #392]	; (8009448 <tcp_receive+0xbd8>)
 80092be:	881b      	ldrh	r3, [r3, #0]
 80092c0:	461a      	mov	r2, r3
 80092c2:	4b62      	ldr	r3, [pc, #392]	; (800944c <tcp_receive+0xbdc>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	441a      	add	r2, r3
 80092c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d006      	beq.n	80092e0 <tcp_receive+0xa70>
 80092d2:	4b60      	ldr	r3, [pc, #384]	; (8009454 <tcp_receive+0xbe4>)
 80092d4:	f240 52af 	movw	r2, #1455	; 0x5af
 80092d8:	495f      	ldr	r1, [pc, #380]	; (8009458 <tcp_receive+0xbe8>)
 80092da:	4860      	ldr	r0, [pc, #384]	; (800945c <tcp_receive+0xbec>)
 80092dc:	f007 fc96 	bl	8010c0c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092e4:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80092e6:	4b58      	ldr	r3, [pc, #352]	; (8009448 <tcp_receive+0xbd8>)
 80092e8:	881b      	ldrh	r3, [r3, #0]
 80092ea:	461a      	mov	r2, r3
 80092ec:	4b57      	ldr	r3, [pc, #348]	; (800944c <tcp_receive+0xbdc>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	441a      	add	r2, r3
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80092fa:	4b53      	ldr	r3, [pc, #332]	; (8009448 <tcp_receive+0xbd8>)
 80092fc:	881b      	ldrh	r3, [r3, #0]
 80092fe:	429a      	cmp	r2, r3
 8009300:	d206      	bcs.n	8009310 <tcp_receive+0xaa0>
 8009302:	4b54      	ldr	r3, [pc, #336]	; (8009454 <tcp_receive+0xbe4>)
 8009304:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8009308:	4955      	ldr	r1, [pc, #340]	; (8009460 <tcp_receive+0xbf0>)
 800930a:	4854      	ldr	r0, [pc, #336]	; (800945c <tcp_receive+0xbec>)
 800930c:	f007 fc7e 	bl	8010c0c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009314:	4b4c      	ldr	r3, [pc, #304]	; (8009448 <tcp_receive+0xbd8>)
 8009316:	881b      	ldrh	r3, [r3, #0]
 8009318:	1ad3      	subs	r3, r2, r3
 800931a:	b29a      	uxth	r2, r3
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f7fd f957 	bl	80065d4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8009326:	4b4a      	ldr	r3, [pc, #296]	; (8009450 <tcp_receive+0xbe0>)
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	891b      	ldrh	r3, [r3, #8]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d006      	beq.n	800933e <tcp_receive+0xace>
          recv_data = inseg.p;
 8009330:	4b47      	ldr	r3, [pc, #284]	; (8009450 <tcp_receive+0xbe0>)
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	4a4b      	ldr	r2, [pc, #300]	; (8009464 <tcp_receive+0xbf4>)
 8009336:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009338:	4b45      	ldr	r3, [pc, #276]	; (8009450 <tcp_receive+0xbe0>)
 800933a:	2200      	movs	r2, #0
 800933c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800933e:	4b44      	ldr	r3, [pc, #272]	; (8009450 <tcp_receive+0xbe0>)
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	899b      	ldrh	r3, [r3, #12]
 8009344:	b29b      	uxth	r3, r3
 8009346:	4618      	mov	r0, r3
 8009348:	f7fb f9d2 	bl	80046f0 <lwip_htons>
 800934c:	4603      	mov	r3, r0
 800934e:	f003 0301 	and.w	r3, r3, #1
 8009352:	2b00      	cmp	r3, #0
 8009354:	f000 80b4 	beq.w	80094c0 <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8009358:	4b43      	ldr	r3, [pc, #268]	; (8009468 <tcp_receive+0xbf8>)
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	f043 0320 	orr.w	r3, r3, #32
 8009360:	b2da      	uxtb	r2, r3
 8009362:	4b41      	ldr	r3, [pc, #260]	; (8009468 <tcp_receive+0xbf8>)
 8009364:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8009366:	e0ab      	b.n	80094c0 <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800936c:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	4a35      	ldr	r2, [pc, #212]	; (800944c <tcp_receive+0xbdc>)
 8009378:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	891b      	ldrh	r3, [r3, #8]
 800937e:	461c      	mov	r4, r3
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	68db      	ldr	r3, [r3, #12]
 8009384:	899b      	ldrh	r3, [r3, #12]
 8009386:	b29b      	uxth	r3, r3
 8009388:	4618      	mov	r0, r3
 800938a:	f7fb f9b1 	bl	80046f0 <lwip_htons>
 800938e:	4603      	mov	r3, r0
 8009390:	f003 0303 	and.w	r3, r3, #3
 8009394:	2b00      	cmp	r3, #0
 8009396:	d001      	beq.n	800939c <tcp_receive+0xb2c>
 8009398:	2301      	movs	r3, #1
 800939a:	e000      	b.n	800939e <tcp_receive+0xb2e>
 800939c:	2300      	movs	r3, #0
 800939e:	191a      	adds	r2, r3, r4
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a4:	441a      	add	r2, r3
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093ae:	461c      	mov	r4, r3
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	891b      	ldrh	r3, [r3, #8]
 80093b4:	461d      	mov	r5, r3
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	68db      	ldr	r3, [r3, #12]
 80093ba:	899b      	ldrh	r3, [r3, #12]
 80093bc:	b29b      	uxth	r3, r3
 80093be:	4618      	mov	r0, r3
 80093c0:	f7fb f996 	bl	80046f0 <lwip_htons>
 80093c4:	4603      	mov	r3, r0
 80093c6:	f003 0303 	and.w	r3, r3, #3
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d001      	beq.n	80093d2 <tcp_receive+0xb62>
 80093ce:	2301      	movs	r3, #1
 80093d0:	e000      	b.n	80093d4 <tcp_receive+0xb64>
 80093d2:	2300      	movs	r3, #0
 80093d4:	442b      	add	r3, r5
 80093d6:	429c      	cmp	r4, r3
 80093d8:	d206      	bcs.n	80093e8 <tcp_receive+0xb78>
 80093da:	4b1e      	ldr	r3, [pc, #120]	; (8009454 <tcp_receive+0xbe4>)
 80093dc:	f240 52de 	movw	r2, #1502	; 0x5de
 80093e0:	4922      	ldr	r1, [pc, #136]	; (800946c <tcp_receive+0xbfc>)
 80093e2:	481e      	ldr	r0, [pc, #120]	; (800945c <tcp_receive+0xbec>)
 80093e4:	f007 fc12 	bl	8010c0c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	891b      	ldrh	r3, [r3, #8]
 80093ec:	461c      	mov	r4, r3
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	899b      	ldrh	r3, [r3, #12]
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7fb f97a 	bl	80046f0 <lwip_htons>
 80093fc:	4603      	mov	r3, r0
 80093fe:	f003 0303 	and.w	r3, r3, #3
 8009402:	2b00      	cmp	r3, #0
 8009404:	d001      	beq.n	800940a <tcp_receive+0xb9a>
 8009406:	2301      	movs	r3, #1
 8009408:	e000      	b.n	800940c <tcp_receive+0xb9c>
 800940a:	2300      	movs	r3, #0
 800940c:	1919      	adds	r1, r3, r4
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009412:	b28b      	uxth	r3, r1
 8009414:	1ad3      	subs	r3, r2, r3
 8009416:	b29a      	uxth	r2, r3
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f7fd f8d9 	bl	80065d4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	891b      	ldrh	r3, [r3, #8]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d028      	beq.n	800947e <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800942c:	4b0d      	ldr	r3, [pc, #52]	; (8009464 <tcp_receive+0xbf4>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d01d      	beq.n	8009470 <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 8009434:	4b0b      	ldr	r3, [pc, #44]	; (8009464 <tcp_receive+0xbf4>)
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	4619      	mov	r1, r3
 800943e:	4610      	mov	r0, r2
 8009440:	f7fc fb4e 	bl	8005ae0 <pbuf_cat>
 8009444:	e018      	b.n	8009478 <tcp_receive+0xc08>
 8009446:	bf00      	nop
 8009448:	2000025a 	.word	0x2000025a
 800944c:	20000250 	.word	0x20000250
 8009450:	20000230 	.word	0x20000230
 8009454:	08015154 	.word	0x08015154
 8009458:	08015458 	.word	0x08015458
 800945c:	08015198 	.word	0x08015198
 8009460:	08015494 	.word	0x08015494
 8009464:	20000260 	.word	0x20000260
 8009468:	2000025d 	.word	0x2000025d
 800946c:	080154b4 	.word	0x080154b4
            } else {
              recv_data = cseg->p;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	4a71      	ldr	r2, [pc, #452]	; (800963c <tcp_receive+0xdcc>)
 8009476:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2200      	movs	r2, #0
 800947c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	68db      	ldr	r3, [r3, #12]
 8009482:	899b      	ldrh	r3, [r3, #12]
 8009484:	b29b      	uxth	r3, r3
 8009486:	4618      	mov	r0, r3
 8009488:	f7fb f932 	bl	80046f0 <lwip_htons>
 800948c:	4603      	mov	r3, r0
 800948e:	f003 0301 	and.w	r3, r3, #1
 8009492:	2b00      	cmp	r3, #0
 8009494:	d00d      	beq.n	80094b2 <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8009496:	4b6a      	ldr	r3, [pc, #424]	; (8009640 <tcp_receive+0xdd0>)
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	f043 0320 	orr.w	r3, r3, #32
 800949e:	b2da      	uxtb	r2, r3
 80094a0:	4b67      	ldr	r3, [pc, #412]	; (8009640 <tcp_receive+0xdd0>)
 80094a2:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	7d1b      	ldrb	r3, [r3, #20]
 80094a8:	2b04      	cmp	r3, #4
 80094aa:	d102      	bne.n	80094b2 <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2207      	movs	r2, #7
 80094b0:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 80094ba:	68f8      	ldr	r0, [r7, #12]
 80094bc:	f7fd fd17 	bl	8006eee <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d008      	beq.n	80094da <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	685a      	ldr	r2, [r3, #4]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80094d4:	429a      	cmp	r2, r3
 80094d6:	f43f af47 	beq.w	8009368 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	7e9b      	ldrb	r3, [r3, #26]
 80094de:	f003 0301 	and.w	r3, r3, #1
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d00e      	beq.n	8009504 <tcp_receive+0xc94>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	7e9b      	ldrb	r3, [r3, #26]
 80094ea:	f023 0301 	bic.w	r3, r3, #1
 80094ee:	b2da      	uxtb	r2, r3
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	769a      	strb	r2, [r3, #26]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	7e9b      	ldrb	r3, [r3, #26]
 80094f8:	f043 0302 	orr.w	r3, r3, #2
 80094fc:	b2da      	uxtb	r2, r3
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009502:	e181      	b.n	8009808 <tcp_receive+0xf98>
        tcp_ack(pcb);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	7e9b      	ldrb	r3, [r3, #26]
 8009508:	f043 0301 	orr.w	r3, r3, #1
 800950c:	b2da      	uxtb	r2, r3
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009512:	e179      	b.n	8009808 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f001 f8c3 	bl	800a6a0 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800951e:	2b00      	cmp	r3, #0
 8009520:	d106      	bne.n	8009530 <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009522:	4848      	ldr	r0, [pc, #288]	; (8009644 <tcp_receive+0xdd4>)
 8009524:	f7fd fcfb 	bl	8006f1e <tcp_seg_copy>
 8009528:	4602      	mov	r2, r0
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 800952e:	e16b      	b.n	8009808 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 8009530:	2300      	movs	r3, #0
 8009532:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009538:	62fb      	str	r3, [r7, #44]	; 0x2c
 800953a:	e150      	b.n	80097de <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 800953c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800953e:	68db      	ldr	r3, [r3, #12]
 8009540:	685a      	ldr	r2, [r3, #4]
 8009542:	4b41      	ldr	r3, [pc, #260]	; (8009648 <tcp_receive+0xdd8>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	429a      	cmp	r2, r3
 8009548:	d11d      	bne.n	8009586 <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800954a:	4b3e      	ldr	r3, [pc, #248]	; (8009644 <tcp_receive+0xdd4>)
 800954c:	891a      	ldrh	r2, [r3, #8]
 800954e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009550:	891b      	ldrh	r3, [r3, #8]
 8009552:	429a      	cmp	r2, r3
 8009554:	f240 8148 	bls.w	80097e8 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8009558:	483a      	ldr	r0, [pc, #232]	; (8009644 <tcp_receive+0xdd4>)
 800955a:	f7fd fce0 	bl	8006f1e <tcp_seg_copy>
 800955e:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2b00      	cmp	r3, #0
 8009564:	f000 8142 	beq.w	80097ec <tcp_receive+0xf7c>
                  if (prev != NULL) {
 8009568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956a:	2b00      	cmp	r3, #0
 800956c:	d003      	beq.n	8009576 <tcp_receive+0xd06>
                    prev->next = cseg;
 800956e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009570:	68fa      	ldr	r2, [r7, #12]
 8009572:	601a      	str	r2, [r3, #0]
 8009574:	e002      	b.n	800957c <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 800957c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800957e:	68f8      	ldr	r0, [r7, #12]
 8009580:	f7ff f900 	bl	8008784 <tcp_oos_insert_segment>
                }
                break;
 8009584:	e132      	b.n	80097ec <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8009586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009588:	2b00      	cmp	r3, #0
 800958a:	d117      	bne.n	80095bc <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800958c:	4b2e      	ldr	r3, [pc, #184]	; (8009648 <tcp_receive+0xdd8>)
 800958e:	681a      	ldr	r2, [r3, #0]
 8009590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009592:	68db      	ldr	r3, [r3, #12]
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	1ad3      	subs	r3, r2, r3
 8009598:	2b00      	cmp	r3, #0
 800959a:	da57      	bge.n	800964c <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 800959c:	4829      	ldr	r0, [pc, #164]	; (8009644 <tcp_receive+0xdd4>)
 800959e:	f7fd fcbe 	bl	8006f1e <tcp_seg_copy>
 80095a2:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	f000 8122 	beq.w	80097f0 <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	68fa      	ldr	r2, [r7, #12]
 80095b0:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 80095b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095b4:	68f8      	ldr	r0, [r7, #12]
 80095b6:	f7ff f8e5 	bl	8008784 <tcp_oos_insert_segment>
                  }
                  break;
 80095ba:	e119      	b.n	80097f0 <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 80095bc:	4b22      	ldr	r3, [pc, #136]	; (8009648 <tcp_receive+0xdd8>)
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c2:	68db      	ldr	r3, [r3, #12]
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	1ad3      	subs	r3, r2, r3
 80095c8:	3b01      	subs	r3, #1
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	db3e      	blt.n	800964c <tcp_receive+0xddc>
 80095ce:	4b1e      	ldr	r3, [pc, #120]	; (8009648 <tcp_receive+0xdd8>)
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d4:	68db      	ldr	r3, [r3, #12]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	1ad3      	subs	r3, r2, r3
 80095da:	3301      	adds	r3, #1
 80095dc:	2b00      	cmp	r3, #0
 80095de:	dc35      	bgt.n	800964c <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 80095e0:	4818      	ldr	r0, [pc, #96]	; (8009644 <tcp_receive+0xdd4>)
 80095e2:	f7fd fc9c 	bl	8006f1e <tcp_seg_copy>
 80095e6:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	f000 8102 	beq.w	80097f4 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80095f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095f8:	8912      	ldrh	r2, [r2, #8]
 80095fa:	441a      	add	r2, r3
 80095fc:	4b12      	ldr	r3, [pc, #72]	; (8009648 <tcp_receive+0xdd8>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	1ad3      	subs	r3, r2, r3
 8009602:	2b00      	cmp	r3, #0
 8009604:	dd12      	ble.n	800962c <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009606:	4b10      	ldr	r3, [pc, #64]	; (8009648 <tcp_receive+0xdd8>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	b29a      	uxth	r2, r3
 800960c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	b29b      	uxth	r3, r3
 8009614:	1ad3      	subs	r3, r2, r3
 8009616:	b29a      	uxth	r2, r3
 8009618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800961c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961e:	685a      	ldr	r2, [r3, #4]
 8009620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009622:	891b      	ldrh	r3, [r3, #8]
 8009624:	4619      	mov	r1, r3
 8009626:	4610      	mov	r0, r2
 8009628:	f7fc f81a 	bl	8005660 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800962c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962e:	68fa      	ldr	r2, [r7, #12]
 8009630:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8009632:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009634:	68f8      	ldr	r0, [r7, #12]
 8009636:	f7ff f8a5 	bl	8008784 <tcp_oos_insert_segment>
                  }
                  break;
 800963a:	e0db      	b.n	80097f4 <tcp_receive+0xf84>
 800963c:	20000260 	.word	0x20000260
 8009640:	2000025d 	.word	0x2000025d
 8009644:	20000230 	.word	0x20000230
 8009648:	20000250 	.word	0x20000250
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800964c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	2b00      	cmp	r3, #0
 8009652:	f040 80bf 	bne.w	80097d4 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8009656:	4b7c      	ldr	r3, [pc, #496]	; (8009848 <tcp_receive+0xfd8>)
 8009658:	681a      	ldr	r2, [r3, #0]
 800965a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800965c:	68db      	ldr	r3, [r3, #12]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8009662:	2b00      	cmp	r3, #0
 8009664:	f340 80b6 	ble.w	80097d4 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800966a:	68db      	ldr	r3, [r3, #12]
 800966c:	899b      	ldrh	r3, [r3, #12]
 800966e:	b29b      	uxth	r3, r3
 8009670:	4618      	mov	r0, r3
 8009672:	f7fb f83d 	bl	80046f0 <lwip_htons>
 8009676:	4603      	mov	r3, r0
 8009678:	f003 0301 	and.w	r3, r3, #1
 800967c:	2b00      	cmp	r3, #0
 800967e:	f040 80bb 	bne.w	80097f8 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8009682:	4872      	ldr	r0, [pc, #456]	; (800984c <tcp_receive+0xfdc>)
 8009684:	f7fd fc4b 	bl	8006f1e <tcp_seg_copy>
 8009688:	4602      	mov	r2, r0
 800968a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800968c:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800968e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	2b00      	cmp	r3, #0
 8009694:	f000 80b2 	beq.w	80097fc <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8009698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800969a:	68db      	ldr	r3, [r3, #12]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096a0:	8912      	ldrh	r2, [r2, #8]
 80096a2:	441a      	add	r2, r3
 80096a4:	4b68      	ldr	r3, [pc, #416]	; (8009848 <tcp_receive+0xfd8>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	1ad3      	subs	r3, r2, r3
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	dd12      	ble.n	80096d4 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80096ae:	4b66      	ldr	r3, [pc, #408]	; (8009848 <tcp_receive+0xfd8>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	b29a      	uxth	r2, r3
 80096b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	1ad3      	subs	r3, r2, r3
 80096be:	b29a      	uxth	r2, r3
 80096c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80096c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c6:	685a      	ldr	r2, [r3, #4]
 80096c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ca:	891b      	ldrh	r3, [r3, #8]
 80096cc:	4619      	mov	r1, r3
 80096ce:	4610      	mov	r0, r2
 80096d0:	f7fb ffc6 	bl	8005660 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80096d4:	4b5e      	ldr	r3, [pc, #376]	; (8009850 <tcp_receive+0xfe0>)
 80096d6:	881b      	ldrh	r3, [r3, #0]
 80096d8:	461a      	mov	r2, r3
 80096da:	4b5b      	ldr	r3, [pc, #364]	; (8009848 <tcp_receive+0xfd8>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	441a      	add	r2, r3
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e4:	6879      	ldr	r1, [r7, #4]
 80096e6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80096e8:	440b      	add	r3, r1
 80096ea:	1ad3      	subs	r3, r2, r3
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	f340 8085 	ble.w	80097fc <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80096f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	68db      	ldr	r3, [r3, #12]
 80096f8:	899b      	ldrh	r3, [r3, #12]
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	4618      	mov	r0, r3
 80096fe:	f7fa fff7 	bl	80046f0 <lwip_htons>
 8009702:	4603      	mov	r3, r0
 8009704:	f003 0301 	and.w	r3, r3, #1
 8009708:	2b00      	cmp	r3, #0
 800970a:	d01e      	beq.n	800974a <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800970c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	899b      	ldrh	r3, [r3, #12]
 8009714:	b29b      	uxth	r3, r3
 8009716:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800971a:	b29c      	uxth	r4, r3
 800971c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	899b      	ldrh	r3, [r3, #12]
 8009724:	b29b      	uxth	r3, r3
 8009726:	4618      	mov	r0, r3
 8009728:	f7fa ffe2 	bl	80046f0 <lwip_htons>
 800972c:	4603      	mov	r3, r0
 800972e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009732:	b29b      	uxth	r3, r3
 8009734:	4618      	mov	r0, r3
 8009736:	f7fa ffdb 	bl	80046f0 <lwip_htons>
 800973a:	4603      	mov	r3, r0
 800973c:	461a      	mov	r2, r3
 800973e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	68db      	ldr	r3, [r3, #12]
 8009744:	4322      	orrs	r2, r4
 8009746:	b292      	uxth	r2, r2
 8009748:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974e:	b29a      	uxth	r2, r3
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009754:	4413      	add	r3, r2
 8009756:	b299      	uxth	r1, r3
 8009758:	4b3b      	ldr	r3, [pc, #236]	; (8009848 <tcp_receive+0xfd8>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	b29a      	uxth	r2, r3
 800975e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	1a8a      	subs	r2, r1, r2
 8009764:	b292      	uxth	r2, r2
 8009766:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8009768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	685a      	ldr	r2, [r3, #4]
 800976e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	891b      	ldrh	r3, [r3, #8]
 8009774:	4619      	mov	r1, r3
 8009776:	4610      	mov	r0, r2
 8009778:	f7fb ff72 	bl	8005660 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800977c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	891c      	ldrh	r4, [r3, #8]
 8009782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	899b      	ldrh	r3, [r3, #12]
 800978a:	b29b      	uxth	r3, r3
 800978c:	4618      	mov	r0, r3
 800978e:	f7fa ffaf 	bl	80046f0 <lwip_htons>
 8009792:	4603      	mov	r3, r0
 8009794:	f003 0303 	and.w	r3, r3, #3
 8009798:	2b00      	cmp	r3, #0
 800979a:	d001      	beq.n	80097a0 <tcp_receive+0xf30>
 800979c:	2301      	movs	r3, #1
 800979e:	e000      	b.n	80097a2 <tcp_receive+0xf32>
 80097a0:	2300      	movs	r3, #0
 80097a2:	4423      	add	r3, r4
 80097a4:	b29a      	uxth	r2, r3
 80097a6:	4b2a      	ldr	r3, [pc, #168]	; (8009850 <tcp_receive+0xfe0>)
 80097a8:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80097aa:	4b29      	ldr	r3, [pc, #164]	; (8009850 <tcp_receive+0xfe0>)
 80097ac:	881b      	ldrh	r3, [r3, #0]
 80097ae:	461a      	mov	r2, r3
 80097b0:	4b25      	ldr	r3, [pc, #148]	; (8009848 <tcp_receive+0xfd8>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	441a      	add	r2, r3
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ba:	6879      	ldr	r1, [r7, #4]
 80097bc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80097be:	440b      	add	r3, r1
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d01b      	beq.n	80097fc <tcp_receive+0xf8c>
 80097c4:	4b23      	ldr	r3, [pc, #140]	; (8009854 <tcp_receive+0xfe4>)
 80097c6:	f240 627b 	movw	r2, #1659	; 0x67b
 80097ca:	4923      	ldr	r1, [pc, #140]	; (8009858 <tcp_receive+0xfe8>)
 80097cc:	4823      	ldr	r0, [pc, #140]	; (800985c <tcp_receive+0xfec>)
 80097ce:	f007 fa1d 	bl	8010c0c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80097d2:	e013      	b.n	80097fc <tcp_receive+0xf8c>
              }
            }
            prev = next;
 80097d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d6:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80097d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	f47f aeab 	bne.w	800953c <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 80097e6:	e00f      	b.n	8009808 <tcp_receive+0xf98>
                break;
 80097e8:	bf00      	nop
 80097ea:	e00d      	b.n	8009808 <tcp_receive+0xf98>
                break;
 80097ec:	bf00      	nop
 80097ee:	e00b      	b.n	8009808 <tcp_receive+0xf98>
                  break;
 80097f0:	bf00      	nop
 80097f2:	e009      	b.n	8009808 <tcp_receive+0xf98>
                  break;
 80097f4:	bf00      	nop
 80097f6:	e007      	b.n	8009808 <tcp_receive+0xf98>
                  break;
 80097f8:	bf00      	nop
 80097fa:	e005      	b.n	8009808 <tcp_receive+0xf98>
                break;
 80097fc:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 80097fe:	e003      	b.n	8009808 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 ff4d 	bl	800a6a0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009806:	e01a      	b.n	800983e <tcp_receive+0xfce>
 8009808:	e019      	b.n	800983e <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800980a:	4b0f      	ldr	r3, [pc, #60]	; (8009848 <tcp_receive+0xfd8>)
 800980c:	681a      	ldr	r2, [r3, #0]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009812:	1ad3      	subs	r3, r2, r3
 8009814:	2b00      	cmp	r3, #0
 8009816:	db0a      	blt.n	800982e <tcp_receive+0xfbe>
 8009818:	4b0b      	ldr	r3, [pc, #44]	; (8009848 <tcp_receive+0xfd8>)
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009820:	6879      	ldr	r1, [r7, #4]
 8009822:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009824:	440b      	add	r3, r1
 8009826:	1ad3      	subs	r3, r2, r3
 8009828:	3301      	adds	r3, #1
 800982a:	2b00      	cmp	r3, #0
 800982c:	dd07      	ble.n	800983e <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	7e9b      	ldrb	r3, [r3, #26]
 8009832:	f043 0302 	orr.w	r3, r3, #2
 8009836:	b2da      	uxtb	r2, r3
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	769a      	strb	r2, [r3, #26]
    }
  }
}
 800983c:	e7ff      	b.n	800983e <tcp_receive+0xfce>
 800983e:	bf00      	nop
 8009840:	3734      	adds	r7, #52	; 0x34
 8009842:	46bd      	mov	sp, r7
 8009844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009846:	bf00      	nop
 8009848:	20000250 	.word	0x20000250
 800984c:	20000230 	.word	0x20000230
 8009850:	2000025a 	.word	0x2000025a
 8009854:	08015154 	.word	0x08015154
 8009858:	08015420 	.word	0x08015420
 800985c:	08015198 	.word	0x08015198

08009860 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 8009860:	b480      	push	{r7}
 8009862:	b083      	sub	sp, #12
 8009864:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8009866:	4b17      	ldr	r3, [pc, #92]	; (80098c4 <tcp_getoptbyte+0x64>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d005      	beq.n	800987a <tcp_getoptbyte+0x1a>
 800986e:	4b16      	ldr	r3, [pc, #88]	; (80098c8 <tcp_getoptbyte+0x68>)
 8009870:	881a      	ldrh	r2, [r3, #0]
 8009872:	4b16      	ldr	r3, [pc, #88]	; (80098cc <tcp_getoptbyte+0x6c>)
 8009874:	881b      	ldrh	r3, [r3, #0]
 8009876:	429a      	cmp	r2, r3
 8009878:	d20e      	bcs.n	8009898 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800987a:	4b15      	ldr	r3, [pc, #84]	; (80098d0 <tcp_getoptbyte+0x70>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	3314      	adds	r3, #20
 8009880:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 8009882:	4b11      	ldr	r3, [pc, #68]	; (80098c8 <tcp_getoptbyte+0x68>)
 8009884:	881b      	ldrh	r3, [r3, #0]
 8009886:	1c5a      	adds	r2, r3, #1
 8009888:	b291      	uxth	r1, r2
 800988a:	4a0f      	ldr	r2, [pc, #60]	; (80098c8 <tcp_getoptbyte+0x68>)
 800988c:	8011      	strh	r1, [r2, #0]
 800988e:	461a      	mov	r2, r3
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	4413      	add	r3, r2
 8009894:	781b      	ldrb	r3, [r3, #0]
 8009896:	e010      	b.n	80098ba <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8009898:	4b0b      	ldr	r3, [pc, #44]	; (80098c8 <tcp_getoptbyte+0x68>)
 800989a:	881b      	ldrh	r3, [r3, #0]
 800989c:	1c5a      	adds	r2, r3, #1
 800989e:	b291      	uxth	r1, r2
 80098a0:	4a09      	ldr	r2, [pc, #36]	; (80098c8 <tcp_getoptbyte+0x68>)
 80098a2:	8011      	strh	r1, [r2, #0]
 80098a4:	b2da      	uxtb	r2, r3
 80098a6:	4b09      	ldr	r3, [pc, #36]	; (80098cc <tcp_getoptbyte+0x6c>)
 80098a8:	881b      	ldrh	r3, [r3, #0]
 80098aa:	b2db      	uxtb	r3, r3
 80098ac:	1ad3      	subs	r3, r2, r3
 80098ae:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 80098b0:	4b04      	ldr	r3, [pc, #16]	; (80098c4 <tcp_getoptbyte+0x64>)
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	79fb      	ldrb	r3, [r7, #7]
 80098b6:	4413      	add	r3, r2
 80098b8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	370c      	adds	r7, #12
 80098be:	46bd      	mov	sp, r7
 80098c0:	bc80      	pop	{r7}
 80098c2:	4770      	bx	lr
 80098c4:	20000248 	.word	0x20000248
 80098c8:	2000024c 	.word	0x2000024c
 80098cc:	20000246 	.word	0x20000246
 80098d0:	20000240 	.word	0x20000240

080098d4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80098dc:	4b2d      	ldr	r3, [pc, #180]	; (8009994 <tcp_parseopt+0xc0>)
 80098de:	881b      	ldrh	r3, [r3, #0]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d053      	beq.n	800998c <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80098e4:	4b2c      	ldr	r3, [pc, #176]	; (8009998 <tcp_parseopt+0xc4>)
 80098e6:	2200      	movs	r2, #0
 80098e8:	801a      	strh	r2, [r3, #0]
 80098ea:	e043      	b.n	8009974 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 80098ec:	f7ff ffb8 	bl	8009860 <tcp_getoptbyte>
 80098f0:	4603      	mov	r3, r0
 80098f2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80098f4:	7bfb      	ldrb	r3, [r7, #15]
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d03c      	beq.n	8009974 <tcp_parseopt+0xa0>
 80098fa:	2b02      	cmp	r3, #2
 80098fc:	d002      	beq.n	8009904 <tcp_parseopt+0x30>
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d03f      	beq.n	8009982 <tcp_parseopt+0xae>
 8009902:	e026      	b.n	8009952 <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009904:	f7ff ffac 	bl	8009860 <tcp_getoptbyte>
 8009908:	4603      	mov	r3, r0
 800990a:	2b04      	cmp	r3, #4
 800990c:	d13b      	bne.n	8009986 <tcp_parseopt+0xb2>
 800990e:	4b22      	ldr	r3, [pc, #136]	; (8009998 <tcp_parseopt+0xc4>)
 8009910:	881b      	ldrh	r3, [r3, #0]
 8009912:	3302      	adds	r3, #2
 8009914:	4a1f      	ldr	r2, [pc, #124]	; (8009994 <tcp_parseopt+0xc0>)
 8009916:	8812      	ldrh	r2, [r2, #0]
 8009918:	4293      	cmp	r3, r2
 800991a:	dc34      	bgt.n	8009986 <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800991c:	f7ff ffa0 	bl	8009860 <tcp_getoptbyte>
 8009920:	4603      	mov	r3, r0
 8009922:	b29b      	uxth	r3, r3
 8009924:	021b      	lsls	r3, r3, #8
 8009926:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8009928:	f7ff ff9a 	bl	8009860 <tcp_getoptbyte>
 800992c:	4603      	mov	r3, r0
 800992e:	b29a      	uxth	r2, r3
 8009930:	89bb      	ldrh	r3, [r7, #12]
 8009932:	4313      	orrs	r3, r2
 8009934:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009936:	89bb      	ldrh	r3, [r7, #12]
 8009938:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800993c:	d804      	bhi.n	8009948 <tcp_parseopt+0x74>
 800993e:	89bb      	ldrh	r3, [r7, #12]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d001      	beq.n	8009948 <tcp_parseopt+0x74>
 8009944:	89ba      	ldrh	r2, [r7, #12]
 8009946:	e001      	b.n	800994c <tcp_parseopt+0x78>
 8009948:	f44f 7206 	mov.w	r2, #536	; 0x218
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8009950:	e010      	b.n	8009974 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8009952:	f7ff ff85 	bl	8009860 <tcp_getoptbyte>
 8009956:	4603      	mov	r3, r0
 8009958:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 800995a:	7afb      	ldrb	r3, [r7, #11]
 800995c:	2b01      	cmp	r3, #1
 800995e:	d914      	bls.n	800998a <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8009960:	7afb      	ldrb	r3, [r7, #11]
 8009962:	b29a      	uxth	r2, r3
 8009964:	4b0c      	ldr	r3, [pc, #48]	; (8009998 <tcp_parseopt+0xc4>)
 8009966:	881b      	ldrh	r3, [r3, #0]
 8009968:	4413      	add	r3, r2
 800996a:	b29b      	uxth	r3, r3
 800996c:	3b02      	subs	r3, #2
 800996e:	b29a      	uxth	r2, r3
 8009970:	4b09      	ldr	r3, [pc, #36]	; (8009998 <tcp_parseopt+0xc4>)
 8009972:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009974:	4b08      	ldr	r3, [pc, #32]	; (8009998 <tcp_parseopt+0xc4>)
 8009976:	881a      	ldrh	r2, [r3, #0]
 8009978:	4b06      	ldr	r3, [pc, #24]	; (8009994 <tcp_parseopt+0xc0>)
 800997a:	881b      	ldrh	r3, [r3, #0]
 800997c:	429a      	cmp	r2, r3
 800997e:	d3b5      	bcc.n	80098ec <tcp_parseopt+0x18>
 8009980:	e004      	b.n	800998c <tcp_parseopt+0xb8>
        return;
 8009982:	bf00      	nop
 8009984:	e002      	b.n	800998c <tcp_parseopt+0xb8>
          return;
 8009986:	bf00      	nop
 8009988:	e000      	b.n	800998c <tcp_parseopt+0xb8>
          return;
 800998a:	bf00      	nop
      }
    }
  }
}
 800998c:	3710      	adds	r7, #16
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
 8009992:	bf00      	nop
 8009994:	20000244 	.word	0x20000244
 8009998:	2000024c 	.word	0x2000024c

0800999c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800999c:	b480      	push	{r7}
 800999e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80099a0:	4b05      	ldr	r3, [pc, #20]	; (80099b8 <tcp_trigger_input_pcb_close+0x1c>)
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	f043 0310 	orr.w	r3, r3, #16
 80099a8:	b2da      	uxtb	r2, r3
 80099aa:	4b03      	ldr	r3, [pc, #12]	; (80099b8 <tcp_trigger_input_pcb_close+0x1c>)
 80099ac:	701a      	strb	r2, [r3, #0]
}
 80099ae:	bf00      	nop
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bc80      	pop	{r7}
 80099b4:	4770      	bx	lr
 80099b6:	bf00      	nop
 80099b8:	2000025d 	.word	0x2000025d

080099bc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b086      	sub	sp, #24
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	60f8      	str	r0, [r7, #12]
 80099c4:	607b      	str	r3, [r7, #4]
 80099c6:	460b      	mov	r3, r1
 80099c8:	817b      	strh	r3, [r7, #10]
 80099ca:	4613      	mov	r3, r2
 80099cc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80099ce:	897a      	ldrh	r2, [r7, #10]
 80099d0:	893b      	ldrh	r3, [r7, #8]
 80099d2:	4413      	add	r3, r2
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	3314      	adds	r3, #20
 80099d8:	b29b      	uxth	r3, r3
 80099da:	2200      	movs	r2, #0
 80099dc:	4619      	mov	r1, r3
 80099de:	2001      	movs	r0, #1
 80099e0:	f7fb fc40 	bl	8005264 <pbuf_alloc>
 80099e4:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d057      	beq.n	8009a9c <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	895b      	ldrh	r3, [r3, #10]
 80099f0:	461a      	mov	r2, r3
 80099f2:	897b      	ldrh	r3, [r7, #10]
 80099f4:	3314      	adds	r3, #20
 80099f6:	429a      	cmp	r2, r3
 80099f8:	da05      	bge.n	8009a06 <tcp_output_alloc_header+0x4a>
 80099fa:	4b2b      	ldr	r3, [pc, #172]	; (8009aa8 <tcp_output_alloc_header+0xec>)
 80099fc:	2273      	movs	r2, #115	; 0x73
 80099fe:	492b      	ldr	r1, [pc, #172]	; (8009aac <tcp_output_alloc_header+0xf0>)
 8009a00:	482b      	ldr	r0, [pc, #172]	; (8009ab0 <tcp_output_alloc_header+0xf4>)
 8009a02:	f007 f903 	bl	8010c0c <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	685b      	ldr	r3, [r3, #4]
 8009a0a:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	8adb      	ldrh	r3, [r3, #22]
 8009a10:	4618      	mov	r0, r3
 8009a12:	f7fa fe6d 	bl	80046f0 <lwip_htons>
 8009a16:	4603      	mov	r3, r0
 8009a18:	461a      	mov	r2, r3
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	8b1b      	ldrh	r3, [r3, #24]
 8009a22:	4618      	mov	r0, r3
 8009a24:	f7fa fe64 	bl	80046f0 <lwip_htons>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	687a      	ldr	r2, [r7, #4]
 8009a34:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f7fa fe65 	bl	800470a <lwip_htonl>
 8009a40:	4602      	mov	r2, r0
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8009a46:	897b      	ldrh	r3, [r7, #10]
 8009a48:	089b      	lsrs	r3, r3, #2
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	3305      	adds	r3, #5
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	031b      	lsls	r3, r3, #12
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	f043 0310 	orr.w	r3, r3, #16
 8009a58:	b29b      	uxth	r3, r3
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7fa fe48 	bl	80046f0 <lwip_htons>
 8009a60:	4603      	mov	r3, r0
 8009a62:	461a      	mov	r2, r3
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f7fa fe3f 	bl	80046f0 <lwip_htons>
 8009a72:	4603      	mov	r3, r0
 8009a74:	461a      	mov	r2, r3
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	741a      	strb	r2, [r3, #16]
 8009a80:	2200      	movs	r2, #0
 8009a82:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	2200      	movs	r2, #0
 8009a88:	749a      	strb	r2, [r3, #18]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a92:	68fa      	ldr	r2, [r7, #12]
 8009a94:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8009a96:	441a      	add	r2, r3
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8009a9c:	697b      	ldr	r3, [r7, #20]
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3718      	adds	r7, #24
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}
 8009aa6:	bf00      	nop
 8009aa8:	080154dc 	.word	0x080154dc
 8009aac:	08015510 	.word	0x08015510
 8009ab0:	08015540 	.word	0x08015540

08009ab4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8009ab4:	b590      	push	{r4, r7, lr}
 8009ab6:	b085      	sub	sp, #20
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d02d      	beq.n	8009b20 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ac8:	60fb      	str	r3, [r7, #12]
 8009aca:	e002      	b.n	8009ad2 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d1f8      	bne.n	8009acc <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	68db      	ldr	r3, [r3, #12]
 8009ade:	899b      	ldrh	r3, [r3, #12]
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f7fa fe04 	bl	80046f0 <lwip_htons>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	f003 0307 	and.w	r3, r3, #7
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d116      	bne.n	8009b20 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	68db      	ldr	r3, [r3, #12]
 8009af6:	899b      	ldrh	r3, [r3, #12]
 8009af8:	b29c      	uxth	r4, r3
 8009afa:	2001      	movs	r0, #1
 8009afc:	f7fa fdf8 	bl	80046f0 <lwip_htons>
 8009b00:	4603      	mov	r3, r0
 8009b02:	461a      	mov	r2, r3
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	4322      	orrs	r2, r4
 8009b0a:	b292      	uxth	r2, r2
 8009b0c:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	7e9b      	ldrb	r3, [r3, #26]
 8009b12:	f043 0320 	orr.w	r3, r3, #32
 8009b16:	b2da      	uxtb	r2, r3
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	e004      	b.n	8009b2a <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8009b20:	2101      	movs	r1, #1
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 fcc0 	bl	800a4a8 <tcp_enqueue_flags>
 8009b28:	4603      	mov	r3, r0
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3714      	adds	r7, #20
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd90      	pop	{r4, r7, pc}
	...

08009b34 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8009b34:	b590      	push	{r4, r7, lr}
 8009b36:	b087      	sub	sp, #28
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	60f8      	str	r0, [r7, #12]
 8009b3c:	60b9      	str	r1, [r7, #8]
 8009b3e:	603b      	str	r3, [r7, #0]
 8009b40:	4613      	mov	r3, r2
 8009b42:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009b44:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	f003 0304 	and.w	r3, r3, #4
 8009b50:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009b52:	2003      	movs	r0, #3
 8009b54:	f7fb f974 	bl	8004e40 <memp_malloc>
 8009b58:	6138      	str	r0, [r7, #16]
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d104      	bne.n	8009b6a <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8009b60:	68b8      	ldr	r0, [r7, #8]
 8009b62:	f7fb fef1 	bl	8005948 <pbuf_free>
    return NULL;
 8009b66:	2300      	movs	r3, #0
 8009b68:	e061      	b.n	8009c2e <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8009b70:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	2200      	movs	r2, #0
 8009b76:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	68ba      	ldr	r2, [r7, #8]
 8009b7c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	891a      	ldrh	r2, [r3, #8]
 8009b82:	7dfb      	ldrb	r3, [r7, #23]
 8009b84:	b29b      	uxth	r3, r3
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d205      	bcs.n	8009b96 <tcp_create_segment+0x62>
 8009b8a:	4b2b      	ldr	r3, [pc, #172]	; (8009c38 <tcp_create_segment+0x104>)
 8009b8c:	22ba      	movs	r2, #186	; 0xba
 8009b8e:	492b      	ldr	r1, [pc, #172]	; (8009c3c <tcp_create_segment+0x108>)
 8009b90:	482b      	ldr	r0, [pc, #172]	; (8009c40 <tcp_create_segment+0x10c>)
 8009b92:	f007 f83b 	bl	8010c0c <iprintf>
  seg->len = p->tot_len - optlen;
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	891a      	ldrh	r2, [r3, #8]
 8009b9a:	7dfb      	ldrb	r3, [r7, #23]
 8009b9c:	b29b      	uxth	r3, r3
 8009b9e:	1ad3      	subs	r3, r2, r3
 8009ba0:	b29a      	uxth	r2, r3
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8009ba6:	2114      	movs	r1, #20
 8009ba8:	68b8      	ldr	r0, [r7, #8]
 8009baa:	f7fb fea9 	bl	8005900 <pbuf_header>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d004      	beq.n	8009bbe <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8009bb4:	6938      	ldr	r0, [r7, #16]
 8009bb6:	f7fd f99a 	bl	8006eee <tcp_seg_free>
    return NULL;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	e037      	b.n	8009c2e <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	685a      	ldr	r2, [r3, #4]
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	8ada      	ldrh	r2, [r3, #22]
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	68dc      	ldr	r4, [r3, #12]
 8009bd0:	4610      	mov	r0, r2
 8009bd2:	f7fa fd8d 	bl	80046f0 <lwip_htons>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	8b1a      	ldrh	r2, [r3, #24]
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	68dc      	ldr	r4, [r3, #12]
 8009be2:	4610      	mov	r0, r2
 8009be4:	f7fa fd84 	bl	80046f0 <lwip_htons>
 8009be8:	4603      	mov	r3, r0
 8009bea:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	68dc      	ldr	r4, [r3, #12]
 8009bf0:	6838      	ldr	r0, [r7, #0]
 8009bf2:	f7fa fd8a 	bl	800470a <lwip_htonl>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8009bfa:	7dfb      	ldrb	r3, [r7, #23]
 8009bfc:	089b      	lsrs	r3, r3, #2
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	b29b      	uxth	r3, r3
 8009c02:	3305      	adds	r3, #5
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	031b      	lsls	r3, r3, #12
 8009c08:	b29a      	uxth	r2, r3
 8009c0a:	79fb      	ldrb	r3, [r7, #7]
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	b29a      	uxth	r2, r3
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	68dc      	ldr	r4, [r3, #12]
 8009c16:	4610      	mov	r0, r2
 8009c18:	f7fa fd6a 	bl	80046f0 <lwip_htons>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	68db      	ldr	r3, [r3, #12]
 8009c24:	2200      	movs	r2, #0
 8009c26:	749a      	strb	r2, [r3, #18]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	74da      	strb	r2, [r3, #19]
  return seg;
 8009c2c:	693b      	ldr	r3, [r7, #16]
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	371c      	adds	r7, #28
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd90      	pop	{r4, r7, pc}
 8009c36:	bf00      	nop
 8009c38:	080154dc 	.word	0x080154dc
 8009c3c:	08015568 	.word	0x08015568
 8009c40:	08015540 	.word	0x08015540

08009c44 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b086      	sub	sp, #24
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	607b      	str	r3, [r7, #4]
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	73fb      	strb	r3, [r7, #15]
 8009c50:	460b      	mov	r3, r1
 8009c52:	81bb      	strh	r3, [r7, #12]
 8009c54:	4613      	mov	r3, r2
 8009c56:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8009c58:	89bb      	ldrh	r3, [r7, #12]
 8009c5a:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8009c5c:	89ba      	ldrh	r2, [r7, #12]
 8009c5e:	897b      	ldrh	r3, [r7, #10]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d221      	bcs.n	8009ca8 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8009c64:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009c68:	f003 0302 	and.w	r3, r3, #2
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d111      	bne.n	8009c94 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 8009c70:	6a3b      	ldr	r3, [r7, #32]
 8009c72:	7e9b      	ldrb	r3, [r3, #26]
 8009c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d115      	bne.n	8009ca8 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 8009c7c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d007      	beq.n	8009c94 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 8009c84:	6a3b      	ldr	r3, [r7, #32]
 8009c86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d103      	bne.n	8009c94 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 8009c8c:	6a3b      	ldr	r3, [r7, #32]
 8009c8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d009      	beq.n	8009ca8 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8009c94:	89bb      	ldrh	r3, [r7, #12]
 8009c96:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8009c9a:	f023 0203 	bic.w	r2, r3, #3
 8009c9e:	897b      	ldrh	r3, [r7, #10]
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	bf28      	it	cs
 8009ca4:	4613      	movcs	r3, r2
 8009ca6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8009ca8:	8af9      	ldrh	r1, [r7, #22]
 8009caa:	7bfb      	ldrb	r3, [r7, #15]
 8009cac:	2200      	movs	r2, #0
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7fb fad8 	bl	8005264 <pbuf_alloc>
 8009cb4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d101      	bne.n	8009cc0 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	e019      	b.n	8009cf4 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d006      	beq.n	8009cd6 <tcp_pbuf_prealloc+0x92>
 8009cc8:	4b0c      	ldr	r3, [pc, #48]	; (8009cfc <tcp_pbuf_prealloc+0xb8>)
 8009cca:	f44f 7288 	mov.w	r2, #272	; 0x110
 8009cce:	490c      	ldr	r1, [pc, #48]	; (8009d00 <tcp_pbuf_prealloc+0xbc>)
 8009cd0:	480c      	ldr	r0, [pc, #48]	; (8009d04 <tcp_pbuf_prealloc+0xc0>)
 8009cd2:	f006 ff9b 	bl	8010c0c <iprintf>
  *oversize = p->len - length;
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	895a      	ldrh	r2, [r3, #10]
 8009cda:	89bb      	ldrh	r3, [r7, #12]
 8009cdc:	1ad3      	subs	r3, r2, r3
 8009cde:	b29a      	uxth	r2, r3
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	89ba      	ldrh	r2, [r7, #12]
 8009ce8:	811a      	strh	r2, [r3, #8]
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	891a      	ldrh	r2, [r3, #8]
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	815a      	strh	r2, [r3, #10]
  return p;
 8009cf2:	693b      	ldr	r3, [r7, #16]
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3718      	adds	r7, #24
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}
 8009cfc:	080154dc 	.word	0x080154dc
 8009d00:	08015580 	.word	0x08015580
 8009d04:	08015540 	.word	0x08015540

08009d08 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	460b      	mov	r3, r1
 8009d12:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	7d1b      	ldrb	r3, [r3, #20]
 8009d18:	2b04      	cmp	r3, #4
 8009d1a:	d00e      	beq.n	8009d3a <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8009d20:	2b07      	cmp	r3, #7
 8009d22:	d00a      	beq.n	8009d3a <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8009d28:	2b02      	cmp	r3, #2
 8009d2a:	d006      	beq.n	8009d3a <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8009d30:	2b03      	cmp	r3, #3
 8009d32:	d002      	beq.n	8009d3a <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8009d34:	f06f 030a 	mvn.w	r3, #10
 8009d38:	e04f      	b.n	8009dda <tcp_write_checks+0xd2>
  } else if (len == 0) {
 8009d3a:	887b      	ldrh	r3, [r7, #2]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d101      	bne.n	8009d44 <tcp_write_checks+0x3c>
    return ERR_OK;
 8009d40:	2300      	movs	r3, #0
 8009d42:	e04a      	b.n	8009dda <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009d4a:	887a      	ldrh	r2, [r7, #2]
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d909      	bls.n	8009d64 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	7e9b      	ldrb	r3, [r3, #26]
 8009d54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009d58:	b2da      	uxtb	r2, r3
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8009d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d62:	e03a      	b.n	8009dda <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009d6a:	2b08      	cmp	r3, #8
 8009d6c:	d806      	bhi.n	8009d7c <tcp_write_checks+0x74>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009d74:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d909      	bls.n	8009d90 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	7e9b      	ldrb	r3, [r3, #26]
 8009d80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009d84:	b2da      	uxtb	r2, r3
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8009d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8009d8e:	e024      	b.n	8009dda <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d00f      	beq.n	8009dba <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d11a      	bne.n	8009dd8 <tcp_write_checks+0xd0>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d116      	bne.n	8009dd8 <tcp_write_checks+0xd0>
 8009daa:	4b0e      	ldr	r3, [pc, #56]	; (8009de4 <tcp_write_checks+0xdc>)
 8009dac:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8009db0:	490d      	ldr	r1, [pc, #52]	; (8009de8 <tcp_write_checks+0xe0>)
 8009db2:	480e      	ldr	r0, [pc, #56]	; (8009dec <tcp_write_checks+0xe4>)
 8009db4:	f006 ff2a 	bl	8010c0c <iprintf>
 8009db8:	e00e      	b.n	8009dd8 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d103      	bne.n	8009dca <tcp_write_checks+0xc2>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d006      	beq.n	8009dd8 <tcp_write_checks+0xd0>
 8009dca:	4b06      	ldr	r3, [pc, #24]	; (8009de4 <tcp_write_checks+0xdc>)
 8009dcc:	f240 1259 	movw	r2, #345	; 0x159
 8009dd0:	4907      	ldr	r1, [pc, #28]	; (8009df0 <tcp_write_checks+0xe8>)
 8009dd2:	4806      	ldr	r0, [pc, #24]	; (8009dec <tcp_write_checks+0xe4>)
 8009dd4:	f006 ff1a 	bl	8010c0c <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8009dd8:	2300      	movs	r3, #0
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3708      	adds	r7, #8
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
 8009de2:	bf00      	nop
 8009de4:	080154dc 	.word	0x080154dc
 8009de8:	08015594 	.word	0x08015594
 8009dec:	08015540 	.word	0x08015540
 8009df0:	080155d0 	.word	0x080155d0

08009df4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8009df4:	b590      	push	{r4, r7, lr}
 8009df6:	b09b      	sub	sp, #108	; 0x6c
 8009df8:	af04      	add	r7, sp, #16
 8009dfa:	60f8      	str	r0, [r7, #12]
 8009dfc:	60b9      	str	r1, [r7, #8]
 8009dfe:	4611      	mov	r1, r2
 8009e00:	461a      	mov	r2, r3
 8009e02:	460b      	mov	r3, r1
 8009e04:	80fb      	strh	r3, [r7, #6]
 8009e06:	4613      	mov	r3, r2
 8009e08:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	653b      	str	r3, [r7, #80]	; 0x50
 8009e12:	2300      	movs	r3, #0
 8009e14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e16:	2300      	movs	r3, #0
 8009e18:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8009e1e:	2300      	movs	r3, #0
 8009e20:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 8009e24:	2300      	movs	r3, #0
 8009e26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8009e30:	2300      	movs	r3, #0
 8009e32:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8009e34:	2300      	movs	r3, #0
 8009e36:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e42:	085b      	lsrs	r3, r3, #1
 8009e44:	b29a      	uxth	r2, r3
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	bf28      	it	cs
 8009e4e:	4613      	movcs	r3, r2
 8009e50:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8009e52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d102      	bne.n	8009e5e <tcp_write+0x6a>
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009e5c:	e000      	b.n	8009e60 <tcp_write+0x6c>
 8009e5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e60:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d109      	bne.n	8009e7c <tcp_write+0x88>
 8009e68:	4b92      	ldr	r3, [pc, #584]	; (800a0b4 <tcp_write+0x2c0>)
 8009e6a:	f44f 72c9 	mov.w	r2, #402	; 0x192
 8009e6e:	4992      	ldr	r1, [pc, #584]	; (800a0b8 <tcp_write+0x2c4>)
 8009e70:	4892      	ldr	r0, [pc, #584]	; (800a0bc <tcp_write+0x2c8>)
 8009e72:	f006 fecb 	bl	8010c0c <iprintf>
 8009e76:	f06f 030f 	mvn.w	r3, #15
 8009e7a:	e30a      	b.n	800a492 <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8009e7c:	88fb      	ldrh	r3, [r7, #6]
 8009e7e:	4619      	mov	r1, r3
 8009e80:	68f8      	ldr	r0, [r7, #12]
 8009e82:	f7ff ff41 	bl	8009d08 <tcp_write_checks>
 8009e86:	4603      	mov	r3, r0
 8009e88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8009e8c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d002      	beq.n	8009e9a <tcp_write+0xa6>
    return err;
 8009e94:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8009e98:	e2fb      	b.n	800a492 <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009ea0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	f000 80f5 	beq.w	800a098 <tcp_write+0x2a4>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009eb2:	653b      	str	r3, [r7, #80]	; 0x50
 8009eb4:	e002      	b.n	8009ebc <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 8009eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009ebc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d1f8      	bne.n	8009eb6 <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8009ec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ec6:	7a9b      	ldrb	r3, [r3, #10]
 8009ec8:	009b      	lsls	r3, r3, #2
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	f003 0304 	and.w	r3, r3, #4
 8009ed0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8009ed2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009ed4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ed6:	891b      	ldrh	r3, [r3, #8]
 8009ed8:	4619      	mov	r1, r3
 8009eda:	8c3b      	ldrh	r3, [r7, #32]
 8009edc:	440b      	add	r3, r1
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	da06      	bge.n	8009ef0 <tcp_write+0xfc>
 8009ee2:	4b74      	ldr	r3, [pc, #464]	; (800a0b4 <tcp_write+0x2c0>)
 8009ee4:	f240 12c7 	movw	r2, #455	; 0x1c7
 8009ee8:	4975      	ldr	r1, [pc, #468]	; (800a0c0 <tcp_write+0x2cc>)
 8009eea:	4874      	ldr	r0, [pc, #464]	; (800a0bc <tcp_write+0x2c8>)
 8009eec:	f006 fe8e 	bl	8010c0c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8009ef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ef2:	891a      	ldrh	r2, [r3, #8]
 8009ef4:	8c3b      	ldrh	r3, [r7, #32]
 8009ef6:	4413      	add	r3, r2
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009efc:	1ad3      	subs	r3, r2, r3
 8009efe:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009f06:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8009f08:	8a7b      	ldrh	r3, [r7, #18]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d027      	beq.n	8009f5e <tcp_write+0x16a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8009f0e:	8a7b      	ldrh	r3, [r7, #18]
 8009f10:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d206      	bcs.n	8009f24 <tcp_write+0x130>
 8009f16:	4b67      	ldr	r3, [pc, #412]	; (800a0b4 <tcp_write+0x2c0>)
 8009f18:	f240 12d9 	movw	r2, #473	; 0x1d9
 8009f1c:	4969      	ldr	r1, [pc, #420]	; (800a0c4 <tcp_write+0x2d0>)
 8009f1e:	4867      	ldr	r0, [pc, #412]	; (800a0bc <tcp_write+0x2c8>)
 8009f20:	f006 fe74 	bl	8010c0c <iprintf>
      seg = last_unsent;
 8009f24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f26:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8009f28:	8a7b      	ldrh	r3, [r7, #18]
 8009f2a:	88fa      	ldrh	r2, [r7, #6]
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d901      	bls.n	8009f34 <tcp_write+0x140>
 8009f30:	8a7b      	ldrh	r3, [r7, #18]
 8009f32:	e000      	b.n	8009f36 <tcp_write+0x142>
 8009f34:	88fb      	ldrh	r3, [r7, #6]
 8009f36:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	bfa8      	it	ge
 8009f3c:	4613      	movge	r3, r2
 8009f3e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8009f40:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009f44:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009f46:	4413      	add	r3, r2
 8009f48:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8009f4c:	8a7a      	ldrh	r2, [r7, #18]
 8009f4e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009f50:	1ad3      	subs	r3, r2, r3
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8009f56:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009f58:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009f5a:	1ad3      	subs	r3, r2, r3
 8009f5c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8009f5e:	8a7b      	ldrh	r3, [r7, #18]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d00b      	beq.n	8009f7c <tcp_write+0x188>
 8009f64:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009f68:	88fb      	ldrh	r3, [r7, #6]
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d006      	beq.n	8009f7c <tcp_write+0x188>
 8009f6e:	4b51      	ldr	r3, [pc, #324]	; (800a0b4 <tcp_write+0x2c0>)
 8009f70:	f240 12e1 	movw	r2, #481	; 0x1e1
 8009f74:	4954      	ldr	r1, [pc, #336]	; (800a0c8 <tcp_write+0x2d4>)
 8009f76:	4851      	ldr	r0, [pc, #324]	; (800a0bc <tcp_write+0x2c8>)
 8009f78:	f006 fe48 	bl	8010c0c <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8009f7c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009f80:	88fb      	ldrh	r3, [r7, #6]
 8009f82:	429a      	cmp	r2, r3
 8009f84:	f080 8168 	bcs.w	800a258 <tcp_write+0x464>
 8009f88:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	f000 8164 	beq.w	800a258 <tcp_write+0x464>
 8009f90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f92:	891b      	ldrh	r3, [r3, #8]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	f000 815f 	beq.w	800a258 <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8009f9a:	88fa      	ldrh	r2, [r7, #6]
 8009f9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009fa0:	1ad2      	subs	r2, r2, r3
 8009fa2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	bfa8      	it	ge
 8009fa8:	4613      	movge	r3, r2
 8009faa:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8009fac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fae:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8009fb0:	797b      	ldrb	r3, [r7, #5]
 8009fb2:	f003 0301 	and.w	r3, r3, #1
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d027      	beq.n	800a00a <tcp_write+0x216>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8009fba:	f107 0012 	add.w	r0, r7, #18
 8009fbe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009fc0:	8bf9      	ldrh	r1, [r7, #30]
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	9302      	str	r3, [sp, #8]
 8009fc6:	797b      	ldrb	r3, [r7, #5]
 8009fc8:	9301      	str	r3, [sp, #4]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	9300      	str	r3, [sp, #0]
 8009fce:	4603      	mov	r3, r0
 8009fd0:	2004      	movs	r0, #4
 8009fd2:	f7ff fe37 	bl	8009c44 <tcp_pbuf_prealloc>
 8009fd6:	6578      	str	r0, [r7, #84]	; 0x54
 8009fd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	f000 8227 	beq.w	800a42e <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8009fe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fe2:	6858      	ldr	r0, [r3, #4]
 8009fe4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009fe8:	68ba      	ldr	r2, [r7, #8]
 8009fea:	4413      	add	r3, r2
 8009fec:	8bfa      	ldrh	r2, [r7, #30]
 8009fee:	4619      	mov	r1, r3
 8009ff0:	f005 ffc9 	bl	800ff86 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8009ff4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009ff6:	f7fb fd3b 	bl	8005a70 <pbuf_clen>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a002:	4413      	add	r3, r2
 800a004:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800a008:	e03f      	b.n	800a08a <tcp_write+0x296>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800a00a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	637b      	str	r3, [r7, #52]	; 0x34
 800a010:	e002      	b.n	800a018 <tcp_write+0x224>
 800a012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	637b      	str	r3, [r7, #52]	; 0x34
 800a018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d1f8      	bne.n	800a012 <tcp_write+0x21e>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800a020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a022:	7b1b      	ldrb	r3, [r3, #12]
 800a024:	2b01      	cmp	r3, #1
 800a026:	d115      	bne.n	800a054 <tcp_write+0x260>
 800a028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a02e:	8952      	ldrh	r2, [r2, #10]
 800a030:	4413      	add	r3, r2
 800a032:	68ba      	ldr	r2, [r7, #8]
 800a034:	429a      	cmp	r2, r3
 800a036:	d10d      	bne.n	800a054 <tcp_write+0x260>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800a038:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d006      	beq.n	800a04e <tcp_write+0x25a>
 800a040:	4b1c      	ldr	r3, [pc, #112]	; (800a0b4 <tcp_write+0x2c0>)
 800a042:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800a046:	4921      	ldr	r1, [pc, #132]	; (800a0cc <tcp_write+0x2d8>)
 800a048:	481c      	ldr	r0, [pc, #112]	; (800a0bc <tcp_write+0x2c8>)
 800a04a:	f006 fddf 	bl	8010c0c <iprintf>
          extendlen = seglen;
 800a04e:	8bfb      	ldrh	r3, [r7, #30]
 800a050:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a052:	e01a      	b.n	800a08a <tcp_write+0x296>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800a054:	8bfb      	ldrh	r3, [r7, #30]
 800a056:	2201      	movs	r2, #1
 800a058:	4619      	mov	r1, r3
 800a05a:	2004      	movs	r0, #4
 800a05c:	f7fb f902 	bl	8005264 <pbuf_alloc>
 800a060:	6578      	str	r0, [r7, #84]	; 0x54
 800a062:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a064:	2b00      	cmp	r3, #0
 800a066:	f000 81e4 	beq.w	800a432 <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 800a06a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a06e:	68ba      	ldr	r2, [r7, #8]
 800a070:	441a      	add	r2, r3
 800a072:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a074:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800a076:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a078:	f7fb fcfa 	bl	8005a70 <pbuf_clen>
 800a07c:	4603      	mov	r3, r0
 800a07e:	461a      	mov	r2, r3
 800a080:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a084:	4413      	add	r3, r2
 800a086:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800a08a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a08e:	8bfb      	ldrh	r3, [r7, #30]
 800a090:	4413      	add	r3, r2
 800a092:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a096:	e0df      	b.n	800a258 <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	f000 80da 	beq.w	800a258 <tcp_write+0x464>
 800a0a4:	4b03      	ldr	r3, [pc, #12]	; (800a0b4 <tcp_write+0x2c0>)
 800a0a6:	f240 2225 	movw	r2, #549	; 0x225
 800a0aa:	4909      	ldr	r1, [pc, #36]	; (800a0d0 <tcp_write+0x2dc>)
 800a0ac:	4803      	ldr	r0, [pc, #12]	; (800a0bc <tcp_write+0x2c8>)
 800a0ae:	f006 fdad 	bl	8010c0c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800a0b2:	e0d1      	b.n	800a258 <tcp_write+0x464>
 800a0b4:	080154dc 	.word	0x080154dc
 800a0b8:	08015604 	.word	0x08015604
 800a0bc:	08015540 	.word	0x08015540
 800a0c0:	08015638 	.word	0x08015638
 800a0c4:	08015650 	.word	0x08015650
 800a0c8:	08015670 	.word	0x08015670
 800a0cc:	08015690 	.word	0x08015690
 800a0d0:	080156bc 	.word	0x080156bc
    struct pbuf *p;
    u16_t left = len - pos;
 800a0d4:	88fa      	ldrh	r2, [r7, #6]
 800a0d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a0da:	1ad3      	subs	r3, r2, r3
 800a0dc:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800a0de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a0e6:	1ad3      	subs	r3, r2, r3
 800a0e8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800a0ea:	8b7a      	ldrh	r2, [r7, #26]
 800a0ec:	8bbb      	ldrh	r3, [r7, #28]
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	bf28      	it	cs
 800a0f2:	4613      	movcs	r3, r2
 800a0f4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a0f6:	797b      	ldrb	r3, [r7, #5]
 800a0f8:	f003 0301 	and.w	r3, r3, #1
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d036      	beq.n	800a16e <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800a100:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a104:	b29a      	uxth	r2, r3
 800a106:	8b3b      	ldrh	r3, [r7, #24]
 800a108:	4413      	add	r3, r2
 800a10a:	b299      	uxth	r1, r3
 800a10c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a10e:	2b00      	cmp	r3, #0
 800a110:	bf0c      	ite	eq
 800a112:	2301      	moveq	r3, #1
 800a114:	2300      	movne	r3, #0
 800a116:	b2db      	uxtb	r3, r3
 800a118:	f107 0012 	add.w	r0, r7, #18
 800a11c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a11e:	9302      	str	r3, [sp, #8]
 800a120:	797b      	ldrb	r3, [r7, #5]
 800a122:	9301      	str	r3, [sp, #4]
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	9300      	str	r3, [sp, #0]
 800a128:	4603      	mov	r3, r0
 800a12a:	2000      	movs	r0, #0
 800a12c:	f7ff fd8a 	bl	8009c44 <tcp_pbuf_prealloc>
 800a130:	6338      	str	r0, [r7, #48]	; 0x30
 800a132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a134:	2b00      	cmp	r3, #0
 800a136:	f000 817e 	beq.w	800a436 <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800a13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a13c:	895b      	ldrh	r3, [r3, #10]
 800a13e:	8b3a      	ldrh	r2, [r7, #24]
 800a140:	429a      	cmp	r2, r3
 800a142:	d906      	bls.n	800a152 <tcp_write+0x35e>
 800a144:	4b8f      	ldr	r3, [pc, #572]	; (800a384 <tcp_write+0x590>)
 800a146:	f240 2241 	movw	r2, #577	; 0x241
 800a14a:	498f      	ldr	r1, [pc, #572]	; (800a388 <tcp_write+0x594>)
 800a14c:	488f      	ldr	r0, [pc, #572]	; (800a38c <tcp_write+0x598>)
 800a14e:	f006 fd5d 	bl	8010c0c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 800a152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a154:	685a      	ldr	r2, [r3, #4]
 800a156:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a15a:	18d0      	adds	r0, r2, r3
 800a15c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a160:	68ba      	ldr	r2, [r7, #8]
 800a162:	4413      	add	r3, r2
 800a164:	8b3a      	ldrh	r2, [r7, #24]
 800a166:	4619      	mov	r1, r3
 800a168:	f005 ff0d 	bl	800ff86 <memcpy>
 800a16c:	e02e      	b.n	800a1cc <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800a16e:	8a7b      	ldrh	r3, [r7, #18]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d006      	beq.n	800a182 <tcp_write+0x38e>
 800a174:	4b83      	ldr	r3, [pc, #524]	; (800a384 <tcp_write+0x590>)
 800a176:	f240 224b 	movw	r2, #587	; 0x24b
 800a17a:	4985      	ldr	r1, [pc, #532]	; (800a390 <tcp_write+0x59c>)
 800a17c:	4883      	ldr	r0, [pc, #524]	; (800a38c <tcp_write+0x598>)
 800a17e:	f006 fd45 	bl	8010c0c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800a182:	8b3b      	ldrh	r3, [r7, #24]
 800a184:	2201      	movs	r2, #1
 800a186:	4619      	mov	r1, r3
 800a188:	2000      	movs	r0, #0
 800a18a:	f7fb f86b 	bl	8005264 <pbuf_alloc>
 800a18e:	6178      	str	r0, [r7, #20]
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	2b00      	cmp	r3, #0
 800a194:	f000 8151 	beq.w	800a43a <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 800a198:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a19c:	68ba      	ldr	r2, [r7, #8]
 800a19e:	441a      	add	r2, r3
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a1a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	2000      	movs	r0, #0
 800a1b0:	f7fb f858 	bl	8005264 <pbuf_alloc>
 800a1b4:	6338      	str	r0, [r7, #48]	; 0x30
 800a1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d103      	bne.n	800a1c4 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800a1bc:	6978      	ldr	r0, [r7, #20]
 800a1be:	f7fb fbc3 	bl	8005948 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800a1c2:	e13d      	b.n	800a440 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800a1c4:	6979      	ldr	r1, [r7, #20]
 800a1c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1c8:	f7fb fc8a 	bl	8005ae0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800a1cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1ce:	f7fb fc4f 	bl	8005a70 <pbuf_clen>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a1da:	4413      	add	r3, r2
 800a1dc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800a1e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a1e4:	2b09      	cmp	r3, #9
 800a1e6:	d805      	bhi.n	800a1f4 <tcp_write+0x400>
 800a1e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a1ec:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d903      	bls.n	800a1fc <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800a1f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1f6:	f7fb fba7 	bl	8005948 <pbuf_free>
      goto memerr;
 800a1fa:	e121      	b.n	800a440 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a200:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a204:	441a      	add	r2, r3
 800a206:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a20a:	9300      	str	r3, [sp, #0]
 800a20c:	4613      	mov	r3, r2
 800a20e:	2200      	movs	r2, #0
 800a210:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a212:	68f8      	ldr	r0, [r7, #12]
 800a214:	f7ff fc8e 	bl	8009b34 <tcp_create_segment>
 800a218:	64f8      	str	r0, [r7, #76]	; 0x4c
 800a21a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	f000 810e 	beq.w	800a43e <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800a222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a224:	2b00      	cmp	r3, #0
 800a226:	d102      	bne.n	800a22e <tcp_write+0x43a>
      queue = seg;
 800a228:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a22a:	647b      	str	r3, [r7, #68]	; 0x44
 800a22c:	e00c      	b.n	800a248 <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800a22e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a230:	2b00      	cmp	r3, #0
 800a232:	d106      	bne.n	800a242 <tcp_write+0x44e>
 800a234:	4b53      	ldr	r3, [pc, #332]	; (800a384 <tcp_write+0x590>)
 800a236:	f240 2285 	movw	r2, #645	; 0x285
 800a23a:	4956      	ldr	r1, [pc, #344]	; (800a394 <tcp_write+0x5a0>)
 800a23c:	4853      	ldr	r0, [pc, #332]	; (800a38c <tcp_write+0x598>)
 800a23e:	f006 fce5 	bl	8010c0c <iprintf>
      prev_seg->next = seg;
 800a242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a244:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a246:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800a248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a24a:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800a24c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a250:	8b3b      	ldrh	r3, [r7, #24]
 800a252:	4413      	add	r3, r2
 800a254:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800a258:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a25c:	88fb      	ldrh	r3, [r7, #6]
 800a25e:	429a      	cmp	r2, r3
 800a260:	f4ff af38 	bcc.w	800a0d4 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800a264:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a266:	2b00      	cmp	r3, #0
 800a268:	d02c      	beq.n	800a2c4 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800a26a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a270:	e01e      	b.n	800a2b0 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 800a272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a274:	891a      	ldrh	r2, [r3, #8]
 800a276:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a278:	4413      	add	r3, r2
 800a27a:	b29a      	uxth	r2, r3
 800a27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a27e:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800a280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d110      	bne.n	800a2aa <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800a288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a28a:	685b      	ldr	r3, [r3, #4]
 800a28c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a28e:	8952      	ldrh	r2, [r2, #10]
 800a290:	4413      	add	r3, r2
 800a292:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800a294:	68b9      	ldr	r1, [r7, #8]
 800a296:	4618      	mov	r0, r3
 800a298:	f005 fe75 	bl	800ff86 <memcpy>
        p->len += oversize_used;
 800a29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a29e:	895a      	ldrh	r2, [r3, #10]
 800a2a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a2a2:	4413      	add	r3, r2
 800a2a4:	b29a      	uxth	r2, r3
 800a2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2a8:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800a2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d1dd      	bne.n	800a272 <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 800a2b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2b8:	891a      	ldrh	r2, [r3, #8]
 800a2ba:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a2bc:	4413      	add	r3, r2
 800a2be:	b29a      	uxth	r2, r3
 800a2c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2c2:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800a2c4:	8a7a      	ldrh	r2, [r7, #18]
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800a2cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d018      	beq.n	800a304 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800a2d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d106      	bne.n	800a2e6 <tcp_write+0x4f2>
 800a2d8:	4b2a      	ldr	r3, [pc, #168]	; (800a384 <tcp_write+0x590>)
 800a2da:	f240 22bb 	movw	r2, #699	; 0x2bb
 800a2de:	492e      	ldr	r1, [pc, #184]	; (800a398 <tcp_write+0x5a4>)
 800a2e0:	482a      	ldr	r0, [pc, #168]	; (800a38c <tcp_write+0x598>)
 800a2e2:	f006 fc93 	bl	8010c0c <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800a2e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2e8:	685b      	ldr	r3, [r3, #4]
 800a2ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7fb fbf7 	bl	8005ae0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800a2f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2f4:	891a      	ldrh	r2, [r3, #8]
 800a2f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2f8:	891b      	ldrh	r3, [r3, #8]
 800a2fa:	4413      	add	r3, r2
 800a2fc:	b29a      	uxth	r2, r3
 800a2fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a300:	811a      	strh	r2, [r3, #8]
 800a302:	e037      	b.n	800a374 <tcp_write+0x580>
  } else if (extendlen > 0) {
 800a304:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a306:	2b00      	cmp	r3, #0
 800a308:	d034      	beq.n	800a374 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800a30a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d003      	beq.n	800a318 <tcp_write+0x524>
 800a310:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d106      	bne.n	800a326 <tcp_write+0x532>
 800a318:	4b1a      	ldr	r3, [pc, #104]	; (800a384 <tcp_write+0x590>)
 800a31a:	f240 22c1 	movw	r2, #705	; 0x2c1
 800a31e:	491f      	ldr	r1, [pc, #124]	; (800a39c <tcp_write+0x5a8>)
 800a320:	481a      	ldr	r0, [pc, #104]	; (800a38c <tcp_write+0x598>)
 800a322:	f006 fc73 	bl	8010c0c <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800a326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a328:	685b      	ldr	r3, [r3, #4]
 800a32a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a32c:	e009      	b.n	800a342 <tcp_write+0x54e>
      p->tot_len += extendlen;
 800a32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a330:	891a      	ldrh	r2, [r3, #8]
 800a332:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a334:	4413      	add	r3, r2
 800a336:	b29a      	uxth	r2, r3
 800a338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a33a:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800a33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	62bb      	str	r3, [r7, #40]	; 0x28
 800a342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d1f1      	bne.n	800a32e <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 800a34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a34c:	891a      	ldrh	r2, [r3, #8]
 800a34e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a350:	4413      	add	r3, r2
 800a352:	b29a      	uxth	r2, r3
 800a354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a356:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800a358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a35a:	895a      	ldrh	r2, [r3, #10]
 800a35c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a35e:	4413      	add	r3, r2
 800a360:	b29a      	uxth	r2, r3
 800a362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a364:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800a366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a368:	891a      	ldrh	r2, [r3, #8]
 800a36a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a36c:	4413      	add	r3, r2
 800a36e:	b29a      	uxth	r2, r3
 800a370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a372:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800a374:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a376:	2b00      	cmp	r3, #0
 800a378:	d112      	bne.n	800a3a0 <tcp_write+0x5ac>
    pcb->unsent = queue;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a37e:	669a      	str	r2, [r3, #104]	; 0x68
 800a380:	e011      	b.n	800a3a6 <tcp_write+0x5b2>
 800a382:	bf00      	nop
 800a384:	080154dc 	.word	0x080154dc
 800a388:	080156ec 	.word	0x080156ec
 800a38c:	08015540 	.word	0x08015540
 800a390:	0801572c 	.word	0x0801572c
 800a394:	0801573c 	.word	0x0801573c
 800a398:	08015750 	.word	0x08015750
 800a39c:	08015788 	.word	0x08015788
  } else {
    last_unsent->next = queue;
 800a3a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a3a4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a3aa:	88fb      	ldrh	r3, [r7, #6]
 800a3ac:	441a      	add	r2, r3
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a3b8:	88fb      	ldrh	r3, [r7, #6]
 800a3ba:	1ad3      	subs	r3, r2, r3
 800a3bc:	b29a      	uxth	r2, r3
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a3ca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d00e      	beq.n	800a3f6 <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d10a      	bne.n	800a3f6 <tcp_write+0x602>
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d106      	bne.n	800a3f6 <tcp_write+0x602>
 800a3e8:	4b2c      	ldr	r3, [pc, #176]	; (800a49c <tcp_write+0x6a8>)
 800a3ea:	f240 22ed 	movw	r2, #749	; 0x2ed
 800a3ee:	492c      	ldr	r1, [pc, #176]	; (800a4a0 <tcp_write+0x6ac>)
 800a3f0:	482c      	ldr	r0, [pc, #176]	; (800a4a4 <tcp_write+0x6b0>)
 800a3f2:	f006 fc0b 	bl	8010c0c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 800a3f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d016      	beq.n	800a42a <tcp_write+0x636>
 800a3fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3fe:	68db      	ldr	r3, [r3, #12]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d012      	beq.n	800a42a <tcp_write+0x636>
 800a404:	797b      	ldrb	r3, [r7, #5]
 800a406:	f003 0302 	and.w	r3, r3, #2
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d10d      	bne.n	800a42a <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800a40e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a410:	68db      	ldr	r3, [r3, #12]
 800a412:	899b      	ldrh	r3, [r3, #12]
 800a414:	b29c      	uxth	r4, r3
 800a416:	2008      	movs	r0, #8
 800a418:	f7fa f96a 	bl	80046f0 <lwip_htons>
 800a41c:	4603      	mov	r3, r0
 800a41e:	461a      	mov	r2, r3
 800a420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a422:	68db      	ldr	r3, [r3, #12]
 800a424:	4322      	orrs	r2, r4
 800a426:	b292      	uxth	r2, r2
 800a428:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800a42a:	2300      	movs	r3, #0
 800a42c:	e031      	b.n	800a492 <tcp_write+0x69e>
          goto memerr;
 800a42e:	bf00      	nop
 800a430:	e006      	b.n	800a440 <tcp_write+0x64c>
            goto memerr;
 800a432:	bf00      	nop
 800a434:	e004      	b.n	800a440 <tcp_write+0x64c>
        goto memerr;
 800a436:	bf00      	nop
 800a438:	e002      	b.n	800a440 <tcp_write+0x64c>
        goto memerr;
 800a43a:	bf00      	nop
 800a43c:	e000      	b.n	800a440 <tcp_write+0x64c>
      goto memerr;
 800a43e:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	7e9b      	ldrb	r3, [r3, #26]
 800a444:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a448:	b2da      	uxtb	r2, r3
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800a44e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a450:	2b00      	cmp	r3, #0
 800a452:	d002      	beq.n	800a45a <tcp_write+0x666>
    pbuf_free(concat_p);
 800a454:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a456:	f7fb fa77 	bl	8005948 <pbuf_free>
  }
  if (queue != NULL) {
 800a45a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d002      	beq.n	800a466 <tcp_write+0x672>
    tcp_segs_free(queue);
 800a460:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a462:	f7fc fd30 	bl	8006ec6 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d00e      	beq.n	800a48e <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a474:	2b00      	cmp	r3, #0
 800a476:	d10a      	bne.n	800a48e <tcp_write+0x69a>
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d106      	bne.n	800a48e <tcp_write+0x69a>
 800a480:	4b06      	ldr	r3, [pc, #24]	; (800a49c <tcp_write+0x6a8>)
 800a482:	f240 3202 	movw	r2, #770	; 0x302
 800a486:	4906      	ldr	r1, [pc, #24]	; (800a4a0 <tcp_write+0x6ac>)
 800a488:	4806      	ldr	r0, [pc, #24]	; (800a4a4 <tcp_write+0x6b0>)
 800a48a:	f006 fbbf 	bl	8010c0c <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800a48e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a492:	4618      	mov	r0, r3
 800a494:	375c      	adds	r7, #92	; 0x5c
 800a496:	46bd      	mov	sp, r7
 800a498:	bd90      	pop	{r4, r7, pc}
 800a49a:	bf00      	nop
 800a49c:	080154dc 	.word	0x080154dc
 800a4a0:	080157c0 	.word	0x080157c0
 800a4a4:	08015540 	.word	0x08015540

0800a4a8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b08a      	sub	sp, #40	; 0x28
 800a4ac:	af02      	add	r7, sp, #8
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	460b      	mov	r3, r1
 800a4b2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a4bc:	78fb      	ldrb	r3, [r7, #3]
 800a4be:	f003 0303 	and.w	r3, r3, #3
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d106      	bne.n	800a4d4 <tcp_enqueue_flags+0x2c>
 800a4c6:	4b6f      	ldr	r3, [pc, #444]	; (800a684 <tcp_enqueue_flags+0x1dc>)
 800a4c8:	f240 321b 	movw	r2, #795	; 0x31b
 800a4cc:	496e      	ldr	r1, [pc, #440]	; (800a688 <tcp_enqueue_flags+0x1e0>)
 800a4ce:	486f      	ldr	r0, [pc, #444]	; (800a68c <tcp_enqueue_flags+0x1e4>)
 800a4d0:	f006 fb9c 	bl	8010c0c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a4da:	2b08      	cmp	r3, #8
 800a4dc:	d806      	bhi.n	800a4ec <tcp_enqueue_flags+0x44>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a4e4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d90e      	bls.n	800a50a <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 800a4ec:	78fb      	ldrb	r3, [r7, #3]
 800a4ee:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d109      	bne.n	800a50a <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	7e9b      	ldrb	r3, [r3, #26]
 800a4fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a4fe:	b2da      	uxtb	r2, r3
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800a504:	f04f 33ff 	mov.w	r3, #4294967295
 800a508:	e0b7      	b.n	800a67a <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 800a50a:	78fb      	ldrb	r3, [r7, #3]
 800a50c:	f003 0302 	and.w	r3, r3, #2
 800a510:	2b00      	cmp	r3, #0
 800a512:	d001      	beq.n	800a518 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 800a514:	2301      	movs	r3, #1
 800a516:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a518:	7ffb      	ldrb	r3, [r7, #31]
 800a51a:	009b      	lsls	r3, r3, #2
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	f003 0304 	and.w	r3, r3, #4
 800a522:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a524:	7dfb      	ldrb	r3, [r7, #23]
 800a526:	b29b      	uxth	r3, r3
 800a528:	2200      	movs	r2, #0
 800a52a:	4619      	mov	r1, r3
 800a52c:	2000      	movs	r0, #0
 800a52e:	f7fa fe99 	bl	8005264 <pbuf_alloc>
 800a532:	6138      	str	r0, [r7, #16]
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d109      	bne.n	800a54e <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	7e9b      	ldrb	r3, [r3, #26]
 800a53e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a542:	b2da      	uxtb	r2, r3
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a548:	f04f 33ff 	mov.w	r3, #4294967295
 800a54c:	e095      	b.n	800a67a <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	895a      	ldrh	r2, [r3, #10]
 800a552:	7dfb      	ldrb	r3, [r7, #23]
 800a554:	b29b      	uxth	r3, r3
 800a556:	429a      	cmp	r2, r3
 800a558:	d206      	bcs.n	800a568 <tcp_enqueue_flags+0xc0>
 800a55a:	4b4a      	ldr	r3, [pc, #296]	; (800a684 <tcp_enqueue_flags+0x1dc>)
 800a55c:	f240 3241 	movw	r2, #833	; 0x341
 800a560:	494b      	ldr	r1, [pc, #300]	; (800a690 <tcp_enqueue_flags+0x1e8>)
 800a562:	484a      	ldr	r0, [pc, #296]	; (800a68c <tcp_enqueue_flags+0x1e4>)
 800a564:	f006 fb52 	bl	8010c0c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800a56c:	78fa      	ldrb	r2, [r7, #3]
 800a56e:	7ffb      	ldrb	r3, [r7, #31]
 800a570:	9300      	str	r3, [sp, #0]
 800a572:	460b      	mov	r3, r1
 800a574:	6939      	ldr	r1, [r7, #16]
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f7ff fadc 	bl	8009b34 <tcp_create_segment>
 800a57c:	60f8      	str	r0, [r7, #12]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d109      	bne.n	800a598 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	7e9b      	ldrb	r3, [r3, #26]
 800a588:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a58c:	b2da      	uxtb	r2, r3
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a592:	f04f 33ff 	mov.w	r3, #4294967295
 800a596:	e070      	b.n	800a67a <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	68db      	ldr	r3, [r3, #12]
 800a59c:	f003 0303 	and.w	r3, r3, #3
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d006      	beq.n	800a5b2 <tcp_enqueue_flags+0x10a>
 800a5a4:	4b37      	ldr	r3, [pc, #220]	; (800a684 <tcp_enqueue_flags+0x1dc>)
 800a5a6:	f240 3249 	movw	r2, #841	; 0x349
 800a5aa:	493a      	ldr	r1, [pc, #232]	; (800a694 <tcp_enqueue_flags+0x1ec>)
 800a5ac:	4837      	ldr	r0, [pc, #220]	; (800a68c <tcp_enqueue_flags+0x1e4>)
 800a5ae:	f006 fb2d 	bl	8010c0c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	891b      	ldrh	r3, [r3, #8]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d006      	beq.n	800a5c8 <tcp_enqueue_flags+0x120>
 800a5ba:	4b32      	ldr	r3, [pc, #200]	; (800a684 <tcp_enqueue_flags+0x1dc>)
 800a5bc:	f240 324a 	movw	r2, #842	; 0x34a
 800a5c0:	4935      	ldr	r1, [pc, #212]	; (800a698 <tcp_enqueue_flags+0x1f0>)
 800a5c2:	4832      	ldr	r0, [pc, #200]	; (800a68c <tcp_enqueue_flags+0x1e4>)
 800a5c4:	f006 fb22 	bl	8010c0c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d103      	bne.n	800a5d8 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	68fa      	ldr	r2, [r7, #12]
 800a5d4:	669a      	str	r2, [r3, #104]	; 0x68
 800a5d6:	e00d      	b.n	800a5f4 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5dc:	61bb      	str	r3, [r7, #24]
 800a5de:	e002      	b.n	800a5e6 <tcp_enqueue_flags+0x13e>
 800a5e0:	69bb      	ldr	r3, [r7, #24]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	61bb      	str	r3, [r7, #24]
 800a5e6:	69bb      	ldr	r3, [r7, #24]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d1f8      	bne.n	800a5e0 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 800a5ee:	69bb      	ldr	r3, [r7, #24]
 800a5f0:	68fa      	ldr	r2, [r7, #12]
 800a5f2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800a5fc:	78fb      	ldrb	r3, [r7, #3]
 800a5fe:	f003 0302 	and.w	r3, r3, #2
 800a602:	2b00      	cmp	r3, #0
 800a604:	d104      	bne.n	800a610 <tcp_enqueue_flags+0x168>
 800a606:	78fb      	ldrb	r3, [r7, #3]
 800a608:	f003 0301 	and.w	r3, r3, #1
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d004      	beq.n	800a61a <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a614:	1c5a      	adds	r2, r3, #1
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800a61a:	78fb      	ldrb	r3, [r7, #3]
 800a61c:	f003 0301 	and.w	r3, r3, #1
 800a620:	2b00      	cmp	r3, #0
 800a622:	d006      	beq.n	800a632 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	7e9b      	ldrb	r3, [r3, #26]
 800a628:	f043 0320 	orr.w	r3, r3, #32
 800a62c:	b2da      	uxtb	r2, r3
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	4618      	mov	r0, r3
 800a638:	f7fb fa1a 	bl	8005a70 <pbuf_clen>
 800a63c:	4603      	mov	r3, r0
 800a63e:	461a      	mov	r2, r3
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a646:	4413      	add	r3, r2
 800a648:	b29a      	uxth	r2, r3
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a656:	2b00      	cmp	r3, #0
 800a658:	d00e      	beq.n	800a678 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d10a      	bne.n	800a678 <tcp_enqueue_flags+0x1d0>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a666:	2b00      	cmp	r3, #0
 800a668:	d106      	bne.n	800a678 <tcp_enqueue_flags+0x1d0>
 800a66a:	4b06      	ldr	r3, [pc, #24]	; (800a684 <tcp_enqueue_flags+0x1dc>)
 800a66c:	f240 326d 	movw	r2, #877	; 0x36d
 800a670:	490a      	ldr	r1, [pc, #40]	; (800a69c <tcp_enqueue_flags+0x1f4>)
 800a672:	4806      	ldr	r0, [pc, #24]	; (800a68c <tcp_enqueue_flags+0x1e4>)
 800a674:	f006 faca 	bl	8010c0c <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800a678:	2300      	movs	r3, #0
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3720      	adds	r7, #32
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	080154dc 	.word	0x080154dc
 800a688:	080157e0 	.word	0x080157e0
 800a68c:	08015540 	.word	0x08015540
 800a690:	08015838 	.word	0x08015838
 800a694:	08015874 	.word	0x08015874
 800a698:	0801588c 	.word	0x0801588c
 800a69c:	080158b8 	.word	0x080158b8

0800a6a0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800a6a0:	b590      	push	{r4, r7, lr}
 800a6a2:	b08b      	sub	sp, #44	; 0x2c
 800a6a4:	af04      	add	r7, sp, #16
 800a6a6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800a6ac:	7dbb      	ldrb	r3, [r7, #22]
 800a6ae:	b29c      	uxth	r4, r3
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f7fa f828 	bl	800470a <lwip_htonl>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	2200      	movs	r2, #0
 800a6be:	4621      	mov	r1, r4
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f7ff f97b 	bl	80099bc <tcp_output_alloc_header>
 800a6c6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d109      	bne.n	800a6e2 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	7e9b      	ldrb	r3, [r3, #26]
 800a6d2:	f043 0303 	orr.w	r3, r3, #3
 800a6d6:	b2da      	uxtb	r2, r3
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800a6dc:	f06f 0301 	mvn.w	r3, #1
 800a6e0:	e036      	b.n	800a750 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	3304      	adds	r3, #4
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f002 f85c 	bl	800c7a4 <ip4_route>
 800a6ec:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d102      	bne.n	800a6fa <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 800a6f4:	23fc      	movs	r3, #252	; 0xfc
 800a6f6:	75fb      	strb	r3, [r7, #23]
 800a6f8:	e012      	b.n	800a720 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800a6fa:	6879      	ldr	r1, [r7, #4]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	1d18      	adds	r0, r3, #4
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	7a9c      	ldrb	r4, [r3, #10]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	7a5b      	ldrb	r3, [r3, #9]
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	9202      	str	r2, [sp, #8]
 800a70c:	2206      	movs	r2, #6
 800a70e:	9201      	str	r2, [sp, #4]
 800a710:	9300      	str	r3, [sp, #0]
 800a712:	4623      	mov	r3, r4
 800a714:	4602      	mov	r2, r0
 800a716:	6938      	ldr	r0, [r7, #16]
 800a718:	f002 f9ec 	bl	800caf4 <ip4_output_if>
 800a71c:	4603      	mov	r3, r0
 800a71e:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800a720:	6938      	ldr	r0, [r7, #16]
 800a722:	f7fb f911 	bl	8005948 <pbuf_free>

  if (err != ERR_OK) {
 800a726:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d007      	beq.n	800a73e <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	7e9b      	ldrb	r3, [r3, #26]
 800a732:	f043 0303 	orr.w	r3, r3, #3
 800a736:	b2da      	uxtb	r2, r3
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	769a      	strb	r2, [r3, #26]
 800a73c:	e006      	b.n	800a74c <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	7e9b      	ldrb	r3, [r3, #26]
 800a742:	f023 0303 	bic.w	r3, r3, #3
 800a746:	b2da      	uxtb	r2, r3
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	769a      	strb	r2, [r3, #26]
  }

  return err;
 800a74c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a750:	4618      	mov	r0, r3
 800a752:	371c      	adds	r7, #28
 800a754:	46bd      	mov	sp, r7
 800a756:	bd90      	pop	{r4, r7, pc}

0800a758 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800a758:	b5b0      	push	{r4, r5, r7, lr}
 800a75a:	b08a      	sub	sp, #40	; 0x28
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	7d1b      	ldrb	r3, [r3, #20]
 800a764:	2b01      	cmp	r3, #1
 800a766:	d106      	bne.n	800a776 <tcp_output+0x1e>
 800a768:	4b9b      	ldr	r3, [pc, #620]	; (800a9d8 <tcp_output+0x280>)
 800a76a:	f240 32ed 	movw	r2, #1005	; 0x3ed
 800a76e:	499b      	ldr	r1, [pc, #620]	; (800a9dc <tcp_output+0x284>)
 800a770:	489b      	ldr	r0, [pc, #620]	; (800a9e0 <tcp_output+0x288>)
 800a772:	f006 fa4b 	bl	8010c0c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800a776:	4b9b      	ldr	r3, [pc, #620]	; (800a9e4 <tcp_output+0x28c>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d101      	bne.n	800a784 <tcp_output+0x2c>
    return ERR_OK;
 800a780:	2300      	movs	r3, #0
 800a782:	e1cf      	b.n	800ab24 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a790:	429a      	cmp	r2, r3
 800a792:	d203      	bcs.n	800a79c <tcp_output+0x44>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a79a:	e002      	b.n	800a7a2 <tcp_output+0x4a>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a7a2:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7a8:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	7e9b      	ldrb	r3, [r3, #26]
 800a7ae:	f003 0302 	and.w	r3, r3, #2
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d017      	beq.n	800a7e6 <tcp_output+0x8e>
 800a7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d00f      	beq.n	800a7dc <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800a7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7be:	68db      	ldr	r3, [r3, #12]
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7f9 ffa1 	bl	800470a <lwip_htonl>
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7ce:	1ad3      	subs	r3, r2, r3
 800a7d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7d2:	8912      	ldrh	r2, [r2, #8]
 800a7d4:	4413      	add	r3, r2
     (seg == NULL ||
 800a7d6:	69ba      	ldr	r2, [r7, #24]
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d204      	bcs.n	800a7e6 <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f7ff ff5f 	bl	800a6a0 <tcp_send_empty_ack>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	e19e      	b.n	800ab24 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7ea:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800a7ec:	6a3b      	ldr	r3, [r7, #32]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d007      	beq.n	800a802 <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 800a7f2:	e002      	b.n	800a7fa <tcp_output+0xa2>
 800a7f4:	6a3b      	ldr	r3, [r7, #32]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	623b      	str	r3, [r7, #32]
 800a7fa:	6a3b      	ldr	r3, [r7, #32]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d1f8      	bne.n	800a7f4 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	3304      	adds	r3, #4
 800a806:	4618      	mov	r0, r3
 800a808:	f001 ffcc 	bl	800c7a4 <ip4_route>
 800a80c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d102      	bne.n	800a81a <tcp_output+0xc2>
    return ERR_RTE;
 800a814:	f06f 0303 	mvn.w	r3, #3
 800a818:	e184      	b.n	800ab24 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d003      	beq.n	800a828 <tcp_output+0xd0>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d111      	bne.n	800a84c <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d002      	beq.n	800a834 <tcp_output+0xdc>
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	3304      	adds	r3, #4
 800a832:	e000      	b.n	800a836 <tcp_output+0xde>
 800a834:	2300      	movs	r3, #0
 800a836:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d102      	bne.n	800a844 <tcp_output+0xec>
      return ERR_RTE;
 800a83e:	f06f 0303 	mvn.w	r3, #3
 800a842:	e16f      	b.n	800ab24 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	681a      	ldr	r2, [r3, #0]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 800a84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a84e:	2b00      	cmp	r3, #0
 800a850:	f000 813e 	beq.w	800aad0 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800a854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a856:	68db      	ldr	r3, [r3, #12]
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7f9 ff55 	bl	800470a <lwip_htonl>
 800a860:	4602      	mov	r2, r0
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a866:	1ad3      	subs	r3, r2, r3
 800a868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a86a:	8912      	ldrh	r2, [r2, #8]
 800a86c:	4413      	add	r3, r2
  if (seg != NULL &&
 800a86e:	69ba      	ldr	r2, [r7, #24]
 800a870:	429a      	cmp	r2, r3
 800a872:	f080 812d 	bcs.w	800aad0 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800a876:	69bb      	ldr	r3, [r7, #24]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	f000 8129 	beq.w	800aad0 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a884:	461a      	mov	r2, r3
 800a886:	69bb      	ldr	r3, [r7, #24]
 800a888:	4293      	cmp	r3, r2
 800a88a:	f040 8121 	bne.w	800aad0 <tcp_output+0x378>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a892:	2b00      	cmp	r3, #0
 800a894:	f040 811c 	bne.w	800aad0 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	f040 812b 	bne.w	800aafa <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 800a8b4:	e121      	b.n	800aafa <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800a8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b8:	68db      	ldr	r3, [r3, #12]
 800a8ba:	899b      	ldrh	r3, [r3, #12]
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f7f9 ff16 	bl	80046f0 <lwip_htons>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	f003 0304 	and.w	r3, r3, #4
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d006      	beq.n	800a8dc <tcp_output+0x184>
 800a8ce:	4b42      	ldr	r3, [pc, #264]	; (800a9d8 <tcp_output+0x280>)
 800a8d0:	f240 4246 	movw	r2, #1094	; 0x446
 800a8d4:	4944      	ldr	r1, [pc, #272]	; (800a9e8 <tcp_output+0x290>)
 800a8d6:	4842      	ldr	r0, [pc, #264]	; (800a9e0 <tcp_output+0x288>)
 800a8d8:	f006 f998 	bl	8010c0c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d01f      	beq.n	800a924 <tcp_output+0x1cc>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	7e9b      	ldrb	r3, [r3, #26]
 800a8e8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d119      	bne.n	800a924 <tcp_output+0x1cc>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d00b      	beq.n	800a910 <tcp_output+0x1b8>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d110      	bne.n	800a924 <tcp_output+0x1cc>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a906:	891a      	ldrh	r2, [r3, #8]
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a90c:	429a      	cmp	r2, r3
 800a90e:	d209      	bcs.n	800a924 <tcp_output+0x1cc>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a916:	2b00      	cmp	r3, #0
 800a918:	d004      	beq.n	800a924 <tcp_output+0x1cc>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a920:	2b08      	cmp	r3, #8
 800a922:	d901      	bls.n	800a928 <tcp_output+0x1d0>
 800a924:	2301      	movs	r3, #1
 800a926:	e000      	b.n	800a92a <tcp_output+0x1d2>
 800a928:	2300      	movs	r3, #0
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d106      	bne.n	800a93c <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	7e9b      	ldrb	r3, [r3, #26]
 800a932:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a936:	2b00      	cmp	r3, #0
 800a938:	f000 80e1 	beq.w	800aafe <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	7d1b      	ldrb	r3, [r3, #20]
 800a940:	2b02      	cmp	r3, #2
 800a942:	d00d      	beq.n	800a960 <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800a944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a946:	68db      	ldr	r3, [r3, #12]
 800a948:	899b      	ldrh	r3, [r3, #12]
 800a94a:	b29c      	uxth	r4, r3
 800a94c:	2010      	movs	r0, #16
 800a94e:	f7f9 fecf 	bl	80046f0 <lwip_htons>
 800a952:	4603      	mov	r3, r0
 800a954:	461a      	mov	r2, r3
 800a956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a958:	68db      	ldr	r3, [r3, #12]
 800a95a:	4322      	orrs	r2, r4
 800a95c:	b292      	uxth	r2, r2
 800a95e:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 800a960:	697a      	ldr	r2, [r7, #20]
 800a962:	6879      	ldr	r1, [r7, #4]
 800a964:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a966:	f000 f8e1 	bl	800ab2c <tcp_output_segment>
 800a96a:	4603      	mov	r3, r0
 800a96c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800a96e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d009      	beq.n	800a98a <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	7e9b      	ldrb	r3, [r3, #26]
 800a97a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a97e:	b2da      	uxtb	r2, r3
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	769a      	strb	r2, [r3, #26]
      return err;
 800a984:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a988:	e0cc      	b.n	800ab24 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 800a98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a98c:	681a      	ldr	r2, [r3, #0]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	7d1b      	ldrb	r3, [r3, #20]
 800a996:	2b02      	cmp	r3, #2
 800a998:	d006      	beq.n	800a9a8 <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	7e9b      	ldrb	r3, [r3, #26]
 800a99e:	f023 0303 	bic.w	r3, r3, #3
 800a9a2:	b2da      	uxtb	r2, r3
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9aa:	68db      	ldr	r3, [r3, #12]
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f7f9 feab 	bl	800470a <lwip_htonl>
 800a9b4:	4604      	mov	r4, r0
 800a9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b8:	891b      	ldrh	r3, [r3, #8]
 800a9ba:	461d      	mov	r5, r3
 800a9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9be:	68db      	ldr	r3, [r3, #12]
 800a9c0:	899b      	ldrh	r3, [r3, #12]
 800a9c2:	b29b      	uxth	r3, r3
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f7f9 fe93 	bl	80046f0 <lwip_htons>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	f003 0303 	and.w	r3, r3, #3
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d00b      	beq.n	800a9ec <tcp_output+0x294>
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	e00a      	b.n	800a9ee <tcp_output+0x296>
 800a9d8:	080154dc 	.word	0x080154dc
 800a9dc:	080158e0 	.word	0x080158e0
 800a9e0:	08015540 	.word	0x08015540
 800a9e4:	200038d8 	.word	0x200038d8
 800a9e8:	08015908 	.word	0x08015908
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	442b      	add	r3, r5
 800a9f0:	4423      	add	r3, r4
 800a9f2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	1ad3      	subs	r3, r2, r3
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	da02      	bge.n	800aa06 <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	68ba      	ldr	r2, [r7, #8]
 800aa04:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800aa06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa08:	891b      	ldrh	r3, [r3, #8]
 800aa0a:	461c      	mov	r4, r3
 800aa0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0e:	68db      	ldr	r3, [r3, #12]
 800aa10:	899b      	ldrh	r3, [r3, #12]
 800aa12:	b29b      	uxth	r3, r3
 800aa14:	4618      	mov	r0, r3
 800aa16:	f7f9 fe6b 	bl	80046f0 <lwip_htons>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	f003 0303 	and.w	r3, r3, #3
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d001      	beq.n	800aa28 <tcp_output+0x2d0>
 800aa24:	2301      	movs	r3, #1
 800aa26:	e000      	b.n	800aa2a <tcp_output+0x2d2>
 800aa28:	2300      	movs	r3, #0
 800aa2a:	4423      	add	r3, r4
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d049      	beq.n	800aac4 <tcp_output+0x36c>
      seg->next = NULL;
 800aa30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa32:	2200      	movs	r2, #0
 800aa34:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d105      	bne.n	800aa4a <tcp_output+0x2f2>
        pcb->unacked = seg;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa42:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 800aa44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa46:	623b      	str	r3, [r7, #32]
 800aa48:	e03f      	b.n	800aaca <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800aa4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4c:	68db      	ldr	r3, [r3, #12]
 800aa4e:	685b      	ldr	r3, [r3, #4]
 800aa50:	4618      	mov	r0, r3
 800aa52:	f7f9 fe5a 	bl	800470a <lwip_htonl>
 800aa56:	4604      	mov	r4, r0
 800aa58:	6a3b      	ldr	r3, [r7, #32]
 800aa5a:	68db      	ldr	r3, [r3, #12]
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f7f9 fe53 	bl	800470a <lwip_htonl>
 800aa64:	4603      	mov	r3, r0
 800aa66:	1ae3      	subs	r3, r4, r3
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	da24      	bge.n	800aab6 <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	336c      	adds	r3, #108	; 0x6c
 800aa70:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800aa72:	e002      	b.n	800aa7a <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800aa74:	69fb      	ldr	r3, [r7, #28]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800aa7a:	69fb      	ldr	r3, [r7, #28]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d011      	beq.n	800aaa6 <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800aa82:	69fb      	ldr	r3, [r7, #28]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	68db      	ldr	r3, [r3, #12]
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f7f9 fe3d 	bl	800470a <lwip_htonl>
 800aa90:	4604      	mov	r4, r0
 800aa92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa94:	68db      	ldr	r3, [r3, #12]
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f7f9 fe36 	bl	800470a <lwip_htonl>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	dbe6      	blt.n	800aa74 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 800aaa6:	69fb      	ldr	r3, [r7, #28]
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaac:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800aaae:	69fb      	ldr	r3, [r7, #28]
 800aab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aab2:	601a      	str	r2, [r3, #0]
 800aab4:	e009      	b.n	800aaca <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800aab6:	6a3b      	ldr	r3, [r7, #32]
 800aab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aaba:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800aabc:	6a3b      	ldr	r3, [r7, #32]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	623b      	str	r3, [r7, #32]
 800aac2:	e002      	b.n	800aaca <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800aac4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aac6:	f7fc fa12 	bl	8006eee <tcp_seg_free>
    }
    seg = pcb->unsent;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aace:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800aad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d015      	beq.n	800ab02 <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800aad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad8:	68db      	ldr	r3, [r3, #12]
 800aada:	685b      	ldr	r3, [r3, #4]
 800aadc:	4618      	mov	r0, r3
 800aade:	f7f9 fe14 	bl	800470a <lwip_htonl>
 800aae2:	4602      	mov	r2, r0
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aae8:	1ad3      	subs	r3, r2, r3
 800aaea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aaec:	8912      	ldrh	r2, [r2, #8]
 800aaee:	4413      	add	r3, r2
  while (seg != NULL &&
 800aaf0:	69ba      	ldr	r2, [r7, #24]
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	f4bf aedf 	bcs.w	800a8b6 <tcp_output+0x15e>
  }
output_done:
 800aaf8:	e003      	b.n	800ab02 <tcp_output+0x3aa>
    goto output_done;
 800aafa:	bf00      	nop
 800aafc:	e002      	b.n	800ab04 <tcp_output+0x3ac>
      break;
 800aafe:	bf00      	nop
 800ab00:	e000      	b.n	800ab04 <tcp_output+0x3ac>
output_done:
 800ab02:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d103      	bne.n	800ab14 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	7e9b      	ldrb	r3, [r3, #26]
 800ab18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab1c:	b2da      	uxtb	r2, r3
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 800ab22:	2300      	movs	r3, #0
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3728      	adds	r7, #40	; 0x28
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bdb0      	pop	{r4, r5, r7, pc}

0800ab2c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800ab2c:	b5b0      	push	{r4, r5, r7, lr}
 800ab2e:	b08c      	sub	sp, #48	; 0x30
 800ab30:	af04      	add	r7, sp, #16
 800ab32:	60f8      	str	r0, [r7, #12]
 800ab34:	60b9      	str	r1, [r7, #8]
 800ab36:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	685b      	ldr	r3, [r3, #4]
 800ab3c:	89db      	ldrh	r3, [r3, #14]
 800ab3e:	2b01      	cmp	r3, #1
 800ab40:	d001      	beq.n	800ab46 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800ab42:	2300      	movs	r3, #0
 800ab44:	e08b      	b.n	800ac5e <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	68dc      	ldr	r4, [r3, #12]
 800ab4e:	4610      	mov	r0, r2
 800ab50:	f7f9 fddb 	bl	800470a <lwip_htonl>
 800ab54:	4603      	mov	r3, r0
 800ab56:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	68dc      	ldr	r4, [r3, #12]
 800ab60:	4610      	mov	r0, r2
 800ab62:	f7f9 fdc5 	bl	80046f0 <lwip_htons>
 800ab66:	4603      	mov	r3, r0
 800ab68:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab6e:	68ba      	ldr	r2, [r7, #8]
 800ab70:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800ab72:	441a      	add	r2, r3
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	68db      	ldr	r3, [r3, #12]
 800ab7c:	3314      	adds	r3, #20
 800ab7e:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	7a9b      	ldrb	r3, [r3, #10]
 800ab84:	f003 0301 	and.w	r3, r3, #1
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d014      	beq.n	800abb6 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	3304      	adds	r3, #4
 800ab90:	4619      	mov	r1, r3
 800ab92:	f44f 7006 	mov.w	r0, #536	; 0x218
 800ab96:	f7fc fc75 	bl	8007484 <tcp_eff_send_mss_impl>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ab9e:	8b7b      	ldrh	r3, [r7, #26]
 800aba0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800aba4:	4618      	mov	r0, r3
 800aba6:	f7f9 fdb0 	bl	800470a <lwip_htonl>
 800abaa:	4602      	mov	r2, r0
 800abac:	69fb      	ldr	r3, [r7, #28]
 800abae:	601a      	str	r2, [r3, #0]
    opts += 1;
 800abb0:	69fb      	ldr	r3, [r7, #28]
 800abb2:	3304      	adds	r3, #4
 800abb4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	da02      	bge.n	800abc6 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	2200      	movs	r2, #0
 800abc4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d10c      	bne.n	800abe8 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 800abce:	4b26      	ldr	r3, [pc, #152]	; (800ac68 <tcp_output_segment+0x13c>)
 800abd0:	681a      	ldr	r2, [r3, #0]
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	68db      	ldr	r3, [r3, #12]
 800abda:	685b      	ldr	r3, [r3, #4]
 800abdc:	4618      	mov	r0, r3
 800abde:	f7f9 fd94 	bl	800470a <lwip_htonl>
 800abe2:	4602      	mov	r2, r0
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	68db      	ldr	r3, [r3, #12]
 800abec:	461a      	mov	r2, r3
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	1ad3      	subs	r3, r2, r3
 800abf6:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	685b      	ldr	r3, [r3, #4]
 800abfc:	8959      	ldrh	r1, [r3, #10]
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	8b3a      	ldrh	r2, [r7, #24]
 800ac04:	1a8a      	subs	r2, r1, r2
 800ac06:	b292      	uxth	r2, r2
 800ac08:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	8919      	ldrh	r1, [r3, #8]
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	8b3a      	ldrh	r2, [r7, #24]
 800ac16:	1a8a      	subs	r2, r1, r2
 800ac18:	b292      	uxth	r2, r2
 800ac1a:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	685b      	ldr	r3, [r3, #4]
 800ac20:	68fa      	ldr	r2, [r7, #12]
 800ac22:	68d2      	ldr	r2, [r2, #12]
 800ac24:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	68db      	ldr	r3, [r3, #12]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	741a      	strb	r2, [r3, #16]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	6858      	ldr	r0, [r3, #4]
 800ac36:	68b9      	ldr	r1, [r7, #8]
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	1d1c      	adds	r4, r3, #4
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	7a9d      	ldrb	r5, [r3, #10]
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	7a5b      	ldrb	r3, [r3, #9]
 800ac44:	687a      	ldr	r2, [r7, #4]
 800ac46:	9202      	str	r2, [sp, #8]
 800ac48:	2206      	movs	r2, #6
 800ac4a:	9201      	str	r2, [sp, #4]
 800ac4c:	9300      	str	r3, [sp, #0]
 800ac4e:	462b      	mov	r3, r5
 800ac50:	4622      	mov	r2, r4
 800ac52:	f001 ff4f 	bl	800caf4 <ip4_output_if>
 800ac56:	4603      	mov	r3, r0
 800ac58:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 800ac5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3720      	adds	r7, #32
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bdb0      	pop	{r4, r5, r7, pc}
 800ac66:	bf00      	nop
 800ac68:	200038c8 	.word	0x200038c8

0800ac6c <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b08c      	sub	sp, #48	; 0x30
 800ac70:	af04      	add	r7, sp, #16
 800ac72:	60f8      	str	r0, [r7, #12]
 800ac74:	60b9      	str	r1, [r7, #8]
 800ac76:	607a      	str	r2, [r7, #4]
 800ac78:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	2114      	movs	r1, #20
 800ac7e:	2001      	movs	r0, #1
 800ac80:	f7fa faf0 	bl	8005264 <pbuf_alloc>
 800ac84:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800ac86:	69fb      	ldr	r3, [r7, #28]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d05b      	beq.n	800ad44 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800ac8c:	69fb      	ldr	r3, [r7, #28]
 800ac8e:	895b      	ldrh	r3, [r3, #10]
 800ac90:	2b13      	cmp	r3, #19
 800ac92:	d806      	bhi.n	800aca2 <tcp_rst+0x36>
 800ac94:	4b2d      	ldr	r3, [pc, #180]	; (800ad4c <tcp_rst+0xe0>)
 800ac96:	f240 524d 	movw	r2, #1357	; 0x54d
 800ac9a:	492d      	ldr	r1, [pc, #180]	; (800ad50 <tcp_rst+0xe4>)
 800ac9c:	482d      	ldr	r0, [pc, #180]	; (800ad54 <tcp_rst+0xe8>)
 800ac9e:	f005 ffb5 	bl	8010c0c <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800aca2:	69fb      	ldr	r3, [r7, #28]
 800aca4:	685b      	ldr	r3, [r3, #4]
 800aca6:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 800aca8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800acaa:	4618      	mov	r0, r3
 800acac:	f7f9 fd20 	bl	80046f0 <lwip_htons>
 800acb0:	4603      	mov	r3, r0
 800acb2:	461a      	mov	r2, r3
 800acb4:	69bb      	ldr	r3, [r7, #24]
 800acb6:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800acb8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800acba:	4618      	mov	r0, r3
 800acbc:	f7f9 fd18 	bl	80046f0 <lwip_htons>
 800acc0:	4603      	mov	r3, r0
 800acc2:	461a      	mov	r2, r3
 800acc4:	69bb      	ldr	r3, [r7, #24]
 800acc6:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800acc8:	68f8      	ldr	r0, [r7, #12]
 800acca:	f7f9 fd1e 	bl	800470a <lwip_htonl>
 800acce:	4602      	mov	r2, r0
 800acd0:	69bb      	ldr	r3, [r7, #24]
 800acd2:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800acd4:	68b8      	ldr	r0, [r7, #8]
 800acd6:	f7f9 fd18 	bl	800470a <lwip_htonl>
 800acda:	4602      	mov	r2, r0
 800acdc:	69bb      	ldr	r3, [r7, #24]
 800acde:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800ace0:	f245 0014 	movw	r0, #20500	; 0x5014
 800ace4:	f7f9 fd04 	bl	80046f0 <lwip_htons>
 800ace8:	4603      	mov	r3, r0
 800acea:	461a      	mov	r2, r3
 800acec:	69bb      	ldr	r3, [r7, #24]
 800acee:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800acf0:	69bb      	ldr	r3, [r7, #24]
 800acf2:	2200      	movs	r2, #0
 800acf4:	f042 0208 	orr.w	r2, r2, #8
 800acf8:	739a      	strb	r2, [r3, #14]
 800acfa:	2200      	movs	r2, #0
 800acfc:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800ad00:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 800ad02:	69bb      	ldr	r3, [r7, #24]
 800ad04:	2200      	movs	r2, #0
 800ad06:	741a      	strb	r2, [r3, #16]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800ad0c:	69bb      	ldr	r3, [r7, #24]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	749a      	strb	r2, [r3, #18]
 800ad12:	2200      	movs	r2, #0
 800ad14:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800ad16:	6838      	ldr	r0, [r7, #0]
 800ad18:	f001 fd44 	bl	800c7a4 <ip4_route>
 800ad1c:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d00b      	beq.n	800ad3c <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	9302      	str	r3, [sp, #8]
 800ad28:	2306      	movs	r3, #6
 800ad2a:	9301      	str	r3, [sp, #4]
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	9300      	str	r3, [sp, #0]
 800ad30:	23ff      	movs	r3, #255	; 0xff
 800ad32:	683a      	ldr	r2, [r7, #0]
 800ad34:	6879      	ldr	r1, [r7, #4]
 800ad36:	69f8      	ldr	r0, [r7, #28]
 800ad38:	f001 fedc 	bl	800caf4 <ip4_output_if>
  }
  pbuf_free(p);
 800ad3c:	69f8      	ldr	r0, [r7, #28]
 800ad3e:	f7fa fe03 	bl	8005948 <pbuf_free>
 800ad42:	e000      	b.n	800ad46 <tcp_rst+0xda>
    return;
 800ad44:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800ad46:	3720      	adds	r7, #32
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	080154dc 	.word	0x080154dc
 800ad50:	08015510 	.word	0x08015510
 800ad54:	08015540 	.word	0x08015540

0800ad58 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b084      	sub	sp, #16
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d029      	beq.n	800adbc <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad6c:	60fb      	str	r3, [r7, #12]
 800ad6e:	e002      	b.n	800ad76 <tcp_rexmit_rto+0x1e>
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	60fb      	str	r3, [r7, #12]
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d1f8      	bne.n	800ad70 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2200      	movs	r2, #0
 800ad92:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ad9a:	2bff      	cmp	r3, #255	; 0xff
 800ad9c:	d007      	beq.n	800adae <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ada4:	3301      	adds	r3, #1
 800ada6:	b2da      	uxtb	r2, r3
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2200      	movs	r2, #0
 800adb2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f7ff fccf 	bl	800a758 <tcp_output>
 800adba:	e000      	b.n	800adbe <tcp_rexmit_rto+0x66>
    return;
 800adbc:	bf00      	nop
}
 800adbe:	3710      	adds	r7, #16
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}

0800adc4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800adc4:	b590      	push	{r4, r7, lr}
 800adc6:	b085      	sub	sp, #20
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800add0:	2b00      	cmp	r3, #0
 800add2:	d043      	beq.n	800ae5c <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800add8:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	681a      	ldr	r2, [r3, #0]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	3368      	adds	r3, #104	; 0x68
 800ade6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ade8:	e002      	b.n	800adf0 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d011      	beq.n	800ae1c <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	68db      	ldr	r3, [r3, #12]
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	4618      	mov	r0, r3
 800ae02:	f7f9 fc82 	bl	800470a <lwip_htonl>
 800ae06:	4604      	mov	r4, r0
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	68db      	ldr	r3, [r3, #12]
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7f9 fc7b 	bl	800470a <lwip_htonl>
 800ae14:	4603      	mov	r3, r0
 800ae16:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	dbe6      	blt.n	800adea <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681a      	ldr	r2, [r3, #0]
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	68ba      	ldr	r2, [r7, #8]
 800ae28:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d103      	bne.n	800ae3a <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2200      	movs	r2, #0
 800ae36:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ae40:	2bff      	cmp	r3, #255	; 0xff
 800ae42:	d007      	beq.n	800ae54 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	b2da      	uxtb	r2, r3
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2200      	movs	r2, #0
 800ae58:	635a      	str	r2, [r3, #52]	; 0x34
 800ae5a:	e000      	b.n	800ae5e <tcp_rexmit+0x9a>
    return;
 800ae5c:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800ae5e:	3714      	adds	r7, #20
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd90      	pop	{r4, r7, pc}

0800ae64 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b082      	sub	sp, #8
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d04a      	beq.n	800af0a <tcp_rexmit_fast+0xa6>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	7e9b      	ldrb	r3, [r3, #26]
 800ae78:	f003 0304 	and.w	r3, r3, #4
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d144      	bne.n	800af0a <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f7ff ff9f 	bl	800adc4 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d207      	bcs.n	800aea6 <tcp_rexmit_fast+0x42>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ae9c:	0fda      	lsrs	r2, r3, #31
 800ae9e:	4413      	add	r3, r2
 800aea0:	105b      	asrs	r3, r3, #1
 800aea2:	b29b      	uxth	r3, r3
 800aea4:	e006      	b.n	800aeb4 <tcp_rexmit_fast+0x50>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aeac:	0fda      	lsrs	r2, r3, #31
 800aeae:	4413      	add	r3, r2
 800aeb0:	105b      	asrs	r3, r3, #1
 800aeb2:	b29b      	uxth	r3, r3
 800aeb4:	687a      	ldr	r2, [r7, #4]
 800aeb6:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800aec0:	461a      	mov	r2, r3
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aec6:	005b      	lsls	r3, r3, #1
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d206      	bcs.n	800aeda <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aed0:	005b      	lsls	r3, r3, #1
 800aed2:	b29a      	uxth	r2, r3
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aee4:	4619      	mov	r1, r3
 800aee6:	0049      	lsls	r1, r1, #1
 800aee8:	440b      	add	r3, r1
 800aeea:	b29b      	uxth	r3, r3
 800aeec:	4413      	add	r3, r2
 800aeee:	b29a      	uxth	r2, r3
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	7e9b      	ldrb	r3, [r3, #26]
 800aefa:	f043 0304 	orr.w	r3, r3, #4
 800aefe:	b2da      	uxtb	r2, r3
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2200      	movs	r2, #0
 800af08:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 800af0a:	bf00      	nop
 800af0c:	3708      	adds	r7, #8
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}

0800af12 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800af12:	b580      	push	{r7, lr}
 800af14:	b08a      	sub	sp, #40	; 0x28
 800af16:	af04      	add	r7, sp, #16
 800af18:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af1e:	3b01      	subs	r3, #1
 800af20:	4618      	mov	r0, r3
 800af22:	f7f9 fbf2 	bl	800470a <lwip_htonl>
 800af26:	4603      	mov	r3, r0
 800af28:	2200      	movs	r2, #0
 800af2a:	2100      	movs	r1, #0
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f7fe fd45 	bl	80099bc <tcp_output_alloc_header>
 800af32:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d102      	bne.n	800af40 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800af3a:	f04f 33ff 	mov.w	r3, #4294967295
 800af3e:	e021      	b.n	800af84 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	3304      	adds	r3, #4
 800af44:	4618      	mov	r0, r3
 800af46:	f001 fc2d 	bl	800c7a4 <ip4_route>
 800af4a:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d102      	bne.n	800af58 <tcp_keepalive+0x46>
    err = ERR_RTE;
 800af52:	23fc      	movs	r3, #252	; 0xfc
 800af54:	75fb      	strb	r3, [r7, #23]
 800af56:	e010      	b.n	800af7a <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800af58:	6879      	ldr	r1, [r7, #4]
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	1d1a      	adds	r2, r3, #4
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	7a98      	ldrb	r0, [r3, #10]
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	9302      	str	r3, [sp, #8]
 800af66:	2306      	movs	r3, #6
 800af68:	9301      	str	r3, [sp, #4]
 800af6a:	2300      	movs	r3, #0
 800af6c:	9300      	str	r3, [sp, #0]
 800af6e:	4603      	mov	r3, r0
 800af70:	6938      	ldr	r0, [r7, #16]
 800af72:	f001 fdbf 	bl	800caf4 <ip4_output_if>
 800af76:	4603      	mov	r3, r0
 800af78:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800af7a:	6938      	ldr	r0, [r7, #16]
 800af7c:	f7fa fce4 	bl	8005948 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800af80:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800af84:	4618      	mov	r0, r3
 800af86:	3718      	adds	r7, #24
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}

0800af8c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800af8c:	b590      	push	{r4, r7, lr}
 800af8e:	b08f      	sub	sp, #60	; 0x3c
 800af90:	af04      	add	r7, sp, #16
 800af92:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af98:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800af9a:	6a3b      	ldr	r3, [r7, #32]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d102      	bne.n	800afa6 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800afa4:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800afa6:	6a3b      	ldr	r3, [r7, #32]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d101      	bne.n	800afb0 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800afac:	2300      	movs	r3, #0
 800afae:	e085      	b.n	800b0bc <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800afb0:	6a3b      	ldr	r3, [r7, #32]
 800afb2:	68db      	ldr	r3, [r3, #12]
 800afb4:	899b      	ldrh	r3, [r3, #12]
 800afb6:	b29b      	uxth	r3, r3
 800afb8:	4618      	mov	r0, r3
 800afba:	f7f9 fb99 	bl	80046f0 <lwip_htons>
 800afbe:	4603      	mov	r3, r0
 800afc0:	f003 0301 	and.w	r3, r3, #1
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d005      	beq.n	800afd4 <tcp_zero_window_probe+0x48>
 800afc8:	6a3b      	ldr	r3, [r7, #32]
 800afca:	891b      	ldrh	r3, [r3, #8]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d101      	bne.n	800afd4 <tcp_zero_window_probe+0x48>
 800afd0:	2301      	movs	r3, #1
 800afd2:	e000      	b.n	800afd6 <tcp_zero_window_probe+0x4a>
 800afd4:	2300      	movs	r3, #0
 800afd6:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800afd8:	7ffb      	ldrb	r3, [r7, #31]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	bf0c      	ite	eq
 800afde:	2301      	moveq	r3, #1
 800afe0:	2300      	movne	r3, #0
 800afe2:	b2db      	uxtb	r3, r3
 800afe4:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800afe6:	6a3b      	ldr	r3, [r7, #32]
 800afe8:	68db      	ldr	r3, [r3, #12]
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	8bba      	ldrh	r2, [r7, #28]
 800afee:	2100      	movs	r1, #0
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f7fe fce3 	bl	80099bc <tcp_output_alloc_header>
 800aff6:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800aff8:	69bb      	ldr	r3, [r7, #24]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d102      	bne.n	800b004 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800affe:	f04f 33ff 	mov.w	r3, #4294967295
 800b002:	e05b      	b.n	800b0bc <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800b004:	69bb      	ldr	r3, [r7, #24]
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800b00a:	7ffb      	ldrb	r3, [r7, #31]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d00e      	beq.n	800b02e <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	899b      	ldrh	r3, [r3, #12]
 800b014:	b29b      	uxth	r3, r3
 800b016:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b01a:	b29c      	uxth	r4, r3
 800b01c:	2011      	movs	r0, #17
 800b01e:	f7f9 fb67 	bl	80046f0 <lwip_htons>
 800b022:	4603      	mov	r3, r0
 800b024:	4323      	orrs	r3, r4
 800b026:	b29a      	uxth	r2, r3
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	819a      	strh	r2, [r3, #12]
 800b02c:	e010      	b.n	800b050 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800b02e:	69bb      	ldr	r3, [r7, #24]
 800b030:	685b      	ldr	r3, [r3, #4]
 800b032:	3314      	adds	r3, #20
 800b034:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800b036:	6a3b      	ldr	r3, [r7, #32]
 800b038:	6858      	ldr	r0, [r3, #4]
 800b03a:	6a3b      	ldr	r3, [r7, #32]
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	891a      	ldrh	r2, [r3, #8]
 800b040:	6a3b      	ldr	r3, [r7, #32]
 800b042:	891b      	ldrh	r3, [r3, #8]
 800b044:	1ad3      	subs	r3, r2, r3
 800b046:	b29b      	uxth	r3, r3
 800b048:	2201      	movs	r2, #1
 800b04a:	6939      	ldr	r1, [r7, #16]
 800b04c:	f7fa fe6a 	bl	8005d24 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800b050:	6a3b      	ldr	r3, [r7, #32]
 800b052:	68db      	ldr	r3, [r3, #12]
 800b054:	685b      	ldr	r3, [r3, #4]
 800b056:	4618      	mov	r0, r3
 800b058:	f7f9 fb57 	bl	800470a <lwip_htonl>
 800b05c:	4603      	mov	r3, r0
 800b05e:	3301      	adds	r3, #1
 800b060:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	1ad3      	subs	r3, r2, r3
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	da02      	bge.n	800b074 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	68fa      	ldr	r2, [r7, #12]
 800b072:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	3304      	adds	r3, #4
 800b078:	4618      	mov	r0, r3
 800b07a:	f001 fb93 	bl	800c7a4 <ip4_route>
 800b07e:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d103      	bne.n	800b08e <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 800b086:	23fc      	movs	r3, #252	; 0xfc
 800b088:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b08c:	e011      	b.n	800b0b2 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b08e:	6879      	ldr	r1, [r7, #4]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	1d1a      	adds	r2, r3, #4
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	7a98      	ldrb	r0, [r3, #10]
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	9302      	str	r3, [sp, #8]
 800b09c:	2306      	movs	r3, #6
 800b09e:	9301      	str	r3, [sp, #4]
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	9300      	str	r3, [sp, #0]
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	69b8      	ldr	r0, [r7, #24]
 800b0a8:	f001 fd24 	bl	800caf4 <ip4_output_if>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800b0b2:	69b8      	ldr	r0, [r7, #24]
 800b0b4:	f7fa fc48 	bl	8005948 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b0b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	372c      	adds	r7, #44	; 0x2c
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd90      	pop	{r4, r7, pc}

0800b0c4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b082      	sub	sp, #8
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800b0cc:	f7fa feaa 	bl	8005e24 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800b0d0:	4b0a      	ldr	r3, [pc, #40]	; (800b0fc <tcpip_tcp_timer+0x38>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d103      	bne.n	800b0e0 <tcpip_tcp_timer+0x1c>
 800b0d8:	4b09      	ldr	r3, [pc, #36]	; (800b100 <tcpip_tcp_timer+0x3c>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d005      	beq.n	800b0ec <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	4908      	ldr	r1, [pc, #32]	; (800b104 <tcpip_tcp_timer+0x40>)
 800b0e4:	20fa      	movs	r0, #250	; 0xfa
 800b0e6:	f000 f86f 	bl	800b1c8 <sys_timeout>
 800b0ea:	e002      	b.n	800b0f2 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800b0ec:	4b06      	ldr	r3, [pc, #24]	; (800b108 <tcpip_tcp_timer+0x44>)
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	601a      	str	r2, [r3, #0]
  }
}
 800b0f2:	bf00      	nop
 800b0f4:	3708      	adds	r7, #8
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	200038c4 	.word	0x200038c4
 800b100:	200038d4 	.word	0x200038d4
 800b104:	0800b0c5 	.word	0x0800b0c5
 800b108:	2000026c 	.word	0x2000026c

0800b10c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800b110:	4b0a      	ldr	r3, [pc, #40]	; (800b13c <tcp_timer_needed+0x30>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d10f      	bne.n	800b138 <tcp_timer_needed+0x2c>
 800b118:	4b09      	ldr	r3, [pc, #36]	; (800b140 <tcp_timer_needed+0x34>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d103      	bne.n	800b128 <tcp_timer_needed+0x1c>
 800b120:	4b08      	ldr	r3, [pc, #32]	; (800b144 <tcp_timer_needed+0x38>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d007      	beq.n	800b138 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800b128:	4b04      	ldr	r3, [pc, #16]	; (800b13c <tcp_timer_needed+0x30>)
 800b12a:	2201      	movs	r2, #1
 800b12c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b12e:	2200      	movs	r2, #0
 800b130:	4905      	ldr	r1, [pc, #20]	; (800b148 <tcp_timer_needed+0x3c>)
 800b132:	20fa      	movs	r0, #250	; 0xfa
 800b134:	f000 f848 	bl	800b1c8 <sys_timeout>
  }
}
 800b138:	bf00      	nop
 800b13a:	bd80      	pop	{r7, pc}
 800b13c:	2000026c 	.word	0x2000026c
 800b140:	200038c4 	.word	0x200038c4
 800b144:	200038d4 	.word	0x200038d4
 800b148:	0800b0c5 	.word	0x0800b0c5

0800b14c <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b084      	sub	sp, #16
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	685b      	ldr	r3, [r3, #4]
 800b15c:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	687a      	ldr	r2, [r7, #4]
 800b164:	4903      	ldr	r1, [pc, #12]	; (800b174 <cyclic_timer+0x28>)
 800b166:	4618      	mov	r0, r3
 800b168:	f000 f82e 	bl	800b1c8 <sys_timeout>
}
 800b16c:	bf00      	nop
 800b16e:	3710      	adds	r7, #16
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}
 800b174:	0800b14d 	.word	0x0800b14d

0800b178 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b082      	sub	sp, #8
 800b17c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b17e:	2301      	movs	r3, #1
 800b180:	607b      	str	r3, [r7, #4]
 800b182:	e00e      	b.n	800b1a2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800b184:	4a0d      	ldr	r2, [pc, #52]	; (800b1bc <sys_timeouts_init+0x44>)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	00db      	lsls	r3, r3, #3
 800b190:	4a0a      	ldr	r2, [pc, #40]	; (800b1bc <sys_timeouts_init+0x44>)
 800b192:	4413      	add	r3, r2
 800b194:	461a      	mov	r2, r3
 800b196:	490a      	ldr	r1, [pc, #40]	; (800b1c0 <sys_timeouts_init+0x48>)
 800b198:	f000 f816 	bl	800b1c8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	3301      	adds	r3, #1
 800b1a0:	607b      	str	r3, [r7, #4]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2b02      	cmp	r3, #2
 800b1a6:	d9ed      	bls.n	800b184 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800b1a8:	f003 f8da 	bl	800e360 <sys_now>
 800b1ac:	4602      	mov	r2, r0
 800b1ae:	4b05      	ldr	r3, [pc, #20]	; (800b1c4 <sys_timeouts_init+0x4c>)
 800b1b0:	601a      	str	r2, [r3, #0]
}
 800b1b2:	bf00      	nop
 800b1b4:	3708      	adds	r7, #8
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	0801645c 	.word	0x0801645c
 800b1c0:	0800b14d 	.word	0x0800b14d
 800b1c4:	20000268 	.word	0x20000268

0800b1c8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b088      	sub	sp, #32
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	60f8      	str	r0, [r7, #12]
 800b1d0:	60b9      	str	r1, [r7, #8]
 800b1d2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800b1d4:	2006      	movs	r0, #6
 800b1d6:	f7f9 fe33 	bl	8004e40 <memp_malloc>
 800b1da:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d10a      	bne.n	800b1f8 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	f040 8084 	bne.w	800b2f2 <sys_timeout+0x12a>
 800b1ea:	4b44      	ldr	r3, [pc, #272]	; (800b2fc <sys_timeout+0x134>)
 800b1ec:	22d4      	movs	r2, #212	; 0xd4
 800b1ee:	4944      	ldr	r1, [pc, #272]	; (800b300 <sys_timeout+0x138>)
 800b1f0:	4844      	ldr	r0, [pc, #272]	; (800b304 <sys_timeout+0x13c>)
 800b1f2:	f005 fd0b 	bl	8010c0c <iprintf>
    return;
 800b1f6:	e07c      	b.n	800b2f2 <sys_timeout+0x12a>
  }

  now = sys_now();
 800b1f8:	f003 f8b2 	bl	800e360 <sys_now>
 800b1fc:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800b1fe:	4b42      	ldr	r3, [pc, #264]	; (800b308 <sys_timeout+0x140>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d105      	bne.n	800b212 <sys_timeout+0x4a>
    diff = 0;
 800b206:	2300      	movs	r3, #0
 800b208:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800b20a:	4a40      	ldr	r2, [pc, #256]	; (800b30c <sys_timeout+0x144>)
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	6013      	str	r3, [r2, #0]
 800b210:	e004      	b.n	800b21c <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800b212:	4b3e      	ldr	r3, [pc, #248]	; (800b30c <sys_timeout+0x144>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	693a      	ldr	r2, [r7, #16]
 800b218:	1ad3      	subs	r3, r2, r3
 800b21a:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	2200      	movs	r2, #0
 800b220:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	68ba      	ldr	r2, [r7, #8]
 800b226:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800b228:	697b      	ldr	r3, [r7, #20]
 800b22a:	687a      	ldr	r2, [r7, #4]
 800b22c:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800b22e:	68fa      	ldr	r2, [r7, #12]
 800b230:	69bb      	ldr	r3, [r7, #24]
 800b232:	441a      	add	r2, r3
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800b238:	4b33      	ldr	r3, [pc, #204]	; (800b308 <sys_timeout+0x140>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d103      	bne.n	800b248 <sys_timeout+0x80>
    next_timeout = timeout;
 800b240:	4a31      	ldr	r2, [pc, #196]	; (800b308 <sys_timeout+0x140>)
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	6013      	str	r3, [r2, #0]
    return;
 800b246:	e055      	b.n	800b2f4 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800b248:	4b2f      	ldr	r3, [pc, #188]	; (800b308 <sys_timeout+0x140>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	68fa      	ldr	r2, [r7, #12]
 800b250:	429a      	cmp	r2, r3
 800b252:	d20f      	bcs.n	800b274 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800b254:	4b2c      	ldr	r3, [pc, #176]	; (800b308 <sys_timeout+0x140>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	6859      	ldr	r1, [r3, #4]
 800b25a:	4b2b      	ldr	r3, [pc, #172]	; (800b308 <sys_timeout+0x140>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	68fa      	ldr	r2, [r7, #12]
 800b260:	1a8a      	subs	r2, r1, r2
 800b262:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800b264:	4b28      	ldr	r3, [pc, #160]	; (800b308 <sys_timeout+0x140>)
 800b266:	681a      	ldr	r2, [r3, #0]
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800b26c:	4a26      	ldr	r2, [pc, #152]	; (800b308 <sys_timeout+0x140>)
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	6013      	str	r3, [r2, #0]
 800b272:	e03f      	b.n	800b2f4 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800b274:	4b24      	ldr	r3, [pc, #144]	; (800b308 <sys_timeout+0x140>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	61fb      	str	r3, [r7, #28]
 800b27a:	e036      	b.n	800b2ea <sys_timeout+0x122>
      timeout->time -= t->time;
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	685a      	ldr	r2, [r3, #4]
 800b280:	69fb      	ldr	r3, [r7, #28]
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	1ad2      	subs	r2, r2, r3
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800b28a:	69fb      	ldr	r3, [r7, #28]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d006      	beq.n	800b2a0 <sys_timeout+0xd8>
 800b292:	69fb      	ldr	r3, [r7, #28]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	685a      	ldr	r2, [r3, #4]
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	429a      	cmp	r2, r3
 800b29e:	d921      	bls.n	800b2e4 <sys_timeout+0x11c>
        if (t->next != NULL) {
 800b2a0:	69fb      	ldr	r3, [r7, #28]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d009      	beq.n	800b2bc <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800b2a8:	69fb      	ldr	r3, [r7, #28]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	6859      	ldr	r1, [r3, #4]
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	685a      	ldr	r2, [r3, #4]
 800b2b2:	69fb      	ldr	r3, [r7, #28]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	1a8a      	subs	r2, r1, r2
 800b2b8:	605a      	str	r2, [r3, #4]
 800b2ba:	e00b      	b.n	800b2d4 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	685b      	ldr	r3, [r3, #4]
 800b2c0:	68fa      	ldr	r2, [r7, #12]
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d206      	bcs.n	800b2d4 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800b2c6:	4b10      	ldr	r3, [pc, #64]	; (800b308 <sys_timeout+0x140>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	685a      	ldr	r2, [r3, #4]
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	441a      	add	r2, r3
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800b2d4:	69fb      	ldr	r3, [r7, #28]
 800b2d6:	681a      	ldr	r2, [r3, #0]
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800b2dc:	69fb      	ldr	r3, [r7, #28]
 800b2de:	697a      	ldr	r2, [r7, #20]
 800b2e0:	601a      	str	r2, [r3, #0]
        break;
 800b2e2:	e007      	b.n	800b2f4 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800b2e4:	69fb      	ldr	r3, [r7, #28]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	61fb      	str	r3, [r7, #28]
 800b2ea:	69fb      	ldr	r3, [r7, #28]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d1c5      	bne.n	800b27c <sys_timeout+0xb4>
 800b2f0:	e000      	b.n	800b2f4 <sys_timeout+0x12c>
    return;
 800b2f2:	bf00      	nop
      }
    }
  }
}
 800b2f4:	3720      	adds	r7, #32
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}
 800b2fa:	bf00      	nop
 800b2fc:	08015920 	.word	0x08015920
 800b300:	08015954 	.word	0x08015954
 800b304:	08015994 	.word	0x08015994
 800b308:	20000264 	.word	0x20000264
 800b30c:	20000268 	.word	0x20000268

0800b310 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b086      	sub	sp, #24
 800b314:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800b316:	4b24      	ldr	r3, [pc, #144]	; (800b3a8 <sys_check_timeouts+0x98>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d040      	beq.n	800b3a0 <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800b31e:	f003 f81f 	bl	800e360 <sys_now>
 800b322:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800b324:	4b21      	ldr	r3, [pc, #132]	; (800b3ac <sys_check_timeouts+0x9c>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	68fa      	ldr	r2, [r7, #12]
 800b32a:	1ad3      	subs	r3, r2, r3
 800b32c:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 800b32e:	4b20      	ldr	r3, [pc, #128]	; (800b3b0 <sys_check_timeouts+0xa0>)
 800b330:	781b      	ldrb	r3, [r3, #0]
 800b332:	b2db      	uxtb	r3, r3
 800b334:	2b00      	cmp	r3, #0
 800b336:	d001      	beq.n	800b33c <sys_check_timeouts+0x2c>
 800b338:	f7f9 ff64 	bl	8005204 <pbuf_free_ooseq>
      had_one = 0;
 800b33c:	2300      	movs	r3, #0
 800b33e:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800b340:	4b19      	ldr	r3, [pc, #100]	; (800b3a8 <sys_check_timeouts+0x98>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d026      	beq.n	800b39a <sys_check_timeouts+0x8a>
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	685b      	ldr	r3, [r3, #4]
 800b350:	697a      	ldr	r2, [r7, #20]
 800b352:	429a      	cmp	r2, r3
 800b354:	d321      	bcc.n	800b39a <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 800b356:	2301      	movs	r3, #1
 800b358:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	685a      	ldr	r2, [r3, #4]
 800b35e:	4b13      	ldr	r3, [pc, #76]	; (800b3ac <sys_check_timeouts+0x9c>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4413      	add	r3, r2
 800b364:	4a11      	ldr	r2, [pc, #68]	; (800b3ac <sys_check_timeouts+0x9c>)
 800b366:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	685b      	ldr	r3, [r3, #4]
 800b36c:	697a      	ldr	r2, [r7, #20]
 800b36e:	1ad3      	subs	r3, r2, r3
 800b370:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	4a0c      	ldr	r2, [pc, #48]	; (800b3a8 <sys_check_timeouts+0x98>)
 800b378:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	689b      	ldr	r3, [r3, #8]
 800b37e:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	68db      	ldr	r3, [r3, #12]
 800b384:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800b386:	68b9      	ldr	r1, [r7, #8]
 800b388:	2006      	movs	r0, #6
 800b38a:	f7f9 fda5 	bl	8004ed8 <memp_free>
        if (handler != NULL) {
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d002      	beq.n	800b39a <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6838      	ldr	r0, [r7, #0]
 800b398:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800b39a:	7cfb      	ldrb	r3, [r7, #19]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d1c6      	bne.n	800b32e <sys_check_timeouts+0x1e>
  }
}
 800b3a0:	bf00      	nop
 800b3a2:	3718      	adds	r7, #24
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}
 800b3a8:	20000264 	.word	0x20000264
 800b3ac:	20000268 	.word	0x20000268
 800b3b0:	200038bc 	.word	0x200038bc

0800b3b4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800b3b8:	bf00      	nop
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bc80      	pop	{r7}
 800b3be:	4770      	bx	lr

0800b3c0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b085      	sub	sp, #20
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	60f8      	str	r0, [r7, #12]
 800b3c8:	60b9      	str	r1, [r7, #8]
 800b3ca:	4613      	mov	r3, r2
 800b3cc:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800b3ce:	79fb      	ldrb	r3, [r7, #7]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d018      	beq.n	800b406 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d013      	beq.n	800b402 <udp_input_local_match+0x42>
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d00f      	beq.n	800b402 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b3e2:	4b13      	ldr	r3, [pc, #76]	; (800b430 <udp_input_local_match+0x70>)
 800b3e4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b3e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3ea:	d00a      	beq.n	800b402 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681a      	ldr	r2, [r3, #0]
 800b3f0:	4b0f      	ldr	r3, [pc, #60]	; (800b430 <udp_input_local_match+0x70>)
 800b3f2:	695b      	ldr	r3, [r3, #20]
 800b3f4:	405a      	eors	r2, r3
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	3308      	adds	r3, #8
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d110      	bne.n	800b424 <udp_input_local_match+0x64>
          return 1;
 800b402:	2301      	movs	r3, #1
 800b404:	e00f      	b.n	800b426 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d009      	beq.n	800b420 <udp_input_local_match+0x60>
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d005      	beq.n	800b420 <udp_input_local_match+0x60>
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681a      	ldr	r2, [r3, #0]
 800b418:	4b05      	ldr	r3, [pc, #20]	; (800b430 <udp_input_local_match+0x70>)
 800b41a:	695b      	ldr	r3, [r3, #20]
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d101      	bne.n	800b424 <udp_input_local_match+0x64>
      return 1;
 800b420:	2301      	movs	r3, #1
 800b422:	e000      	b.n	800b426 <udp_input_local_match+0x66>
    }
  }

  return 0;
 800b424:	2300      	movs	r3, #0
}
 800b426:	4618      	mov	r0, r3
 800b428:	3714      	adds	r7, #20
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bc80      	pop	{r7}
 800b42e:	4770      	bx	lr
 800b430:	20000394 	.word	0x20000394

0800b434 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800b434:	b590      	push	{r4, r7, lr}
 800b436:	b08d      	sub	sp, #52	; 0x34
 800b438:	af02      	add	r7, sp, #8
 800b43a:	6078      	str	r0, [r7, #4]
 800b43c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800b43e:	2300      	movs	r3, #0
 800b440:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	895b      	ldrh	r3, [r3, #10]
 800b446:	2b07      	cmp	r3, #7
 800b448:	d803      	bhi.n	800b452 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f7fa fa7c 	bl	8005948 <pbuf_free>
    goto end;
 800b450:	e0c6      	b.n	800b5e0 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800b458:	4b63      	ldr	r3, [pc, #396]	; (800b5e8 <udp_input+0x1b4>)
 800b45a:	695a      	ldr	r2, [r3, #20]
 800b45c:	4b62      	ldr	r3, [pc, #392]	; (800b5e8 <udp_input+0x1b4>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	4619      	mov	r1, r3
 800b462:	4610      	mov	r0, r2
 800b464:	f001 fc18 	bl	800cc98 <ip4_addr_isbroadcast_u32>
 800b468:	4603      	mov	r3, r0
 800b46a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	881b      	ldrh	r3, [r3, #0]
 800b470:	b29b      	uxth	r3, r3
 800b472:	4618      	mov	r0, r3
 800b474:	f7f9 f93c 	bl	80046f0 <lwip_htons>
 800b478:	4603      	mov	r3, r0
 800b47a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	885b      	ldrh	r3, [r3, #2]
 800b480:	b29b      	uxth	r3, r3
 800b482:	4618      	mov	r0, r3
 800b484:	f7f9 f934 	bl	80046f0 <lwip_htons>
 800b488:	4603      	mov	r3, r0
 800b48a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800b48c:	2300      	movs	r3, #0
 800b48e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800b490:	2300      	movs	r3, #0
 800b492:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800b494:	2300      	movs	r3, #0
 800b496:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b498:	4b54      	ldr	r3, [pc, #336]	; (800b5ec <udp_input+0x1b8>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	627b      	str	r3, [r7, #36]	; 0x24
 800b49e:	e03b      	b.n	800b518 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800b4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a2:	8a5b      	ldrh	r3, [r3, #18]
 800b4a4:	89fa      	ldrh	r2, [r7, #14]
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	d131      	bne.n	800b50e <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800b4aa:	7cfb      	ldrb	r3, [r7, #19]
 800b4ac:	461a      	mov	r2, r3
 800b4ae:	6839      	ldr	r1, [r7, #0]
 800b4b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b4b2:	f7ff ff85 	bl	800b3c0 <udp_input_local_match>
 800b4b6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d028      	beq.n	800b50e <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800b4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4be:	7c1b      	ldrb	r3, [r3, #16]
 800b4c0:	f003 0304 	and.w	r3, r3, #4
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d104      	bne.n	800b4d2 <udp_input+0x9e>
 800b4c8:	69fb      	ldr	r3, [r7, #28]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d101      	bne.n	800b4d2 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800b4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d0:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800b4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d4:	8a9b      	ldrh	r3, [r3, #20]
 800b4d6:	8a3a      	ldrh	r2, [r7, #16]
 800b4d8:	429a      	cmp	r2, r3
 800b4da:	d118      	bne.n	800b50e <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4de:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d005      	beq.n	800b4f0 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800b4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e6:	685a      	ldr	r2, [r3, #4]
 800b4e8:	4b3f      	ldr	r3, [pc, #252]	; (800b5e8 <udp_input+0x1b4>)
 800b4ea:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b4ec:	429a      	cmp	r2, r3
 800b4ee:	d10e      	bne.n	800b50e <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800b4f0:	6a3b      	ldr	r3, [r7, #32]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d014      	beq.n	800b520 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800b4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f8:	68da      	ldr	r2, [r3, #12]
 800b4fa:	6a3b      	ldr	r3, [r7, #32]
 800b4fc:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800b4fe:	4b3b      	ldr	r3, [pc, #236]	; (800b5ec <udp_input+0x1b8>)
 800b500:	681a      	ldr	r2, [r3, #0]
 800b502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b504:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800b506:	4a39      	ldr	r2, [pc, #228]	; (800b5ec <udp_input+0x1b8>)
 800b508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b50a:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800b50c:	e008      	b.n	800b520 <udp_input+0xec>
      }
    }

    prev = pcb;
 800b50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b510:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b514:	68db      	ldr	r3, [r3, #12]
 800b516:	627b      	str	r3, [r7, #36]	; 0x24
 800b518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d1c0      	bne.n	800b4a0 <udp_input+0x6c>
 800b51e:	e000      	b.n	800b522 <udp_input+0xee>
        break;
 800b520:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800b522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b524:	2b00      	cmp	r3, #0
 800b526:	d101      	bne.n	800b52c <udp_input+0xf8>
    pcb = uncon_pcb;
 800b528:	69fb      	ldr	r3, [r7, #28]
 800b52a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800b52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d002      	beq.n	800b538 <udp_input+0x104>
    for_us = 1;
 800b532:	2301      	movs	r3, #1
 800b534:	76fb      	strb	r3, [r7, #27]
 800b536:	e00a      	b.n	800b54e <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	3304      	adds	r3, #4
 800b53c:	681a      	ldr	r2, [r3, #0]
 800b53e:	4b2a      	ldr	r3, [pc, #168]	; (800b5e8 <udp_input+0x1b4>)
 800b540:	695b      	ldr	r3, [r3, #20]
 800b542:	429a      	cmp	r2, r3
 800b544:	bf0c      	ite	eq
 800b546:	2301      	moveq	r3, #1
 800b548:	2300      	movne	r3, #0
 800b54a:	b2db      	uxtb	r3, r3
 800b54c:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800b54e:	7efb      	ldrb	r3, [r7, #27]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d042      	beq.n	800b5da <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800b554:	f06f 0107 	mvn.w	r1, #7
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f7fa f9d1 	bl	8005900 <pbuf_header>
 800b55e:	4603      	mov	r3, r0
 800b560:	2b00      	cmp	r3, #0
 800b562:	d00a      	beq.n	800b57a <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800b564:	4b22      	ldr	r3, [pc, #136]	; (800b5f0 <udp_input+0x1bc>)
 800b566:	f240 1255 	movw	r2, #341	; 0x155
 800b56a:	4922      	ldr	r1, [pc, #136]	; (800b5f4 <udp_input+0x1c0>)
 800b56c:	4822      	ldr	r0, [pc, #136]	; (800b5f8 <udp_input+0x1c4>)
 800b56e:	f005 fb4d 	bl	8010c0c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f7fa f9e8 	bl	8005948 <pbuf_free>
      goto end;
 800b578:	e032      	b.n	800b5e0 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 800b57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d012      	beq.n	800b5a6 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800b580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b582:	699b      	ldr	r3, [r3, #24]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d00a      	beq.n	800b59e <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800b588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b58a:	699c      	ldr	r4, [r3, #24]
 800b58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b58e:	69d8      	ldr	r0, [r3, #28]
 800b590:	8a3b      	ldrh	r3, [r7, #16]
 800b592:	9300      	str	r3, [sp, #0]
 800b594:	4b19      	ldr	r3, [pc, #100]	; (800b5fc <udp_input+0x1c8>)
 800b596:	687a      	ldr	r2, [r7, #4]
 800b598:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b59a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800b59c:	e021      	b.n	800b5e2 <udp_input+0x1ae>
        pbuf_free(p);
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f7fa f9d2 	bl	8005948 <pbuf_free>
        goto end;
 800b5a4:	e01c      	b.n	800b5e0 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800b5a6:	7cfb      	ldrb	r3, [r7, #19]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d112      	bne.n	800b5d2 <udp_input+0x19e>
 800b5ac:	4b0e      	ldr	r3, [pc, #56]	; (800b5e8 <udp_input+0x1b4>)
 800b5ae:	695b      	ldr	r3, [r3, #20]
 800b5b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b5b4:	2be0      	cmp	r3, #224	; 0xe0
 800b5b6:	d00c      	beq.n	800b5d2 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800b5b8:	4b0b      	ldr	r3, [pc, #44]	; (800b5e8 <udp_input+0x1b4>)
 800b5ba:	899b      	ldrh	r3, [r3, #12]
 800b5bc:	3308      	adds	r3, #8
 800b5be:	b29b      	uxth	r3, r3
 800b5c0:	b21b      	sxth	r3, r3
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f7fa f9ad 	bl	8005924 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800b5ca:	2103      	movs	r1, #3
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f001 f861 	bl	800c694 <icmp_dest_unreach>
      pbuf_free(p);
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f7fa f9b8 	bl	8005948 <pbuf_free>
  return;
 800b5d8:	e003      	b.n	800b5e2 <udp_input+0x1ae>
    pbuf_free(p);
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f7fa f9b4 	bl	8005948 <pbuf_free>
  return;
 800b5e0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800b5e2:	372c      	adds	r7, #44	; 0x2c
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd90      	pop	{r4, r7, pc}
 800b5e8:	20000394 	.word	0x20000394
 800b5ec:	200038dc 	.word	0x200038dc
 800b5f0:	080159bc 	.word	0x080159bc
 800b5f4:	080159ec 	.word	0x080159ec
 800b5f8:	08015a00 	.word	0x08015a00
 800b5fc:	200003a4 	.word	0x200003a4

0800b600 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800b600:	b480      	push	{r7}
 800b602:	b085      	sub	sp, #20
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
 800b608:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d01e      	beq.n	800b64e <udp_netif_ip_addr_changed+0x4e>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d01a      	beq.n	800b64e <udp_netif_ip_addr_changed+0x4e>
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d017      	beq.n	800b64e <udp_netif_ip_addr_changed+0x4e>
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d013      	beq.n	800b64e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b626:	4b0c      	ldr	r3, [pc, #48]	; (800b658 <udp_netif_ip_addr_changed+0x58>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	60fb      	str	r3, [r7, #12]
 800b62c:	e00c      	b.n	800b648 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681a      	ldr	r2, [r3, #0]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	429a      	cmp	r2, r3
 800b638:	d103      	bne.n	800b642 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	681a      	ldr	r2, [r3, #0]
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	68db      	ldr	r3, [r3, #12]
 800b646:	60fb      	str	r3, [r7, #12]
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d1ef      	bne.n	800b62e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800b64e:	bf00      	nop
 800b650:	3714      	adds	r7, #20
 800b652:	46bd      	mov	sp, r7
 800b654:	bc80      	pop	{r7}
 800b656:	4770      	bx	lr
 800b658:	200038dc 	.word	0x200038dc

0800b65c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b082      	sub	sp, #8
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800b664:	4915      	ldr	r1, [pc, #84]	; (800b6bc <etharp_free_entry+0x60>)
 800b666:	687a      	ldr	r2, [r7, #4]
 800b668:	4613      	mov	r3, r2
 800b66a:	005b      	lsls	r3, r3, #1
 800b66c:	4413      	add	r3, r2
 800b66e:	00db      	lsls	r3, r3, #3
 800b670:	440b      	add	r3, r1
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d013      	beq.n	800b6a0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800b678:	4910      	ldr	r1, [pc, #64]	; (800b6bc <etharp_free_entry+0x60>)
 800b67a:	687a      	ldr	r2, [r7, #4]
 800b67c:	4613      	mov	r3, r2
 800b67e:	005b      	lsls	r3, r3, #1
 800b680:	4413      	add	r3, r2
 800b682:	00db      	lsls	r3, r3, #3
 800b684:	440b      	add	r3, r1
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	4618      	mov	r0, r3
 800b68a:	f7fa f95d 	bl	8005948 <pbuf_free>
    arp_table[i].q = NULL;
 800b68e:	490b      	ldr	r1, [pc, #44]	; (800b6bc <etharp_free_entry+0x60>)
 800b690:	687a      	ldr	r2, [r7, #4]
 800b692:	4613      	mov	r3, r2
 800b694:	005b      	lsls	r3, r3, #1
 800b696:	4413      	add	r3, r2
 800b698:	00db      	lsls	r3, r3, #3
 800b69a:	440b      	add	r3, r1
 800b69c:	2200      	movs	r2, #0
 800b69e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800b6a0:	4906      	ldr	r1, [pc, #24]	; (800b6bc <etharp_free_entry+0x60>)
 800b6a2:	687a      	ldr	r2, [r7, #4]
 800b6a4:	4613      	mov	r3, r2
 800b6a6:	005b      	lsls	r3, r3, #1
 800b6a8:	4413      	add	r3, r2
 800b6aa:	00db      	lsls	r3, r3, #3
 800b6ac:	440b      	add	r3, r1
 800b6ae:	3314      	adds	r3, #20
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800b6b4:	bf00      	nop
 800b6b6:	3708      	adds	r7, #8
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	20000270 	.word	0x20000270

0800b6c0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b082      	sub	sp, #8
 800b6c4:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	71fb      	strb	r3, [r7, #7]
 800b6ca:	e096      	b.n	800b7fa <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800b6cc:	79fa      	ldrb	r2, [r7, #7]
 800b6ce:	494f      	ldr	r1, [pc, #316]	; (800b80c <etharp_tmr+0x14c>)
 800b6d0:	4613      	mov	r3, r2
 800b6d2:	005b      	lsls	r3, r3, #1
 800b6d4:	4413      	add	r3, r2
 800b6d6:	00db      	lsls	r3, r3, #3
 800b6d8:	440b      	add	r3, r1
 800b6da:	3314      	adds	r3, #20
 800b6dc:	781b      	ldrb	r3, [r3, #0]
 800b6de:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800b6e0:	79bb      	ldrb	r3, [r7, #6]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	f000 8086 	beq.w	800b7f4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800b6e8:	79fa      	ldrb	r2, [r7, #7]
 800b6ea:	4948      	ldr	r1, [pc, #288]	; (800b80c <etharp_tmr+0x14c>)
 800b6ec:	4613      	mov	r3, r2
 800b6ee:	005b      	lsls	r3, r3, #1
 800b6f0:	4413      	add	r3, r2
 800b6f2:	00db      	lsls	r3, r3, #3
 800b6f4:	440b      	add	r3, r1
 800b6f6:	3312      	adds	r3, #18
 800b6f8:	881b      	ldrh	r3, [r3, #0]
 800b6fa:	3301      	adds	r3, #1
 800b6fc:	b298      	uxth	r0, r3
 800b6fe:	4943      	ldr	r1, [pc, #268]	; (800b80c <etharp_tmr+0x14c>)
 800b700:	4613      	mov	r3, r2
 800b702:	005b      	lsls	r3, r3, #1
 800b704:	4413      	add	r3, r2
 800b706:	00db      	lsls	r3, r3, #3
 800b708:	440b      	add	r3, r1
 800b70a:	3312      	adds	r3, #18
 800b70c:	4602      	mov	r2, r0
 800b70e:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b710:	79fa      	ldrb	r2, [r7, #7]
 800b712:	493e      	ldr	r1, [pc, #248]	; (800b80c <etharp_tmr+0x14c>)
 800b714:	4613      	mov	r3, r2
 800b716:	005b      	lsls	r3, r3, #1
 800b718:	4413      	add	r3, r2
 800b71a:	00db      	lsls	r3, r3, #3
 800b71c:	440b      	add	r3, r1
 800b71e:	3312      	adds	r3, #18
 800b720:	881b      	ldrh	r3, [r3, #0]
 800b722:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800b726:	d215      	bcs.n	800b754 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b728:	79fa      	ldrb	r2, [r7, #7]
 800b72a:	4938      	ldr	r1, [pc, #224]	; (800b80c <etharp_tmr+0x14c>)
 800b72c:	4613      	mov	r3, r2
 800b72e:	005b      	lsls	r3, r3, #1
 800b730:	4413      	add	r3, r2
 800b732:	00db      	lsls	r3, r3, #3
 800b734:	440b      	add	r3, r1
 800b736:	3314      	adds	r3, #20
 800b738:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b73a:	2b01      	cmp	r3, #1
 800b73c:	d10f      	bne.n	800b75e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800b73e:	79fa      	ldrb	r2, [r7, #7]
 800b740:	4932      	ldr	r1, [pc, #200]	; (800b80c <etharp_tmr+0x14c>)
 800b742:	4613      	mov	r3, r2
 800b744:	005b      	lsls	r3, r3, #1
 800b746:	4413      	add	r3, r2
 800b748:	00db      	lsls	r3, r3, #3
 800b74a:	440b      	add	r3, r1
 800b74c:	3312      	adds	r3, #18
 800b74e:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b750:	2b04      	cmp	r3, #4
 800b752:	d904      	bls.n	800b75e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800b754:	79fb      	ldrb	r3, [r7, #7]
 800b756:	4618      	mov	r0, r3
 800b758:	f7ff ff80 	bl	800b65c <etharp_free_entry>
 800b75c:	e04a      	b.n	800b7f4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800b75e:	79fa      	ldrb	r2, [r7, #7]
 800b760:	492a      	ldr	r1, [pc, #168]	; (800b80c <etharp_tmr+0x14c>)
 800b762:	4613      	mov	r3, r2
 800b764:	005b      	lsls	r3, r3, #1
 800b766:	4413      	add	r3, r2
 800b768:	00db      	lsls	r3, r3, #3
 800b76a:	440b      	add	r3, r1
 800b76c:	3314      	adds	r3, #20
 800b76e:	781b      	ldrb	r3, [r3, #0]
 800b770:	2b03      	cmp	r3, #3
 800b772:	d10a      	bne.n	800b78a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800b774:	79fa      	ldrb	r2, [r7, #7]
 800b776:	4925      	ldr	r1, [pc, #148]	; (800b80c <etharp_tmr+0x14c>)
 800b778:	4613      	mov	r3, r2
 800b77a:	005b      	lsls	r3, r3, #1
 800b77c:	4413      	add	r3, r2
 800b77e:	00db      	lsls	r3, r3, #3
 800b780:	440b      	add	r3, r1
 800b782:	3314      	adds	r3, #20
 800b784:	2204      	movs	r2, #4
 800b786:	701a      	strb	r2, [r3, #0]
 800b788:	e034      	b.n	800b7f4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800b78a:	79fa      	ldrb	r2, [r7, #7]
 800b78c:	491f      	ldr	r1, [pc, #124]	; (800b80c <etharp_tmr+0x14c>)
 800b78e:	4613      	mov	r3, r2
 800b790:	005b      	lsls	r3, r3, #1
 800b792:	4413      	add	r3, r2
 800b794:	00db      	lsls	r3, r3, #3
 800b796:	440b      	add	r3, r1
 800b798:	3314      	adds	r3, #20
 800b79a:	781b      	ldrb	r3, [r3, #0]
 800b79c:	2b04      	cmp	r3, #4
 800b79e:	d10a      	bne.n	800b7b6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800b7a0:	79fa      	ldrb	r2, [r7, #7]
 800b7a2:	491a      	ldr	r1, [pc, #104]	; (800b80c <etharp_tmr+0x14c>)
 800b7a4:	4613      	mov	r3, r2
 800b7a6:	005b      	lsls	r3, r3, #1
 800b7a8:	4413      	add	r3, r2
 800b7aa:	00db      	lsls	r3, r3, #3
 800b7ac:	440b      	add	r3, r1
 800b7ae:	3314      	adds	r3, #20
 800b7b0:	2202      	movs	r2, #2
 800b7b2:	701a      	strb	r2, [r3, #0]
 800b7b4:	e01e      	b.n	800b7f4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800b7b6:	79fa      	ldrb	r2, [r7, #7]
 800b7b8:	4914      	ldr	r1, [pc, #80]	; (800b80c <etharp_tmr+0x14c>)
 800b7ba:	4613      	mov	r3, r2
 800b7bc:	005b      	lsls	r3, r3, #1
 800b7be:	4413      	add	r3, r2
 800b7c0:	00db      	lsls	r3, r3, #3
 800b7c2:	440b      	add	r3, r1
 800b7c4:	3314      	adds	r3, #20
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	d113      	bne.n	800b7f4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800b7cc:	79fa      	ldrb	r2, [r7, #7]
 800b7ce:	490f      	ldr	r1, [pc, #60]	; (800b80c <etharp_tmr+0x14c>)
 800b7d0:	4613      	mov	r3, r2
 800b7d2:	005b      	lsls	r3, r3, #1
 800b7d4:	4413      	add	r3, r2
 800b7d6:	00db      	lsls	r3, r3, #3
 800b7d8:	440b      	add	r3, r1
 800b7da:	3308      	adds	r3, #8
 800b7dc:	6818      	ldr	r0, [r3, #0]
 800b7de:	79fa      	ldrb	r2, [r7, #7]
 800b7e0:	4613      	mov	r3, r2
 800b7e2:	005b      	lsls	r3, r3, #1
 800b7e4:	4413      	add	r3, r2
 800b7e6:	00db      	lsls	r3, r3, #3
 800b7e8:	4a08      	ldr	r2, [pc, #32]	; (800b80c <etharp_tmr+0x14c>)
 800b7ea:	4413      	add	r3, r2
 800b7ec:	3304      	adds	r3, #4
 800b7ee:	4619      	mov	r1, r3
 800b7f0:	f000 fe38 	bl	800c464 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b7f4:	79fb      	ldrb	r3, [r7, #7]
 800b7f6:	3301      	adds	r3, #1
 800b7f8:	71fb      	strb	r3, [r7, #7]
 800b7fa:	79fb      	ldrb	r3, [r7, #7]
 800b7fc:	2b09      	cmp	r3, #9
 800b7fe:	f67f af65 	bls.w	800b6cc <etharp_tmr+0xc>
      }
    }
  }
}
 800b802:	bf00      	nop
 800b804:	3708      	adds	r7, #8
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}
 800b80a:	bf00      	nop
 800b80c:	20000270 	.word	0x20000270

0800b810 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b088      	sub	sp, #32
 800b814:	af00      	add	r7, sp, #0
 800b816:	60f8      	str	r0, [r7, #12]
 800b818:	460b      	mov	r3, r1
 800b81a:	607a      	str	r2, [r7, #4]
 800b81c:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800b81e:	230a      	movs	r3, #10
 800b820:	77fb      	strb	r3, [r7, #31]
 800b822:	230a      	movs	r3, #10
 800b824:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800b826:	230a      	movs	r3, #10
 800b828:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 800b82a:	2300      	movs	r3, #0
 800b82c:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800b82e:	230a      	movs	r3, #10
 800b830:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800b832:	2300      	movs	r3, #0
 800b834:	833b      	strh	r3, [r7, #24]
 800b836:	2300      	movs	r3, #0
 800b838:	82fb      	strh	r3, [r7, #22]
 800b83a:	2300      	movs	r3, #0
 800b83c:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b83e:	2300      	movs	r3, #0
 800b840:	773b      	strb	r3, [r7, #28]
 800b842:	e093      	b.n	800b96c <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800b844:	7f3a      	ldrb	r2, [r7, #28]
 800b846:	4990      	ldr	r1, [pc, #576]	; (800ba88 <etharp_find_entry+0x278>)
 800b848:	4613      	mov	r3, r2
 800b84a:	005b      	lsls	r3, r3, #1
 800b84c:	4413      	add	r3, r2
 800b84e:	00db      	lsls	r3, r3, #3
 800b850:	440b      	add	r3, r1
 800b852:	3314      	adds	r3, #20
 800b854:	781b      	ldrb	r3, [r3, #0]
 800b856:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800b858:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b85c:	2b0a      	cmp	r3, #10
 800b85e:	d105      	bne.n	800b86c <etharp_find_entry+0x5c>
 800b860:	7cfb      	ldrb	r3, [r7, #19]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d102      	bne.n	800b86c <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800b866:	7f3b      	ldrb	r3, [r7, #28]
 800b868:	777b      	strb	r3, [r7, #29]
 800b86a:	e07c      	b.n	800b966 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 800b86c:	7cfb      	ldrb	r3, [r7, #19]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d079      	beq.n	800b966 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800b872:	7cfb      	ldrb	r3, [r7, #19]
 800b874:	2b01      	cmp	r3, #1
 800b876:	d009      	beq.n	800b88c <etharp_find_entry+0x7c>
 800b878:	7cfb      	ldrb	r3, [r7, #19]
 800b87a:	2b01      	cmp	r3, #1
 800b87c:	d806      	bhi.n	800b88c <etharp_find_entry+0x7c>
 800b87e:	4b83      	ldr	r3, [pc, #524]	; (800ba8c <etharp_find_entry+0x27c>)
 800b880:	f44f 7293 	mov.w	r2, #294	; 0x126
 800b884:	4982      	ldr	r1, [pc, #520]	; (800ba90 <etharp_find_entry+0x280>)
 800b886:	4883      	ldr	r0, [pc, #524]	; (800ba94 <etharp_find_entry+0x284>)
 800b888:	f005 f9c0 	bl	8010c0c <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d00f      	beq.n	800b8b2 <etharp_find_entry+0xa2>
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	6819      	ldr	r1, [r3, #0]
 800b896:	7f3a      	ldrb	r2, [r7, #28]
 800b898:	487b      	ldr	r0, [pc, #492]	; (800ba88 <etharp_find_entry+0x278>)
 800b89a:	4613      	mov	r3, r2
 800b89c:	005b      	lsls	r3, r3, #1
 800b89e:	4413      	add	r3, r2
 800b8a0:	00db      	lsls	r3, r3, #3
 800b8a2:	4403      	add	r3, r0
 800b8a4:	3304      	adds	r3, #4
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	4299      	cmp	r1, r3
 800b8aa:	d102      	bne.n	800b8b2 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800b8ac:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800b8b0:	e0e5      	b.n	800ba7e <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800b8b2:	7cfb      	ldrb	r3, [r7, #19]
 800b8b4:	2b01      	cmp	r3, #1
 800b8b6:	d13b      	bne.n	800b930 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800b8b8:	7f3a      	ldrb	r2, [r7, #28]
 800b8ba:	4973      	ldr	r1, [pc, #460]	; (800ba88 <etharp_find_entry+0x278>)
 800b8bc:	4613      	mov	r3, r2
 800b8be:	005b      	lsls	r3, r3, #1
 800b8c0:	4413      	add	r3, r2
 800b8c2:	00db      	lsls	r3, r3, #3
 800b8c4:	440b      	add	r3, r1
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d018      	beq.n	800b8fe <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 800b8cc:	7f3a      	ldrb	r2, [r7, #28]
 800b8ce:	496e      	ldr	r1, [pc, #440]	; (800ba88 <etharp_find_entry+0x278>)
 800b8d0:	4613      	mov	r3, r2
 800b8d2:	005b      	lsls	r3, r3, #1
 800b8d4:	4413      	add	r3, r2
 800b8d6:	00db      	lsls	r3, r3, #3
 800b8d8:	440b      	add	r3, r1
 800b8da:	3312      	adds	r3, #18
 800b8dc:	881b      	ldrh	r3, [r3, #0]
 800b8de:	8b3a      	ldrh	r2, [r7, #24]
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	d840      	bhi.n	800b966 <etharp_find_entry+0x156>
            old_queue = i;
 800b8e4:	7f3b      	ldrb	r3, [r7, #28]
 800b8e6:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800b8e8:	7f3a      	ldrb	r2, [r7, #28]
 800b8ea:	4967      	ldr	r1, [pc, #412]	; (800ba88 <etharp_find_entry+0x278>)
 800b8ec:	4613      	mov	r3, r2
 800b8ee:	005b      	lsls	r3, r3, #1
 800b8f0:	4413      	add	r3, r2
 800b8f2:	00db      	lsls	r3, r3, #3
 800b8f4:	440b      	add	r3, r1
 800b8f6:	3312      	adds	r3, #18
 800b8f8:	881b      	ldrh	r3, [r3, #0]
 800b8fa:	833b      	strh	r3, [r7, #24]
 800b8fc:	e033      	b.n	800b966 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800b8fe:	7f3a      	ldrb	r2, [r7, #28]
 800b900:	4961      	ldr	r1, [pc, #388]	; (800ba88 <etharp_find_entry+0x278>)
 800b902:	4613      	mov	r3, r2
 800b904:	005b      	lsls	r3, r3, #1
 800b906:	4413      	add	r3, r2
 800b908:	00db      	lsls	r3, r3, #3
 800b90a:	440b      	add	r3, r1
 800b90c:	3312      	adds	r3, #18
 800b90e:	881b      	ldrh	r3, [r3, #0]
 800b910:	8afa      	ldrh	r2, [r7, #22]
 800b912:	429a      	cmp	r2, r3
 800b914:	d827      	bhi.n	800b966 <etharp_find_entry+0x156>
            old_pending = i;
 800b916:	7f3b      	ldrb	r3, [r7, #28]
 800b918:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 800b91a:	7f3a      	ldrb	r2, [r7, #28]
 800b91c:	495a      	ldr	r1, [pc, #360]	; (800ba88 <etharp_find_entry+0x278>)
 800b91e:	4613      	mov	r3, r2
 800b920:	005b      	lsls	r3, r3, #1
 800b922:	4413      	add	r3, r2
 800b924:	00db      	lsls	r3, r3, #3
 800b926:	440b      	add	r3, r1
 800b928:	3312      	adds	r3, #18
 800b92a:	881b      	ldrh	r3, [r3, #0]
 800b92c:	82fb      	strh	r3, [r7, #22]
 800b92e:	e01a      	b.n	800b966 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800b930:	7cfb      	ldrb	r3, [r7, #19]
 800b932:	2b01      	cmp	r3, #1
 800b934:	d917      	bls.n	800b966 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800b936:	7f3a      	ldrb	r2, [r7, #28]
 800b938:	4953      	ldr	r1, [pc, #332]	; (800ba88 <etharp_find_entry+0x278>)
 800b93a:	4613      	mov	r3, r2
 800b93c:	005b      	lsls	r3, r3, #1
 800b93e:	4413      	add	r3, r2
 800b940:	00db      	lsls	r3, r3, #3
 800b942:	440b      	add	r3, r1
 800b944:	3312      	adds	r3, #18
 800b946:	881b      	ldrh	r3, [r3, #0]
 800b948:	8aba      	ldrh	r2, [r7, #20]
 800b94a:	429a      	cmp	r2, r3
 800b94c:	d80b      	bhi.n	800b966 <etharp_find_entry+0x156>
            old_stable = i;
 800b94e:	7f3b      	ldrb	r3, [r7, #28]
 800b950:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800b952:	7f3a      	ldrb	r2, [r7, #28]
 800b954:	494c      	ldr	r1, [pc, #304]	; (800ba88 <etharp_find_entry+0x278>)
 800b956:	4613      	mov	r3, r2
 800b958:	005b      	lsls	r3, r3, #1
 800b95a:	4413      	add	r3, r2
 800b95c:	00db      	lsls	r3, r3, #3
 800b95e:	440b      	add	r3, r1
 800b960:	3312      	adds	r3, #18
 800b962:	881b      	ldrh	r3, [r3, #0]
 800b964:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b966:	7f3b      	ldrb	r3, [r7, #28]
 800b968:	3301      	adds	r3, #1
 800b96a:	773b      	strb	r3, [r7, #28]
 800b96c:	7f3b      	ldrb	r3, [r7, #28]
 800b96e:	2b09      	cmp	r3, #9
 800b970:	f67f af68 	bls.w	800b844 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800b974:	7afb      	ldrb	r3, [r7, #11]
 800b976:	f003 0302 	and.w	r3, r3, #2
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d108      	bne.n	800b990 <etharp_find_entry+0x180>
 800b97e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b982:	2b0a      	cmp	r3, #10
 800b984:	d107      	bne.n	800b996 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800b986:	7afb      	ldrb	r3, [r7, #11]
 800b988:	f003 0301 	and.w	r3, r3, #1
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d102      	bne.n	800b996 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800b990:	f04f 33ff 	mov.w	r3, #4294967295
 800b994:	e073      	b.n	800ba7e <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800b996:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b99a:	2b09      	cmp	r3, #9
 800b99c:	dc02      	bgt.n	800b9a4 <etharp_find_entry+0x194>
    i = empty;
 800b99e:	7f7b      	ldrb	r3, [r7, #29]
 800b9a0:	773b      	strb	r3, [r7, #28]
 800b9a2:	e036      	b.n	800ba12 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800b9a4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800b9a8:	2b09      	cmp	r3, #9
 800b9aa:	dc13      	bgt.n	800b9d4 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 800b9ac:	7fbb      	ldrb	r3, [r7, #30]
 800b9ae:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800b9b0:	7f3a      	ldrb	r2, [r7, #28]
 800b9b2:	4935      	ldr	r1, [pc, #212]	; (800ba88 <etharp_find_entry+0x278>)
 800b9b4:	4613      	mov	r3, r2
 800b9b6:	005b      	lsls	r3, r3, #1
 800b9b8:	4413      	add	r3, r2
 800b9ba:	00db      	lsls	r3, r3, #3
 800b9bc:	440b      	add	r3, r1
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d018      	beq.n	800b9f6 <etharp_find_entry+0x1e6>
 800b9c4:	4b31      	ldr	r3, [pc, #196]	; (800ba8c <etharp_find_entry+0x27c>)
 800b9c6:	f240 126f 	movw	r2, #367	; 0x16f
 800b9ca:	4933      	ldr	r1, [pc, #204]	; (800ba98 <etharp_find_entry+0x288>)
 800b9cc:	4831      	ldr	r0, [pc, #196]	; (800ba94 <etharp_find_entry+0x284>)
 800b9ce:	f005 f91d 	bl	8010c0c <iprintf>
 800b9d2:	e010      	b.n	800b9f6 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800b9d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b9d8:	2b09      	cmp	r3, #9
 800b9da:	dc02      	bgt.n	800b9e2 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 800b9dc:	7ffb      	ldrb	r3, [r7, #31]
 800b9de:	773b      	strb	r3, [r7, #28]
 800b9e0:	e009      	b.n	800b9f6 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800b9e2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b9e6:	2b09      	cmp	r3, #9
 800b9e8:	dc02      	bgt.n	800b9f0 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800b9ea:	7efb      	ldrb	r3, [r7, #27]
 800b9ec:	773b      	strb	r3, [r7, #28]
 800b9ee:	e002      	b.n	800b9f6 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800b9f0:	f04f 33ff 	mov.w	r3, #4294967295
 800b9f4:	e043      	b.n	800ba7e <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b9f6:	7f3b      	ldrb	r3, [r7, #28]
 800b9f8:	2b09      	cmp	r3, #9
 800b9fa:	d906      	bls.n	800ba0a <etharp_find_entry+0x1fa>
 800b9fc:	4b23      	ldr	r3, [pc, #140]	; (800ba8c <etharp_find_entry+0x27c>)
 800b9fe:	f240 1281 	movw	r2, #385	; 0x181
 800ba02:	4926      	ldr	r1, [pc, #152]	; (800ba9c <etharp_find_entry+0x28c>)
 800ba04:	4823      	ldr	r0, [pc, #140]	; (800ba94 <etharp_find_entry+0x284>)
 800ba06:	f005 f901 	bl	8010c0c <iprintf>
    etharp_free_entry(i);
 800ba0a:	7f3b      	ldrb	r3, [r7, #28]
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f7ff fe25 	bl	800b65c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ba12:	7f3b      	ldrb	r3, [r7, #28]
 800ba14:	2b09      	cmp	r3, #9
 800ba16:	d906      	bls.n	800ba26 <etharp_find_entry+0x216>
 800ba18:	4b1c      	ldr	r3, [pc, #112]	; (800ba8c <etharp_find_entry+0x27c>)
 800ba1a:	f240 1285 	movw	r2, #389	; 0x185
 800ba1e:	491f      	ldr	r1, [pc, #124]	; (800ba9c <etharp_find_entry+0x28c>)
 800ba20:	481c      	ldr	r0, [pc, #112]	; (800ba94 <etharp_find_entry+0x284>)
 800ba22:	f005 f8f3 	bl	8010c0c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800ba26:	7f3a      	ldrb	r2, [r7, #28]
 800ba28:	4917      	ldr	r1, [pc, #92]	; (800ba88 <etharp_find_entry+0x278>)
 800ba2a:	4613      	mov	r3, r2
 800ba2c:	005b      	lsls	r3, r3, #1
 800ba2e:	4413      	add	r3, r2
 800ba30:	00db      	lsls	r3, r3, #3
 800ba32:	440b      	add	r3, r1
 800ba34:	3314      	adds	r3, #20
 800ba36:	781b      	ldrb	r3, [r3, #0]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d006      	beq.n	800ba4a <etharp_find_entry+0x23a>
 800ba3c:	4b13      	ldr	r3, [pc, #76]	; (800ba8c <etharp_find_entry+0x27c>)
 800ba3e:	f240 1287 	movw	r2, #391	; 0x187
 800ba42:	4917      	ldr	r1, [pc, #92]	; (800baa0 <etharp_find_entry+0x290>)
 800ba44:	4813      	ldr	r0, [pc, #76]	; (800ba94 <etharp_find_entry+0x284>)
 800ba46:	f005 f8e1 	bl	8010c0c <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d00a      	beq.n	800ba66 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800ba50:	7f3a      	ldrb	r2, [r7, #28]
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	6819      	ldr	r1, [r3, #0]
 800ba56:	480c      	ldr	r0, [pc, #48]	; (800ba88 <etharp_find_entry+0x278>)
 800ba58:	4613      	mov	r3, r2
 800ba5a:	005b      	lsls	r3, r3, #1
 800ba5c:	4413      	add	r3, r2
 800ba5e:	00db      	lsls	r3, r3, #3
 800ba60:	4403      	add	r3, r0
 800ba62:	3304      	adds	r3, #4
 800ba64:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800ba66:	7f3a      	ldrb	r2, [r7, #28]
 800ba68:	4907      	ldr	r1, [pc, #28]	; (800ba88 <etharp_find_entry+0x278>)
 800ba6a:	4613      	mov	r3, r2
 800ba6c:	005b      	lsls	r3, r3, #1
 800ba6e:	4413      	add	r3, r2
 800ba70:	00db      	lsls	r3, r3, #3
 800ba72:	440b      	add	r3, r1
 800ba74:	3312      	adds	r3, #18
 800ba76:	2200      	movs	r2, #0
 800ba78:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800ba7a:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3720      	adds	r7, #32
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}
 800ba86:	bf00      	nop
 800ba88:	20000270 	.word	0x20000270
 800ba8c:	08015a58 	.word	0x08015a58
 800ba90:	08015a90 	.word	0x08015a90
 800ba94:	08015ad0 	.word	0x08015ad0
 800ba98:	08015af8 	.word	0x08015af8
 800ba9c:	08015b10 	.word	0x08015b10
 800baa0:	08015b24 	.word	0x08015b24

0800baa4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b088      	sub	sp, #32
 800baa8:	af02      	add	r7, sp, #8
 800baaa:	60f8      	str	r0, [r7, #12]
 800baac:	60b9      	str	r1, [r7, #8]
 800baae:	607a      	str	r2, [r7, #4]
 800bab0:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bab8:	2b06      	cmp	r3, #6
 800baba:	d006      	beq.n	800baca <etharp_update_arp_entry+0x26>
 800babc:	4b48      	ldr	r3, [pc, #288]	; (800bbe0 <etharp_update_arp_entry+0x13c>)
 800babe:	f240 12ab 	movw	r2, #427	; 0x1ab
 800bac2:	4948      	ldr	r1, [pc, #288]	; (800bbe4 <etharp_update_arp_entry+0x140>)
 800bac4:	4848      	ldr	r0, [pc, #288]	; (800bbe8 <etharp_update_arp_entry+0x144>)
 800bac6:	f005 f8a1 	bl	8010c0c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d012      	beq.n	800baf6 <etharp_update_arp_entry+0x52>
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d00e      	beq.n	800baf6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	68f9      	ldr	r1, [r7, #12]
 800bade:	4618      	mov	r0, r3
 800bae0:	f001 f8da 	bl	800cc98 <ip4_addr_isbroadcast_u32>
 800bae4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d105      	bne.n	800baf6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800baf2:	2be0      	cmp	r3, #224	; 0xe0
 800baf4:	d102      	bne.n	800bafc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800baf6:	f06f 030f 	mvn.w	r3, #15
 800bafa:	e06c      	b.n	800bbd6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800bafc:	78fb      	ldrb	r3, [r7, #3]
 800bafe:	68fa      	ldr	r2, [r7, #12]
 800bb00:	4619      	mov	r1, r3
 800bb02:	68b8      	ldr	r0, [r7, #8]
 800bb04:	f7ff fe84 	bl	800b810 <etharp_find_entry>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 800bb0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	da02      	bge.n	800bb1a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800bb14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bb18:	e05d      	b.n	800bbd6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800bb1a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bb1e:	4933      	ldr	r1, [pc, #204]	; (800bbec <etharp_update_arp_entry+0x148>)
 800bb20:	4613      	mov	r3, r2
 800bb22:	005b      	lsls	r3, r3, #1
 800bb24:	4413      	add	r3, r2
 800bb26:	00db      	lsls	r3, r3, #3
 800bb28:	440b      	add	r3, r1
 800bb2a:	3314      	adds	r3, #20
 800bb2c:	2202      	movs	r2, #2
 800bb2e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800bb30:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bb34:	492d      	ldr	r1, [pc, #180]	; (800bbec <etharp_update_arp_entry+0x148>)
 800bb36:	4613      	mov	r3, r2
 800bb38:	005b      	lsls	r3, r3, #1
 800bb3a:	4413      	add	r3, r2
 800bb3c:	00db      	lsls	r3, r3, #3
 800bb3e:	440b      	add	r3, r1
 800bb40:	3308      	adds	r3, #8
 800bb42:	68fa      	ldr	r2, [r7, #12]
 800bb44:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800bb46:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bb4a:	4613      	mov	r3, r2
 800bb4c:	005b      	lsls	r3, r3, #1
 800bb4e:	4413      	add	r3, r2
 800bb50:	00db      	lsls	r3, r3, #3
 800bb52:	3308      	adds	r3, #8
 800bb54:	4a25      	ldr	r2, [pc, #148]	; (800bbec <etharp_update_arp_entry+0x148>)
 800bb56:	4413      	add	r3, r2
 800bb58:	3304      	adds	r3, #4
 800bb5a:	2206      	movs	r2, #6
 800bb5c:	6879      	ldr	r1, [r7, #4]
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f004 fa11 	bl	800ff86 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800bb64:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bb68:	4920      	ldr	r1, [pc, #128]	; (800bbec <etharp_update_arp_entry+0x148>)
 800bb6a:	4613      	mov	r3, r2
 800bb6c:	005b      	lsls	r3, r3, #1
 800bb6e:	4413      	add	r3, r2
 800bb70:	00db      	lsls	r3, r3, #3
 800bb72:	440b      	add	r3, r1
 800bb74:	3312      	adds	r3, #18
 800bb76:	2200      	movs	r2, #0
 800bb78:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800bb7a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bb7e:	491b      	ldr	r1, [pc, #108]	; (800bbec <etharp_update_arp_entry+0x148>)
 800bb80:	4613      	mov	r3, r2
 800bb82:	005b      	lsls	r3, r3, #1
 800bb84:	4413      	add	r3, r2
 800bb86:	00db      	lsls	r3, r3, #3
 800bb88:	440b      	add	r3, r1
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d021      	beq.n	800bbd4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800bb90:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bb94:	4915      	ldr	r1, [pc, #84]	; (800bbec <etharp_update_arp_entry+0x148>)
 800bb96:	4613      	mov	r3, r2
 800bb98:	005b      	lsls	r3, r3, #1
 800bb9a:	4413      	add	r3, r2
 800bb9c:	00db      	lsls	r3, r3, #3
 800bb9e:	440b      	add	r3, r1
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800bba4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bba8:	4910      	ldr	r1, [pc, #64]	; (800bbec <etharp_update_arp_entry+0x148>)
 800bbaa:	4613      	mov	r3, r2
 800bbac:	005b      	lsls	r3, r3, #1
 800bbae:	4413      	add	r3, r2
 800bbb0:	00db      	lsls	r3, r3, #3
 800bbb2:	440b      	add	r3, r1
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800bbbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bbc2:	9300      	str	r3, [sp, #0]
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6939      	ldr	r1, [r7, #16]
 800bbc8:	68f8      	ldr	r0, [r7, #12]
 800bbca:	f001 ff05 	bl	800d9d8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800bbce:	6938      	ldr	r0, [r7, #16]
 800bbd0:	f7f9 feba 	bl	8005948 <pbuf_free>
  }
  return ERR_OK;
 800bbd4:	2300      	movs	r3, #0
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3718      	adds	r7, #24
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}
 800bbde:	bf00      	nop
 800bbe0:	08015a58 	.word	0x08015a58
 800bbe4:	08015b50 	.word	0x08015b50
 800bbe8:	08015ad0 	.word	0x08015ad0
 800bbec:	20000270 	.word	0x20000270

0800bbf0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b084      	sub	sp, #16
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	73fb      	strb	r3, [r7, #15]
 800bbfc:	e01f      	b.n	800bc3e <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 800bbfe:	7bfa      	ldrb	r2, [r7, #15]
 800bc00:	4912      	ldr	r1, [pc, #72]	; (800bc4c <etharp_cleanup_netif+0x5c>)
 800bc02:	4613      	mov	r3, r2
 800bc04:	005b      	lsls	r3, r3, #1
 800bc06:	4413      	add	r3, r2
 800bc08:	00db      	lsls	r3, r3, #3
 800bc0a:	440b      	add	r3, r1
 800bc0c:	3314      	adds	r3, #20
 800bc0e:	781b      	ldrb	r3, [r3, #0]
 800bc10:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800bc12:	7bbb      	ldrb	r3, [r7, #14]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d00f      	beq.n	800bc38 <etharp_cleanup_netif+0x48>
 800bc18:	7bfa      	ldrb	r2, [r7, #15]
 800bc1a:	490c      	ldr	r1, [pc, #48]	; (800bc4c <etharp_cleanup_netif+0x5c>)
 800bc1c:	4613      	mov	r3, r2
 800bc1e:	005b      	lsls	r3, r3, #1
 800bc20:	4413      	add	r3, r2
 800bc22:	00db      	lsls	r3, r3, #3
 800bc24:	440b      	add	r3, r1
 800bc26:	3308      	adds	r3, #8
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	687a      	ldr	r2, [r7, #4]
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	d103      	bne.n	800bc38 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 800bc30:	7bfb      	ldrb	r3, [r7, #15]
 800bc32:	4618      	mov	r0, r3
 800bc34:	f7ff fd12 	bl	800b65c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bc38:	7bfb      	ldrb	r3, [r7, #15]
 800bc3a:	3301      	adds	r3, #1
 800bc3c:	73fb      	strb	r3, [r7, #15]
 800bc3e:	7bfb      	ldrb	r3, [r7, #15]
 800bc40:	2b09      	cmp	r3, #9
 800bc42:	d9dc      	bls.n	800bbfe <etharp_cleanup_netif+0xe>
    }
  }
}
 800bc44:	bf00      	nop
 800bc46:	3710      	adds	r7, #16
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}
 800bc4c:	20000270 	.word	0x20000270

0800bc50 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800bc50:	b5b0      	push	{r4, r5, r7, lr}
 800bc52:	b08a      	sub	sp, #40	; 0x28
 800bc54:	af04      	add	r7, sp, #16
 800bc56:	6078      	str	r0, [r7, #4]
 800bc58:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d107      	bne.n	800bc70 <etharp_input+0x20>
 800bc60:	4b3d      	ldr	r3, [pc, #244]	; (800bd58 <etharp_input+0x108>)
 800bc62:	f44f 7222 	mov.w	r2, #648	; 0x288
 800bc66:	493d      	ldr	r1, [pc, #244]	; (800bd5c <etharp_input+0x10c>)
 800bc68:	483d      	ldr	r0, [pc, #244]	; (800bd60 <etharp_input+0x110>)
 800bc6a:	f004 ffcf 	bl	8010c0c <iprintf>
 800bc6e:	e06f      	b.n	800bd50 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	685b      	ldr	r3, [r3, #4]
 800bc74:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800bc76:	693b      	ldr	r3, [r7, #16]
 800bc78:	881b      	ldrh	r3, [r3, #0]
 800bc7a:	b29b      	uxth	r3, r3
 800bc7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc80:	d10c      	bne.n	800bc9c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800bc82:	693b      	ldr	r3, [r7, #16]
 800bc84:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800bc86:	2b06      	cmp	r3, #6
 800bc88:	d108      	bne.n	800bc9c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800bc8e:	2b04      	cmp	r3, #4
 800bc90:	d104      	bne.n	800bc9c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	885b      	ldrh	r3, [r3, #2]
 800bc96:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800bc98:	2b08      	cmp	r3, #8
 800bc9a:	d003      	beq.n	800bca4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f7f9 fe53 	bl	8005948 <pbuf_free>
    return;
 800bca2:	e055      	b.n	800bd50 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	330e      	adds	r3, #14
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	3318      	adds	r3, #24
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	3304      	adds	r3, #4
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d102      	bne.n	800bcc4 <etharp_input+0x74>
    for_us = 0;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	75fb      	strb	r3, [r7, #23]
 800bcc2:	e009      	b.n	800bcd8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800bcc4:	68ba      	ldr	r2, [r7, #8]
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	3304      	adds	r3, #4
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	429a      	cmp	r2, r3
 800bcce:	bf0c      	ite	eq
 800bcd0:	2301      	moveq	r3, #1
 800bcd2:	2300      	movne	r3, #0
 800bcd4:	b2db      	uxtb	r3, r3
 800bcd6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800bcd8:	693b      	ldr	r3, [r7, #16]
 800bcda:	f103 0208 	add.w	r2, r3, #8
 800bcde:	7dfb      	ldrb	r3, [r7, #23]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d001      	beq.n	800bce8 <etharp_input+0x98>
 800bce4:	2301      	movs	r3, #1
 800bce6:	e000      	b.n	800bcea <etharp_input+0x9a>
 800bce8:	2302      	movs	r3, #2
 800bcea:	f107 010c 	add.w	r1, r7, #12
 800bcee:	6838      	ldr	r0, [r7, #0]
 800bcf0:	f7ff fed8 	bl	800baa4 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	88db      	ldrh	r3, [r3, #6]
 800bcf8:	b29b      	uxth	r3, r3
 800bcfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcfe:	d003      	beq.n	800bd08 <etharp_input+0xb8>
 800bd00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd04:	d01e      	beq.n	800bd44 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 800bd06:	e020      	b.n	800bd4a <etharp_input+0xfa>
    if (for_us) {
 800bd08:	7dfb      	ldrb	r3, [r7, #23]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d01c      	beq.n	800bd48 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	f103 0529 	add.w	r5, r3, #41	; 0x29
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800bd24:	693a      	ldr	r2, [r7, #16]
 800bd26:	3208      	adds	r2, #8
      etharp_raw(netif,
 800bd28:	2102      	movs	r1, #2
 800bd2a:	9103      	str	r1, [sp, #12]
 800bd2c:	f107 010c 	add.w	r1, r7, #12
 800bd30:	9102      	str	r1, [sp, #8]
 800bd32:	9201      	str	r2, [sp, #4]
 800bd34:	9300      	str	r3, [sp, #0]
 800bd36:	462b      	mov	r3, r5
 800bd38:	4622      	mov	r2, r4
 800bd3a:	4601      	mov	r1, r0
 800bd3c:	6838      	ldr	r0, [r7, #0]
 800bd3e:	f000 fae3 	bl	800c308 <etharp_raw>
    break;
 800bd42:	e001      	b.n	800bd48 <etharp_input+0xf8>
    break;
 800bd44:	bf00      	nop
 800bd46:	e000      	b.n	800bd4a <etharp_input+0xfa>
    break;
 800bd48:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f7f9 fdfc 	bl	8005948 <pbuf_free>
}
 800bd50:	3718      	adds	r7, #24
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bdb0      	pop	{r4, r5, r7, pc}
 800bd56:	bf00      	nop
 800bd58:	08015a58 	.word	0x08015a58
 800bd5c:	08015ba8 	.word	0x08015ba8
 800bd60:	08015ad0 	.word	0x08015ad0

0800bd64 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b086      	sub	sp, #24
 800bd68:	af02      	add	r7, sp, #8
 800bd6a:	60f8      	str	r0, [r7, #12]
 800bd6c:	60b9      	str	r1, [r7, #8]
 800bd6e:	4613      	mov	r3, r2
 800bd70:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800bd72:	79fa      	ldrb	r2, [r7, #7]
 800bd74:	4944      	ldr	r1, [pc, #272]	; (800be88 <etharp_output_to_arp_index+0x124>)
 800bd76:	4613      	mov	r3, r2
 800bd78:	005b      	lsls	r3, r3, #1
 800bd7a:	4413      	add	r3, r2
 800bd7c:	00db      	lsls	r3, r3, #3
 800bd7e:	440b      	add	r3, r1
 800bd80:	3314      	adds	r3, #20
 800bd82:	781b      	ldrb	r3, [r3, #0]
 800bd84:	2b01      	cmp	r3, #1
 800bd86:	d806      	bhi.n	800bd96 <etharp_output_to_arp_index+0x32>
 800bd88:	4b40      	ldr	r3, [pc, #256]	; (800be8c <etharp_output_to_arp_index+0x128>)
 800bd8a:	f240 22ed 	movw	r2, #749	; 0x2ed
 800bd8e:	4940      	ldr	r1, [pc, #256]	; (800be90 <etharp_output_to_arp_index+0x12c>)
 800bd90:	4840      	ldr	r0, [pc, #256]	; (800be94 <etharp_output_to_arp_index+0x130>)
 800bd92:	f004 ff3b 	bl	8010c0c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800bd96:	79fa      	ldrb	r2, [r7, #7]
 800bd98:	493b      	ldr	r1, [pc, #236]	; (800be88 <etharp_output_to_arp_index+0x124>)
 800bd9a:	4613      	mov	r3, r2
 800bd9c:	005b      	lsls	r3, r3, #1
 800bd9e:	4413      	add	r3, r2
 800bda0:	00db      	lsls	r3, r3, #3
 800bda2:	440b      	add	r3, r1
 800bda4:	3314      	adds	r3, #20
 800bda6:	781b      	ldrb	r3, [r3, #0]
 800bda8:	2b02      	cmp	r3, #2
 800bdaa:	d153      	bne.n	800be54 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800bdac:	79fa      	ldrb	r2, [r7, #7]
 800bdae:	4936      	ldr	r1, [pc, #216]	; (800be88 <etharp_output_to_arp_index+0x124>)
 800bdb0:	4613      	mov	r3, r2
 800bdb2:	005b      	lsls	r3, r3, #1
 800bdb4:	4413      	add	r3, r2
 800bdb6:	00db      	lsls	r3, r3, #3
 800bdb8:	440b      	add	r3, r1
 800bdba:	3312      	adds	r3, #18
 800bdbc:	881b      	ldrh	r3, [r3, #0]
 800bdbe:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800bdc2:	d919      	bls.n	800bdf8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800bdc4:	79fa      	ldrb	r2, [r7, #7]
 800bdc6:	4613      	mov	r3, r2
 800bdc8:	005b      	lsls	r3, r3, #1
 800bdca:	4413      	add	r3, r2
 800bdcc:	00db      	lsls	r3, r3, #3
 800bdce:	4a2e      	ldr	r2, [pc, #184]	; (800be88 <etharp_output_to_arp_index+0x124>)
 800bdd0:	4413      	add	r3, r2
 800bdd2:	3304      	adds	r3, #4
 800bdd4:	4619      	mov	r1, r3
 800bdd6:	68f8      	ldr	r0, [r7, #12]
 800bdd8:	f000 fb44 	bl	800c464 <etharp_request>
 800bddc:	4603      	mov	r3, r0
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d138      	bne.n	800be54 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800bde2:	79fa      	ldrb	r2, [r7, #7]
 800bde4:	4928      	ldr	r1, [pc, #160]	; (800be88 <etharp_output_to_arp_index+0x124>)
 800bde6:	4613      	mov	r3, r2
 800bde8:	005b      	lsls	r3, r3, #1
 800bdea:	4413      	add	r3, r2
 800bdec:	00db      	lsls	r3, r3, #3
 800bdee:	440b      	add	r3, r1
 800bdf0:	3314      	adds	r3, #20
 800bdf2:	2203      	movs	r2, #3
 800bdf4:	701a      	strb	r2, [r3, #0]
 800bdf6:	e02d      	b.n	800be54 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800bdf8:	79fa      	ldrb	r2, [r7, #7]
 800bdfa:	4923      	ldr	r1, [pc, #140]	; (800be88 <etharp_output_to_arp_index+0x124>)
 800bdfc:	4613      	mov	r3, r2
 800bdfe:	005b      	lsls	r3, r3, #1
 800be00:	4413      	add	r3, r2
 800be02:	00db      	lsls	r3, r3, #3
 800be04:	440b      	add	r3, r1
 800be06:	3312      	adds	r3, #18
 800be08:	881b      	ldrh	r3, [r3, #0]
 800be0a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800be0e:	d321      	bcc.n	800be54 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800be10:	79fa      	ldrb	r2, [r7, #7]
 800be12:	4613      	mov	r3, r2
 800be14:	005b      	lsls	r3, r3, #1
 800be16:	4413      	add	r3, r2
 800be18:	00db      	lsls	r3, r3, #3
 800be1a:	4a1b      	ldr	r2, [pc, #108]	; (800be88 <etharp_output_to_arp_index+0x124>)
 800be1c:	4413      	add	r3, r2
 800be1e:	1d19      	adds	r1, r3, #4
 800be20:	79fa      	ldrb	r2, [r7, #7]
 800be22:	4613      	mov	r3, r2
 800be24:	005b      	lsls	r3, r3, #1
 800be26:	4413      	add	r3, r2
 800be28:	00db      	lsls	r3, r3, #3
 800be2a:	3308      	adds	r3, #8
 800be2c:	4a16      	ldr	r2, [pc, #88]	; (800be88 <etharp_output_to_arp_index+0x124>)
 800be2e:	4413      	add	r3, r2
 800be30:	3304      	adds	r3, #4
 800be32:	461a      	mov	r2, r3
 800be34:	68f8      	ldr	r0, [r7, #12]
 800be36:	f000 faf3 	bl	800c420 <etharp_request_dst>
 800be3a:	4603      	mov	r3, r0
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d109      	bne.n	800be54 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800be40:	79fa      	ldrb	r2, [r7, #7]
 800be42:	4911      	ldr	r1, [pc, #68]	; (800be88 <etharp_output_to_arp_index+0x124>)
 800be44:	4613      	mov	r3, r2
 800be46:	005b      	lsls	r3, r3, #1
 800be48:	4413      	add	r3, r2
 800be4a:	00db      	lsls	r3, r3, #3
 800be4c:	440b      	add	r3, r1
 800be4e:	3314      	adds	r3, #20
 800be50:	2203      	movs	r2, #3
 800be52:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f103 0129 	add.w	r1, r3, #41	; 0x29
 800be5a:	79fa      	ldrb	r2, [r7, #7]
 800be5c:	4613      	mov	r3, r2
 800be5e:	005b      	lsls	r3, r3, #1
 800be60:	4413      	add	r3, r2
 800be62:	00db      	lsls	r3, r3, #3
 800be64:	3308      	adds	r3, #8
 800be66:	4a08      	ldr	r2, [pc, #32]	; (800be88 <etharp_output_to_arp_index+0x124>)
 800be68:	4413      	add	r3, r2
 800be6a:	1d1a      	adds	r2, r3, #4
 800be6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800be70:	9300      	str	r3, [sp, #0]
 800be72:	4613      	mov	r3, r2
 800be74:	460a      	mov	r2, r1
 800be76:	68b9      	ldr	r1, [r7, #8]
 800be78:	68f8      	ldr	r0, [r7, #12]
 800be7a:	f001 fdad 	bl	800d9d8 <ethernet_output>
 800be7e:	4603      	mov	r3, r0
}
 800be80:	4618      	mov	r0, r3
 800be82:	3710      	adds	r7, #16
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}
 800be88:	20000270 	.word	0x20000270
 800be8c:	08015a58 	.word	0x08015a58
 800be90:	08015bc8 	.word	0x08015bc8
 800be94:	08015ad0 	.word	0x08015ad0

0800be98 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b08a      	sub	sp, #40	; 0x28
 800be9c:	af02      	add	r7, sp, #8
 800be9e:	60f8      	str	r0, [r7, #12]
 800bea0:	60b9      	str	r1, [r7, #8]
 800bea2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d106      	bne.n	800bebc <etharp_output+0x24>
 800beae:	4b69      	ldr	r3, [pc, #420]	; (800c054 <etharp_output+0x1bc>)
 800beb0:	f240 321b 	movw	r2, #795	; 0x31b
 800beb4:	4968      	ldr	r1, [pc, #416]	; (800c058 <etharp_output+0x1c0>)
 800beb6:	4869      	ldr	r0, [pc, #420]	; (800c05c <etharp_output+0x1c4>)
 800beb8:	f004 fea8 	bl	8010c0c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d106      	bne.n	800bed0 <etharp_output+0x38>
 800bec2:	4b64      	ldr	r3, [pc, #400]	; (800c054 <etharp_output+0x1bc>)
 800bec4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800bec8:	4965      	ldr	r1, [pc, #404]	; (800c060 <etharp_output+0x1c8>)
 800beca:	4864      	ldr	r0, [pc, #400]	; (800c05c <etharp_output+0x1c4>)
 800becc:	f004 fe9e 	bl	8010c0c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d106      	bne.n	800bee4 <etharp_output+0x4c>
 800bed6:	4b5f      	ldr	r3, [pc, #380]	; (800c054 <etharp_output+0x1bc>)
 800bed8:	f240 321d 	movw	r2, #797	; 0x31d
 800bedc:	4961      	ldr	r1, [pc, #388]	; (800c064 <etharp_output+0x1cc>)
 800bede:	485f      	ldr	r0, [pc, #380]	; (800c05c <etharp_output+0x1c4>)
 800bee0:	f004 fe94 	bl	8010c0c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	68f9      	ldr	r1, [r7, #12]
 800beea:	4618      	mov	r0, r3
 800beec:	f000 fed4 	bl	800cc98 <ip4_addr_isbroadcast_u32>
 800bef0:	4603      	mov	r3, r0
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d002      	beq.n	800befc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800bef6:	4b5c      	ldr	r3, [pc, #368]	; (800c068 <etharp_output+0x1d0>)
 800bef8:	61fb      	str	r3, [r7, #28]
 800befa:	e09b      	b.n	800c034 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf04:	2be0      	cmp	r3, #224	; 0xe0
 800bf06:	d118      	bne.n	800bf3a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800bf08:	2301      	movs	r3, #1
 800bf0a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800bf10:	235e      	movs	r3, #94	; 0x5e
 800bf12:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	3301      	adds	r3, #1
 800bf18:	781b      	ldrb	r3, [r3, #0]
 800bf1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf1e:	b2db      	uxtb	r3, r3
 800bf20:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	3302      	adds	r3, #2
 800bf26:	781b      	ldrb	r3, [r3, #0]
 800bf28:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	3303      	adds	r3, #3
 800bf2e:	781b      	ldrb	r3, [r3, #0]
 800bf30:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800bf32:	f107 0310 	add.w	r3, r7, #16
 800bf36:	61fb      	str	r3, [r7, #28]
 800bf38:	e07c      	b.n	800c034 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681a      	ldr	r2, [r3, #0]
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	3304      	adds	r3, #4
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	405a      	eors	r2, r3
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	3308      	adds	r3, #8
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	4013      	ands	r3, r2
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d012      	beq.n	800bf78 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800bf58:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	d00b      	beq.n	800bf78 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	330c      	adds	r3, #12
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d003      	beq.n	800bf72 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	330c      	adds	r3, #12
 800bf6e:	61bb      	str	r3, [r7, #24]
 800bf70:	e002      	b.n	800bf78 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800bf72:	f06f 0303 	mvn.w	r3, #3
 800bf76:	e069      	b.n	800c04c <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800bf78:	4b3c      	ldr	r3, [pc, #240]	; (800c06c <etharp_output+0x1d4>)
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	4a3c      	ldr	r2, [pc, #240]	; (800c070 <etharp_output+0x1d8>)
 800bf80:	460b      	mov	r3, r1
 800bf82:	005b      	lsls	r3, r3, #1
 800bf84:	440b      	add	r3, r1
 800bf86:	00db      	lsls	r3, r3, #3
 800bf88:	4413      	add	r3, r2
 800bf8a:	3314      	adds	r3, #20
 800bf8c:	781b      	ldrb	r3, [r3, #0]
 800bf8e:	2b01      	cmp	r3, #1
 800bf90:	d917      	bls.n	800bfc2 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800bf92:	69bb      	ldr	r3, [r7, #24]
 800bf94:	681a      	ldr	r2, [r3, #0]
 800bf96:	4b35      	ldr	r3, [pc, #212]	; (800c06c <etharp_output+0x1d4>)
 800bf98:	781b      	ldrb	r3, [r3, #0]
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	4934      	ldr	r1, [pc, #208]	; (800c070 <etharp_output+0x1d8>)
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	005b      	lsls	r3, r3, #1
 800bfa2:	4403      	add	r3, r0
 800bfa4:	00db      	lsls	r3, r3, #3
 800bfa6:	440b      	add	r3, r1
 800bfa8:	3304      	adds	r3, #4
 800bfaa:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800bfac:	429a      	cmp	r2, r3
 800bfae:	d108      	bne.n	800bfc2 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800bfb0:	4b2e      	ldr	r3, [pc, #184]	; (800c06c <etharp_output+0x1d4>)
 800bfb2:	781b      	ldrb	r3, [r3, #0]
 800bfb4:	461a      	mov	r2, r3
 800bfb6:	68b9      	ldr	r1, [r7, #8]
 800bfb8:	68f8      	ldr	r0, [r7, #12]
 800bfba:	f7ff fed3 	bl	800bd64 <etharp_output_to_arp_index>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	e044      	b.n	800c04c <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	75fb      	strb	r3, [r7, #23]
 800bfc6:	e02a      	b.n	800c01e <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800bfc8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bfcc:	4928      	ldr	r1, [pc, #160]	; (800c070 <etharp_output+0x1d8>)
 800bfce:	4613      	mov	r3, r2
 800bfd0:	005b      	lsls	r3, r3, #1
 800bfd2:	4413      	add	r3, r2
 800bfd4:	00db      	lsls	r3, r3, #3
 800bfd6:	440b      	add	r3, r1
 800bfd8:	3314      	adds	r3, #20
 800bfda:	781b      	ldrb	r3, [r3, #0]
 800bfdc:	2b01      	cmp	r3, #1
 800bfde:	d918      	bls.n	800c012 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800bfe0:	69bb      	ldr	r3, [r7, #24]
 800bfe2:	6819      	ldr	r1, [r3, #0]
 800bfe4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bfe8:	4821      	ldr	r0, [pc, #132]	; (800c070 <etharp_output+0x1d8>)
 800bfea:	4613      	mov	r3, r2
 800bfec:	005b      	lsls	r3, r3, #1
 800bfee:	4413      	add	r3, r2
 800bff0:	00db      	lsls	r3, r3, #3
 800bff2:	4403      	add	r3, r0
 800bff4:	3304      	adds	r3, #4
 800bff6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800bff8:	4299      	cmp	r1, r3
 800bffa:	d10a      	bne.n	800c012 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800bffc:	7dfa      	ldrb	r2, [r7, #23]
 800bffe:	4b1b      	ldr	r3, [pc, #108]	; (800c06c <etharp_output+0x1d4>)
 800c000:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800c002:	7dfb      	ldrb	r3, [r7, #23]
 800c004:	461a      	mov	r2, r3
 800c006:	68b9      	ldr	r1, [r7, #8]
 800c008:	68f8      	ldr	r0, [r7, #12]
 800c00a:	f7ff feab 	bl	800bd64 <etharp_output_to_arp_index>
 800c00e:	4603      	mov	r3, r0
 800c010:	e01c      	b.n	800c04c <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c012:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c016:	b2db      	uxtb	r3, r3
 800c018:	3301      	adds	r3, #1
 800c01a:	b2db      	uxtb	r3, r3
 800c01c:	75fb      	strb	r3, [r7, #23]
 800c01e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c022:	2b09      	cmp	r3, #9
 800c024:	ddd0      	ble.n	800bfc8 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800c026:	68ba      	ldr	r2, [r7, #8]
 800c028:	69b9      	ldr	r1, [r7, #24]
 800c02a:	68f8      	ldr	r0, [r7, #12]
 800c02c:	f000 f822 	bl	800c074 <etharp_query>
 800c030:	4603      	mov	r3, r0
 800c032:	e00b      	b.n	800c04c <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800c03a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c03e:	9300      	str	r3, [sp, #0]
 800c040:	69fb      	ldr	r3, [r7, #28]
 800c042:	68b9      	ldr	r1, [r7, #8]
 800c044:	68f8      	ldr	r0, [r7, #12]
 800c046:	f001 fcc7 	bl	800d9d8 <ethernet_output>
 800c04a:	4603      	mov	r3, r0
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3720      	adds	r7, #32
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}
 800c054:	08015a58 	.word	0x08015a58
 800c058:	08015ba8 	.word	0x08015ba8
 800c05c:	08015ad0 	.word	0x08015ad0
 800c060:	08015bf8 	.word	0x08015bf8
 800c064:	08015b98 	.word	0x08015b98
 800c068:	08016478 	.word	0x08016478
 800c06c:	20000360 	.word	0x20000360
 800c070:	20000270 	.word	0x20000270

0800c074 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b08c      	sub	sp, #48	; 0x30
 800c078:	af02      	add	r7, sp, #8
 800c07a:	60f8      	str	r0, [r7, #12]
 800c07c:	60b9      	str	r1, [r7, #8]
 800c07e:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	3329      	adds	r3, #41	; 0x29
 800c084:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800c086:	23ff      	movs	r3, #255	; 0xff
 800c088:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800c08c:	2300      	movs	r3, #0
 800c08e:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	68f9      	ldr	r1, [r7, #12]
 800c096:	4618      	mov	r0, r3
 800c098:	f000 fdfe 	bl	800cc98 <ip4_addr_isbroadcast_u32>
 800c09c:	4603      	mov	r3, r0
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d10c      	bne.n	800c0bc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c0aa:	2be0      	cmp	r3, #224	; 0xe0
 800c0ac:	d006      	beq.n	800c0bc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d003      	beq.n	800c0bc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d102      	bne.n	800c0c2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c0bc:	f06f 030f 	mvn.w	r3, #15
 800c0c0:	e10f      	b.n	800c2e2 <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800c0c2:	68fa      	ldr	r2, [r7, #12]
 800c0c4:	2101      	movs	r1, #1
 800c0c6:	68b8      	ldr	r0, [r7, #8]
 800c0c8:	f7ff fba2 	bl	800b810 <etharp_find_entry>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 800c0d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	da02      	bge.n	800c0de <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 800c0d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c0dc:	e101      	b.n	800c2e2 <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800c0de:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c0e2:	4982      	ldr	r1, [pc, #520]	; (800c2ec <etharp_query+0x278>)
 800c0e4:	4613      	mov	r3, r2
 800c0e6:	005b      	lsls	r3, r3, #1
 800c0e8:	4413      	add	r3, r2
 800c0ea:	00db      	lsls	r3, r3, #3
 800c0ec:	440b      	add	r3, r1
 800c0ee:	3314      	adds	r3, #20
 800c0f0:	781b      	ldrb	r3, [r3, #0]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d117      	bne.n	800c126 <etharp_query+0xb2>
    is_new_entry = 1;
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800c0fa:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c0fe:	497b      	ldr	r1, [pc, #492]	; (800c2ec <etharp_query+0x278>)
 800c100:	4613      	mov	r3, r2
 800c102:	005b      	lsls	r3, r3, #1
 800c104:	4413      	add	r3, r2
 800c106:	00db      	lsls	r3, r3, #3
 800c108:	440b      	add	r3, r1
 800c10a:	3314      	adds	r3, #20
 800c10c:	2201      	movs	r2, #1
 800c10e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800c110:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c114:	4975      	ldr	r1, [pc, #468]	; (800c2ec <etharp_query+0x278>)
 800c116:	4613      	mov	r3, r2
 800c118:	005b      	lsls	r3, r3, #1
 800c11a:	4413      	add	r3, r2
 800c11c:	00db      	lsls	r3, r3, #3
 800c11e:	440b      	add	r3, r1
 800c120:	3308      	adds	r3, #8
 800c122:	68fa      	ldr	r2, [r7, #12]
 800c124:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800c126:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c12a:	4970      	ldr	r1, [pc, #448]	; (800c2ec <etharp_query+0x278>)
 800c12c:	4613      	mov	r3, r2
 800c12e:	005b      	lsls	r3, r3, #1
 800c130:	4413      	add	r3, r2
 800c132:	00db      	lsls	r3, r3, #3
 800c134:	440b      	add	r3, r1
 800c136:	3314      	adds	r3, #20
 800c138:	781b      	ldrb	r3, [r3, #0]
 800c13a:	2b01      	cmp	r3, #1
 800c13c:	d012      	beq.n	800c164 <etharp_query+0xf0>
 800c13e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c142:	496a      	ldr	r1, [pc, #424]	; (800c2ec <etharp_query+0x278>)
 800c144:	4613      	mov	r3, r2
 800c146:	005b      	lsls	r3, r3, #1
 800c148:	4413      	add	r3, r2
 800c14a:	00db      	lsls	r3, r3, #3
 800c14c:	440b      	add	r3, r1
 800c14e:	3314      	adds	r3, #20
 800c150:	781b      	ldrb	r3, [r3, #0]
 800c152:	2b01      	cmp	r3, #1
 800c154:	d806      	bhi.n	800c164 <etharp_query+0xf0>
 800c156:	4b66      	ldr	r3, [pc, #408]	; (800c2f0 <etharp_query+0x27c>)
 800c158:	f240 32c9 	movw	r2, #969	; 0x3c9
 800c15c:	4965      	ldr	r1, [pc, #404]	; (800c2f4 <etharp_query+0x280>)
 800c15e:	4866      	ldr	r0, [pc, #408]	; (800c2f8 <etharp_query+0x284>)
 800c160:	f004 fd54 	bl	8010c0c <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800c164:	6a3b      	ldr	r3, [r7, #32]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d102      	bne.n	800c170 <etharp_query+0xfc>
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d10c      	bne.n	800c18a <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800c170:	68b9      	ldr	r1, [r7, #8]
 800c172:	68f8      	ldr	r0, [r7, #12]
 800c174:	f000 f976 	bl	800c464 <etharp_request>
 800c178:	4603      	mov	r3, r0
 800c17a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d102      	bne.n	800c18a <etharp_query+0x116>
      return result;
 800c184:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c188:	e0ab      	b.n	800c2e2 <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d106      	bne.n	800c19e <etharp_query+0x12a>
 800c190:	4b57      	ldr	r3, [pc, #348]	; (800c2f0 <etharp_query+0x27c>)
 800c192:	f240 32db 	movw	r2, #987	; 0x3db
 800c196:	4959      	ldr	r1, [pc, #356]	; (800c2fc <etharp_query+0x288>)
 800c198:	4857      	ldr	r0, [pc, #348]	; (800c2f8 <etharp_query+0x284>)
 800c19a:	f004 fd37 	bl	8010c0c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800c19e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c1a2:	4952      	ldr	r1, [pc, #328]	; (800c2ec <etharp_query+0x278>)
 800c1a4:	4613      	mov	r3, r2
 800c1a6:	005b      	lsls	r3, r3, #1
 800c1a8:	4413      	add	r3, r2
 800c1aa:	00db      	lsls	r3, r3, #3
 800c1ac:	440b      	add	r3, r1
 800c1ae:	3314      	adds	r3, #20
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	2b01      	cmp	r3, #1
 800c1b4:	d919      	bls.n	800c1ea <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800c1b6:	7cfa      	ldrb	r2, [r7, #19]
 800c1b8:	4b51      	ldr	r3, [pc, #324]	; (800c300 <etharp_query+0x28c>)
 800c1ba:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800c1bc:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c1c0:	4613      	mov	r3, r2
 800c1c2:	005b      	lsls	r3, r3, #1
 800c1c4:	4413      	add	r3, r2
 800c1c6:	00db      	lsls	r3, r3, #3
 800c1c8:	3308      	adds	r3, #8
 800c1ca:	4a48      	ldr	r2, [pc, #288]	; (800c2ec <etharp_query+0x278>)
 800c1cc:	4413      	add	r3, r2
 800c1ce:	1d1a      	adds	r2, r3, #4
 800c1d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c1d4:	9300      	str	r3, [sp, #0]
 800c1d6:	4613      	mov	r3, r2
 800c1d8:	697a      	ldr	r2, [r7, #20]
 800c1da:	6879      	ldr	r1, [r7, #4]
 800c1dc:	68f8      	ldr	r0, [r7, #12]
 800c1de:	f001 fbfb 	bl	800d9d8 <ethernet_output>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c1e8:	e079      	b.n	800c2de <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c1ea:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c1ee:	493f      	ldr	r1, [pc, #252]	; (800c2ec <etharp_query+0x278>)
 800c1f0:	4613      	mov	r3, r2
 800c1f2:	005b      	lsls	r3, r3, #1
 800c1f4:	4413      	add	r3, r2
 800c1f6:	00db      	lsls	r3, r3, #3
 800c1f8:	440b      	add	r3, r1
 800c1fa:	3314      	adds	r3, #20
 800c1fc:	781b      	ldrb	r3, [r3, #0]
 800c1fe:	2b01      	cmp	r3, #1
 800c200:	d16d      	bne.n	800c2de <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800c202:	2300      	movs	r3, #0
 800c204:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c20a:	e01a      	b.n	800c242 <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800c20c:	69fb      	ldr	r3, [r7, #28]
 800c20e:	895a      	ldrh	r2, [r3, #10]
 800c210:	69fb      	ldr	r3, [r7, #28]
 800c212:	891b      	ldrh	r3, [r3, #8]
 800c214:	429a      	cmp	r2, r3
 800c216:	d10a      	bne.n	800c22e <etharp_query+0x1ba>
 800c218:	69fb      	ldr	r3, [r7, #28]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d006      	beq.n	800c22e <etharp_query+0x1ba>
 800c220:	4b33      	ldr	r3, [pc, #204]	; (800c2f0 <etharp_query+0x27c>)
 800c222:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800c226:	4937      	ldr	r1, [pc, #220]	; (800c304 <etharp_query+0x290>)
 800c228:	4833      	ldr	r0, [pc, #204]	; (800c2f8 <etharp_query+0x284>)
 800c22a:	f004 fcef 	bl	8010c0c <iprintf>
      if (p->type != PBUF_ROM) {
 800c22e:	69fb      	ldr	r3, [r7, #28]
 800c230:	7b1b      	ldrb	r3, [r3, #12]
 800c232:	2b01      	cmp	r3, #1
 800c234:	d002      	beq.n	800c23c <etharp_query+0x1c8>
        copy_needed = 1;
 800c236:	2301      	movs	r3, #1
 800c238:	61bb      	str	r3, [r7, #24]
        break;
 800c23a:	e005      	b.n	800c248 <etharp_query+0x1d4>
      }
      p = p->next;
 800c23c:	69fb      	ldr	r3, [r7, #28]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c242:	69fb      	ldr	r3, [r7, #28]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d1e1      	bne.n	800c20c <etharp_query+0x198>
    }
    if (copy_needed) {
 800c248:	69bb      	ldr	r3, [r7, #24]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d017      	beq.n	800c27e <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800c24e:	69fb      	ldr	r3, [r7, #28]
 800c250:	891b      	ldrh	r3, [r3, #8]
 800c252:	2200      	movs	r2, #0
 800c254:	4619      	mov	r1, r3
 800c256:	2002      	movs	r0, #2
 800c258:	f7f9 f804 	bl	8005264 <pbuf_alloc>
 800c25c:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 800c25e:	69fb      	ldr	r3, [r7, #28]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d011      	beq.n	800c288 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 800c264:	6879      	ldr	r1, [r7, #4]
 800c266:	69f8      	ldr	r0, [r7, #28]
 800c268:	f7f9 fc90 	bl	8005b8c <pbuf_copy>
 800c26c:	4603      	mov	r3, r0
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d00a      	beq.n	800c288 <etharp_query+0x214>
          pbuf_free(p);
 800c272:	69f8      	ldr	r0, [r7, #28]
 800c274:	f7f9 fb68 	bl	8005948 <pbuf_free>
          p = NULL;
 800c278:	2300      	movs	r3, #0
 800c27a:	61fb      	str	r3, [r7, #28]
 800c27c:	e004      	b.n	800c288 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800c282:	69f8      	ldr	r0, [r7, #28]
 800c284:	f7f9 fc0a 	bl	8005a9c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800c288:	69fb      	ldr	r3, [r7, #28]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d024      	beq.n	800c2d8 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800c28e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c292:	4916      	ldr	r1, [pc, #88]	; (800c2ec <etharp_query+0x278>)
 800c294:	4613      	mov	r3, r2
 800c296:	005b      	lsls	r3, r3, #1
 800c298:	4413      	add	r3, r2
 800c29a:	00db      	lsls	r3, r3, #3
 800c29c:	440b      	add	r3, r1
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d00b      	beq.n	800c2bc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800c2a4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c2a8:	4910      	ldr	r1, [pc, #64]	; (800c2ec <etharp_query+0x278>)
 800c2aa:	4613      	mov	r3, r2
 800c2ac:	005b      	lsls	r3, r3, #1
 800c2ae:	4413      	add	r3, r2
 800c2b0:	00db      	lsls	r3, r3, #3
 800c2b2:	440b      	add	r3, r1
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f7f9 fb46 	bl	8005948 <pbuf_free>
      }
      arp_table[i].q = p;
 800c2bc:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c2c0:	490a      	ldr	r1, [pc, #40]	; (800c2ec <etharp_query+0x278>)
 800c2c2:	4613      	mov	r3, r2
 800c2c4:	005b      	lsls	r3, r3, #1
 800c2c6:	4413      	add	r3, r2
 800c2c8:	00db      	lsls	r3, r3, #3
 800c2ca:	440b      	add	r3, r1
 800c2cc:	69fa      	ldr	r2, [r7, #28]
 800c2ce:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c2d6:	e002      	b.n	800c2de <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800c2d8:	23ff      	movs	r3, #255	; 0xff
 800c2da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800c2de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	3728      	adds	r7, #40	; 0x28
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}
 800c2ea:	bf00      	nop
 800c2ec:	20000270 	.word	0x20000270
 800c2f0:	08015a58 	.word	0x08015a58
 800c2f4:	08015c04 	.word	0x08015c04
 800c2f8:	08015ad0 	.word	0x08015ad0
 800c2fc:	08015bf8 	.word	0x08015bf8
 800c300:	20000360 	.word	0x20000360
 800c304:	08015c2c 	.word	0x08015c2c

0800c308 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b08a      	sub	sp, #40	; 0x28
 800c30c:	af02      	add	r7, sp, #8
 800c30e:	60f8      	str	r0, [r7, #12]
 800c310:	60b9      	str	r1, [r7, #8]
 800c312:	607a      	str	r2, [r7, #4]
 800c314:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800c316:	2300      	movs	r3, #0
 800c318:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d106      	bne.n	800c32e <etharp_raw+0x26>
 800c320:	4b3a      	ldr	r3, [pc, #232]	; (800c40c <etharp_raw+0x104>)
 800c322:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800c326:	493a      	ldr	r1, [pc, #232]	; (800c410 <etharp_raw+0x108>)
 800c328:	483a      	ldr	r0, [pc, #232]	; (800c414 <etharp_raw+0x10c>)
 800c32a:	f004 fc6f 	bl	8010c0c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800c32e:	2200      	movs	r2, #0
 800c330:	211c      	movs	r1, #28
 800c332:	2002      	movs	r0, #2
 800c334:	f7f8 ff96 	bl	8005264 <pbuf_alloc>
 800c338:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800c33a:	69bb      	ldr	r3, [r7, #24]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d102      	bne.n	800c346 <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800c340:	f04f 33ff 	mov.w	r3, #4294967295
 800c344:	e05d      	b.n	800c402 <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800c346:	69bb      	ldr	r3, [r7, #24]
 800c348:	895b      	ldrh	r3, [r3, #10]
 800c34a:	2b1b      	cmp	r3, #27
 800c34c:	d806      	bhi.n	800c35c <etharp_raw+0x54>
 800c34e:	4b2f      	ldr	r3, [pc, #188]	; (800c40c <etharp_raw+0x104>)
 800c350:	f240 4264 	movw	r2, #1124	; 0x464
 800c354:	4930      	ldr	r1, [pc, #192]	; (800c418 <etharp_raw+0x110>)
 800c356:	482f      	ldr	r0, [pc, #188]	; (800c414 <etharp_raw+0x10c>)
 800c358:	f004 fc58 	bl	8010c0c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800c35c:	69bb      	ldr	r3, [r7, #24]
 800c35e:	685b      	ldr	r3, [r3, #4]
 800c360:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800c362:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c364:	4618      	mov	r0, r3
 800c366:	f7f8 f9c3 	bl	80046f0 <lwip_htons>
 800c36a:	4603      	mov	r3, r0
 800c36c:	461a      	mov	r2, r3
 800c36e:	697b      	ldr	r3, [r7, #20]
 800c370:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c378:	2b06      	cmp	r3, #6
 800c37a:	d006      	beq.n	800c38a <etharp_raw+0x82>
 800c37c:	4b23      	ldr	r3, [pc, #140]	; (800c40c <etharp_raw+0x104>)
 800c37e:	f240 426b 	movw	r2, #1131	; 0x46b
 800c382:	4926      	ldr	r1, [pc, #152]	; (800c41c <etharp_raw+0x114>)
 800c384:	4823      	ldr	r0, [pc, #140]	; (800c414 <etharp_raw+0x10c>)
 800c386:	f004 fc41 	bl	8010c0c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	3308      	adds	r3, #8
 800c38e:	2206      	movs	r2, #6
 800c390:	6839      	ldr	r1, [r7, #0]
 800c392:	4618      	mov	r0, r3
 800c394:	f003 fdf7 	bl	800ff86 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	3312      	adds	r3, #18
 800c39c:	2206      	movs	r2, #6
 800c39e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f003 fdf0 	bl	800ff86 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800c3a6:	697b      	ldr	r3, [r7, #20]
 800c3a8:	330e      	adds	r3, #14
 800c3aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3ac:	6812      	ldr	r2, [r2, #0]
 800c3ae:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	3318      	adds	r3, #24
 800c3b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3b6:	6812      	ldr	r2, [r2, #0]
 800c3b8:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	2200      	movs	r2, #0
 800c3be:	701a      	strb	r2, [r3, #0]
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	f042 0201 	orr.w	r2, r2, #1
 800c3c6:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	f042 0208 	orr.w	r2, r2, #8
 800c3d0:	709a      	strb	r2, [r3, #2]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	2206      	movs	r2, #6
 800c3da:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	2204      	movs	r2, #4
 800c3e0:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800c3e2:	f640 0306 	movw	r3, #2054	; 0x806
 800c3e6:	9300      	str	r3, [sp, #0]
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	68ba      	ldr	r2, [r7, #8]
 800c3ec:	69b9      	ldr	r1, [r7, #24]
 800c3ee:	68f8      	ldr	r0, [r7, #12]
 800c3f0:	f001 faf2 	bl	800d9d8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800c3f4:	69b8      	ldr	r0, [r7, #24]
 800c3f6:	f7f9 faa7 	bl	8005948 <pbuf_free>
  p = NULL;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800c3fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c402:	4618      	mov	r0, r3
 800c404:	3720      	adds	r7, #32
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}
 800c40a:	bf00      	nop
 800c40c:	08015a58 	.word	0x08015a58
 800c410:	08015ba8 	.word	0x08015ba8
 800c414:	08015ad0 	.word	0x08015ad0
 800c418:	08015c48 	.word	0x08015c48
 800c41c:	08015c7c 	.word	0x08015c7c

0800c420 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b088      	sub	sp, #32
 800c424:	af04      	add	r7, sp, #16
 800c426:	60f8      	str	r0, [r7, #12]
 800c428:	60b9      	str	r1, [r7, #8]
 800c42a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c43c:	2201      	movs	r2, #1
 800c43e:	9203      	str	r2, [sp, #12]
 800c440:	68ba      	ldr	r2, [r7, #8]
 800c442:	9202      	str	r2, [sp, #8]
 800c444:	4a06      	ldr	r2, [pc, #24]	; (800c460 <etharp_request_dst+0x40>)
 800c446:	9201      	str	r2, [sp, #4]
 800c448:	9300      	str	r3, [sp, #0]
 800c44a:	4603      	mov	r3, r0
 800c44c:	687a      	ldr	r2, [r7, #4]
 800c44e:	68f8      	ldr	r0, [r7, #12]
 800c450:	f7ff ff5a 	bl	800c308 <etharp_raw>
 800c454:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800c456:	4618      	mov	r0, r3
 800c458:	3710      	adds	r7, #16
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}
 800c45e:	bf00      	nop
 800c460:	08016480 	.word	0x08016480

0800c464 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b082      	sub	sp, #8
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
 800c46c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800c46e:	4a05      	ldr	r2, [pc, #20]	; (800c484 <etharp_request+0x20>)
 800c470:	6839      	ldr	r1, [r7, #0]
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f7ff ffd4 	bl	800c420 <etharp_request_dst>
 800c478:	4603      	mov	r3, r0
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3708      	adds	r7, #8
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}
 800c482:	bf00      	nop
 800c484:	08016478 	.word	0x08016478

0800c488 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b08e      	sub	sp, #56	; 0x38
 800c48c:	af04      	add	r7, sp, #16
 800c48e:	6078      	str	r0, [r7, #4]
 800c490:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800c492:	4b7a      	ldr	r3, [pc, #488]	; (800c67c <icmp_input+0x1f4>)
 800c494:	689b      	ldr	r3, [r3, #8]
 800c496:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 800c498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c49a:	781b      	ldrb	r3, [r3, #0]
 800c49c:	b29b      	uxth	r3, r3
 800c49e:	f003 030f 	and.w	r3, r3, #15
 800c4a2:	b29b      	uxth	r3, r3
 800c4a4:	009b      	lsls	r3, r3, #2
 800c4a6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800c4a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c4aa:	2b13      	cmp	r3, #19
 800c4ac:	f240 80d1 	bls.w	800c652 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	895b      	ldrh	r3, [r3, #10]
 800c4b4:	2b03      	cmp	r3, #3
 800c4b6:	f240 80ce 	bls.w	800c656 <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	685b      	ldr	r3, [r3, #4]
 800c4be:	781b      	ldrb	r3, [r3, #0]
 800c4c0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800c4c4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	f000 80bb 	beq.w	800c644 <icmp_input+0x1bc>
 800c4ce:	2b08      	cmp	r3, #8
 800c4d0:	f040 80bb 	bne.w	800c64a <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 800c4d4:	4b6a      	ldr	r3, [pc, #424]	; (800c680 <icmp_input+0x1f8>)
 800c4d6:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c4d8:	4b68      	ldr	r3, [pc, #416]	; (800c67c <icmp_input+0x1f4>)
 800c4da:	695b      	ldr	r3, [r3, #20]
 800c4dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c4e0:	2be0      	cmp	r3, #224	; 0xe0
 800c4e2:	f000 80bf 	beq.w	800c664 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800c4e6:	4b65      	ldr	r3, [pc, #404]	; (800c67c <icmp_input+0x1f4>)
 800c4e8:	695a      	ldr	r2, [r3, #20]
 800c4ea:	4b64      	ldr	r3, [pc, #400]	; (800c67c <icmp_input+0x1f4>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	4619      	mov	r1, r3
 800c4f0:	4610      	mov	r0, r2
 800c4f2:	f000 fbd1 	bl	800cc98 <ip4_addr_isbroadcast_u32>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	f040 80b5 	bne.w	800c668 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	891b      	ldrh	r3, [r3, #8]
 800c502:	2b07      	cmp	r3, #7
 800c504:	f240 80a9 	bls.w	800c65a <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800c508:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c50a:	330e      	adds	r3, #14
 800c50c:	b29b      	uxth	r3, r3
 800c50e:	b21b      	sxth	r3, r3
 800c510:	4619      	mov	r1, r3
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f7f9 f9f4 	bl	8005900 <pbuf_header>
 800c518:	4603      	mov	r3, r0
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d046      	beq.n	800c5ac <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	891a      	ldrh	r2, [r3, #8]
 800c522:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c524:	4413      	add	r3, r2
 800c526:	b29b      	uxth	r3, r3
 800c528:	2200      	movs	r2, #0
 800c52a:	4619      	mov	r1, r3
 800c52c:	2002      	movs	r0, #2
 800c52e:	f7f8 fe99 	bl	8005264 <pbuf_alloc>
 800c532:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800c534:	69bb      	ldr	r3, [r7, #24]
 800c536:	2b00      	cmp	r3, #0
 800c538:	f000 8098 	beq.w	800c66c <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800c53c:	69bb      	ldr	r3, [r7, #24]
 800c53e:	895b      	ldrh	r3, [r3, #10]
 800c540:	461a      	mov	r2, r3
 800c542:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c544:	3308      	adds	r3, #8
 800c546:	429a      	cmp	r2, r3
 800c548:	d203      	bcs.n	800c552 <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800c54a:	69b8      	ldr	r0, [r7, #24]
 800c54c:	f7f9 f9fc 	bl	8005948 <pbuf_free>
        goto icmperr;
 800c550:	e08d      	b.n	800c66e <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800c552:	69bb      	ldr	r3, [r7, #24]
 800c554:	685b      	ldr	r3, [r3, #4]
 800c556:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c558:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c55a:	4618      	mov	r0, r3
 800c55c:	f003 fd13 	bl	800ff86 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800c560:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c562:	425b      	negs	r3, r3
 800c564:	b29b      	uxth	r3, r3
 800c566:	b21b      	sxth	r3, r3
 800c568:	4619      	mov	r1, r3
 800c56a:	69b8      	ldr	r0, [r7, #24]
 800c56c:	f7f9 f9c8 	bl	8005900 <pbuf_header>
 800c570:	4603      	mov	r3, r0
 800c572:	2b00      	cmp	r3, #0
 800c574:	d009      	beq.n	800c58a <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800c576:	4b43      	ldr	r3, [pc, #268]	; (800c684 <icmp_input+0x1fc>)
 800c578:	22af      	movs	r2, #175	; 0xaf
 800c57a:	4943      	ldr	r1, [pc, #268]	; (800c688 <icmp_input+0x200>)
 800c57c:	4843      	ldr	r0, [pc, #268]	; (800c68c <icmp_input+0x204>)
 800c57e:	f004 fb45 	bl	8010c0c <iprintf>
        pbuf_free(r);
 800c582:	69b8      	ldr	r0, [r7, #24]
 800c584:	f7f9 f9e0 	bl	8005948 <pbuf_free>
        goto icmperr;
 800c588:	e071      	b.n	800c66e <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800c58a:	6879      	ldr	r1, [r7, #4]
 800c58c:	69b8      	ldr	r0, [r7, #24]
 800c58e:	f7f9 fafd 	bl	8005b8c <pbuf_copy>
 800c592:	4603      	mov	r3, r0
 800c594:	2b00      	cmp	r3, #0
 800c596:	d003      	beq.n	800c5a0 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800c598:	69b8      	ldr	r0, [r7, #24]
 800c59a:	f7f9 f9d5 	bl	8005948 <pbuf_free>
        goto icmperr;
 800c59e:	e066      	b.n	800c66e <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f7f9 f9d1 	bl	8005948 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800c5a6:	69bb      	ldr	r3, [r7, #24]
 800c5a8:	607b      	str	r3, [r7, #4]
 800c5aa:	e015      	b.n	800c5d8 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800c5ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c5ae:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800c5b2:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800c5b6:	33f2      	adds	r3, #242	; 0xf2
 800c5b8:	b29b      	uxth	r3, r3
 800c5ba:	b21b      	sxth	r3, r3
 800c5bc:	4619      	mov	r1, r3
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f7f9 f99e 	bl	8005900 <pbuf_header>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d006      	beq.n	800c5d8 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800c5ca:	4b2e      	ldr	r3, [pc, #184]	; (800c684 <icmp_input+0x1fc>)
 800c5cc:	22c0      	movs	r2, #192	; 0xc0
 800c5ce:	4930      	ldr	r1, [pc, #192]	; (800c690 <icmp_input+0x208>)
 800c5d0:	482e      	ldr	r0, [pc, #184]	; (800c68c <icmp_input+0x204>)
 800c5d2:	f004 fb1b 	bl	8010c0c <iprintf>
        goto icmperr;
 800c5d6:	e04a      	b.n	800c66e <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	685b      	ldr	r3, [r3, #4]
 800c5dc:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800c5de:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c5e2:	4619      	mov	r1, r3
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f7f9 f98b 	bl	8005900 <pbuf_header>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d12b      	bne.n	800c648 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	685b      	ldr	r3, [r3, #4]
 800c5f4:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800c5f6:	69fb      	ldr	r3, [r7, #28]
 800c5f8:	681a      	ldr	r2, [r3, #0]
 800c5fa:	693b      	ldr	r3, [r7, #16]
 800c5fc:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800c5fe:	4b1f      	ldr	r3, [pc, #124]	; (800c67c <icmp_input+0x1f4>)
 800c600:	691a      	ldr	r2, [r3, #16]
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	2200      	movs	r2, #0
 800c60a:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	2200      	movs	r2, #0
 800c610:	709a      	strb	r2, [r3, #2]
 800c612:	2200      	movs	r2, #0
 800c614:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	22ff      	movs	r2, #255	; 0xff
 800c61a:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	2200      	movs	r2, #0
 800c620:	729a      	strb	r2, [r3, #10]
 800c622:	2200      	movs	r2, #0
 800c624:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	9302      	str	r3, [sp, #8]
 800c62a:	2301      	movs	r3, #1
 800c62c:	9301      	str	r3, [sp, #4]
 800c62e:	2300      	movs	r3, #0
 800c630:	9300      	str	r3, [sp, #0]
 800c632:	23ff      	movs	r3, #255	; 0xff
 800c634:	2200      	movs	r2, #0
 800c636:	69f9      	ldr	r1, [r7, #28]
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f000 fa5b 	bl	800caf4 <ip4_output_if>
 800c63e:	4603      	mov	r3, r0
 800c640:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800c642:	e001      	b.n	800c648 <icmp_input+0x1c0>
    break;
 800c644:	bf00      	nop
 800c646:	e000      	b.n	800c64a <icmp_input+0x1c2>
    break;
 800c648:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f7f9 f97c 	bl	8005948 <pbuf_free>
  return;
 800c650:	e011      	b.n	800c676 <icmp_input+0x1ee>
    goto lenerr;
 800c652:	bf00      	nop
 800c654:	e002      	b.n	800c65c <icmp_input+0x1d4>
    goto lenerr;
 800c656:	bf00      	nop
 800c658:	e000      	b.n	800c65c <icmp_input+0x1d4>
      goto lenerr;
 800c65a:	bf00      	nop
lenerr:
  pbuf_free(p);
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f7f9 f973 	bl	8005948 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c662:	e008      	b.n	800c676 <icmp_input+0x1ee>
      goto icmperr;
 800c664:	bf00      	nop
 800c666:	e002      	b.n	800c66e <icmp_input+0x1e6>
      goto icmperr;
 800c668:	bf00      	nop
 800c66a:	e000      	b.n	800c66e <icmp_input+0x1e6>
        goto icmperr;
 800c66c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f7f9 f96a 	bl	8005948 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c674:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800c676:	3728      	adds	r7, #40	; 0x28
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}
 800c67c:	20000394 	.word	0x20000394
 800c680:	200003a8 	.word	0x200003a8
 800c684:	08015cc0 	.word	0x08015cc0
 800c688:	08015cf8 	.word	0x08015cf8
 800c68c:	08015d30 	.word	0x08015d30
 800c690:	08015d58 	.word	0x08015d58

0800c694 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b082      	sub	sp, #8
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
 800c69c:	460b      	mov	r3, r1
 800c69e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800c6a0:	78fb      	ldrb	r3, [r7, #3]
 800c6a2:	461a      	mov	r2, r3
 800c6a4:	2103      	movs	r1, #3
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f000 f814 	bl	800c6d4 <icmp_send_response>
}
 800c6ac:	bf00      	nop
 800c6ae:	3708      	adds	r7, #8
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}

0800c6b4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b082      	sub	sp, #8
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
 800c6bc:	460b      	mov	r3, r1
 800c6be:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800c6c0:	78fb      	ldrb	r3, [r7, #3]
 800c6c2:	461a      	mov	r2, r3
 800c6c4:	210b      	movs	r1, #11
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f000 f804 	bl	800c6d4 <icmp_send_response>
}
 800c6cc:	bf00      	nop
 800c6ce:	3708      	adds	r7, #8
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}

0800c6d4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b08c      	sub	sp, #48	; 0x30
 800c6d8:	af04      	add	r7, sp, #16
 800c6da:	6078      	str	r0, [r7, #4]
 800c6dc:	460b      	mov	r3, r1
 800c6de:	70fb      	strb	r3, [r7, #3]
 800c6e0:	4613      	mov	r3, r2
 800c6e2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	2124      	movs	r1, #36	; 0x24
 800c6e8:	2001      	movs	r0, #1
 800c6ea:	f7f8 fdbb 	bl	8005264 <pbuf_alloc>
 800c6ee:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800c6f0:	69fb      	ldr	r3, [r7, #28]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d04c      	beq.n	800c790 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800c6f6:	69fb      	ldr	r3, [r7, #28]
 800c6f8:	895b      	ldrh	r3, [r3, #10]
 800c6fa:	2b23      	cmp	r3, #35	; 0x23
 800c6fc:	d806      	bhi.n	800c70c <icmp_send_response+0x38>
 800c6fe:	4b26      	ldr	r3, [pc, #152]	; (800c798 <icmp_send_response+0xc4>)
 800c700:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800c704:	4925      	ldr	r1, [pc, #148]	; (800c79c <icmp_send_response+0xc8>)
 800c706:	4826      	ldr	r0, [pc, #152]	; (800c7a0 <icmp_send_response+0xcc>)
 800c708:	f004 fa80 	bl	8010c0c <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	685b      	ldr	r3, [r3, #4]
 800c710:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800c712:	69fb      	ldr	r3, [r7, #28]
 800c714:	685b      	ldr	r3, [r3, #4]
 800c716:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	78fa      	ldrb	r2, [r7, #3]
 800c71c:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	78ba      	ldrb	r2, [r7, #2]
 800c722:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	2200      	movs	r2, #0
 800c728:	711a      	strb	r2, [r3, #4]
 800c72a:	2200      	movs	r2, #0
 800c72c:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	2200      	movs	r2, #0
 800c732:	719a      	strb	r2, [r3, #6]
 800c734:	2200      	movs	r2, #0
 800c736:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800c738:	69fb      	ldr	r3, [r7, #28]
 800c73a:	685b      	ldr	r3, [r3, #4]
 800c73c:	f103 0008 	add.w	r0, r3, #8
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	685b      	ldr	r3, [r3, #4]
 800c744:	221c      	movs	r2, #28
 800c746:	4619      	mov	r1, r3
 800c748:	f003 fc1d 	bl	800ff86 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800c74c:	69bb      	ldr	r3, [r7, #24]
 800c74e:	68db      	ldr	r3, [r3, #12]
 800c750:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800c752:	f107 030c 	add.w	r3, r7, #12
 800c756:	4618      	mov	r0, r3
 800c758:	f000 f824 	bl	800c7a4 <ip4_route>
 800c75c:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800c75e:	693b      	ldr	r3, [r7, #16]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d011      	beq.n	800c788 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	2200      	movs	r2, #0
 800c768:	709a      	strb	r2, [r3, #2]
 800c76a:	2200      	movs	r2, #0
 800c76c:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800c76e:	f107 020c 	add.w	r2, r7, #12
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	9302      	str	r3, [sp, #8]
 800c776:	2301      	movs	r3, #1
 800c778:	9301      	str	r3, [sp, #4]
 800c77a:	2300      	movs	r3, #0
 800c77c:	9300      	str	r3, [sp, #0]
 800c77e:	23ff      	movs	r3, #255	; 0xff
 800c780:	2100      	movs	r1, #0
 800c782:	69f8      	ldr	r0, [r7, #28]
 800c784:	f000 f9b6 	bl	800caf4 <ip4_output_if>
  }
  pbuf_free(q);
 800c788:	69f8      	ldr	r0, [r7, #28]
 800c78a:	f7f9 f8dd 	bl	8005948 <pbuf_free>
 800c78e:	e000      	b.n	800c792 <icmp_send_response+0xbe>
    return;
 800c790:	bf00      	nop
}
 800c792:	3720      	adds	r7, #32
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}
 800c798:	08015cc0 	.word	0x08015cc0
 800c79c:	08015d8c 	.word	0x08015d8c
 800c7a0:	08015d30 	.word	0x08015d30

0800c7a4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b085      	sub	sp, #20
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800c7ac:	4b30      	ldr	r3, [pc, #192]	; (800c870 <ip4_route+0xcc>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	60fb      	str	r3, [r7, #12]
 800c7b2:	e036      	b.n	800c822 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c7ba:	f003 0301 	and.w	r3, r3, #1
 800c7be:	b2db      	uxtb	r3, r3
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d02b      	beq.n	800c81c <ip4_route+0x78>
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c7ca:	089b      	lsrs	r3, r3, #2
 800c7cc:	f003 0301 	and.w	r3, r3, #1
 800c7d0:	b2db      	uxtb	r3, r3
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d022      	beq.n	800c81c <ip4_route+0x78>
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	3304      	adds	r3, #4
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d01d      	beq.n	800c81c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681a      	ldr	r2, [r3, #0]
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	3304      	adds	r3, #4
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	405a      	eors	r2, r3
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	3308      	adds	r3, #8
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	4013      	ands	r3, r2
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d101      	bne.n	800c7fc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	e033      	b.n	800c864 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c802:	f003 0302 	and.w	r3, r3, #2
 800c806:	2b00      	cmp	r3, #0
 800c808:	d108      	bne.n	800c81c <ip4_route+0x78>
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681a      	ldr	r2, [r3, #0]
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	330c      	adds	r3, #12
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	429a      	cmp	r2, r3
 800c816:	d101      	bne.n	800c81c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	e023      	b.n	800c864 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	60fb      	str	r3, [r7, #12]
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d1c5      	bne.n	800c7b4 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800c828:	4b12      	ldr	r3, [pc, #72]	; (800c874 <ip4_route+0xd0>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d015      	beq.n	800c85c <ip4_route+0xb8>
 800c830:	4b10      	ldr	r3, [pc, #64]	; (800c874 <ip4_route+0xd0>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c838:	f003 0301 	and.w	r3, r3, #1
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d00d      	beq.n	800c85c <ip4_route+0xb8>
 800c840:	4b0c      	ldr	r3, [pc, #48]	; (800c874 <ip4_route+0xd0>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c848:	f003 0304 	and.w	r3, r3, #4
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d005      	beq.n	800c85c <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800c850:	4b08      	ldr	r3, [pc, #32]	; (800c874 <ip4_route+0xd0>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	3304      	adds	r3, #4
 800c856:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d101      	bne.n	800c860 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800c85c:	2300      	movs	r3, #0
 800c85e:	e001      	b.n	800c864 <ip4_route+0xc0>
  }

  return netif_default;
 800c860:	4b04      	ldr	r3, [pc, #16]	; (800c874 <ip4_route+0xd0>)
 800c862:	681b      	ldr	r3, [r3, #0]
}
 800c864:	4618      	mov	r0, r3
 800c866:	3714      	adds	r7, #20
 800c868:	46bd      	mov	sp, r7
 800c86a:	bc80      	pop	{r7}
 800c86c:	4770      	bx	lr
 800c86e:	bf00      	nop
 800c870:	200038b4 	.word	0x200038b4
 800c874:	200038b8 	.word	0x200038b8

0800c878 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b086      	sub	sp, #24
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
 800c880:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	685b      	ldr	r3, [r3, #4]
 800c886:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	781b      	ldrb	r3, [r3, #0]
 800c88c:	091b      	lsrs	r3, r3, #4
 800c88e:	b2db      	uxtb	r3, r3
 800c890:	2b04      	cmp	r3, #4
 800c892:	d004      	beq.n	800c89e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f7f9 f857 	bl	8005948 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800c89a:	2300      	movs	r3, #0
 800c89c:	e122      	b.n	800cae4 <ip4_input+0x26c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	781b      	ldrb	r3, [r3, #0]
 800c8a2:	b29b      	uxth	r3, r3
 800c8a4:	f003 030f 	and.w	r3, r3, #15
 800c8a8:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800c8aa:	897b      	ldrh	r3, [r7, #10]
 800c8ac:	009b      	lsls	r3, r3, #2
 800c8ae:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	885b      	ldrh	r3, [r3, #2]
 800c8b4:	b29b      	uxth	r3, r3
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f7f7 ff1a 	bl	80046f0 <lwip_htons>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	891b      	ldrh	r3, [r3, #8]
 800c8c4:	893a      	ldrh	r2, [r7, #8]
 800c8c6:	429a      	cmp	r2, r3
 800c8c8:	d204      	bcs.n	800c8d4 <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 800c8ca:	893b      	ldrh	r3, [r7, #8]
 800c8cc:	4619      	mov	r1, r3
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f7f8 fec6 	bl	8005660 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	895b      	ldrh	r3, [r3, #10]
 800c8d8:	897a      	ldrh	r2, [r7, #10]
 800c8da:	429a      	cmp	r2, r3
 800c8dc:	d807      	bhi.n	800c8ee <ip4_input+0x76>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	891b      	ldrh	r3, [r3, #8]
 800c8e2:	893a      	ldrh	r2, [r7, #8]
 800c8e4:	429a      	cmp	r2, r3
 800c8e6:	d802      	bhi.n	800c8ee <ip4_input+0x76>
 800c8e8:	897b      	ldrh	r3, [r7, #10]
 800c8ea:	2b13      	cmp	r3, #19
 800c8ec:	d804      	bhi.n	800c8f8 <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f7f9 f82a 	bl	8005948 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	e0f5      	b.n	800cae4 <ip4_input+0x26c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	691b      	ldr	r3, [r3, #16]
 800c8fc:	4a7b      	ldr	r2, [pc, #492]	; (800caec <ip4_input+0x274>)
 800c8fe:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	68db      	ldr	r3, [r3, #12]
 800c904:	4a79      	ldr	r2, [pc, #484]	; (800caec <ip4_input+0x274>)
 800c906:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c908:	4b78      	ldr	r3, [pc, #480]	; (800caec <ip4_input+0x274>)
 800c90a:	695b      	ldr	r3, [r3, #20]
 800c90c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c910:	2be0      	cmp	r3, #224	; 0xe0
 800c912:	d112      	bne.n	800c93a <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c91a:	f003 0301 	and.w	r3, r3, #1
 800c91e:	b2db      	uxtb	r3, r3
 800c920:	2b00      	cmp	r3, #0
 800c922:	d007      	beq.n	800c934 <ip4_input+0xbc>
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	3304      	adds	r3, #4
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d002      	beq.n	800c934 <ip4_input+0xbc>
      netif = inp;
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	613b      	str	r3, [r7, #16]
 800c932:	e041      	b.n	800c9b8 <ip4_input+0x140>
    } else {
      netif = NULL;
 800c934:	2300      	movs	r3, #0
 800c936:	613b      	str	r3, [r7, #16]
 800c938:	e03e      	b.n	800c9b8 <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800c93a:	2301      	movs	r3, #1
 800c93c:	60fb      	str	r3, [r7, #12]
    netif = inp;
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800c942:	693b      	ldr	r3, [r7, #16]
 800c944:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c948:	f003 0301 	and.w	r3, r3, #1
 800c94c:	b2db      	uxtb	r3, r3
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d014      	beq.n	800c97c <ip4_input+0x104>
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	3304      	adds	r3, #4
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d00f      	beq.n	800c97c <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c95c:	4b63      	ldr	r3, [pc, #396]	; (800caec <ip4_input+0x274>)
 800c95e:	695a      	ldr	r2, [r3, #20]
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	3304      	adds	r3, #4
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	429a      	cmp	r2, r3
 800c968:	d026      	beq.n	800c9b8 <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800c96a:	4b60      	ldr	r3, [pc, #384]	; (800caec <ip4_input+0x274>)
 800c96c:	695b      	ldr	r3, [r3, #20]
 800c96e:	6939      	ldr	r1, [r7, #16]
 800c970:	4618      	mov	r0, r3
 800c972:	f000 f991 	bl	800cc98 <ip4_addr_isbroadcast_u32>
 800c976:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d11d      	bne.n	800c9b8 <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d00d      	beq.n	800c99e <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800c982:	4b5a      	ldr	r3, [pc, #360]	; (800caec <ip4_input+0x274>)
 800c984:	695b      	ldr	r3, [r3, #20]
 800c986:	b2db      	uxtb	r3, r3
 800c988:	2b7f      	cmp	r3, #127	; 0x7f
 800c98a:	d102      	bne.n	800c992 <ip4_input+0x11a>
          netif = NULL;
 800c98c:	2300      	movs	r3, #0
 800c98e:	613b      	str	r3, [r7, #16]
          break;
 800c990:	e012      	b.n	800c9b8 <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800c992:	2300      	movs	r3, #0
 800c994:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 800c996:	4b56      	ldr	r3, [pc, #344]	; (800caf0 <ip4_input+0x278>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	613b      	str	r3, [r7, #16]
 800c99c:	e002      	b.n	800c9a4 <ip4_input+0x12c>
      } else {
        netif = netif->next;
 800c99e:	693b      	ldr	r3, [r7, #16]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 800c9a4:	693a      	ldr	r2, [r7, #16]
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	429a      	cmp	r2, r3
 800c9aa:	d102      	bne.n	800c9b2 <ip4_input+0x13a>
        netif = netif->next;
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 800c9b2:	693b      	ldr	r3, [r7, #16]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d1c4      	bne.n	800c942 <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c9b8:	4b4c      	ldr	r3, [pc, #304]	; (800caec <ip4_input+0x274>)
 800c9ba:	691b      	ldr	r3, [r3, #16]
 800c9bc:	6839      	ldr	r1, [r7, #0]
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f000 f96a 	bl	800cc98 <ip4_addr_isbroadcast_u32>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d105      	bne.n	800c9d6 <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800c9ca:	4b48      	ldr	r3, [pc, #288]	; (800caec <ip4_input+0x274>)
 800c9cc:	691b      	ldr	r3, [r3, #16]
 800c9ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c9d2:	2be0      	cmp	r3, #224	; 0xe0
 800c9d4:	d104      	bne.n	800c9e0 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	f7f8 ffb6 	bl	8005948 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800c9dc:	2300      	movs	r3, #0
 800c9de:	e081      	b.n	800cae4 <ip4_input+0x26c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800c9e0:	693b      	ldr	r3, [r7, #16]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d104      	bne.n	800c9f0 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f7f8 ffae 	bl	8005948 <pbuf_free>
    return ERR_OK;
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	e079      	b.n	800cae4 <ip4_input+0x26c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800c9f0:	697b      	ldr	r3, [r7, #20]
 800c9f2:	88db      	ldrh	r3, [r3, #6]
 800c9f4:	b29b      	uxth	r3, r3
 800c9f6:	461a      	mov	r2, r3
 800c9f8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800c9fc:	4013      	ands	r3, r2
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d00b      	beq.n	800ca1a <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f000 fc8c 	bl	800d320 <ip4_reass>
 800ca08:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d101      	bne.n	800ca14 <ip4_input+0x19c>
      return ERR_OK;
 800ca10:	2300      	movs	r3, #0
 800ca12:	e067      	b.n	800cae4 <ip4_input+0x26c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	685b      	ldr	r3, [r3, #4]
 800ca18:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800ca1a:	4a34      	ldr	r2, [pc, #208]	; (800caec <ip4_input+0x274>)
 800ca1c:	693b      	ldr	r3, [r7, #16]
 800ca1e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800ca20:	4a32      	ldr	r2, [pc, #200]	; (800caec <ip4_input+0x274>)
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800ca26:	4a31      	ldr	r2, [pc, #196]	; (800caec <ip4_input+0x274>)
 800ca28:	697b      	ldr	r3, [r7, #20]
 800ca2a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	781b      	ldrb	r3, [r3, #0]
 800ca30:	b29b      	uxth	r3, r3
 800ca32:	f003 030f 	and.w	r3, r3, #15
 800ca36:	b29b      	uxth	r3, r3
 800ca38:	009b      	lsls	r3, r3, #2
 800ca3a:	b29a      	uxth	r2, r3
 800ca3c:	4b2b      	ldr	r3, [pc, #172]	; (800caec <ip4_input+0x274>)
 800ca3e:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800ca40:	897b      	ldrh	r3, [r7, #10]
 800ca42:	425b      	negs	r3, r3
 800ca44:	b29b      	uxth	r3, r3
 800ca46:	b21b      	sxth	r3, r3
 800ca48:	4619      	mov	r1, r3
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f7f8 ff58 	bl	8005900 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800ca50:	697b      	ldr	r3, [r7, #20]
 800ca52:	7a5b      	ldrb	r3, [r3, #9]
 800ca54:	2b06      	cmp	r3, #6
 800ca56:	d009      	beq.n	800ca6c <ip4_input+0x1f4>
 800ca58:	2b11      	cmp	r3, #17
 800ca5a:	d002      	beq.n	800ca62 <ip4_input+0x1ea>
 800ca5c:	2b01      	cmp	r3, #1
 800ca5e:	d00a      	beq.n	800ca76 <ip4_input+0x1fe>
 800ca60:	e00e      	b.n	800ca80 <ip4_input+0x208>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800ca62:	6839      	ldr	r1, [r7, #0]
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f7fe fce5 	bl	800b434 <udp_input>
      break;
 800ca6a:	e028      	b.n	800cabe <ip4_input+0x246>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800ca6c:	6839      	ldr	r1, [r7, #0]
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f7fa fd8e 	bl	8007590 <tcp_input>
      break;
 800ca74:	e023      	b.n	800cabe <ip4_input+0x246>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800ca76:	6839      	ldr	r1, [r7, #0]
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f7ff fd05 	bl	800c488 <icmp_input>
      break;
 800ca7e:	e01e      	b.n	800cabe <ip4_input+0x246>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ca80:	4b1a      	ldr	r3, [pc, #104]	; (800caec <ip4_input+0x274>)
 800ca82:	695b      	ldr	r3, [r3, #20]
 800ca84:	6939      	ldr	r1, [r7, #16]
 800ca86:	4618      	mov	r0, r3
 800ca88:	f000 f906 	bl	800cc98 <ip4_addr_isbroadcast_u32>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d112      	bne.n	800cab8 <ip4_input+0x240>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ca92:	4b16      	ldr	r3, [pc, #88]	; (800caec <ip4_input+0x274>)
 800ca94:	695b      	ldr	r3, [r3, #20]
 800ca96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ca9a:	2be0      	cmp	r3, #224	; 0xe0
 800ca9c:	d00c      	beq.n	800cab8 <ip4_input+0x240>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800ca9e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800caa2:	4619      	mov	r1, r3
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f7f8 ff3d 	bl	8005924 <pbuf_header_force>
        p->payload = iphdr;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	697a      	ldr	r2, [r7, #20]
 800caae:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800cab0:	2102      	movs	r1, #2
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f7ff fdee 	bl	800c694 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f7f8 ff45 	bl	8005948 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800cabe:	4b0b      	ldr	r3, [pc, #44]	; (800caec <ip4_input+0x274>)
 800cac0:	2200      	movs	r2, #0
 800cac2:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800cac4:	4b09      	ldr	r3, [pc, #36]	; (800caec <ip4_input+0x274>)
 800cac6:	2200      	movs	r2, #0
 800cac8:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800caca:	4b08      	ldr	r3, [pc, #32]	; (800caec <ip4_input+0x274>)
 800cacc:	2200      	movs	r2, #0
 800cace:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800cad0:	4b06      	ldr	r3, [pc, #24]	; (800caec <ip4_input+0x274>)
 800cad2:	2200      	movs	r2, #0
 800cad4:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800cad6:	4b05      	ldr	r3, [pc, #20]	; (800caec <ip4_input+0x274>)
 800cad8:	2200      	movs	r2, #0
 800cada:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800cadc:	4b03      	ldr	r3, [pc, #12]	; (800caec <ip4_input+0x274>)
 800cade:	2200      	movs	r2, #0
 800cae0:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800cae2:	2300      	movs	r3, #0
}
 800cae4:	4618      	mov	r0, r3
 800cae6:	3718      	adds	r7, #24
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}
 800caec:	20000394 	.word	0x20000394
 800caf0:	200038b4 	.word	0x200038b4

0800caf4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b08a      	sub	sp, #40	; 0x28
 800caf8:	af04      	add	r7, sp, #16
 800cafa:	60f8      	str	r0, [r7, #12]
 800cafc:	60b9      	str	r1, [r7, #8]
 800cafe:	607a      	str	r2, [r7, #4]
 800cb00:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d009      	beq.n	800cb20 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d003      	beq.n	800cb1a <ip4_output_if+0x26>
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d102      	bne.n	800cb20 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800cb1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb1c:	3304      	adds	r3, #4
 800cb1e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800cb20:	78fa      	ldrb	r2, [r7, #3]
 800cb22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb24:	9302      	str	r3, [sp, #8]
 800cb26:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cb2a:	9301      	str	r3, [sp, #4]
 800cb2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cb30:	9300      	str	r3, [sp, #0]
 800cb32:	4613      	mov	r3, r2
 800cb34:	687a      	ldr	r2, [r7, #4]
 800cb36:	6979      	ldr	r1, [r7, #20]
 800cb38:	68f8      	ldr	r0, [r7, #12]
 800cb3a:	f000 f805 	bl	800cb48 <ip4_output_if_src>
 800cb3e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3718      	adds	r7, #24
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}

0800cb48 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b088      	sub	sp, #32
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	60f8      	str	r0, [r7, #12]
 800cb50:	60b9      	str	r1, [r7, #8]
 800cb52:	607a      	str	r2, [r7, #4]
 800cb54:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	89db      	ldrh	r3, [r3, #14]
 800cb5a:	2b01      	cmp	r3, #1
 800cb5c:	d006      	beq.n	800cb6c <ip4_output_if_src+0x24>
 800cb5e:	4b48      	ldr	r3, [pc, #288]	; (800cc80 <ip4_output_if_src+0x138>)
 800cb60:	f240 3233 	movw	r2, #819	; 0x333
 800cb64:	4947      	ldr	r1, [pc, #284]	; (800cc84 <ip4_output_if_src+0x13c>)
 800cb66:	4848      	ldr	r0, [pc, #288]	; (800cc88 <ip4_output_if_src+0x140>)
 800cb68:	f004 f850 	bl	8010c0c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d060      	beq.n	800cc34 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800cb72:	2314      	movs	r3, #20
 800cb74:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800cb76:	2114      	movs	r1, #20
 800cb78:	68f8      	ldr	r0, [r7, #12]
 800cb7a:	f7f8 fec1 	bl	8005900 <pbuf_header>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d002      	beq.n	800cb8a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800cb84:	f06f 0301 	mvn.w	r3, #1
 800cb88:	e075      	b.n	800cc76 <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	685b      	ldr	r3, [r3, #4]
 800cb8e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	895b      	ldrh	r3, [r3, #10]
 800cb94:	2b13      	cmp	r3, #19
 800cb96:	d806      	bhi.n	800cba6 <ip4_output_if_src+0x5e>
 800cb98:	4b39      	ldr	r3, [pc, #228]	; (800cc80 <ip4_output_if_src+0x138>)
 800cb9a:	f240 3261 	movw	r2, #865	; 0x361
 800cb9e:	493b      	ldr	r1, [pc, #236]	; (800cc8c <ip4_output_if_src+0x144>)
 800cba0:	4839      	ldr	r0, [pc, #228]	; (800cc88 <ip4_output_if_src+0x140>)
 800cba2:	f004 f833 	bl	8010c0c <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800cba6:	69fb      	ldr	r3, [r7, #28]
 800cba8:	78fa      	ldrb	r2, [r7, #3]
 800cbaa:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800cbac:	69fb      	ldr	r3, [r7, #28]
 800cbae:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800cbb2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681a      	ldr	r2, [r3, #0]
 800cbb8:	69fb      	ldr	r3, [r7, #28]
 800cbba:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800cbbc:	8b7b      	ldrh	r3, [r7, #26]
 800cbbe:	089b      	lsrs	r3, r3, #2
 800cbc0:	b29b      	uxth	r3, r3
 800cbc2:	b2db      	uxtb	r3, r3
 800cbc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbc8:	b2da      	uxtb	r2, r3
 800cbca:	69fb      	ldr	r3, [r7, #28]
 800cbcc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800cbce:	69fb      	ldr	r3, [r7, #28]
 800cbd0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800cbd4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	891b      	ldrh	r3, [r3, #8]
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f7f7 fd88 	bl	80046f0 <lwip_htons>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	461a      	mov	r2, r3
 800cbe4:	69fb      	ldr	r3, [r7, #28]
 800cbe6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800cbe8:	69fb      	ldr	r3, [r7, #28]
 800cbea:	2200      	movs	r2, #0
 800cbec:	719a      	strb	r2, [r3, #6]
 800cbee:	2200      	movs	r2, #0
 800cbf0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800cbf2:	4b27      	ldr	r3, [pc, #156]	; (800cc90 <ip4_output_if_src+0x148>)
 800cbf4:	881b      	ldrh	r3, [r3, #0]
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f7f7 fd7a 	bl	80046f0 <lwip_htons>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	461a      	mov	r2, r3
 800cc00:	69fb      	ldr	r3, [r7, #28]
 800cc02:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800cc04:	4b22      	ldr	r3, [pc, #136]	; (800cc90 <ip4_output_if_src+0x148>)
 800cc06:	881b      	ldrh	r3, [r3, #0]
 800cc08:	3301      	adds	r3, #1
 800cc0a:	b29a      	uxth	r2, r3
 800cc0c:	4b20      	ldr	r3, [pc, #128]	; (800cc90 <ip4_output_if_src+0x148>)
 800cc0e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d104      	bne.n	800cc20 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800cc16:	4b1f      	ldr	r3, [pc, #124]	; (800cc94 <ip4_output_if_src+0x14c>)
 800cc18:	681a      	ldr	r2, [r3, #0]
 800cc1a:	69fb      	ldr	r3, [r7, #28]
 800cc1c:	60da      	str	r2, [r3, #12]
 800cc1e:	e003      	b.n	800cc28 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	681a      	ldr	r2, [r3, #0]
 800cc24:	69fb      	ldr	r3, [r7, #28]
 800cc26:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800cc28:	69fb      	ldr	r3, [r7, #28]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	729a      	strb	r2, [r3, #10]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	72da      	strb	r2, [r3, #11]
 800cc32:	e008      	b.n	800cc46 <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	685b      	ldr	r3, [r3, #4]
 800cc38:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800cc3a:	69fb      	ldr	r3, [r7, #28]
 800cc3c:	691b      	ldr	r3, [r3, #16]
 800cc3e:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800cc40:	f107 0314 	add.w	r3, r7, #20
 800cc44:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800cc46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d00c      	beq.n	800cc68 <ip4_output_if_src+0x120>
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	891a      	ldrh	r2, [r3, #8]
 800cc52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cc56:	429a      	cmp	r2, r3
 800cc58:	d906      	bls.n	800cc68 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 800cc5a:	687a      	ldr	r2, [r7, #4]
 800cc5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cc5e:	68f8      	ldr	r0, [r7, #12]
 800cc60:	f000 fd08 	bl	800d674 <ip4_frag>
 800cc64:	4603      	mov	r3, r0
 800cc66:	e006      	b.n	800cc76 <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800cc68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc6a:	695b      	ldr	r3, [r3, #20]
 800cc6c:	687a      	ldr	r2, [r7, #4]
 800cc6e:	68f9      	ldr	r1, [r7, #12]
 800cc70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc72:	4798      	blx	r3
 800cc74:	4603      	mov	r3, r0
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3720      	adds	r7, #32
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}
 800cc7e:	bf00      	nop
 800cc80:	08015db8 	.word	0x08015db8
 800cc84:	08015dec 	.word	0x08015dec
 800cc88:	08015df8 	.word	0x08015df8
 800cc8c:	08015e20 	.word	0x08015e20
 800cc90:	20000362 	.word	0x20000362
 800cc94:	08016474 	.word	0x08016474

0800cc98 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800cc98:	b480      	push	{r7}
 800cc9a:	b085      	sub	sp, #20
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
 800cca0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccac:	d002      	beq.n	800ccb4 <ip4_addr_isbroadcast_u32+0x1c>
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d101      	bne.n	800ccb8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	e02a      	b.n	800cd0e <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ccbe:	f003 0302 	and.w	r3, r3, #2
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d101      	bne.n	800ccca <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	e021      	b.n	800cd0e <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	3304      	adds	r3, #4
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	687a      	ldr	r2, [r7, #4]
 800ccd2:	429a      	cmp	r2, r3
 800ccd4:	d101      	bne.n	800ccda <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	e019      	b.n	800cd0e <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800ccda:	68fa      	ldr	r2, [r7, #12]
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	3304      	adds	r3, #4
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	405a      	eors	r2, r3
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	3308      	adds	r3, #8
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	4013      	ands	r3, r2
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d10d      	bne.n	800cd0c <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	3308      	adds	r3, #8
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	43da      	mvns	r2, r3
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	3308      	adds	r3, #8
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d101      	bne.n	800cd0c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800cd08:	2301      	movs	r3, #1
 800cd0a:	e000      	b.n	800cd0e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800cd0c:	2300      	movs	r3, #0
  }
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3714      	adds	r7, #20
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bc80      	pop	{r7}
 800cd16:	4770      	bx	lr

0800cd18 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b084      	sub	sp, #16
 800cd1c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800cd22:	4b12      	ldr	r3, [pc, #72]	; (800cd6c <ip_reass_tmr+0x54>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800cd28:	e018      	b.n	800cd5c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	7fdb      	ldrb	r3, [r3, #31]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d00b      	beq.n	800cd4a <ip_reass_tmr+0x32>
      r->timer--;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	7fdb      	ldrb	r3, [r3, #31]
 800cd36:	3b01      	subs	r3, #1
 800cd38:	b2da      	uxtb	r2, r3
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	60fb      	str	r3, [r7, #12]
 800cd48:	e008      	b.n	800cd5c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800cd54:	68b9      	ldr	r1, [r7, #8]
 800cd56:	6878      	ldr	r0, [r7, #4]
 800cd58:	f000 f80a 	bl	800cd70 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d1e3      	bne.n	800cd2a <ip_reass_tmr+0x12>
     }
   }
}
 800cd62:	bf00      	nop
 800cd64:	3710      	adds	r7, #16
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}
 800cd6a:	bf00      	nop
 800cd6c:	20000364 	.word	0x20000364

0800cd70 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b088      	sub	sp, #32
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
 800cd78:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800cd7e:	683a      	ldr	r2, [r7, #0]
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	429a      	cmp	r2, r3
 800cd84:	d105      	bne.n	800cd92 <ip_reass_free_complete_datagram+0x22>
 800cd86:	4b45      	ldr	r3, [pc, #276]	; (800ce9c <ip_reass_free_complete_datagram+0x12c>)
 800cd88:	22ab      	movs	r2, #171	; 0xab
 800cd8a:	4945      	ldr	r1, [pc, #276]	; (800cea0 <ip_reass_free_complete_datagram+0x130>)
 800cd8c:	4845      	ldr	r0, [pc, #276]	; (800cea4 <ip_reass_free_complete_datagram+0x134>)
 800cd8e:	f003 ff3d 	bl	8010c0c <iprintf>
  if (prev != NULL) {
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d00a      	beq.n	800cdae <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	687a      	ldr	r2, [r7, #4]
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	d005      	beq.n	800cdae <ip_reass_free_complete_datagram+0x3e>
 800cda2:	4b3e      	ldr	r3, [pc, #248]	; (800ce9c <ip_reass_free_complete_datagram+0x12c>)
 800cda4:	22ad      	movs	r2, #173	; 0xad
 800cda6:	4940      	ldr	r1, [pc, #256]	; (800cea8 <ip_reass_free_complete_datagram+0x138>)
 800cda8:	483e      	ldr	r0, [pc, #248]	; (800cea4 <ip_reass_free_complete_datagram+0x134>)
 800cdaa:	f003 ff2f 	bl	8010c0c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	685b      	ldr	r3, [r3, #4]
 800cdb2:	685b      	ldr	r3, [r3, #4]
 800cdb4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	889b      	ldrh	r3, [r3, #4]
 800cdba:	b29b      	uxth	r3, r3
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d12a      	bne.n	800ce16 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	685b      	ldr	r3, [r3, #4]
 800cdc4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	681a      	ldr	r2, [r3, #0]
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800cdce:	69bb      	ldr	r3, [r7, #24]
 800cdd0:	6858      	ldr	r0, [r3, #4]
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	3308      	adds	r3, #8
 800cdd6:	2214      	movs	r2, #20
 800cdd8:	4619      	mov	r1, r3
 800cdda:	f003 f8d4 	bl	800ff86 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800cdde:	2101      	movs	r1, #1
 800cde0:	69b8      	ldr	r0, [r7, #24]
 800cde2:	f7ff fc67 	bl	800c6b4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800cde6:	69b8      	ldr	r0, [r7, #24]
 800cde8:	f7f8 fe42 	bl	8005a70 <pbuf_clen>
 800cdec:	4603      	mov	r3, r0
 800cdee:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800cdf0:	8bfa      	ldrh	r2, [r7, #30]
 800cdf2:	8a7b      	ldrh	r3, [r7, #18]
 800cdf4:	4413      	add	r3, r2
 800cdf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cdfa:	db05      	blt.n	800ce08 <ip_reass_free_complete_datagram+0x98>
 800cdfc:	4b27      	ldr	r3, [pc, #156]	; (800ce9c <ip_reass_free_complete_datagram+0x12c>)
 800cdfe:	22bc      	movs	r2, #188	; 0xbc
 800ce00:	492a      	ldr	r1, [pc, #168]	; (800ceac <ip_reass_free_complete_datagram+0x13c>)
 800ce02:	4828      	ldr	r0, [pc, #160]	; (800cea4 <ip_reass_free_complete_datagram+0x134>)
 800ce04:	f003 ff02 	bl	8010c0c <iprintf>
    pbufs_freed += clen;
 800ce08:	8bfa      	ldrh	r2, [r7, #30]
 800ce0a:	8a7b      	ldrh	r3, [r7, #18]
 800ce0c:	4413      	add	r3, r2
 800ce0e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800ce10:	69b8      	ldr	r0, [r7, #24]
 800ce12:	f7f8 fd99 	bl	8005948 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	685b      	ldr	r3, [r3, #4]
 800ce1a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800ce1c:	e01f      	b.n	800ce5e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800ce1e:	69bb      	ldr	r3, [r7, #24]
 800ce20:	685b      	ldr	r3, [r3, #4]
 800ce22:	617b      	str	r3, [r7, #20]
    pcur = p;
 800ce24:	69bb      	ldr	r3, [r7, #24]
 800ce26:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800ce28:	697b      	ldr	r3, [r7, #20]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800ce2e:	68f8      	ldr	r0, [r7, #12]
 800ce30:	f7f8 fe1e 	bl	8005a70 <pbuf_clen>
 800ce34:	4603      	mov	r3, r0
 800ce36:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ce38:	8bfa      	ldrh	r2, [r7, #30]
 800ce3a:	8a7b      	ldrh	r3, [r7, #18]
 800ce3c:	4413      	add	r3, r2
 800ce3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce42:	db05      	blt.n	800ce50 <ip_reass_free_complete_datagram+0xe0>
 800ce44:	4b15      	ldr	r3, [pc, #84]	; (800ce9c <ip_reass_free_complete_datagram+0x12c>)
 800ce46:	22cc      	movs	r2, #204	; 0xcc
 800ce48:	4918      	ldr	r1, [pc, #96]	; (800ceac <ip_reass_free_complete_datagram+0x13c>)
 800ce4a:	4816      	ldr	r0, [pc, #88]	; (800cea4 <ip_reass_free_complete_datagram+0x134>)
 800ce4c:	f003 fede 	bl	8010c0c <iprintf>
    pbufs_freed += clen;
 800ce50:	8bfa      	ldrh	r2, [r7, #30]
 800ce52:	8a7b      	ldrh	r3, [r7, #18]
 800ce54:	4413      	add	r3, r2
 800ce56:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800ce58:	68f8      	ldr	r0, [r7, #12]
 800ce5a:	f7f8 fd75 	bl	8005948 <pbuf_free>
  while (p != NULL) {
 800ce5e:	69bb      	ldr	r3, [r7, #24]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d1dc      	bne.n	800ce1e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800ce64:	6839      	ldr	r1, [r7, #0]
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	f000 f8c2 	bl	800cff0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800ce6c:	4b10      	ldr	r3, [pc, #64]	; (800ceb0 <ip_reass_free_complete_datagram+0x140>)
 800ce6e:	881b      	ldrh	r3, [r3, #0]
 800ce70:	8bfa      	ldrh	r2, [r7, #30]
 800ce72:	429a      	cmp	r2, r3
 800ce74:	d905      	bls.n	800ce82 <ip_reass_free_complete_datagram+0x112>
 800ce76:	4b09      	ldr	r3, [pc, #36]	; (800ce9c <ip_reass_free_complete_datagram+0x12c>)
 800ce78:	22d2      	movs	r2, #210	; 0xd2
 800ce7a:	490e      	ldr	r1, [pc, #56]	; (800ceb4 <ip_reass_free_complete_datagram+0x144>)
 800ce7c:	4809      	ldr	r0, [pc, #36]	; (800cea4 <ip_reass_free_complete_datagram+0x134>)
 800ce7e:	f003 fec5 	bl	8010c0c <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800ce82:	4b0b      	ldr	r3, [pc, #44]	; (800ceb0 <ip_reass_free_complete_datagram+0x140>)
 800ce84:	881a      	ldrh	r2, [r3, #0]
 800ce86:	8bfb      	ldrh	r3, [r7, #30]
 800ce88:	1ad3      	subs	r3, r2, r3
 800ce8a:	b29a      	uxth	r2, r3
 800ce8c:	4b08      	ldr	r3, [pc, #32]	; (800ceb0 <ip_reass_free_complete_datagram+0x140>)
 800ce8e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800ce90:	8bfb      	ldrh	r3, [r7, #30]
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	3720      	adds	r7, #32
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}
 800ce9a:	bf00      	nop
 800ce9c:	08015e50 	.word	0x08015e50
 800cea0:	08015e8c 	.word	0x08015e8c
 800cea4:	08015e98 	.word	0x08015e98
 800cea8:	08015ec0 	.word	0x08015ec0
 800ceac:	08015ed4 	.word	0x08015ed4
 800ceb0:	20000368 	.word	0x20000368
 800ceb4:	08015ef4 	.word	0x08015ef4

0800ceb8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b08a      	sub	sp, #40	; 0x28
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
 800cec0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800cec2:	2300      	movs	r3, #0
 800cec4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800cec6:	2300      	movs	r3, #0
 800cec8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800ceca:	2300      	movs	r3, #0
 800cecc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800cece:	2300      	movs	r3, #0
 800ced0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800ced2:	2300      	movs	r3, #0
 800ced4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800ced6:	4b28      	ldr	r3, [pc, #160]	; (800cf78 <ip_reass_remove_oldest_datagram+0xc0>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800cedc:	e030      	b.n	800cf40 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800cede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cee0:	695a      	ldr	r2, [r3, #20]
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	68db      	ldr	r3, [r3, #12]
 800cee6:	429a      	cmp	r2, r3
 800cee8:	d10c      	bne.n	800cf04 <ip_reass_remove_oldest_datagram+0x4c>
 800ceea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceec:	699a      	ldr	r2, [r3, #24]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	691b      	ldr	r3, [r3, #16]
 800cef2:	429a      	cmp	r2, r3
 800cef4:	d106      	bne.n	800cf04 <ip_reass_remove_oldest_datagram+0x4c>
 800cef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cef8:	899a      	ldrh	r2, [r3, #12]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	889b      	ldrh	r3, [r3, #4]
 800cefe:	b29b      	uxth	r3, r3
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d014      	beq.n	800cf2e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800cf04:	693b      	ldr	r3, [r7, #16]
 800cf06:	3301      	adds	r3, #1
 800cf08:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800cf0a:	6a3b      	ldr	r3, [r7, #32]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d104      	bne.n	800cf1a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800cf10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf12:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800cf14:	69fb      	ldr	r3, [r7, #28]
 800cf16:	61bb      	str	r3, [r7, #24]
 800cf18:	e009      	b.n	800cf2e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800cf1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf1c:	7fda      	ldrb	r2, [r3, #31]
 800cf1e:	6a3b      	ldr	r3, [r7, #32]
 800cf20:	7fdb      	ldrb	r3, [r3, #31]
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d803      	bhi.n	800cf2e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800cf26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf28:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800cf2a:	69fb      	ldr	r3, [r7, #28]
 800cf2c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800cf2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d001      	beq.n	800cf3a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800cf36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf38:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800cf3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800cf40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d1cb      	bne.n	800cede <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800cf46:	6a3b      	ldr	r3, [r7, #32]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d008      	beq.n	800cf5e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800cf4c:	69b9      	ldr	r1, [r7, #24]
 800cf4e:	6a38      	ldr	r0, [r7, #32]
 800cf50:	f7ff ff0e 	bl	800cd70 <ip_reass_free_complete_datagram>
 800cf54:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800cf56:	697a      	ldr	r2, [r7, #20]
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	4413      	add	r3, r2
 800cf5c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800cf5e:	697a      	ldr	r2, [r7, #20]
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	429a      	cmp	r2, r3
 800cf64:	da02      	bge.n	800cf6c <ip_reass_remove_oldest_datagram+0xb4>
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	2b01      	cmp	r3, #1
 800cf6a:	dcac      	bgt.n	800cec6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800cf6c:	697b      	ldr	r3, [r7, #20]
}
 800cf6e:	4618      	mov	r0, r3
 800cf70:	3728      	adds	r7, #40	; 0x28
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bd80      	pop	{r7, pc}
 800cf76:	bf00      	nop
 800cf78:	20000364 	.word	0x20000364

0800cf7c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b084      	sub	sp, #16
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
 800cf84:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800cf86:	2004      	movs	r0, #4
 800cf88:	f7f7 ff5a 	bl	8004e40 <memp_malloc>
 800cf8c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d110      	bne.n	800cfb6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800cf94:	6839      	ldr	r1, [r7, #0]
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	f7ff ff8e 	bl	800ceb8 <ip_reass_remove_oldest_datagram>
 800cf9c:	4602      	mov	r2, r0
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	4293      	cmp	r3, r2
 800cfa2:	dc03      	bgt.n	800cfac <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800cfa4:	2004      	movs	r0, #4
 800cfa6:	f7f7 ff4b 	bl	8004e40 <memp_malloc>
 800cfaa:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d101      	bne.n	800cfb6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	e016      	b.n	800cfe4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800cfb6:	2220      	movs	r2, #32
 800cfb8:	2100      	movs	r1, #0
 800cfba:	68f8      	ldr	r0, [r7, #12]
 800cfbc:	f002 ffee 	bl	800ff9c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	2203      	movs	r2, #3
 800cfc4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800cfc6:	4b09      	ldr	r3, [pc, #36]	; (800cfec <ip_reass_enqueue_new_datagram+0x70>)
 800cfc8:	681a      	ldr	r2, [r3, #0]
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800cfce:	4a07      	ldr	r2, [pc, #28]	; (800cfec <ip_reass_enqueue_new_datagram+0x70>)
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	3308      	adds	r3, #8
 800cfd8:	2214      	movs	r2, #20
 800cfda:	6879      	ldr	r1, [r7, #4]
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f002 ffd2 	bl	800ff86 <memcpy>
  return ipr;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	3710      	adds	r7, #16
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd80      	pop	{r7, pc}
 800cfec:	20000364 	.word	0x20000364

0800cff0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b082      	sub	sp, #8
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
 800cff8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800cffa:	4b10      	ldr	r3, [pc, #64]	; (800d03c <ip_reass_dequeue_datagram+0x4c>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	687a      	ldr	r2, [r7, #4]
 800d000:	429a      	cmp	r2, r3
 800d002:	d104      	bne.n	800d00e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	4a0c      	ldr	r2, [pc, #48]	; (800d03c <ip_reass_dequeue_datagram+0x4c>)
 800d00a:	6013      	str	r3, [r2, #0]
 800d00c:	e00d      	b.n	800d02a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d106      	bne.n	800d022 <ip_reass_dequeue_datagram+0x32>
 800d014:	4b0a      	ldr	r3, [pc, #40]	; (800d040 <ip_reass_dequeue_datagram+0x50>)
 800d016:	f240 1245 	movw	r2, #325	; 0x145
 800d01a:	490a      	ldr	r1, [pc, #40]	; (800d044 <ip_reass_dequeue_datagram+0x54>)
 800d01c:	480a      	ldr	r0, [pc, #40]	; (800d048 <ip_reass_dequeue_datagram+0x58>)
 800d01e:	f003 fdf5 	bl	8010c0c <iprintf>
    prev->next = ipr->next;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681a      	ldr	r2, [r3, #0]
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800d02a:	6879      	ldr	r1, [r7, #4]
 800d02c:	2004      	movs	r0, #4
 800d02e:	f7f7 ff53 	bl	8004ed8 <memp_free>
}
 800d032:	bf00      	nop
 800d034:	3708      	adds	r7, #8
 800d036:	46bd      	mov	sp, r7
 800d038:	bd80      	pop	{r7, pc}
 800d03a:	bf00      	nop
 800d03c:	20000364 	.word	0x20000364
 800d040:	08015e50 	.word	0x08015e50
 800d044:	08015f10 	.word	0x08015f10
 800d048:	08015e98 	.word	0x08015e98

0800d04c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b08c      	sub	sp, #48	; 0x30
 800d050:	af00      	add	r7, sp, #0
 800d052:	60f8      	str	r0, [r7, #12]
 800d054:	60b9      	str	r1, [r7, #8]
 800d056:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800d058:	2300      	movs	r3, #0
 800d05a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800d05c:	2301      	movs	r3, #1
 800d05e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800d060:	68bb      	ldr	r3, [r7, #8]
 800d062:	685b      	ldr	r3, [r3, #4]
 800d064:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800d066:	69fb      	ldr	r3, [r7, #28]
 800d068:	885b      	ldrh	r3, [r3, #2]
 800d06a:	b29b      	uxth	r3, r3
 800d06c:	4618      	mov	r0, r3
 800d06e:	f7f7 fb3f 	bl	80046f0 <lwip_htons>
 800d072:	4603      	mov	r3, r0
 800d074:	461a      	mov	r2, r3
 800d076:	69fb      	ldr	r3, [r7, #28]
 800d078:	781b      	ldrb	r3, [r3, #0]
 800d07a:	b29b      	uxth	r3, r3
 800d07c:	f003 030f 	and.w	r3, r3, #15
 800d080:	b29b      	uxth	r3, r3
 800d082:	009b      	lsls	r3, r3, #2
 800d084:	b29b      	uxth	r3, r3
 800d086:	1ad3      	subs	r3, r2, r3
 800d088:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800d08a:	69fb      	ldr	r3, [r7, #28]
 800d08c:	88db      	ldrh	r3, [r3, #6]
 800d08e:	b29b      	uxth	r3, r3
 800d090:	4618      	mov	r0, r3
 800d092:	f7f7 fb2d 	bl	80046f0 <lwip_htons>
 800d096:	4603      	mov	r3, r0
 800d098:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d09c:	b29b      	uxth	r3, r3
 800d09e:	00db      	lsls	r3, r3, #3
 800d0a0:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	685b      	ldr	r3, [r3, #4]
 800d0a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800d0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	701a      	strb	r2, [r3, #0]
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	705a      	strb	r2, [r3, #1]
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	709a      	strb	r2, [r3, #2]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800d0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0bc:	8b3a      	ldrh	r2, [r7, #24]
 800d0be:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800d0c0:	8b3a      	ldrh	r2, [r7, #24]
 800d0c2:	8b7b      	ldrh	r3, [r7, #26]
 800d0c4:	4413      	add	r3, r2
 800d0c6:	b29a      	uxth	r2, r3
 800d0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ca:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	685b      	ldr	r3, [r3, #4]
 800d0d0:	627b      	str	r3, [r7, #36]	; 0x24
 800d0d2:	e061      	b.n	800d198 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800d0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d6:	685b      	ldr	r3, [r3, #4]
 800d0d8:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 800d0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0dc:	889b      	ldrh	r3, [r3, #4]
 800d0de:	b29a      	uxth	r2, r3
 800d0e0:	697b      	ldr	r3, [r7, #20]
 800d0e2:	889b      	ldrh	r3, [r3, #4]
 800d0e4:	b29b      	uxth	r3, r3
 800d0e6:	429a      	cmp	r2, r3
 800d0e8:	d232      	bcs.n	800d150 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800d0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0ee:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800d0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d01f      	beq.n	800d136 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800d0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f8:	889b      	ldrh	r3, [r3, #4]
 800d0fa:	b29a      	uxth	r2, r3
 800d0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0fe:	88db      	ldrh	r3, [r3, #6]
 800d100:	b29b      	uxth	r3, r3
 800d102:	429a      	cmp	r2, r3
 800d104:	f0c0 80e3 	bcc.w	800d2ce <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 800d108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d10a:	88db      	ldrh	r3, [r3, #6]
 800d10c:	b29a      	uxth	r2, r3
 800d10e:	697b      	ldr	r3, [r7, #20]
 800d110:	889b      	ldrh	r3, [r3, #4]
 800d112:	b29b      	uxth	r3, r3
 800d114:	429a      	cmp	r2, r3
 800d116:	f200 80da 	bhi.w	800d2ce <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800d11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d11c:	68ba      	ldr	r2, [r7, #8]
 800d11e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800d120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d122:	88db      	ldrh	r3, [r3, #6]
 800d124:	b29a      	uxth	r2, r3
 800d126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d128:	889b      	ldrh	r3, [r3, #4]
 800d12a:	b29b      	uxth	r3, r3
 800d12c:	429a      	cmp	r2, r3
 800d12e:	d037      	beq.n	800d1a0 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d130:	2300      	movs	r3, #0
 800d132:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800d134:	e034      	b.n	800d1a0 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 800d136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d138:	88db      	ldrh	r3, [r3, #6]
 800d13a:	b29a      	uxth	r2, r3
 800d13c:	697b      	ldr	r3, [r7, #20]
 800d13e:	889b      	ldrh	r3, [r3, #4]
 800d140:	b29b      	uxth	r3, r3
 800d142:	429a      	cmp	r2, r3
 800d144:	f200 80c5 	bhi.w	800d2d2 <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	68ba      	ldr	r2, [r7, #8]
 800d14c:	605a      	str	r2, [r3, #4]
      break;
 800d14e:	e027      	b.n	800d1a0 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 800d150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d152:	889b      	ldrh	r3, [r3, #4]
 800d154:	b29a      	uxth	r2, r3
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	889b      	ldrh	r3, [r3, #4]
 800d15a:	b29b      	uxth	r3, r3
 800d15c:	429a      	cmp	r2, r3
 800d15e:	f000 80ba 	beq.w	800d2d6 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800d162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d164:	889b      	ldrh	r3, [r3, #4]
 800d166:	b29a      	uxth	r2, r3
 800d168:	697b      	ldr	r3, [r7, #20]
 800d16a:	88db      	ldrh	r3, [r3, #6]
 800d16c:	b29b      	uxth	r3, r3
 800d16e:	429a      	cmp	r2, r3
 800d170:	f0c0 80b3 	bcc.w	800d2da <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800d174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d176:	2b00      	cmp	r3, #0
 800d178:	d009      	beq.n	800d18e <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 800d17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d17c:	88db      	ldrh	r3, [r3, #6]
 800d17e:	b29a      	uxth	r2, r3
 800d180:	697b      	ldr	r3, [r7, #20]
 800d182:	889b      	ldrh	r3, [r3, #4]
 800d184:	b29b      	uxth	r3, r3
 800d186:	429a      	cmp	r2, r3
 800d188:	d001      	beq.n	800d18e <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d18a:	2300      	movs	r3, #0
 800d18c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800d198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d19a      	bne.n	800d0d4 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 800d19e:	e000      	b.n	800d1a2 <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 800d1a0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800d1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d12d      	bne.n	800d204 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 800d1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d01c      	beq.n	800d1e8 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800d1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b0:	88db      	ldrh	r3, [r3, #6]
 800d1b2:	b29a      	uxth	r2, r3
 800d1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1b6:	889b      	ldrh	r3, [r3, #4]
 800d1b8:	b29b      	uxth	r3, r3
 800d1ba:	429a      	cmp	r2, r3
 800d1bc:	d906      	bls.n	800d1cc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 800d1be:	4b51      	ldr	r3, [pc, #324]	; (800d304 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d1c0:	f240 12ab 	movw	r2, #427	; 0x1ab
 800d1c4:	4950      	ldr	r1, [pc, #320]	; (800d308 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d1c6:	4851      	ldr	r0, [pc, #324]	; (800d30c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d1c8:	f003 fd20 	bl	8010c0c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800d1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ce:	68ba      	ldr	r2, [r7, #8]
 800d1d0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800d1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d4:	88db      	ldrh	r3, [r3, #6]
 800d1d6:	b29a      	uxth	r2, r3
 800d1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1da:	889b      	ldrh	r3, [r3, #4]
 800d1dc:	b29b      	uxth	r3, r3
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	d010      	beq.n	800d204 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	623b      	str	r3, [r7, #32]
 800d1e6:	e00d      	b.n	800d204 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	685b      	ldr	r3, [r3, #4]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d006      	beq.n	800d1fe <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 800d1f0:	4b44      	ldr	r3, [pc, #272]	; (800d304 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d1f2:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 800d1f6:	4946      	ldr	r1, [pc, #280]	; (800d310 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d1f8:	4844      	ldr	r0, [pc, #272]	; (800d30c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d1fa:	f003 fd07 	bl	8010c0c <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	68ba      	ldr	r2, [r7, #8]
 800d202:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d105      	bne.n	800d216 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	7f9b      	ldrb	r3, [r3, #30]
 800d20e:	f003 0301 	and.w	r3, r3, #1
 800d212:	2b00      	cmp	r3, #0
 800d214:	d059      	beq.n	800d2ca <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 800d216:	6a3b      	ldr	r3, [r7, #32]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d04f      	beq.n	800d2bc <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	685b      	ldr	r3, [r3, #4]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d006      	beq.n	800d232 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	685b      	ldr	r3, [r3, #4]
 800d228:	685b      	ldr	r3, [r3, #4]
 800d22a:	889b      	ldrh	r3, [r3, #4]
 800d22c:	b29b      	uxth	r3, r3
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d002      	beq.n	800d238 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800d232:	2300      	movs	r3, #0
 800d234:	623b      	str	r3, [r7, #32]
 800d236:	e041      	b.n	800d2bc <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800d238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d23a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800d23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800d242:	e012      	b.n	800d26a <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 800d244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d246:	685b      	ldr	r3, [r3, #4]
 800d248:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800d24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d24c:	88db      	ldrh	r3, [r3, #6]
 800d24e:	b29a      	uxth	r2, r3
 800d250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d252:	889b      	ldrh	r3, [r3, #4]
 800d254:	b29b      	uxth	r3, r3
 800d256:	429a      	cmp	r2, r3
 800d258:	d002      	beq.n	800d260 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 800d25a:	2300      	movs	r3, #0
 800d25c:	623b      	str	r3, [r7, #32]
            break;
 800d25e:	e007      	b.n	800d270 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 800d260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d262:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800d264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800d26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d1e9      	bne.n	800d244 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800d270:	6a3b      	ldr	r3, [r7, #32]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d022      	beq.n	800d2bc <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	685b      	ldr	r3, [r3, #4]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d106      	bne.n	800d28c <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 800d27e:	4b21      	ldr	r3, [pc, #132]	; (800d304 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d280:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800d284:	4923      	ldr	r1, [pc, #140]	; (800d314 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800d286:	4821      	ldr	r0, [pc, #132]	; (800d30c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d288:	f003 fcc0 	bl	8010c0c <iprintf>
          LWIP_ASSERT("sanity check",
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	685b      	ldr	r3, [r3, #4]
 800d290:	685b      	ldr	r3, [r3, #4]
 800d292:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d294:	429a      	cmp	r2, r3
 800d296:	d106      	bne.n	800d2a6 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 800d298:	4b1a      	ldr	r3, [pc, #104]	; (800d304 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d29a:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800d29e:	491d      	ldr	r1, [pc, #116]	; (800d314 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800d2a0:	481a      	ldr	r0, [pc, #104]	; (800d30c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d2a2:	f003 fcb3 	bl	8010c0c <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800d2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d006      	beq.n	800d2bc <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 800d2ae:	4b15      	ldr	r3, [pc, #84]	; (800d304 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d2b0:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800d2b4:	4918      	ldr	r1, [pc, #96]	; (800d318 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d2b6:	4815      	ldr	r0, [pc, #84]	; (800d30c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d2b8:	f003 fca8 	bl	8010c0c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800d2bc:	6a3b      	ldr	r3, [r7, #32]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	bf14      	ite	ne
 800d2c2:	2301      	movne	r3, #1
 800d2c4:	2300      	moveq	r3, #0
 800d2c6:	b2db      	uxtb	r3, r3
 800d2c8:	e018      	b.n	800d2fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	e016      	b.n	800d2fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 800d2ce:	bf00      	nop
 800d2d0:	e004      	b.n	800d2dc <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 800d2d2:	bf00      	nop
 800d2d4:	e002      	b.n	800d2dc <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800d2d6:	bf00      	nop
 800d2d8:	e000      	b.n	800d2dc <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800d2da:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800d2dc:	68b8      	ldr	r0, [r7, #8]
 800d2de:	f7f8 fbc7 	bl	8005a70 <pbuf_clen>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	461a      	mov	r2, r3
 800d2e6:	4b0d      	ldr	r3, [pc, #52]	; (800d31c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800d2e8:	881b      	ldrh	r3, [r3, #0]
 800d2ea:	1a9b      	subs	r3, r3, r2
 800d2ec:	b29a      	uxth	r2, r3
 800d2ee:	4b0b      	ldr	r3, [pc, #44]	; (800d31c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800d2f0:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800d2f2:	68b8      	ldr	r0, [r7, #8]
 800d2f4:	f7f8 fb28 	bl	8005948 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d2f8:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	3730      	adds	r7, #48	; 0x30
 800d300:	46bd      	mov	sp, r7
 800d302:	bd80      	pop	{r7, pc}
 800d304:	08015e50 	.word	0x08015e50
 800d308:	08015f2c 	.word	0x08015f2c
 800d30c:	08015e98 	.word	0x08015e98
 800d310:	08015f4c 	.word	0x08015f4c
 800d314:	08015f84 	.word	0x08015f84
 800d318:	08015f94 	.word	0x08015f94
 800d31c:	20000368 	.word	0x20000368

0800d320 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b08e      	sub	sp, #56	; 0x38
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	685b      	ldr	r3, [r3, #4]
 800d32c:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800d32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d330:	781b      	ldrb	r3, [r3, #0]
 800d332:	f003 030f 	and.w	r3, r3, #15
 800d336:	009b      	lsls	r3, r3, #2
 800d338:	2b14      	cmp	r3, #20
 800d33a:	f040 8131 	bne.w	800d5a0 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800d33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d340:	88db      	ldrh	r3, [r3, #6]
 800d342:	b29b      	uxth	r3, r3
 800d344:	4618      	mov	r0, r3
 800d346:	f7f7 f9d3 	bl	80046f0 <lwip_htons>
 800d34a:	4603      	mov	r3, r0
 800d34c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d350:	b29b      	uxth	r3, r3
 800d352:	00db      	lsls	r3, r3, #3
 800d354:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800d356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d358:	885b      	ldrh	r3, [r3, #2]
 800d35a:	b29b      	uxth	r3, r3
 800d35c:	4618      	mov	r0, r3
 800d35e:	f7f7 f9c7 	bl	80046f0 <lwip_htons>
 800d362:	4603      	mov	r3, r0
 800d364:	461a      	mov	r2, r3
 800d366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d368:	781b      	ldrb	r3, [r3, #0]
 800d36a:	b29b      	uxth	r3, r3
 800d36c:	f003 030f 	and.w	r3, r3, #15
 800d370:	b29b      	uxth	r3, r3
 800d372:	009b      	lsls	r3, r3, #2
 800d374:	b29b      	uxth	r3, r3
 800d376:	1ad3      	subs	r3, r2, r3
 800d378:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800d37a:	6878      	ldr	r0, [r7, #4]
 800d37c:	f7f8 fb78 	bl	8005a70 <pbuf_clen>
 800d380:	4603      	mov	r3, r0
 800d382:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800d384:	4b8d      	ldr	r3, [pc, #564]	; (800d5bc <ip4_reass+0x29c>)
 800d386:	881b      	ldrh	r3, [r3, #0]
 800d388:	461a      	mov	r2, r3
 800d38a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d38c:	4413      	add	r3, r2
 800d38e:	2b0a      	cmp	r3, #10
 800d390:	dd10      	ble.n	800d3b4 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d392:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d394:	4619      	mov	r1, r3
 800d396:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d398:	f7ff fd8e 	bl	800ceb8 <ip_reass_remove_oldest_datagram>
 800d39c:	4603      	mov	r3, r0
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	f000 8100 	beq.w	800d5a4 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800d3a4:	4b85      	ldr	r3, [pc, #532]	; (800d5bc <ip4_reass+0x29c>)
 800d3a6:	881b      	ldrh	r3, [r3, #0]
 800d3a8:	461a      	mov	r2, r3
 800d3aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d3ac:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d3ae:	2b0a      	cmp	r3, #10
 800d3b0:	f300 80f8 	bgt.w	800d5a4 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d3b4:	4b82      	ldr	r3, [pc, #520]	; (800d5c0 <ip4_reass+0x2a0>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	633b      	str	r3, [r7, #48]	; 0x30
 800d3ba:	e015      	b.n	800d3e8 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800d3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3be:	695a      	ldr	r2, [r3, #20]
 800d3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c2:	68db      	ldr	r3, [r3, #12]
 800d3c4:	429a      	cmp	r2, r3
 800d3c6:	d10c      	bne.n	800d3e2 <ip4_reass+0xc2>
 800d3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ca:	699a      	ldr	r2, [r3, #24]
 800d3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ce:	691b      	ldr	r3, [r3, #16]
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	d106      	bne.n	800d3e2 <ip4_reass+0xc2>
 800d3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3d6:	899a      	ldrh	r2, [r3, #12]
 800d3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3da:	889b      	ldrh	r3, [r3, #4]
 800d3dc:	b29b      	uxth	r3, r3
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	d006      	beq.n	800d3f0 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	633b      	str	r3, [r7, #48]	; 0x30
 800d3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d1e6      	bne.n	800d3bc <ip4_reass+0x9c>
 800d3ee:	e000      	b.n	800d3f2 <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800d3f0:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800d3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d109      	bne.n	800d40c <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800d3f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d3fa:	4619      	mov	r1, r3
 800d3fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d3fe:	f7ff fdbd 	bl	800cf7c <ip_reass_enqueue_new_datagram>
 800d402:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800d404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d406:	2b00      	cmp	r3, #0
 800d408:	d11c      	bne.n	800d444 <ip4_reass+0x124>
      goto nullreturn;
 800d40a:	e0ce      	b.n	800d5aa <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d40e:	88db      	ldrh	r3, [r3, #6]
 800d410:	b29b      	uxth	r3, r3
 800d412:	4618      	mov	r0, r3
 800d414:	f7f7 f96c 	bl	80046f0 <lwip_htons>
 800d418:	4603      	mov	r3, r0
 800d41a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d110      	bne.n	800d444 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800d422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d424:	89db      	ldrh	r3, [r3, #14]
 800d426:	4618      	mov	r0, r3
 800d428:	f7f7 f962 	bl	80046f0 <lwip_htons>
 800d42c:	4603      	mov	r3, r0
 800d42e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d432:	2b00      	cmp	r3, #0
 800d434:	d006      	beq.n	800d444 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800d436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d438:	3308      	adds	r3, #8
 800d43a:	2214      	movs	r2, #20
 800d43c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d43e:	4618      	mov	r0, r3
 800d440:	f002 fda1 	bl	800ff86 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800d444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d446:	88db      	ldrh	r3, [r3, #6]
 800d448:	b29b      	uxth	r3, r3
 800d44a:	f003 0320 	and.w	r3, r3, #32
 800d44e:	2b00      	cmp	r3, #0
 800d450:	bf0c      	ite	eq
 800d452:	2301      	moveq	r3, #1
 800d454:	2300      	movne	r3, #0
 800d456:	b2db      	uxtb	r3, r3
 800d458:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800d45a:	69fb      	ldr	r3, [r7, #28]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d00e      	beq.n	800d47e <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 800d460:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d462:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d464:	4413      	add	r3, r2
 800d466:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800d468:	8b7a      	ldrh	r2, [r7, #26]
 800d46a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d46c:	429a      	cmp	r2, r3
 800d46e:	f0c0 8099 	bcc.w	800d5a4 <ip4_reass+0x284>
 800d472:	8b7b      	ldrh	r3, [r7, #26]
 800d474:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800d478:	4293      	cmp	r3, r2
 800d47a:	f200 8093 	bhi.w	800d5a4 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800d47e:	69fa      	ldr	r2, [r7, #28]
 800d480:	6879      	ldr	r1, [r7, #4]
 800d482:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d484:	f7ff fde2 	bl	800d04c <ip_reass_chain_frag_into_datagram_and_validate>
 800d488:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800d48a:	697b      	ldr	r3, [r7, #20]
 800d48c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d490:	f000 808a 	beq.w	800d5a8 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d494:	4b49      	ldr	r3, [pc, #292]	; (800d5bc <ip4_reass+0x29c>)
 800d496:	881a      	ldrh	r2, [r3, #0]
 800d498:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d49a:	4413      	add	r3, r2
 800d49c:	b29a      	uxth	r2, r3
 800d49e:	4b47      	ldr	r3, [pc, #284]	; (800d5bc <ip4_reass+0x29c>)
 800d4a0:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800d4a2:	69fb      	ldr	r3, [r7, #28]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d00d      	beq.n	800d4c4 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 800d4a8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d4aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d4ac:	4413      	add	r3, r2
 800d4ae:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800d4b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b2:	8a7a      	ldrh	r2, [r7, #18]
 800d4b4:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b8:	7f9b      	ldrb	r3, [r3, #30]
 800d4ba:	f043 0301 	orr.w	r3, r3, #1
 800d4be:	b2da      	uxtb	r2, r3
 800d4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4c2:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800d4c4:	697b      	ldr	r3, [r7, #20]
 800d4c6:	2b01      	cmp	r3, #1
 800d4c8:	d168      	bne.n	800d59c <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800d4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4cc:	8b9b      	ldrh	r3, [r3, #28]
 800d4ce:	3314      	adds	r3, #20
 800d4d0:	b29a      	uxth	r2, r3
 800d4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d4:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800d4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d8:	685b      	ldr	r3, [r3, #4]
 800d4da:	685b      	ldr	r3, [r3, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800d4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e2:	685b      	ldr	r3, [r3, #4]
 800d4e4:	685b      	ldr	r3, [r3, #4]
 800d4e6:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800d4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ea:	3308      	adds	r3, #8
 800d4ec:	2214      	movs	r2, #20
 800d4ee:	4619      	mov	r1, r3
 800d4f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d4f2:	f002 fd48 	bl	800ff86 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800d4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f8:	8b9b      	ldrh	r3, [r3, #28]
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f7f7 f8f8 	bl	80046f0 <lwip_htons>
 800d500:	4603      	mov	r3, r0
 800d502:	461a      	mov	r2, r3
 800d504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d506:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800d508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d50a:	2200      	movs	r2, #0
 800d50c:	719a      	strb	r2, [r3, #6]
 800d50e:	2200      	movs	r2, #0
 800d510:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800d512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d514:	2200      	movs	r2, #0
 800d516:	729a      	strb	r2, [r3, #10]
 800d518:	2200      	movs	r2, #0
 800d51a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800d51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d51e:	685b      	ldr	r3, [r3, #4]
 800d520:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800d522:	e00e      	b.n	800d542 <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 800d524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d526:	685b      	ldr	r3, [r3, #4]
 800d528:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800d52a:	f06f 0113 	mvn.w	r1, #19
 800d52e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d530:	f7f8 f9e6 	bl	8005900 <pbuf_header>
      pbuf_cat(p, r);
 800d534:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f7f8 fad2 	bl	8005ae0 <pbuf_cat>
      r = iprh->next_pbuf;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800d542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d544:	2b00      	cmp	r3, #0
 800d546:	d1ed      	bne.n	800d524 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800d548:	4b1d      	ldr	r3, [pc, #116]	; (800d5c0 <ip4_reass+0x2a0>)
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d54e:	429a      	cmp	r2, r3
 800d550:	d102      	bne.n	800d558 <ip4_reass+0x238>
      ipr_prev = NULL;
 800d552:	2300      	movs	r3, #0
 800d554:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d556:	e010      	b.n	800d57a <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d558:	4b19      	ldr	r3, [pc, #100]	; (800d5c0 <ip4_reass+0x2a0>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d55e:	e007      	b.n	800d570 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 800d560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d566:	429a      	cmp	r2, r3
 800d568:	d006      	beq.n	800d578 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d572:	2b00      	cmp	r3, #0
 800d574:	d1f4      	bne.n	800d560 <ip4_reass+0x240>
 800d576:	e000      	b.n	800d57a <ip4_reass+0x25a>
          break;
 800d578:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800d57a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d57c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d57e:	f7ff fd37 	bl	800cff0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	f7f8 fa74 	bl	8005a70 <pbuf_clen>
 800d588:	4603      	mov	r3, r0
 800d58a:	461a      	mov	r2, r3
 800d58c:	4b0b      	ldr	r3, [pc, #44]	; (800d5bc <ip4_reass+0x29c>)
 800d58e:	881b      	ldrh	r3, [r3, #0]
 800d590:	1a9b      	subs	r3, r3, r2
 800d592:	b29a      	uxth	r2, r3
 800d594:	4b09      	ldr	r3, [pc, #36]	; (800d5bc <ip4_reass+0x29c>)
 800d596:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	e00a      	b.n	800d5b2 <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800d59c:	2300      	movs	r3, #0
 800d59e:	e008      	b.n	800d5b2 <ip4_reass+0x292>
    goto nullreturn;
 800d5a0:	bf00      	nop
 800d5a2:	e002      	b.n	800d5aa <ip4_reass+0x28a>

nullreturn:
 800d5a4:	bf00      	nop
 800d5a6:	e000      	b.n	800d5aa <ip4_reass+0x28a>
    goto nullreturn;
 800d5a8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f7f8 f9cc 	bl	8005948 <pbuf_free>
  return NULL;
 800d5b0:	2300      	movs	r3, #0
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	3738      	adds	r7, #56	; 0x38
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}
 800d5ba:	bf00      	nop
 800d5bc:	20000368 	.word	0x20000368
 800d5c0:	20000364 	.word	0x20000364

0800d5c4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800d5c8:	2005      	movs	r0, #5
 800d5ca:	f7f7 fc39 	bl	8004e40 <memp_malloc>
 800d5ce:	4603      	mov	r3, r0
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	bd80      	pop	{r7, pc}

0800d5d4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b082      	sub	sp, #8
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d106      	bne.n	800d5f0 <ip_frag_free_pbuf_custom_ref+0x1c>
 800d5e2:	4b07      	ldr	r3, [pc, #28]	; (800d600 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800d5e4:	f240 22ae 	movw	r2, #686	; 0x2ae
 800d5e8:	4906      	ldr	r1, [pc, #24]	; (800d604 <ip_frag_free_pbuf_custom_ref+0x30>)
 800d5ea:	4807      	ldr	r0, [pc, #28]	; (800d608 <ip_frag_free_pbuf_custom_ref+0x34>)
 800d5ec:	f003 fb0e 	bl	8010c0c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800d5f0:	6879      	ldr	r1, [r7, #4]
 800d5f2:	2005      	movs	r0, #5
 800d5f4:	f7f7 fc70 	bl	8004ed8 <memp_free>
}
 800d5f8:	bf00      	nop
 800d5fa:	3708      	adds	r7, #8
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bd80      	pop	{r7, pc}
 800d600:	08015e50 	.word	0x08015e50
 800d604:	08015fb8 	.word	0x08015fb8
 800d608:	08015e98 	.word	0x08015e98

0800d60c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b084      	sub	sp, #16
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d106      	bne.n	800d62c <ipfrag_free_pbuf_custom+0x20>
 800d61e:	4b11      	ldr	r3, [pc, #68]	; (800d664 <ipfrag_free_pbuf_custom+0x58>)
 800d620:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800d624:	4910      	ldr	r1, [pc, #64]	; (800d668 <ipfrag_free_pbuf_custom+0x5c>)
 800d626:	4811      	ldr	r0, [pc, #68]	; (800d66c <ipfrag_free_pbuf_custom+0x60>)
 800d628:	f003 faf0 	bl	8010c0c <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 800d62c:	68fa      	ldr	r2, [r7, #12]
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	429a      	cmp	r2, r3
 800d632:	d006      	beq.n	800d642 <ipfrag_free_pbuf_custom+0x36>
 800d634:	4b0b      	ldr	r3, [pc, #44]	; (800d664 <ipfrag_free_pbuf_custom+0x58>)
 800d636:	f240 22b9 	movw	r2, #697	; 0x2b9
 800d63a:	490d      	ldr	r1, [pc, #52]	; (800d670 <ipfrag_free_pbuf_custom+0x64>)
 800d63c:	480b      	ldr	r0, [pc, #44]	; (800d66c <ipfrag_free_pbuf_custom+0x60>)
 800d63e:	f003 fae5 	bl	8010c0c <iprintf>
  if (pcr->original != NULL) {
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	695b      	ldr	r3, [r3, #20]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d004      	beq.n	800d654 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	695b      	ldr	r3, [r3, #20]
 800d64e:	4618      	mov	r0, r3
 800d650:	f7f8 f97a 	bl	8005948 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800d654:	68f8      	ldr	r0, [r7, #12]
 800d656:	f7ff ffbd 	bl	800d5d4 <ip_frag_free_pbuf_custom_ref>
}
 800d65a:	bf00      	nop
 800d65c:	3710      	adds	r7, #16
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}
 800d662:	bf00      	nop
 800d664:	08015e50 	.word	0x08015e50
 800d668:	08015fc4 	.word	0x08015fc4
 800d66c:	08015e98 	.word	0x08015e98
 800d670:	08015fd0 	.word	0x08015fd0

0800d674 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b092      	sub	sp, #72	; 0x48
 800d678:	af02      	add	r7, sp, #8
 800d67a:	60f8      	str	r0, [r7, #12]
 800d67c:	60b9      	str	r1, [r7, #8]
 800d67e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800d680:	2300      	movs	r3, #0
 800d682:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800d684:	68bb      	ldr	r3, [r7, #8]
 800d686:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d688:	3b14      	subs	r3, #20
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	da00      	bge.n	800d690 <ip4_frag+0x1c>
 800d68e:	3307      	adds	r3, #7
 800d690:	10db      	asrs	r3, r3, #3
 800d692:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800d694:	2314      	movs	r3, #20
 800d696:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	685b      	ldr	r3, [r3, #4]
 800d69c:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 800d69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6a0:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800d6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6a4:	781b      	ldrb	r3, [r3, #0]
 800d6a6:	f003 030f 	and.w	r3, r3, #15
 800d6aa:	009b      	lsls	r3, r3, #2
 800d6ac:	2b14      	cmp	r3, #20
 800d6ae:	d009      	beq.n	800d6c4 <ip4_frag+0x50>
 800d6b0:	4b79      	ldr	r3, [pc, #484]	; (800d898 <ip4_frag+0x224>)
 800d6b2:	f240 22e1 	movw	r2, #737	; 0x2e1
 800d6b6:	4979      	ldr	r1, [pc, #484]	; (800d89c <ip4_frag+0x228>)
 800d6b8:	4879      	ldr	r0, [pc, #484]	; (800d8a0 <ip4_frag+0x22c>)
 800d6ba:	f003 faa7 	bl	8010c0c <iprintf>
 800d6be:	f06f 0305 	mvn.w	r3, #5
 800d6c2:	e0e5      	b.n	800d890 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800d6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6c6:	88db      	ldrh	r3, [r3, #6]
 800d6c8:	b29b      	uxth	r3, r3
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f7f7 f810 	bl	80046f0 <lwip_htons>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 800d6d4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d6d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d6da:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800d6dc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d6de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d009      	beq.n	800d6fa <ip4_frag+0x86>
 800d6e6:	4b6c      	ldr	r3, [pc, #432]	; (800d898 <ip4_frag+0x224>)
 800d6e8:	f240 22e6 	movw	r2, #742	; 0x2e6
 800d6ec:	496d      	ldr	r1, [pc, #436]	; (800d8a4 <ip4_frag+0x230>)
 800d6ee:	486c      	ldr	r0, [pc, #432]	; (800d8a0 <ip4_frag+0x22c>)
 800d6f0:	f003 fa8c 	bl	8010c0c <iprintf>
 800d6f4:	f06f 0305 	mvn.w	r3, #5
 800d6f8:	e0ca      	b.n	800d890 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	891b      	ldrh	r3, [r3, #8]
 800d6fe:	3b14      	subs	r3, #20
 800d700:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 800d702:	e0bc      	b.n	800d87e <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800d704:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800d706:	00da      	lsls	r2, r3, #3
 800d708:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d70a:	4293      	cmp	r3, r2
 800d70c:	bfa8      	it	ge
 800d70e:	4613      	movge	r3, r2
 800d710:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800d712:	2200      	movs	r2, #0
 800d714:	2114      	movs	r1, #20
 800d716:	2002      	movs	r0, #2
 800d718:	f7f7 fda4 	bl	8005264 <pbuf_alloc>
 800d71c:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800d71e:	6a3b      	ldr	r3, [r7, #32]
 800d720:	2b00      	cmp	r3, #0
 800d722:	f000 80b2 	beq.w	800d88a <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	895b      	ldrh	r3, [r3, #10]
 800d72a:	2b13      	cmp	r3, #19
 800d72c:	d806      	bhi.n	800d73c <ip4_frag+0xc8>
 800d72e:	4b5a      	ldr	r3, [pc, #360]	; (800d898 <ip4_frag+0x224>)
 800d730:	f240 3209 	movw	r2, #777	; 0x309
 800d734:	495c      	ldr	r1, [pc, #368]	; (800d8a8 <ip4_frag+0x234>)
 800d736:	485a      	ldr	r0, [pc, #360]	; (800d8a0 <ip4_frag+0x22c>)
 800d738:	f003 fa68 	bl	8010c0c <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800d73c:	6a3b      	ldr	r3, [r7, #32]
 800d73e:	685b      	ldr	r3, [r3, #4]
 800d740:	2214      	movs	r2, #20
 800d742:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d744:	4618      	mov	r0, r3
 800d746:	f002 fc1e 	bl	800ff86 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800d74a:	6a3b      	ldr	r3, [r7, #32]
 800d74c:	685b      	ldr	r3, [r3, #4]
 800d74e:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 800d750:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d752:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 800d754:	e04f      	b.n	800d7f6 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	895a      	ldrh	r2, [r3, #10]
 800d75a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d75c:	1ad3      	subs	r3, r2, r3
 800d75e:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800d760:	8b7a      	ldrh	r2, [r7, #26]
 800d762:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d764:	4293      	cmp	r3, r2
 800d766:	bf28      	it	cs
 800d768:	4613      	movcs	r3, r2
 800d76a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800d76c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d105      	bne.n	800d77e <ip4_frag+0x10a>
        poff = 0;
 800d772:	2300      	movs	r3, #0
 800d774:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	60fb      	str	r3, [r7, #12]
        continue;
 800d77c:	e03b      	b.n	800d7f6 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800d77e:	f7ff ff21 	bl	800d5c4 <ip_frag_alloc_pbuf_custom_ref>
 800d782:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d103      	bne.n	800d792 <ip4_frag+0x11e>
        pbuf_free(rambuf);
 800d78a:	6a38      	ldr	r0, [r7, #32]
 800d78c:	f7f8 f8dc 	bl	8005948 <pbuf_free>
        goto memerr;
 800d790:	e07c      	b.n	800d88c <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d792:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d798:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d79a:	4413      	add	r3, r2
 800d79c:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800d79e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800d7a0:	9201      	str	r2, [sp, #4]
 800d7a2:	9300      	str	r3, [sp, #0]
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	2202      	movs	r2, #2
 800d7a8:	2004      	movs	r0, #4
 800d7aa:	f7f7 feef 	bl	800558c <pbuf_alloced_custom>
 800d7ae:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 800d7b0:	693b      	ldr	r3, [r7, #16]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d106      	bne.n	800d7c4 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 800d7b6:	6978      	ldr	r0, [r7, #20]
 800d7b8:	f7ff ff0c 	bl	800d5d4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800d7bc:	6a38      	ldr	r0, [r7, #32]
 800d7be:	f7f8 f8c3 	bl	8005948 <pbuf_free>
        goto memerr;
 800d7c2:	e063      	b.n	800d88c <ip4_frag+0x218>
      }
      pbuf_ref(p);
 800d7c4:	68f8      	ldr	r0, [r7, #12]
 800d7c6:	f7f8 f969 	bl	8005a9c <pbuf_ref>
      pcr->original = p;
 800d7ca:	697b      	ldr	r3, [r7, #20]
 800d7cc:	68fa      	ldr	r2, [r7, #12]
 800d7ce:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800d7d0:	697b      	ldr	r3, [r7, #20]
 800d7d2:	4a36      	ldr	r2, [pc, #216]	; (800d8ac <ip4_frag+0x238>)
 800d7d4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800d7d6:	6939      	ldr	r1, [r7, #16]
 800d7d8:	6a38      	ldr	r0, [r7, #32]
 800d7da:	f7f8 f981 	bl	8005ae0 <pbuf_cat>
      left_to_copy -= newpbuflen;
 800d7de:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800d7e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d7e2:	1ad3      	subs	r3, r2, r3
 800d7e4:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 800d7e6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d004      	beq.n	800d7f6 <ip4_frag+0x182>
        poff = 0;
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800d7f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d1ac      	bne.n	800d756 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 800d7fc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d7fe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d800:	4413      	add	r3, r2
 800d802:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800d804:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d80a:	3b14      	subs	r3, #20
 800d80c:	429a      	cmp	r2, r3
 800d80e:	bfd4      	ite	le
 800d810:	2301      	movle	r3, #1
 800d812:	2300      	movgt	r3, #0
 800d814:	b2db      	uxtb	r3, r3
 800d816:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800d818:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d81a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d81e:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 800d820:	69fb      	ldr	r3, [r7, #28]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d103      	bne.n	800d82e <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 800d826:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d828:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d82c:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800d82e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d830:	4618      	mov	r0, r3
 800d832:	f7f6 ff5d 	bl	80046f0 <lwip_htons>
 800d836:	4603      	mov	r3, r0
 800d838:	461a      	mov	r2, r3
 800d83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d83c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800d83e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d840:	3314      	adds	r3, #20
 800d842:	b29b      	uxth	r3, r3
 800d844:	4618      	mov	r0, r3
 800d846:	f7f6 ff53 	bl	80046f0 <lwip_htons>
 800d84a:	4603      	mov	r3, r0
 800d84c:	461a      	mov	r2, r3
 800d84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d850:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800d852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d854:	2200      	movs	r2, #0
 800d856:	729a      	strb	r2, [r3, #10]
 800d858:	2200      	movs	r2, #0
 800d85a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800d85c:	68bb      	ldr	r3, [r7, #8]
 800d85e:	695b      	ldr	r3, [r3, #20]
 800d860:	687a      	ldr	r2, [r7, #4]
 800d862:	6a39      	ldr	r1, [r7, #32]
 800d864:	68b8      	ldr	r0, [r7, #8]
 800d866:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800d868:	6a38      	ldr	r0, [r7, #32]
 800d86a:	f7f8 f86d 	bl	8005948 <pbuf_free>
    left -= fragsize;
 800d86e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d870:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d872:	1ad3      	subs	r3, r2, r3
 800d874:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 800d876:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800d878:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800d87a:	4413      	add	r3, r2
 800d87c:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 800d87e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d880:	2b00      	cmp	r3, #0
 800d882:	f47f af3f 	bne.w	800d704 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800d886:	2300      	movs	r3, #0
 800d888:	e002      	b.n	800d890 <ip4_frag+0x21c>
      goto memerr;
 800d88a:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800d88c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d890:	4618      	mov	r0, r3
 800d892:	3740      	adds	r7, #64	; 0x40
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}
 800d898:	08015e50 	.word	0x08015e50
 800d89c:	08015fdc 	.word	0x08015fdc
 800d8a0:	08015e98 	.word	0x08015e98
 800d8a4:	08016004 	.word	0x08016004
 800d8a8:	08016020 	.word	0x08016020
 800d8ac:	0800d60d 	.word	0x0800d60d

0800d8b0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b086      	sub	sp, #24
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
 800d8b8:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 800d8ba:	230e      	movs	r3, #14
 800d8bc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	895b      	ldrh	r3, [r3, #10]
 800d8c2:	2b0e      	cmp	r3, #14
 800d8c4:	d977      	bls.n	800d9b6 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	685b      	ldr	r3, [r3, #4]
 800d8ca:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	7b1a      	ldrb	r2, [r3, #12]
 800d8d0:	7b5b      	ldrb	r3, [r3, #13]
 800d8d2:	021b      	lsls	r3, r3, #8
 800d8d4:	4313      	orrs	r3, r2
 800d8d6:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800d8d8:	693b      	ldr	r3, [r7, #16]
 800d8da:	781b      	ldrb	r3, [r3, #0]
 800d8dc:	f003 0301 	and.w	r3, r3, #1
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d023      	beq.n	800d92c <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800d8e4:	693b      	ldr	r3, [r7, #16]
 800d8e6:	781b      	ldrb	r3, [r3, #0]
 800d8e8:	2b01      	cmp	r3, #1
 800d8ea:	d10f      	bne.n	800d90c <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	785b      	ldrb	r3, [r3, #1]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d11b      	bne.n	800d92c <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800d8f4:	693b      	ldr	r3, [r7, #16]
 800d8f6:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d8f8:	2b5e      	cmp	r3, #94	; 0x5e
 800d8fa:	d117      	bne.n	800d92c <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	7b5b      	ldrb	r3, [r3, #13]
 800d900:	f043 0310 	orr.w	r3, r3, #16
 800d904:	b2da      	uxtb	r2, r3
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	735a      	strb	r2, [r3, #13]
 800d90a:	e00f      	b.n	800d92c <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800d90c:	693b      	ldr	r3, [r7, #16]
 800d90e:	2206      	movs	r2, #6
 800d910:	4930      	ldr	r1, [pc, #192]	; (800d9d4 <ethernet_input+0x124>)
 800d912:	4618      	mov	r0, r3
 800d914:	f002 fb28 	bl	800ff68 <memcmp>
 800d918:	4603      	mov	r3, r0
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d106      	bne.n	800d92c <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	7b5b      	ldrb	r3, [r3, #13]
 800d922:	f043 0308 	orr.w	r3, r3, #8
 800d926:	b2da      	uxtb	r2, r3
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800d92c:	89fb      	ldrh	r3, [r7, #14]
 800d92e:	2b08      	cmp	r3, #8
 800d930:	d003      	beq.n	800d93a <ethernet_input+0x8a>
 800d932:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800d936:	d01e      	beq.n	800d976 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800d938:	e044      	b.n	800d9c4 <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d940:	f003 0308 	and.w	r3, r3, #8
 800d944:	2b00      	cmp	r3, #0
 800d946:	d038      	beq.n	800d9ba <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	895b      	ldrh	r3, [r3, #10]
 800d94c:	461a      	mov	r2, r3
 800d94e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d952:	429a      	cmp	r2, r3
 800d954:	db33      	blt.n	800d9be <ethernet_input+0x10e>
 800d956:	8afb      	ldrh	r3, [r7, #22]
 800d958:	425b      	negs	r3, r3
 800d95a:	b29b      	uxth	r3, r3
 800d95c:	b21b      	sxth	r3, r3
 800d95e:	4619      	mov	r1, r3
 800d960:	6878      	ldr	r0, [r7, #4]
 800d962:	f7f7 ffcd 	bl	8005900 <pbuf_header>
 800d966:	4603      	mov	r3, r0
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d128      	bne.n	800d9be <ethernet_input+0x10e>
        ip4_input(p, netif);
 800d96c:	6839      	ldr	r1, [r7, #0]
 800d96e:	6878      	ldr	r0, [r7, #4]
 800d970:	f7fe ff82 	bl	800c878 <ip4_input>
      break;
 800d974:	e01d      	b.n	800d9b2 <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d97c:	f003 0308 	and.w	r3, r3, #8
 800d980:	2b00      	cmp	r3, #0
 800d982:	d01e      	beq.n	800d9c2 <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	895b      	ldrh	r3, [r3, #10]
 800d988:	461a      	mov	r2, r3
 800d98a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d98e:	429a      	cmp	r2, r3
 800d990:	db15      	blt.n	800d9be <ethernet_input+0x10e>
 800d992:	8afb      	ldrh	r3, [r7, #22]
 800d994:	425b      	negs	r3, r3
 800d996:	b29b      	uxth	r3, r3
 800d998:	b21b      	sxth	r3, r3
 800d99a:	4619      	mov	r1, r3
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f7f7 ffaf 	bl	8005900 <pbuf_header>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d10a      	bne.n	800d9be <ethernet_input+0x10e>
        etharp_input(p, netif);
 800d9a8:	6839      	ldr	r1, [r7, #0]
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f7fe f950 	bl	800bc50 <etharp_input>
      break;
 800d9b0:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	e00a      	b.n	800d9cc <ethernet_input+0x11c>
    goto free_and_return;
 800d9b6:	bf00      	nop
 800d9b8:	e004      	b.n	800d9c4 <ethernet_input+0x114>
        goto free_and_return;
 800d9ba:	bf00      	nop
 800d9bc:	e002      	b.n	800d9c4 <ethernet_input+0x114>

free_and_return:
 800d9be:	bf00      	nop
 800d9c0:	e000      	b.n	800d9c4 <ethernet_input+0x114>
        goto free_and_return;
 800d9c2:	bf00      	nop
  pbuf_free(p);
 800d9c4:	6878      	ldr	r0, [r7, #4]
 800d9c6:	f7f7 ffbf 	bl	8005948 <pbuf_free>
  return ERR_OK;
 800d9ca:	2300      	movs	r3, #0
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	3718      	adds	r7, #24
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd80      	pop	{r7, pc}
 800d9d4:	08016478 	.word	0x08016478

0800d9d8 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b086      	sub	sp, #24
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	60f8      	str	r0, [r7, #12]
 800d9e0:	60b9      	str	r1, [r7, #8]
 800d9e2:	607a      	str	r2, [r7, #4]
 800d9e4:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800d9e6:	8c3b      	ldrh	r3, [r7, #32]
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	f7f6 fe81 	bl	80046f0 <lwip_htons>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800d9f2:	210e      	movs	r1, #14
 800d9f4:	68b8      	ldr	r0, [r7, #8]
 800d9f6:	f7f7 ff83 	bl	8005900 <pbuf_header>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d125      	bne.n	800da4c <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	685b      	ldr	r3, [r3, #4]
 800da04:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800da06:	693b      	ldr	r3, [r7, #16]
 800da08:	8afa      	ldrh	r2, [r7, #22]
 800da0a:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800da0c:	693b      	ldr	r3, [r7, #16]
 800da0e:	2206      	movs	r2, #6
 800da10:	6839      	ldr	r1, [r7, #0]
 800da12:	4618      	mov	r0, r3
 800da14:	f002 fab7 	bl	800ff86 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 800da18:	693b      	ldr	r3, [r7, #16]
 800da1a:	3306      	adds	r3, #6
 800da1c:	2206      	movs	r2, #6
 800da1e:	6879      	ldr	r1, [r7, #4]
 800da20:	4618      	mov	r0, r3
 800da22:	f002 fab0 	bl	800ff86 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da2c:	2b06      	cmp	r3, #6
 800da2e:	d006      	beq.n	800da3e <ethernet_output+0x66>
 800da30:	4b0a      	ldr	r3, [pc, #40]	; (800da5c <ethernet_output+0x84>)
 800da32:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800da36:	490a      	ldr	r1, [pc, #40]	; (800da60 <ethernet_output+0x88>)
 800da38:	480a      	ldr	r0, [pc, #40]	; (800da64 <ethernet_output+0x8c>)
 800da3a:	f003 f8e7 	bl	8010c0c <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	699b      	ldr	r3, [r3, #24]
 800da42:	68b9      	ldr	r1, [r7, #8]
 800da44:	68f8      	ldr	r0, [r7, #12]
 800da46:	4798      	blx	r3
 800da48:	4603      	mov	r3, r0
 800da4a:	e002      	b.n	800da52 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800da4c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800da4e:	f06f 0301 	mvn.w	r3, #1
}
 800da52:	4618      	mov	r0, r3
 800da54:	3718      	adds	r7, #24
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}
 800da5a:	bf00      	nop
 800da5c:	08016040 	.word	0x08016040
 800da60:	08016078 	.word	0x08016078
 800da64:	080160ac 	.word	0x080160ac

0800da68 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b084      	sub	sp, #16
 800da6c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800da6e:	1d3b      	adds	r3, r7, #4
 800da70:	2200      	movs	r2, #0
 800da72:	601a      	str	r2, [r3, #0]
 800da74:	605a      	str	r2, [r3, #4]
 800da76:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 800da78:	4b3c      	ldr	r3, [pc, #240]	; (800db6c <MX_ADC1_Init+0x104>)
 800da7a:	4a3d      	ldr	r2, [pc, #244]	; (800db70 <MX_ADC1_Init+0x108>)
 800da7c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800da7e:	4b3b      	ldr	r3, [pc, #236]	; (800db6c <MX_ADC1_Init+0x104>)
 800da80:	f44f 7280 	mov.w	r2, #256	; 0x100
 800da84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800da86:	4b39      	ldr	r3, [pc, #228]	; (800db6c <MX_ADC1_Init+0x104>)
 800da88:	2200      	movs	r2, #0
 800da8a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800da8c:	4b37      	ldr	r3, [pc, #220]	; (800db6c <MX_ADC1_Init+0x104>)
 800da8e:	2200      	movs	r2, #0
 800da90:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800da92:	4b36      	ldr	r3, [pc, #216]	; (800db6c <MX_ADC1_Init+0x104>)
 800da94:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800da98:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800da9a:	4b34      	ldr	r3, [pc, #208]	; (800db6c <MX_ADC1_Init+0x104>)
 800da9c:	2200      	movs	r2, #0
 800da9e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 6;
 800daa0:	4b32      	ldr	r3, [pc, #200]	; (800db6c <MX_ADC1_Init+0x104>)
 800daa2:	2206      	movs	r2, #6
 800daa4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800daa6:	4831      	ldr	r0, [pc, #196]	; (800db6c <MX_ADC1_Init+0x104>)
 800daa8:	f7f3 fbde 	bl	8001268 <HAL_ADC_Init>
 800daac:	4603      	mov	r3, r0
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d001      	beq.n	800dab6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800dab2:	f002 f861 	bl	800fb78 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800dab6:	2306      	movs	r3, #6
 800dab8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800daba:	2301      	movs	r3, #1
 800dabc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800dabe:	2305      	movs	r3, #5
 800dac0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800dac2:	1d3b      	adds	r3, r7, #4
 800dac4:	4619      	mov	r1, r3
 800dac6:	4829      	ldr	r0, [pc, #164]	; (800db6c <MX_ADC1_Init+0x104>)
 800dac8:	f7f3 fe86 	bl	80017d8 <HAL_ADC_ConfigChannel>
 800dacc:	4603      	mov	r3, r0
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d001      	beq.n	800dad6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800dad2:	f002 f851 	bl	800fb78 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800dad6:	2307      	movs	r3, #7
 800dad8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800dada:	2302      	movs	r3, #2
 800dadc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800dade:	1d3b      	adds	r3, r7, #4
 800dae0:	4619      	mov	r1, r3
 800dae2:	4822      	ldr	r0, [pc, #136]	; (800db6c <MX_ADC1_Init+0x104>)
 800dae4:	f7f3 fe78 	bl	80017d8 <HAL_ADC_ConfigChannel>
 800dae8:	4603      	mov	r3, r0
 800daea:	2b00      	cmp	r3, #0
 800daec:	d001      	beq.n	800daf2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800daee:	f002 f843 	bl	800fb78 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800daf2:	230e      	movs	r3, #14
 800daf4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800daf6:	2303      	movs	r3, #3
 800daf8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800dafa:	1d3b      	adds	r3, r7, #4
 800dafc:	4619      	mov	r1, r3
 800dafe:	481b      	ldr	r0, [pc, #108]	; (800db6c <MX_ADC1_Init+0x104>)
 800db00:	f7f3 fe6a 	bl	80017d8 <HAL_ADC_ConfigChannel>
 800db04:	4603      	mov	r3, r0
 800db06:	2b00      	cmp	r3, #0
 800db08:	d001      	beq.n	800db0e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800db0a:	f002 f835 	bl	800fb78 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800db0e:	230f      	movs	r3, #15
 800db10:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800db12:	2304      	movs	r3, #4
 800db14:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800db16:	1d3b      	adds	r3, r7, #4
 800db18:	4619      	mov	r1, r3
 800db1a:	4814      	ldr	r0, [pc, #80]	; (800db6c <MX_ADC1_Init+0x104>)
 800db1c:	f7f3 fe5c 	bl	80017d8 <HAL_ADC_ConfigChannel>
 800db20:	4603      	mov	r3, r0
 800db22:	2b00      	cmp	r3, #0
 800db24:	d001      	beq.n	800db2a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800db26:	f002 f827 	bl	800fb78 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800db2a:	2308      	movs	r3, #8
 800db2c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800db2e:	2305      	movs	r3, #5
 800db30:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800db32:	1d3b      	adds	r3, r7, #4
 800db34:	4619      	mov	r1, r3
 800db36:	480d      	ldr	r0, [pc, #52]	; (800db6c <MX_ADC1_Init+0x104>)
 800db38:	f7f3 fe4e 	bl	80017d8 <HAL_ADC_ConfigChannel>
 800db3c:	4603      	mov	r3, r0
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d001      	beq.n	800db46 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800db42:	f002 f819 	bl	800fb78 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800db46:	2309      	movs	r3, #9
 800db48:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800db4a:	2306      	movs	r3, #6
 800db4c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800db4e:	1d3b      	adds	r3, r7, #4
 800db50:	4619      	mov	r1, r3
 800db52:	4806      	ldr	r0, [pc, #24]	; (800db6c <MX_ADC1_Init+0x104>)
 800db54:	f7f3 fe40 	bl	80017d8 <HAL_ADC_ConfigChannel>
 800db58:	4603      	mov	r3, r0
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d001      	beq.n	800db62 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800db5e:	f002 f80b 	bl	800fb78 <Error_Handler>
  }

}
 800db62:	bf00      	nop
 800db64:	3710      	adds	r7, #16
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}
 800db6a:	bf00      	nop
 800db6c:	200038e0 	.word	0x200038e0
 800db70:	40012400 	.word	0x40012400

0800db74 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b08a      	sub	sp, #40	; 0x28
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800db7c:	f107 0318 	add.w	r3, r7, #24
 800db80:	2200      	movs	r2, #0
 800db82:	601a      	str	r2, [r3, #0]
 800db84:	605a      	str	r2, [r3, #4]
 800db86:	609a      	str	r2, [r3, #8]
 800db88:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	4a2a      	ldr	r2, [pc, #168]	; (800dc38 <HAL_ADC_MspInit+0xc4>)
 800db90:	4293      	cmp	r3, r2
 800db92:	d14d      	bne.n	800dc30 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800db94:	4b29      	ldr	r3, [pc, #164]	; (800dc3c <HAL_ADC_MspInit+0xc8>)
 800db96:	699b      	ldr	r3, [r3, #24]
 800db98:	4a28      	ldr	r2, [pc, #160]	; (800dc3c <HAL_ADC_MspInit+0xc8>)
 800db9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800db9e:	6193      	str	r3, [r2, #24]
 800dba0:	4b26      	ldr	r3, [pc, #152]	; (800dc3c <HAL_ADC_MspInit+0xc8>)
 800dba2:	699b      	ldr	r3, [r3, #24]
 800dba4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dba8:	617b      	str	r3, [r7, #20]
 800dbaa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dbac:	4b23      	ldr	r3, [pc, #140]	; (800dc3c <HAL_ADC_MspInit+0xc8>)
 800dbae:	699b      	ldr	r3, [r3, #24]
 800dbb0:	4a22      	ldr	r2, [pc, #136]	; (800dc3c <HAL_ADC_MspInit+0xc8>)
 800dbb2:	f043 0304 	orr.w	r3, r3, #4
 800dbb6:	6193      	str	r3, [r2, #24]
 800dbb8:	4b20      	ldr	r3, [pc, #128]	; (800dc3c <HAL_ADC_MspInit+0xc8>)
 800dbba:	699b      	ldr	r3, [r3, #24]
 800dbbc:	f003 0304 	and.w	r3, r3, #4
 800dbc0:	613b      	str	r3, [r7, #16]
 800dbc2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800dbc4:	4b1d      	ldr	r3, [pc, #116]	; (800dc3c <HAL_ADC_MspInit+0xc8>)
 800dbc6:	699b      	ldr	r3, [r3, #24]
 800dbc8:	4a1c      	ldr	r2, [pc, #112]	; (800dc3c <HAL_ADC_MspInit+0xc8>)
 800dbca:	f043 0310 	orr.w	r3, r3, #16
 800dbce:	6193      	str	r3, [r2, #24]
 800dbd0:	4b1a      	ldr	r3, [pc, #104]	; (800dc3c <HAL_ADC_MspInit+0xc8>)
 800dbd2:	699b      	ldr	r3, [r3, #24]
 800dbd4:	f003 0310 	and.w	r3, r3, #16
 800dbd8:	60fb      	str	r3, [r7, #12]
 800dbda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800dbdc:	4b17      	ldr	r3, [pc, #92]	; (800dc3c <HAL_ADC_MspInit+0xc8>)
 800dbde:	699b      	ldr	r3, [r3, #24]
 800dbe0:	4a16      	ldr	r2, [pc, #88]	; (800dc3c <HAL_ADC_MspInit+0xc8>)
 800dbe2:	f043 0308 	orr.w	r3, r3, #8
 800dbe6:	6193      	str	r3, [r2, #24]
 800dbe8:	4b14      	ldr	r3, [pc, #80]	; (800dc3c <HAL_ADC_MspInit+0xc8>)
 800dbea:	699b      	ldr	r3, [r3, #24]
 800dbec:	f003 0308 	and.w	r3, r3, #8
 800dbf0:	60bb      	str	r3, [r7, #8]
 800dbf2:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800dbf4:	23c0      	movs	r3, #192	; 0xc0
 800dbf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800dbf8:	2303      	movs	r3, #3
 800dbfa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dbfc:	f107 0318 	add.w	r3, r7, #24
 800dc00:	4619      	mov	r1, r3
 800dc02:	480f      	ldr	r0, [pc, #60]	; (800dc40 <HAL_ADC_MspInit+0xcc>)
 800dc04:	f7f5 fa2a 	bl	800305c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800dc08:	2330      	movs	r3, #48	; 0x30
 800dc0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800dc0c:	2303      	movs	r3, #3
 800dc0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800dc10:	f107 0318 	add.w	r3, r7, #24
 800dc14:	4619      	mov	r1, r3
 800dc16:	480b      	ldr	r0, [pc, #44]	; (800dc44 <HAL_ADC_MspInit+0xd0>)
 800dc18:	f7f5 fa20 	bl	800305c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800dc1c:	2303      	movs	r3, #3
 800dc1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800dc20:	2303      	movs	r3, #3
 800dc22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dc24:	f107 0318 	add.w	r3, r7, #24
 800dc28:	4619      	mov	r1, r3
 800dc2a:	4807      	ldr	r0, [pc, #28]	; (800dc48 <HAL_ADC_MspInit+0xd4>)
 800dc2c:	f7f5 fa16 	bl	800305c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800dc30:	bf00      	nop
 800dc32:	3728      	adds	r7, #40	; 0x28
 800dc34:	46bd      	mov	sp, r7
 800dc36:	bd80      	pop	{r7, pc}
 800dc38:	40012400 	.word	0x40012400
 800dc3c:	40021000 	.word	0x40021000
 800dc40:	40010800 	.word	0x40010800
 800dc44:	40011000 	.word	0x40011000
 800dc48:	40010c00 	.word	0x40010c00

0800dc4c <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b082      	sub	sp, #8
 800dc50:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800dc52:	463b      	mov	r3, r7
 800dc54:	2200      	movs	r2, #0
 800dc56:	601a      	str	r2, [r3, #0]
 800dc58:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800dc5a:	4b14      	ldr	r3, [pc, #80]	; (800dcac <MX_DAC_Init+0x60>)
 800dc5c:	4a14      	ldr	r2, [pc, #80]	; (800dcb0 <MX_DAC_Init+0x64>)
 800dc5e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800dc60:	4812      	ldr	r0, [pc, #72]	; (800dcac <MX_DAC_Init+0x60>)
 800dc62:	f7f4 f820 	bl	8001ca6 <HAL_DAC_Init>
 800dc66:	4603      	mov	r3, r0
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d001      	beq.n	800dc70 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800dc6c:	f001 ff84 	bl	800fb78 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800dc70:	2300      	movs	r3, #0
 800dc72:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800dc74:	2300      	movs	r3, #0
 800dc76:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800dc78:	463b      	mov	r3, r7
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	4619      	mov	r1, r3
 800dc7e:	480b      	ldr	r0, [pc, #44]	; (800dcac <MX_DAC_Init+0x60>)
 800dc80:	f7f4 f8a8 	bl	8001dd4 <HAL_DAC_ConfigChannel>
 800dc84:	4603      	mov	r3, r0
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d001      	beq.n	800dc8e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800dc8a:	f001 ff75 	bl	800fb78 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800dc8e:	463b      	mov	r3, r7
 800dc90:	2210      	movs	r2, #16
 800dc92:	4619      	mov	r1, r3
 800dc94:	4805      	ldr	r0, [pc, #20]	; (800dcac <MX_DAC_Init+0x60>)
 800dc96:	f7f4 f89d 	bl	8001dd4 <HAL_DAC_ConfigChannel>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d001      	beq.n	800dca4 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 800dca0:	f001 ff6a 	bl	800fb78 <Error_Handler>
  }

}
 800dca4:	bf00      	nop
 800dca6:	3708      	adds	r7, #8
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}
 800dcac:	20003910 	.word	0x20003910
 800dcb0:	40007400 	.word	0x40007400

0800dcb4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b088      	sub	sp, #32
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dcbc:	f107 0310 	add.w	r3, r7, #16
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	601a      	str	r2, [r3, #0]
 800dcc4:	605a      	str	r2, [r3, #4]
 800dcc6:	609a      	str	r2, [r3, #8]
 800dcc8:	60da      	str	r2, [r3, #12]
  if(dacHandle->Instance==DAC)
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	4a14      	ldr	r2, [pc, #80]	; (800dd20 <HAL_DAC_MspInit+0x6c>)
 800dcd0:	4293      	cmp	r3, r2
 800dcd2:	d121      	bne.n	800dd18 <HAL_DAC_MspInit+0x64>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800dcd4:	4b13      	ldr	r3, [pc, #76]	; (800dd24 <HAL_DAC_MspInit+0x70>)
 800dcd6:	69db      	ldr	r3, [r3, #28]
 800dcd8:	4a12      	ldr	r2, [pc, #72]	; (800dd24 <HAL_DAC_MspInit+0x70>)
 800dcda:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dcde:	61d3      	str	r3, [r2, #28]
 800dce0:	4b10      	ldr	r3, [pc, #64]	; (800dd24 <HAL_DAC_MspInit+0x70>)
 800dce2:	69db      	ldr	r3, [r3, #28]
 800dce4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dce8:	60fb      	str	r3, [r7, #12]
 800dcea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dcec:	4b0d      	ldr	r3, [pc, #52]	; (800dd24 <HAL_DAC_MspInit+0x70>)
 800dcee:	699b      	ldr	r3, [r3, #24]
 800dcf0:	4a0c      	ldr	r2, [pc, #48]	; (800dd24 <HAL_DAC_MspInit+0x70>)
 800dcf2:	f043 0304 	orr.w	r3, r3, #4
 800dcf6:	6193      	str	r3, [r2, #24]
 800dcf8:	4b0a      	ldr	r3, [pc, #40]	; (800dd24 <HAL_DAC_MspInit+0x70>)
 800dcfa:	699b      	ldr	r3, [r3, #24]
 800dcfc:	f003 0304 	and.w	r3, r3, #4
 800dd00:	60bb      	str	r3, [r7, #8]
 800dd02:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800dd04:	2330      	movs	r3, #48	; 0x30
 800dd06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800dd08:	2303      	movs	r3, #3
 800dd0a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dd0c:	f107 0310 	add.w	r3, r7, #16
 800dd10:	4619      	mov	r1, r3
 800dd12:	4805      	ldr	r0, [pc, #20]	; (800dd28 <HAL_DAC_MspInit+0x74>)
 800dd14:	f7f5 f9a2 	bl	800305c <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800dd18:	bf00      	nop
 800dd1a:	3720      	adds	r7, #32
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bd80      	pop	{r7, pc}
 800dd20:	40007400 	.word	0x40007400
 800dd24:	40021000 	.word	0x40021000
 800dd28:	40010800 	.word	0x40010800

0800dd2c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b08e      	sub	sp, #56	; 0x38
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dd34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dd38:	2200      	movs	r2, #0
 800dd3a:	601a      	str	r2, [r3, #0]
 800dd3c:	605a      	str	r2, [r3, #4]
 800dd3e:	609a      	str	r2, [r3, #8]
 800dd40:	60da      	str	r2, [r3, #12]
  if(ethHandle->Instance==ETH)
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	4a54      	ldr	r2, [pc, #336]	; (800de98 <HAL_ETH_MspInit+0x16c>)
 800dd48:	4293      	cmp	r3, r2
 800dd4a:	f040 80a0 	bne.w	800de8e <HAL_ETH_MspInit+0x162>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800dd4e:	4b53      	ldr	r3, [pc, #332]	; (800de9c <HAL_ETH_MspInit+0x170>)
 800dd50:	695b      	ldr	r3, [r3, #20]
 800dd52:	4a52      	ldr	r2, [pc, #328]	; (800de9c <HAL_ETH_MspInit+0x170>)
 800dd54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800dd58:	6153      	str	r3, [r2, #20]
 800dd5a:	4b50      	ldr	r3, [pc, #320]	; (800de9c <HAL_ETH_MspInit+0x170>)
 800dd5c:	695b      	ldr	r3, [r3, #20]
 800dd5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dd62:	623b      	str	r3, [r7, #32]
 800dd64:	6a3b      	ldr	r3, [r7, #32]
 800dd66:	4b4d      	ldr	r3, [pc, #308]	; (800de9c <HAL_ETH_MspInit+0x170>)
 800dd68:	695b      	ldr	r3, [r3, #20]
 800dd6a:	4a4c      	ldr	r2, [pc, #304]	; (800de9c <HAL_ETH_MspInit+0x170>)
 800dd6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dd70:	6153      	str	r3, [r2, #20]
 800dd72:	4b4a      	ldr	r3, [pc, #296]	; (800de9c <HAL_ETH_MspInit+0x170>)
 800dd74:	695b      	ldr	r3, [r3, #20]
 800dd76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dd7a:	61fb      	str	r3, [r7, #28]
 800dd7c:	69fb      	ldr	r3, [r7, #28]
 800dd7e:	4b47      	ldr	r3, [pc, #284]	; (800de9c <HAL_ETH_MspInit+0x170>)
 800dd80:	695b      	ldr	r3, [r3, #20]
 800dd82:	4a46      	ldr	r2, [pc, #280]	; (800de9c <HAL_ETH_MspInit+0x170>)
 800dd84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dd88:	6153      	str	r3, [r2, #20]
 800dd8a:	4b44      	ldr	r3, [pc, #272]	; (800de9c <HAL_ETH_MspInit+0x170>)
 800dd8c:	695b      	ldr	r3, [r3, #20]
 800dd8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dd92:	61bb      	str	r3, [r7, #24]
 800dd94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800dd96:	4b41      	ldr	r3, [pc, #260]	; (800de9c <HAL_ETH_MspInit+0x170>)
 800dd98:	699b      	ldr	r3, [r3, #24]
 800dd9a:	4a40      	ldr	r2, [pc, #256]	; (800de9c <HAL_ETH_MspInit+0x170>)
 800dd9c:	f043 0310 	orr.w	r3, r3, #16
 800dda0:	6193      	str	r3, [r2, #24]
 800dda2:	4b3e      	ldr	r3, [pc, #248]	; (800de9c <HAL_ETH_MspInit+0x170>)
 800dda4:	699b      	ldr	r3, [r3, #24]
 800dda6:	f003 0310 	and.w	r3, r3, #16
 800ddaa:	617b      	str	r3, [r7, #20]
 800ddac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ddae:	4b3b      	ldr	r3, [pc, #236]	; (800de9c <HAL_ETH_MspInit+0x170>)
 800ddb0:	699b      	ldr	r3, [r3, #24]
 800ddb2:	4a3a      	ldr	r2, [pc, #232]	; (800de9c <HAL_ETH_MspInit+0x170>)
 800ddb4:	f043 0304 	orr.w	r3, r3, #4
 800ddb8:	6193      	str	r3, [r2, #24]
 800ddba:	4b38      	ldr	r3, [pc, #224]	; (800de9c <HAL_ETH_MspInit+0x170>)
 800ddbc:	699b      	ldr	r3, [r3, #24]
 800ddbe:	f003 0304 	and.w	r3, r3, #4
 800ddc2:	613b      	str	r3, [r7, #16]
 800ddc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ddc6:	4b35      	ldr	r3, [pc, #212]	; (800de9c <HAL_ETH_MspInit+0x170>)
 800ddc8:	699b      	ldr	r3, [r3, #24]
 800ddca:	4a34      	ldr	r2, [pc, #208]	; (800de9c <HAL_ETH_MspInit+0x170>)
 800ddcc:	f043 0308 	orr.w	r3, r3, #8
 800ddd0:	6193      	str	r3, [r2, #24]
 800ddd2:	4b32      	ldr	r3, [pc, #200]	; (800de9c <HAL_ETH_MspInit+0x170>)
 800ddd4:	699b      	ldr	r3, [r3, #24]
 800ddd6:	f003 0308 	and.w	r3, r3, #8
 800ddda:	60fb      	str	r3, [r7, #12]
 800dddc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800ddde:	4b2f      	ldr	r3, [pc, #188]	; (800de9c <HAL_ETH_MspInit+0x170>)
 800dde0:	699b      	ldr	r3, [r3, #24]
 800dde2:	4a2e      	ldr	r2, [pc, #184]	; (800de9c <HAL_ETH_MspInit+0x170>)
 800dde4:	f043 0320 	orr.w	r3, r3, #32
 800dde8:	6193      	str	r3, [r2, #24]
 800ddea:	4b2c      	ldr	r3, [pc, #176]	; (800de9c <HAL_ETH_MspInit+0x170>)
 800ddec:	699b      	ldr	r3, [r3, #24]
 800ddee:	f003 0320 	and.w	r3, r3, #32
 800ddf2:	60bb      	str	r3, [r7, #8]
 800ddf4:	68bb      	ldr	r3, [r7, #8]
    PB13     ------> ETH_TXD1
    PD8     ------> ETH_CRS_DV
    PD9     ------> ETH_RXD0
    PD10     ------> ETH_RXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800ddf6:	2302      	movs	r3, #2
 800ddf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ddfa:	2302      	movs	r3, #2
 800ddfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ddfe:	2303      	movs	r3, #3
 800de00:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800de02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800de06:	4619      	mov	r1, r3
 800de08:	4825      	ldr	r0, [pc, #148]	; (800dea0 <HAL_ETH_MspInit+0x174>)
 800de0a:	f7f5 f927 	bl	800305c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800de0e:	2302      	movs	r3, #2
 800de10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800de12:	2300      	movs	r3, #0
 800de14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de16:	2300      	movs	r3, #0
 800de18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800de1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800de1e:	4619      	mov	r1, r3
 800de20:	4820      	ldr	r0, [pc, #128]	; (800dea4 <HAL_ETH_MspInit+0x178>)
 800de22:	f7f5 f91b 	bl	800305c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800de26:	2304      	movs	r3, #4
 800de28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de2a:	2302      	movs	r3, #2
 800de2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800de2e:	2303      	movs	r3, #3
 800de30:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800de32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800de36:	4619      	mov	r1, r3
 800de38:	481a      	ldr	r0, [pc, #104]	; (800dea4 <HAL_ETH_MspInit+0x178>)
 800de3a:	f7f5 f90f 	bl	800305c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800de3e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800de42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de44:	2302      	movs	r3, #2
 800de46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800de48:	2303      	movs	r3, #3
 800de4a:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800de4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800de50:	4619      	mov	r1, r3
 800de52:	4815      	ldr	r0, [pc, #84]	; (800dea8 <HAL_ETH_MspInit+0x17c>)
 800de54:	f7f5 f902 	bl	800305c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800de58:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800de5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800de5e:	2300      	movs	r3, #0
 800de60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de62:	2300      	movs	r3, #0
 800de64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800de66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800de6a:	4619      	mov	r1, r3
 800de6c:	480f      	ldr	r0, [pc, #60]	; (800deac <HAL_ETH_MspInit+0x180>)
 800de6e:	f7f5 f8f5 	bl	800305c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_ETH_ENABLE();
 800de72:	4b0f      	ldr	r3, [pc, #60]	; (800deb0 <HAL_ETH_MspInit+0x184>)
 800de74:	685b      	ldr	r3, [r3, #4]
 800de76:	637b      	str	r3, [r7, #52]	; 0x34
 800de78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de7a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800de7e:	637b      	str	r3, [r7, #52]	; 0x34
 800de80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800de86:	637b      	str	r3, [r7, #52]	; 0x34
 800de88:	4a09      	ldr	r2, [pc, #36]	; (800deb0 <HAL_ETH_MspInit+0x184>)
 800de8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de8c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800de8e:	bf00      	nop
 800de90:	3738      	adds	r7, #56	; 0x38
 800de92:	46bd      	mov	sp, r7
 800de94:	bd80      	pop	{r7, pc}
 800de96:	bf00      	nop
 800de98:	40028000 	.word	0x40028000
 800de9c:	40021000 	.word	0x40021000
 800dea0:	40011000 	.word	0x40011000
 800dea4:	40010800 	.word	0x40010800
 800dea8:	40010c00 	.word	0x40010c00
 800deac:	40011400 	.word	0x40011400
 800deb0:	40010000 	.word	0x40010000

0800deb4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b086      	sub	sp, #24
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800debc:	2300      	movs	r3, #0
 800debe:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800dec0:	4b52      	ldr	r3, [pc, #328]	; (800e00c <low_level_init+0x158>)
 800dec2:	4a53      	ldr	r2, [pc, #332]	; (800e010 <low_level_init+0x15c>)
 800dec4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800dec6:	4b51      	ldr	r3, [pc, #324]	; (800e00c <low_level_init+0x158>)
 800dec8:	2201      	movs	r2, #1
 800deca:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800decc:	4b4f      	ldr	r3, [pc, #316]	; (800e00c <low_level_init+0x158>)
 800dece:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ded2:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800ded4:	4b4d      	ldr	r3, [pc, #308]	; (800e00c <low_level_init+0x158>)
 800ded6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800deda:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 800dedc:	4b4b      	ldr	r3, [pc, #300]	; (800e00c <low_level_init+0x158>)
 800dede:	2200      	movs	r2, #0
 800dee0:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800dee2:	2300      	movs	r3, #0
 800dee4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800dee6:	2380      	movs	r3, #128	; 0x80
 800dee8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800deea:	23e1      	movs	r3, #225	; 0xe1
 800deec:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800deee:	2300      	movs	r3, #0
 800def0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800def2:	2300      	movs	r3, #0
 800def4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800def6:	2300      	movs	r3, #0
 800def8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800defa:	4a44      	ldr	r2, [pc, #272]	; (800e00c <low_level_init+0x158>)
 800defc:	f107 0308 	add.w	r3, r7, #8
 800df00:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800df02:	4b42      	ldr	r3, [pc, #264]	; (800e00c <low_level_init+0x158>)
 800df04:	2200      	movs	r2, #0
 800df06:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800df08:	4b40      	ldr	r3, [pc, #256]	; (800e00c <low_level_init+0x158>)
 800df0a:	2200      	movs	r2, #0
 800df0c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800df0e:	4b3f      	ldr	r3, [pc, #252]	; (800e00c <low_level_init+0x158>)
 800df10:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800df14:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800df16:	483d      	ldr	r0, [pc, #244]	; (800e00c <low_level_init+0x158>)
 800df18:	f7f3 ffb8 	bl	8001e8c <HAL_ETH_Init>
 800df1c:	4603      	mov	r3, r0
 800df1e:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800df20:	7dfb      	ldrb	r3, [r7, #23]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d108      	bne.n	800df38 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800df2c:	f043 0304 	orr.w	r3, r3, #4
 800df30:	b2da      	uxtb	r2, r3
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800df38:	2304      	movs	r3, #4
 800df3a:	4a36      	ldr	r2, [pc, #216]	; (800e014 <low_level_init+0x160>)
 800df3c:	4936      	ldr	r1, [pc, #216]	; (800e018 <low_level_init+0x164>)
 800df3e:	4833      	ldr	r0, [pc, #204]	; (800e00c <low_level_init+0x158>)
 800df40:	f7f4 f910 	bl	8002164 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800df44:	2308      	movs	r3, #8
 800df46:	4a35      	ldr	r2, [pc, #212]	; (800e01c <low_level_init+0x168>)
 800df48:	4935      	ldr	r1, [pc, #212]	; (800e020 <low_level_init+0x16c>)
 800df4a:	4830      	ldr	r0, [pc, #192]	; (800e00c <low_level_init+0x158>)
 800df4c:	f7f4 f972 	bl	8002234 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2206      	movs	r2, #6
 800df54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800df58:	4b2c      	ldr	r3, [pc, #176]	; (800e00c <low_level_init+0x158>)
 800df5a:	695b      	ldr	r3, [r3, #20]
 800df5c:	781a      	ldrb	r2, [r3, #0]
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800df64:	4b29      	ldr	r3, [pc, #164]	; (800e00c <low_level_init+0x158>)
 800df66:	695b      	ldr	r3, [r3, #20]
 800df68:	785a      	ldrb	r2, [r3, #1]
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800df70:	4b26      	ldr	r3, [pc, #152]	; (800e00c <low_level_init+0x158>)
 800df72:	695b      	ldr	r3, [r3, #20]
 800df74:	789a      	ldrb	r2, [r3, #2]
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800df7c:	4b23      	ldr	r3, [pc, #140]	; (800e00c <low_level_init+0x158>)
 800df7e:	695b      	ldr	r3, [r3, #20]
 800df80:	78da      	ldrb	r2, [r3, #3]
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800df88:	4b20      	ldr	r3, [pc, #128]	; (800e00c <low_level_init+0x158>)
 800df8a:	695b      	ldr	r3, [r3, #20]
 800df8c:	791a      	ldrb	r2, [r3, #4]
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800df94:	4b1d      	ldr	r3, [pc, #116]	; (800e00c <low_level_init+0x158>)
 800df96:	695b      	ldr	r3, [r3, #20]
 800df98:	795a      	ldrb	r2, [r3, #5]
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* maximum transfer unit */
  netif->mtu = 1500;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800dfa6:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dfae:	f043 030a 	orr.w	r3, r3, #10
 800dfb2:	b2da      	uxtb	r2, r3
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800dfba:	4814      	ldr	r0, [pc, #80]	; (800e00c <low_level_init+0x158>)
 800dfbc:	f7f4 fbe1 	bl	8002782 <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */

  /**** Configure PHY to generate an interrupt when Eth Link state changes ****/
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MICR, &regvalue);
 800dfc0:	f107 0310 	add.w	r3, r7, #16
 800dfc4:	461a      	mov	r2, r3
 800dfc6:	2111      	movs	r1, #17
 800dfc8:	4810      	ldr	r0, [pc, #64]	; (800e00c <low_level_init+0x158>)
 800dfca:	f7f4 fb0c 	bl	80025e6 <HAL_ETH_ReadPHYRegister>

  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 800dfce:	693b      	ldr	r3, [r7, #16]
 800dfd0:	f043 0303 	orr.w	r3, r3, #3
 800dfd4:	613b      	str	r3, [r7, #16]

  /* Enable Interrupts */
  HAL_ETH_WritePHYRegister(&heth, PHY_MICR, regvalue );
 800dfd6:	693b      	ldr	r3, [r7, #16]
 800dfd8:	461a      	mov	r2, r3
 800dfda:	2111      	movs	r1, #17
 800dfdc:	480b      	ldr	r0, [pc, #44]	; (800e00c <low_level_init+0x158>)
 800dfde:	f7f4 fb6a 	bl	80026b6 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MISR, &regvalue);
 800dfe2:	f107 0310 	add.w	r3, r7, #16
 800dfe6:	461a      	mov	r2, r3
 800dfe8:	2112      	movs	r1, #18
 800dfea:	4808      	ldr	r0, [pc, #32]	; (800e00c <low_level_init+0x158>)
 800dfec:	f7f4 fafb 	bl	80025e6 <HAL_ETH_ReadPHYRegister>

  regvalue |= PHY_MISR_LINK_INT_EN;
 800dff0:	693b      	ldr	r3, [r7, #16]
 800dff2:	f043 0320 	orr.w	r3, r3, #32
 800dff6:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_MISR, regvalue);
 800dff8:	693b      	ldr	r3, [r7, #16]
 800dffa:	461a      	mov	r2, r3
 800dffc:	2112      	movs	r1, #18
 800dffe:	4803      	ldr	r0, [pc, #12]	; (800e00c <low_level_init+0x158>)
 800e000:	f7f4 fb59 	bl	80026b6 <HAL_ETH_WritePHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */
    
/* USER CODE END LOW_LEVEL_INIT */
}
 800e004:	bf00      	nop
 800e006:	3718      	adds	r7, #24
 800e008:	46bd      	mov	sp, r7
 800e00a:	bd80      	pop	{r7, pc}
 800e00c:	20006984 	.word	0x20006984
 800e010:	40028000 	.word	0x40028000
 800e014:	200069cc 	.word	0x200069cc
 800e018:	20003924 	.word	0x20003924
 800e01c:	20003964 	.word	0x20003964
 800e020:	20006904 	.word	0x20006904

0800e024 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b08a      	sub	sp, #40	; 0x28
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
 800e02c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800e02e:	4b4b      	ldr	r3, [pc, #300]	; (800e15c <low_level_output+0x138>)
 800e030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e032:	689b      	ldr	r3, [r3, #8]
 800e034:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800e036:	2300      	movs	r3, #0
 800e038:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800e03a:	2300      	movs	r3, #0
 800e03c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800e03e:	2300      	movs	r3, #0
 800e040:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800e042:	2300      	movs	r3, #0
 800e044:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800e046:	4b45      	ldr	r3, [pc, #276]	; (800e15c <low_level_output+0x138>)
 800e048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e04a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800e04c:	2300      	movs	r3, #0
 800e04e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	623b      	str	r3, [r7, #32]
 800e054:	e05a      	b.n	800e10c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800e056:	69bb      	ldr	r3, [r7, #24]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	da03      	bge.n	800e066 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800e05e:	23f8      	movs	r3, #248	; 0xf8
 800e060:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800e064:	e05c      	b.n	800e120 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800e066:	6a3b      	ldr	r3, [r7, #32]
 800e068:	895b      	ldrh	r3, [r3, #10]
 800e06a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800e06c:	2300      	movs	r3, #0
 800e06e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800e070:	e02f      	b.n	800e0d2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800e072:	69fa      	ldr	r2, [r7, #28]
 800e074:	693b      	ldr	r3, [r7, #16]
 800e076:	18d0      	adds	r0, r2, r3
 800e078:	6a3b      	ldr	r3, [r7, #32]
 800e07a:	685a      	ldr	r2, [r3, #4]
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	18d1      	adds	r1, r2, r3
 800e080:	693b      	ldr	r3, [r7, #16]
 800e082:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800e086:	3304      	adds	r3, #4
 800e088:	461a      	mov	r2, r3
 800e08a:	f001 ff7c 	bl	800ff86 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800e08e:	69bb      	ldr	r3, [r7, #24]
 800e090:	68db      	ldr	r3, [r3, #12]
 800e092:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800e094:	69bb      	ldr	r3, [r7, #24]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	da03      	bge.n	800e0a4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800e09c:	23f8      	movs	r3, #248	; 0xf8
 800e09e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800e0a2:	e03d      	b.n	800e120 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800e0a4:	69bb      	ldr	r3, [r7, #24]
 800e0a6:	689b      	ldr	r3, [r3, #8]
 800e0a8:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800e0aa:	693a      	ldr	r2, [r7, #16]
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	4413      	add	r3, r2
 800e0b0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800e0b4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800e0b6:	68ba      	ldr	r2, [r7, #8]
 800e0b8:	693b      	ldr	r3, [r7, #16]
 800e0ba:	1ad3      	subs	r3, r2, r3
 800e0bc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800e0c0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800e0c2:	697a      	ldr	r2, [r7, #20]
 800e0c4:	693b      	ldr	r3, [r7, #16]
 800e0c6:	1ad3      	subs	r3, r2, r3
 800e0c8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800e0cc:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800e0d2:	68fa      	ldr	r2, [r7, #12]
 800e0d4:	693b      	ldr	r3, [r7, #16]
 800e0d6:	4413      	add	r3, r2
 800e0d8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800e0dc:	4293      	cmp	r3, r2
 800e0de:	d8c8      	bhi.n	800e072 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800e0e0:	69fa      	ldr	r2, [r7, #28]
 800e0e2:	693b      	ldr	r3, [r7, #16]
 800e0e4:	18d0      	adds	r0, r2, r3
 800e0e6:	6a3b      	ldr	r3, [r7, #32]
 800e0e8:	685a      	ldr	r2, [r3, #4]
 800e0ea:	68bb      	ldr	r3, [r7, #8]
 800e0ec:	4413      	add	r3, r2
 800e0ee:	68fa      	ldr	r2, [r7, #12]
 800e0f0:	4619      	mov	r1, r3
 800e0f2:	f001 ff48 	bl	800ff86 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800e0f6:	693a      	ldr	r2, [r7, #16]
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	4413      	add	r3, r2
 800e0fc:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800e0fe:	697a      	ldr	r2, [r7, #20]
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	4413      	add	r3, r2
 800e104:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800e106:	6a3b      	ldr	r3, [r7, #32]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	623b      	str	r3, [r7, #32]
 800e10c:	6a3b      	ldr	r3, [r7, #32]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d1a1      	bne.n	800e056 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800e112:	6979      	ldr	r1, [r7, #20]
 800e114:	4811      	ldr	r0, [pc, #68]	; (800e15c <low_level_output+0x138>)
 800e116:	f7f4 f8f9 	bl	800230c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800e11a:	2300      	movs	r3, #0
 800e11c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800e120:	4b0e      	ldr	r3, [pc, #56]	; (800e15c <low_level_output+0x138>)
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e128:	3314      	adds	r3, #20
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	f003 0320 	and.w	r3, r3, #32
 800e130:	2b00      	cmp	r3, #0
 800e132:	d00d      	beq.n	800e150 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800e134:	4b09      	ldr	r3, [pc, #36]	; (800e15c <low_level_output+0x138>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e13c:	3314      	adds	r3, #20
 800e13e:	2220      	movs	r2, #32
 800e140:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800e142:	4b06      	ldr	r3, [pc, #24]	; (800e15c <low_level_output+0x138>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e14a:	3304      	adds	r3, #4
 800e14c:	2200      	movs	r2, #0
 800e14e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800e150:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e154:	4618      	mov	r0, r3
 800e156:	3728      	adds	r7, #40	; 0x28
 800e158:	46bd      	mov	sp, r7
 800e15a:	bd80      	pop	{r7, pc}
 800e15c:	20006984 	.word	0x20006984

0800e160 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b08c      	sub	sp, #48	; 0x30
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800e168:	2300      	movs	r3, #0
 800e16a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800e16c:	2300      	movs	r3, #0
 800e16e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800e170:	2300      	movs	r3, #0
 800e172:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800e174:	2300      	movs	r3, #0
 800e176:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800e178:	2300      	movs	r3, #0
 800e17a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800e17c:	2300      	movs	r3, #0
 800e17e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800e180:	2300      	movs	r3, #0
 800e182:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 800e184:	484e      	ldr	r0, [pc, #312]	; (800e2c0 <low_level_input+0x160>)
 800e186:	f7f4 f9ab 	bl	80024e0 <HAL_ETH_GetReceivedFrame>
 800e18a:	4603      	mov	r3, r0
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d001      	beq.n	800e194 <low_level_input+0x34>

    return NULL;
 800e190:	2300      	movs	r3, #0
 800e192:	e091      	b.n	800e2b8 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800e194:	4b4a      	ldr	r3, [pc, #296]	; (800e2c0 <low_level_input+0x160>)
 800e196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e198:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800e19a:	4b49      	ldr	r3, [pc, #292]	; (800e2c0 <low_level_input+0x160>)
 800e19c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e19e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800e1a0:	89fb      	ldrh	r3, [r7, #14]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d006      	beq.n	800e1b4 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800e1a6:	89fb      	ldrh	r3, [r7, #14]
 800e1a8:	2203      	movs	r2, #3
 800e1aa:	4619      	mov	r1, r3
 800e1ac:	2004      	movs	r0, #4
 800e1ae:	f7f7 f859 	bl	8005264 <pbuf_alloc>
 800e1b2:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800e1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d04b      	beq.n	800e252 <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800e1ba:	4b41      	ldr	r3, [pc, #260]	; (800e2c0 <low_level_input+0x160>)
 800e1bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1be:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800e1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c6:	62bb      	str	r3, [r7, #40]	; 0x28
 800e1c8:	e040      	b.n	800e24c <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 800e1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1cc:	895b      	ldrh	r3, [r3, #10]
 800e1ce:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800e1d4:	e021      	b.n	800e21a <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800e1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1d8:	685a      	ldr	r2, [r3, #4]
 800e1da:	69bb      	ldr	r3, [r7, #24]
 800e1dc:	18d0      	adds	r0, r2, r3
 800e1de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1e0:	69fb      	ldr	r3, [r7, #28]
 800e1e2:	18d1      	adds	r1, r2, r3
 800e1e4:	69fb      	ldr	r3, [r7, #28]
 800e1e6:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800e1ea:	3304      	adds	r3, #4
 800e1ec:	461a      	mov	r2, r3
 800e1ee:	f001 feca 	bl	800ff86 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800e1f2:	6a3b      	ldr	r3, [r7, #32]
 800e1f4:	68db      	ldr	r3, [r3, #12]
 800e1f6:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800e1f8:	6a3b      	ldr	r3, [r7, #32]
 800e1fa:	689b      	ldr	r3, [r3, #8]
 800e1fc:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800e1fe:	69fa      	ldr	r2, [r7, #28]
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	4413      	add	r3, r2
 800e204:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800e208:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800e20a:	69ba      	ldr	r2, [r7, #24]
 800e20c:	69fb      	ldr	r3, [r7, #28]
 800e20e:	1ad3      	subs	r3, r2, r3
 800e210:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800e214:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800e216:	2300      	movs	r3, #0
 800e218:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800e21a:	697a      	ldr	r2, [r7, #20]
 800e21c:	69fb      	ldr	r3, [r7, #28]
 800e21e:	4413      	add	r3, r2
 800e220:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800e224:	4293      	cmp	r3, r2
 800e226:	d8d6      	bhi.n	800e1d6 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800e228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e22a:	685a      	ldr	r2, [r3, #4]
 800e22c:	69bb      	ldr	r3, [r7, #24]
 800e22e:	18d0      	adds	r0, r2, r3
 800e230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e232:	69fb      	ldr	r3, [r7, #28]
 800e234:	4413      	add	r3, r2
 800e236:	697a      	ldr	r2, [r7, #20]
 800e238:	4619      	mov	r1, r3
 800e23a:	f001 fea4 	bl	800ff86 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800e23e:	69fa      	ldr	r2, [r7, #28]
 800e240:	697b      	ldr	r3, [r7, #20]
 800e242:	4413      	add	r3, r2
 800e244:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800e246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d1bb      	bne.n	800e1ca <low_level_input+0x6a>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800e252:	4b1b      	ldr	r3, [pc, #108]	; (800e2c0 <low_level_input+0x160>)
 800e254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e256:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800e258:	2300      	movs	r3, #0
 800e25a:	613b      	str	r3, [r7, #16]
 800e25c:	e00b      	b.n	800e276 <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800e25e:	6a3b      	ldr	r3, [r7, #32]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800e266:	6a3b      	ldr	r3, [r7, #32]
 800e268:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800e26a:	6a3b      	ldr	r3, [r7, #32]
 800e26c:	68db      	ldr	r3, [r3, #12]
 800e26e:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800e270:	693b      	ldr	r3, [r7, #16]
 800e272:	3301      	adds	r3, #1
 800e274:	613b      	str	r3, [r7, #16]
 800e276:	4b12      	ldr	r3, [pc, #72]	; (800e2c0 <low_level_input+0x160>)
 800e278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e27a:	693a      	ldr	r2, [r7, #16]
 800e27c:	429a      	cmp	r2, r3
 800e27e:	d3ee      	bcc.n	800e25e <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800e280:	4b0f      	ldr	r3, [pc, #60]	; (800e2c0 <low_level_input+0x160>)
 800e282:	2200      	movs	r2, #0
 800e284:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800e286:	4b0e      	ldr	r3, [pc, #56]	; (800e2c0 <low_level_input+0x160>)
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e28e:	3314      	adds	r3, #20
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e296:	2b00      	cmp	r3, #0
 800e298:	d00d      	beq.n	800e2b6 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800e29a:	4b09      	ldr	r3, [pc, #36]	; (800e2c0 <low_level_input+0x160>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2a2:	3314      	adds	r3, #20
 800e2a4:	2280      	movs	r2, #128	; 0x80
 800e2a6:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800e2a8:	4b05      	ldr	r3, [pc, #20]	; (800e2c0 <low_level_input+0x160>)
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2b0:	3308      	adds	r3, #8
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	601a      	str	r2, [r3, #0]
  }
  return p;
 800e2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	3730      	adds	r7, #48	; 0x30
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	bd80      	pop	{r7, pc}
 800e2c0:	20006984 	.word	0x20006984

0800e2c4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b084      	sub	sp, #16
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f7ff ff47 	bl	800e160 <low_level_input>
 800e2d2:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d010      	beq.n	800e2fc <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	691b      	ldr	r3, [r3, #16]
 800e2de:	6879      	ldr	r1, [r7, #4]
 800e2e0:	68f8      	ldr	r0, [r7, #12]
 800e2e2:	4798      	blx	r3
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 800e2e8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d006      	beq.n	800e2fe <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800e2f0:	68f8      	ldr	r0, [r7, #12]
 800e2f2:	f7f7 fb29 	bl	8005948 <pbuf_free>
    p = NULL;
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	60fb      	str	r3, [r7, #12]
 800e2fa:	e000      	b.n	800e2fe <ethernetif_input+0x3a>
  if (p == NULL) return;
 800e2fc:	bf00      	nop
  }
}
 800e2fe:	3710      	adds	r7, #16
 800e300:	46bd      	mov	sp, r7
 800e302:	bd80      	pop	{r7, pc}

0800e304 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b082      	sub	sp, #8
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d106      	bne.n	800e320 <ethernetif_init+0x1c>
 800e312:	4b0e      	ldr	r3, [pc, #56]	; (800e34c <ethernetif_init+0x48>)
 800e314:	f240 2217 	movw	r2, #535	; 0x217
 800e318:	490d      	ldr	r1, [pc, #52]	; (800e350 <ethernetif_init+0x4c>)
 800e31a:	480e      	ldr	r0, [pc, #56]	; (800e354 <ethernetif_init+0x50>)
 800e31c:	f002 fc76 	bl	8010c0c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2273      	movs	r2, #115	; 0x73
 800e324:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2274      	movs	r2, #116	; 0x74
 800e32c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	4a09      	ldr	r2, [pc, #36]	; (800e358 <ethernetif_init+0x54>)
 800e334:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	4a08      	ldr	r2, [pc, #32]	; (800e35c <ethernetif_init+0x58>)
 800e33a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800e33c:	6878      	ldr	r0, [r7, #4]
 800e33e:	f7ff fdb9 	bl	800deb4 <low_level_init>

  return ERR_OK;
 800e342:	2300      	movs	r3, #0
}
 800e344:	4618      	mov	r0, r3
 800e346:	3708      	adds	r7, #8
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd80      	pop	{r7, pc}
 800e34c:	080160d4 	.word	0x080160d4
 800e350:	080160e8 	.word	0x080160e8
 800e354:	080160f8 	.word	0x080160f8
 800e358:	0800be99 	.word	0x0800be99
 800e35c:	0800e025 	.word	0x0800e025

0800e360 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800e364:	f7f2 ff54 	bl	8001210 <HAL_GetTick>
 800e368:	4603      	mov	r3, r0
}
 800e36a:	4618      	mov	r0, r3
 800e36c:	bd80      	pop	{r7, pc}
	...

0800e370 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b084      	sub	sp, #16
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800e378:	2300      	movs	r3, #0
 800e37a:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800e37c:	2300      	movs	r3, #0
 800e37e:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e386:	089b      	lsrs	r3, r3, #2
 800e388:	f003 0301 	and.w	r3, r3, #1
 800e38c:	b2db      	uxtb	r3, r3
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d05d      	beq.n	800e44e <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800e392:	4b34      	ldr	r3, [pc, #208]	; (800e464 <ethernetif_update_config+0xf4>)
 800e394:	685b      	ldr	r3, [r3, #4]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d03f      	beq.n	800e41a <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800e39a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e39e:	2100      	movs	r1, #0
 800e3a0:	4830      	ldr	r0, [pc, #192]	; (800e464 <ethernetif_update_config+0xf4>)
 800e3a2:	f7f4 f988 	bl	80026b6 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800e3a6:	f7f2 ff33 	bl	8001210 <HAL_GetTick>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800e3ae:	f107 0308 	add.w	r3, r7, #8
 800e3b2:	461a      	mov	r2, r3
 800e3b4:	2101      	movs	r1, #1
 800e3b6:	482b      	ldr	r0, [pc, #172]	; (800e464 <ethernetif_update_config+0xf4>)
 800e3b8:	f7f4 f915 	bl	80025e6 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800e3bc:	f7f2 ff28 	bl	8001210 <HAL_GetTick>
 800e3c0:	4602      	mov	r2, r0
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	1ad3      	subs	r3, r2, r3
 800e3c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e3ca:	d828      	bhi.n	800e41e <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800e3cc:	68bb      	ldr	r3, [r7, #8]
 800e3ce:	f003 0320 	and.w	r3, r3, #32
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d0eb      	beq.n	800e3ae <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800e3d6:	f107 0308 	add.w	r3, r7, #8
 800e3da:	461a      	mov	r2, r3
 800e3dc:	2110      	movs	r1, #16
 800e3de:	4821      	ldr	r0, [pc, #132]	; (800e464 <ethernetif_update_config+0xf4>)
 800e3e0:	f7f4 f901 	bl	80025e6 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800e3e4:	68bb      	ldr	r3, [r7, #8]
 800e3e6:	f003 0304 	and.w	r3, r3, #4
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d004      	beq.n	800e3f8 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800e3ee:	4b1d      	ldr	r3, [pc, #116]	; (800e464 <ethernetif_update_config+0xf4>)
 800e3f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e3f4:	60da      	str	r2, [r3, #12]
 800e3f6:	e002      	b.n	800e3fe <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800e3f8:	4b1a      	ldr	r3, [pc, #104]	; (800e464 <ethernetif_update_config+0xf4>)
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800e3fe:	68bb      	ldr	r3, [r7, #8]
 800e400:	f003 0302 	and.w	r3, r3, #2
 800e404:	2b00      	cmp	r3, #0
 800e406:	d003      	beq.n	800e410 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800e408:	4b16      	ldr	r3, [pc, #88]	; (800e464 <ethernetif_update_config+0xf4>)
 800e40a:	2200      	movs	r2, #0
 800e40c:	609a      	str	r2, [r3, #8]
 800e40e:	e016      	b.n	800e43e <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800e410:	4b14      	ldr	r3, [pc, #80]	; (800e464 <ethernetif_update_config+0xf4>)
 800e412:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800e416:	609a      	str	r2, [r3, #8]
 800e418:	e011      	b.n	800e43e <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800e41a:	bf00      	nop
 800e41c:	e000      	b.n	800e420 <ethernetif_update_config+0xb0>
          goto error;
 800e41e:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800e420:	4b10      	ldr	r3, [pc, #64]	; (800e464 <ethernetif_update_config+0xf4>)
 800e422:	68db      	ldr	r3, [r3, #12]
 800e424:	08db      	lsrs	r3, r3, #3
 800e426:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800e428:	4b0e      	ldr	r3, [pc, #56]	; (800e464 <ethernetif_update_config+0xf4>)
 800e42a:	689b      	ldr	r3, [r3, #8]
 800e42c:	085b      	lsrs	r3, r3, #1
 800e42e:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800e430:	4313      	orrs	r3, r2
 800e432:	b29b      	uxth	r3, r3
 800e434:	461a      	mov	r2, r3
 800e436:	2100      	movs	r1, #0
 800e438:	480a      	ldr	r0, [pc, #40]	; (800e464 <ethernetif_update_config+0xf4>)
 800e43a:	f7f4 f93c 	bl	80026b6 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800e43e:	2100      	movs	r1, #0
 800e440:	4808      	ldr	r0, [pc, #32]	; (800e464 <ethernetif_update_config+0xf4>)
 800e442:	f7f4 f9fd 	bl	8002840 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800e446:	4807      	ldr	r0, [pc, #28]	; (800e464 <ethernetif_update_config+0xf4>)
 800e448:	f7f4 f99b 	bl	8002782 <HAL_ETH_Start>
 800e44c:	e002      	b.n	800e454 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800e44e:	4805      	ldr	r0, [pc, #20]	; (800e464 <ethernetif_update_config+0xf4>)
 800e450:	f7f4 f9c6 	bl	80027e0 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	f000 f807 	bl	800e468 <ethernetif_notify_conn_changed>
}
 800e45a:	bf00      	nop
 800e45c:	3710      	adds	r7, #16
 800e45e:	46bd      	mov	sp, r7
 800e460:	bd80      	pop	{r7, pc}
 800e462:	bf00      	nop
 800e464:	20006984 	.word	0x20006984

0800e468 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800e468:	b480      	push	{r7}
 800e46a:	b083      	sub	sp, #12
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file 
            when the callback is needed,
  */

}
 800e470:	bf00      	nop
 800e472:	370c      	adds	r7, #12
 800e474:	46bd      	mov	sp, r7
 800e476:	bc80      	pop	{r7}
 800e478:	4770      	bx	lr
	...

0800e47c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b088      	sub	sp, #32
 800e480:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e482:	f107 0310 	add.w	r3, r7, #16
 800e486:	2200      	movs	r2, #0
 800e488:	601a      	str	r2, [r3, #0]
 800e48a:	605a      	str	r2, [r3, #4]
 800e48c:	609a      	str	r2, [r3, #8]
 800e48e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e490:	4b43      	ldr	r3, [pc, #268]	; (800e5a0 <MX_GPIO_Init+0x124>)
 800e492:	699b      	ldr	r3, [r3, #24]
 800e494:	4a42      	ldr	r2, [pc, #264]	; (800e5a0 <MX_GPIO_Init+0x124>)
 800e496:	f043 0310 	orr.w	r3, r3, #16
 800e49a:	6193      	str	r3, [r2, #24]
 800e49c:	4b40      	ldr	r3, [pc, #256]	; (800e5a0 <MX_GPIO_Init+0x124>)
 800e49e:	699b      	ldr	r3, [r3, #24]
 800e4a0:	f003 0310 	and.w	r3, r3, #16
 800e4a4:	60fb      	str	r3, [r7, #12]
 800e4a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e4a8:	4b3d      	ldr	r3, [pc, #244]	; (800e5a0 <MX_GPIO_Init+0x124>)
 800e4aa:	699b      	ldr	r3, [r3, #24]
 800e4ac:	4a3c      	ldr	r2, [pc, #240]	; (800e5a0 <MX_GPIO_Init+0x124>)
 800e4ae:	f043 0304 	orr.w	r3, r3, #4
 800e4b2:	6193      	str	r3, [r2, #24]
 800e4b4:	4b3a      	ldr	r3, [pc, #232]	; (800e5a0 <MX_GPIO_Init+0x124>)
 800e4b6:	699b      	ldr	r3, [r3, #24]
 800e4b8:	f003 0304 	and.w	r3, r3, #4
 800e4bc:	60bb      	str	r3, [r7, #8]
 800e4be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800e4c0:	4b37      	ldr	r3, [pc, #220]	; (800e5a0 <MX_GPIO_Init+0x124>)
 800e4c2:	699b      	ldr	r3, [r3, #24]
 800e4c4:	4a36      	ldr	r2, [pc, #216]	; (800e5a0 <MX_GPIO_Init+0x124>)
 800e4c6:	f043 0308 	orr.w	r3, r3, #8
 800e4ca:	6193      	str	r3, [r2, #24]
 800e4cc:	4b34      	ldr	r3, [pc, #208]	; (800e5a0 <MX_GPIO_Init+0x124>)
 800e4ce:	699b      	ldr	r3, [r3, #24]
 800e4d0:	f003 0308 	and.w	r3, r3, #8
 800e4d4:	607b      	str	r3, [r7, #4]
 800e4d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800e4d8:	4b31      	ldr	r3, [pc, #196]	; (800e5a0 <MX_GPIO_Init+0x124>)
 800e4da:	699b      	ldr	r3, [r3, #24]
 800e4dc:	4a30      	ldr	r2, [pc, #192]	; (800e5a0 <MX_GPIO_Init+0x124>)
 800e4de:	f043 0320 	orr.w	r3, r3, #32
 800e4e2:	6193      	str	r3, [r2, #24]
 800e4e4:	4b2e      	ldr	r3, [pc, #184]	; (800e5a0 <MX_GPIO_Init+0x124>)
 800e4e6:	699b      	ldr	r3, [r3, #24]
 800e4e8:	f003 0320 	and.w	r3, r3, #32
 800e4ec:	603b      	str	r3, [r7, #0]
 800e4ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzz_Pin|MSFR_RELAY_Pin, GPIO_PIN_RESET);
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	2109      	movs	r1, #9
 800e4f4:	482b      	ldr	r0, [pc, #172]	; (800e5a4 <MX_GPIO_Init+0x128>)
 800e4f6:	f7f4 ff22 	bl	800333e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELAY_Pin|LED_1_Pin, GPIO_PIN_RESET);
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	f44f 4104 	mov.w	r1, #33792	; 0x8400
 800e500:	4829      	ldr	r0, [pc, #164]	; (800e5a8 <MX_GPIO_Init+0x12c>)
 800e502:	f7f4 ff1c 	bl	800333e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 800e506:	2200      	movs	r2, #0
 800e508:	2198      	movs	r1, #152	; 0x98
 800e50a:	4828      	ldr	r0, [pc, #160]	; (800e5ac <MX_GPIO_Init+0x130>)
 800e50c:	f7f4 ff17 	bl	800333e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = buzz_Pin|MSFR_RELAY_Pin;
 800e510:	2309      	movs	r3, #9
 800e512:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e514:	2301      	movs	r3, #1
 800e516:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e518:	2300      	movs	r3, #0
 800e51a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e51c:	2302      	movs	r3, #2
 800e51e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e520:	f107 0310 	add.w	r3, r7, #16
 800e524:	4619      	mov	r1, r3
 800e526:	481f      	ldr	r0, [pc, #124]	; (800e5a4 <MX_GPIO_Init+0x128>)
 800e528:	f7f4 fd98 	bl	800305c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RELAY_Pin|LED_1_Pin;
 800e52c:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 800e530:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e532:	2301      	movs	r3, #1
 800e534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e536:	2300      	movs	r3, #0
 800e538:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e53a:	2302      	movs	r3, #2
 800e53c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e53e:	f107 0310 	add.w	r3, r7, #16
 800e542:	4619      	mov	r1, r3
 800e544:	4818      	ldr	r0, [pc, #96]	; (800e5a8 <MX_GPIO_Init+0x12c>)
 800e546:	f7f4 fd89 	bl	800305c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = PB1_Pin|PB2_Pin|PB3_Pin;
 800e54a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800e54e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e550:	2300      	movs	r3, #0
 800e552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e554:	2300      	movs	r3, #0
 800e556:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e558:	f107 0310 	add.w	r3, r7, #16
 800e55c:	4619      	mov	r1, r3
 800e55e:	4813      	ldr	r0, [pc, #76]	; (800e5ac <MX_GPIO_Init+0x130>)
 800e560:	f7f4 fd7c 	bl	800305c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PB4_Pin;
 800e564:	2380      	movs	r3, #128	; 0x80
 800e566:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e568:	2300      	movs	r3, #0
 800e56a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e56c:	2300      	movs	r3, #0
 800e56e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PB4_GPIO_Port, &GPIO_InitStruct);
 800e570:	f107 0310 	add.w	r3, r7, #16
 800e574:	4619      	mov	r1, r3
 800e576:	480e      	ldr	r0, [pc, #56]	; (800e5b0 <MX_GPIO_Init+0x134>)
 800e578:	f7f4 fd70 	bl	800305c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin|LED4_Pin;
 800e57c:	2398      	movs	r3, #152	; 0x98
 800e57e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e580:	2301      	movs	r3, #1
 800e582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e584:	2300      	movs	r3, #0
 800e586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e588:	2302      	movs	r3, #2
 800e58a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e58c:	f107 0310 	add.w	r3, r7, #16
 800e590:	4619      	mov	r1, r3
 800e592:	4806      	ldr	r0, [pc, #24]	; (800e5ac <MX_GPIO_Init+0x130>)
 800e594:	f7f4 fd62 	bl	800305c <HAL_GPIO_Init>

}
 800e598:	bf00      	nop
 800e59a:	3720      	adds	r7, #32
 800e59c:	46bd      	mov	sp, r7
 800e59e:	bd80      	pop	{r7, pc}
 800e5a0:	40021000 	.word	0x40021000
 800e5a4:	40010800 	.word	0x40010800
 800e5a8:	40010c00 	.word	0x40010c00
 800e5ac:	40011400 	.word	0x40011400
 800e5b0:	40011000 	.word	0x40011000

0800e5b4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b084      	sub	sp, #16
 800e5b8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800e5ba:	4b8d      	ldr	r3, [pc, #564]	; (800e7f0 <MX_LWIP_Init+0x23c>)
 800e5bc:	22c0      	movs	r2, #192	; 0xc0
 800e5be:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800e5c0:	4b8b      	ldr	r3, [pc, #556]	; (800e7f0 <MX_LWIP_Init+0x23c>)
 800e5c2:	22a8      	movs	r2, #168	; 0xa8
 800e5c4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800e5c6:	4b8a      	ldr	r3, [pc, #552]	; (800e7f0 <MX_LWIP_Init+0x23c>)
 800e5c8:	2201      	movs	r2, #1
 800e5ca:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 54;
 800e5cc:	4b88      	ldr	r3, [pc, #544]	; (800e7f0 <MX_LWIP_Init+0x23c>)
 800e5ce:	2236      	movs	r2, #54	; 0x36
 800e5d0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800e5d2:	4b88      	ldr	r3, [pc, #544]	; (800e7f4 <MX_LWIP_Init+0x240>)
 800e5d4:	22ff      	movs	r2, #255	; 0xff
 800e5d6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800e5d8:	4b86      	ldr	r3, [pc, #536]	; (800e7f4 <MX_LWIP_Init+0x240>)
 800e5da:	22ff      	movs	r2, #255	; 0xff
 800e5dc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800e5de:	4b85      	ldr	r3, [pc, #532]	; (800e7f4 <MX_LWIP_Init+0x240>)
 800e5e0:	22ff      	movs	r2, #255	; 0xff
 800e5e2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800e5e4:	4b83      	ldr	r3, [pc, #524]	; (800e7f4 <MX_LWIP_Init+0x240>)
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800e5ea:	4b83      	ldr	r3, [pc, #524]	; (800e7f8 <MX_LWIP_Init+0x244>)
 800e5ec:	22c0      	movs	r2, #192	; 0xc0
 800e5ee:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800e5f0:	4b81      	ldr	r3, [pc, #516]	; (800e7f8 <MX_LWIP_Init+0x244>)
 800e5f2:	22a8      	movs	r2, #168	; 0xa8
 800e5f4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800e5f6:	4b80      	ldr	r3, [pc, #512]	; (800e7f8 <MX_LWIP_Init+0x244>)
 800e5f8:	2201      	movs	r2, #1
 800e5fa:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800e5fc:	4b7e      	ldr	r3, [pc, #504]	; (800e7f8 <MX_LWIP_Init+0x244>)
 800e5fe:	2201      	movs	r2, #1
 800e600:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800e602:	f7f6 f89a 	bl	800473a <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800e606:	4b7a      	ldr	r3, [pc, #488]	; (800e7f0 <MX_LWIP_Init+0x23c>)
 800e608:	781b      	ldrb	r3, [r3, #0]
 800e60a:	061a      	lsls	r2, r3, #24
 800e60c:	4b78      	ldr	r3, [pc, #480]	; (800e7f0 <MX_LWIP_Init+0x23c>)
 800e60e:	785b      	ldrb	r3, [r3, #1]
 800e610:	041b      	lsls	r3, r3, #16
 800e612:	431a      	orrs	r2, r3
 800e614:	4b76      	ldr	r3, [pc, #472]	; (800e7f0 <MX_LWIP_Init+0x23c>)
 800e616:	789b      	ldrb	r3, [r3, #2]
 800e618:	021b      	lsls	r3, r3, #8
 800e61a:	4313      	orrs	r3, r2
 800e61c:	4a74      	ldr	r2, [pc, #464]	; (800e7f0 <MX_LWIP_Init+0x23c>)
 800e61e:	78d2      	ldrb	r2, [r2, #3]
 800e620:	4313      	orrs	r3, r2
 800e622:	061a      	lsls	r2, r3, #24
 800e624:	4b72      	ldr	r3, [pc, #456]	; (800e7f0 <MX_LWIP_Init+0x23c>)
 800e626:	781b      	ldrb	r3, [r3, #0]
 800e628:	0619      	lsls	r1, r3, #24
 800e62a:	4b71      	ldr	r3, [pc, #452]	; (800e7f0 <MX_LWIP_Init+0x23c>)
 800e62c:	785b      	ldrb	r3, [r3, #1]
 800e62e:	041b      	lsls	r3, r3, #16
 800e630:	4319      	orrs	r1, r3
 800e632:	4b6f      	ldr	r3, [pc, #444]	; (800e7f0 <MX_LWIP_Init+0x23c>)
 800e634:	789b      	ldrb	r3, [r3, #2]
 800e636:	021b      	lsls	r3, r3, #8
 800e638:	430b      	orrs	r3, r1
 800e63a:	496d      	ldr	r1, [pc, #436]	; (800e7f0 <MX_LWIP_Init+0x23c>)
 800e63c:	78c9      	ldrb	r1, [r1, #3]
 800e63e:	430b      	orrs	r3, r1
 800e640:	021b      	lsls	r3, r3, #8
 800e642:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e646:	431a      	orrs	r2, r3
 800e648:	4b69      	ldr	r3, [pc, #420]	; (800e7f0 <MX_LWIP_Init+0x23c>)
 800e64a:	781b      	ldrb	r3, [r3, #0]
 800e64c:	0619      	lsls	r1, r3, #24
 800e64e:	4b68      	ldr	r3, [pc, #416]	; (800e7f0 <MX_LWIP_Init+0x23c>)
 800e650:	785b      	ldrb	r3, [r3, #1]
 800e652:	041b      	lsls	r3, r3, #16
 800e654:	4319      	orrs	r1, r3
 800e656:	4b66      	ldr	r3, [pc, #408]	; (800e7f0 <MX_LWIP_Init+0x23c>)
 800e658:	789b      	ldrb	r3, [r3, #2]
 800e65a:	021b      	lsls	r3, r3, #8
 800e65c:	430b      	orrs	r3, r1
 800e65e:	4964      	ldr	r1, [pc, #400]	; (800e7f0 <MX_LWIP_Init+0x23c>)
 800e660:	78c9      	ldrb	r1, [r1, #3]
 800e662:	430b      	orrs	r3, r1
 800e664:	0a1b      	lsrs	r3, r3, #8
 800e666:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e66a:	431a      	orrs	r2, r3
 800e66c:	4b60      	ldr	r3, [pc, #384]	; (800e7f0 <MX_LWIP_Init+0x23c>)
 800e66e:	781b      	ldrb	r3, [r3, #0]
 800e670:	0619      	lsls	r1, r3, #24
 800e672:	4b5f      	ldr	r3, [pc, #380]	; (800e7f0 <MX_LWIP_Init+0x23c>)
 800e674:	785b      	ldrb	r3, [r3, #1]
 800e676:	041b      	lsls	r3, r3, #16
 800e678:	4319      	orrs	r1, r3
 800e67a:	4b5d      	ldr	r3, [pc, #372]	; (800e7f0 <MX_LWIP_Init+0x23c>)
 800e67c:	789b      	ldrb	r3, [r3, #2]
 800e67e:	021b      	lsls	r3, r3, #8
 800e680:	430b      	orrs	r3, r1
 800e682:	495b      	ldr	r1, [pc, #364]	; (800e7f0 <MX_LWIP_Init+0x23c>)
 800e684:	78c9      	ldrb	r1, [r1, #3]
 800e686:	430b      	orrs	r3, r1
 800e688:	0e1b      	lsrs	r3, r3, #24
 800e68a:	4313      	orrs	r3, r2
 800e68c:	4a5b      	ldr	r2, [pc, #364]	; (800e7fc <MX_LWIP_Init+0x248>)
 800e68e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800e690:	4b58      	ldr	r3, [pc, #352]	; (800e7f4 <MX_LWIP_Init+0x240>)
 800e692:	781b      	ldrb	r3, [r3, #0]
 800e694:	061a      	lsls	r2, r3, #24
 800e696:	4b57      	ldr	r3, [pc, #348]	; (800e7f4 <MX_LWIP_Init+0x240>)
 800e698:	785b      	ldrb	r3, [r3, #1]
 800e69a:	041b      	lsls	r3, r3, #16
 800e69c:	431a      	orrs	r2, r3
 800e69e:	4b55      	ldr	r3, [pc, #340]	; (800e7f4 <MX_LWIP_Init+0x240>)
 800e6a0:	789b      	ldrb	r3, [r3, #2]
 800e6a2:	021b      	lsls	r3, r3, #8
 800e6a4:	4313      	orrs	r3, r2
 800e6a6:	4a53      	ldr	r2, [pc, #332]	; (800e7f4 <MX_LWIP_Init+0x240>)
 800e6a8:	78d2      	ldrb	r2, [r2, #3]
 800e6aa:	4313      	orrs	r3, r2
 800e6ac:	061a      	lsls	r2, r3, #24
 800e6ae:	4b51      	ldr	r3, [pc, #324]	; (800e7f4 <MX_LWIP_Init+0x240>)
 800e6b0:	781b      	ldrb	r3, [r3, #0]
 800e6b2:	0619      	lsls	r1, r3, #24
 800e6b4:	4b4f      	ldr	r3, [pc, #316]	; (800e7f4 <MX_LWIP_Init+0x240>)
 800e6b6:	785b      	ldrb	r3, [r3, #1]
 800e6b8:	041b      	lsls	r3, r3, #16
 800e6ba:	4319      	orrs	r1, r3
 800e6bc:	4b4d      	ldr	r3, [pc, #308]	; (800e7f4 <MX_LWIP_Init+0x240>)
 800e6be:	789b      	ldrb	r3, [r3, #2]
 800e6c0:	021b      	lsls	r3, r3, #8
 800e6c2:	430b      	orrs	r3, r1
 800e6c4:	494b      	ldr	r1, [pc, #300]	; (800e7f4 <MX_LWIP_Init+0x240>)
 800e6c6:	78c9      	ldrb	r1, [r1, #3]
 800e6c8:	430b      	orrs	r3, r1
 800e6ca:	021b      	lsls	r3, r3, #8
 800e6cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e6d0:	431a      	orrs	r2, r3
 800e6d2:	4b48      	ldr	r3, [pc, #288]	; (800e7f4 <MX_LWIP_Init+0x240>)
 800e6d4:	781b      	ldrb	r3, [r3, #0]
 800e6d6:	0619      	lsls	r1, r3, #24
 800e6d8:	4b46      	ldr	r3, [pc, #280]	; (800e7f4 <MX_LWIP_Init+0x240>)
 800e6da:	785b      	ldrb	r3, [r3, #1]
 800e6dc:	041b      	lsls	r3, r3, #16
 800e6de:	4319      	orrs	r1, r3
 800e6e0:	4b44      	ldr	r3, [pc, #272]	; (800e7f4 <MX_LWIP_Init+0x240>)
 800e6e2:	789b      	ldrb	r3, [r3, #2]
 800e6e4:	021b      	lsls	r3, r3, #8
 800e6e6:	430b      	orrs	r3, r1
 800e6e8:	4942      	ldr	r1, [pc, #264]	; (800e7f4 <MX_LWIP_Init+0x240>)
 800e6ea:	78c9      	ldrb	r1, [r1, #3]
 800e6ec:	430b      	orrs	r3, r1
 800e6ee:	0a1b      	lsrs	r3, r3, #8
 800e6f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e6f4:	431a      	orrs	r2, r3
 800e6f6:	4b3f      	ldr	r3, [pc, #252]	; (800e7f4 <MX_LWIP_Init+0x240>)
 800e6f8:	781b      	ldrb	r3, [r3, #0]
 800e6fa:	0619      	lsls	r1, r3, #24
 800e6fc:	4b3d      	ldr	r3, [pc, #244]	; (800e7f4 <MX_LWIP_Init+0x240>)
 800e6fe:	785b      	ldrb	r3, [r3, #1]
 800e700:	041b      	lsls	r3, r3, #16
 800e702:	4319      	orrs	r1, r3
 800e704:	4b3b      	ldr	r3, [pc, #236]	; (800e7f4 <MX_LWIP_Init+0x240>)
 800e706:	789b      	ldrb	r3, [r3, #2]
 800e708:	021b      	lsls	r3, r3, #8
 800e70a:	430b      	orrs	r3, r1
 800e70c:	4939      	ldr	r1, [pc, #228]	; (800e7f4 <MX_LWIP_Init+0x240>)
 800e70e:	78c9      	ldrb	r1, [r1, #3]
 800e710:	430b      	orrs	r3, r1
 800e712:	0e1b      	lsrs	r3, r3, #24
 800e714:	4313      	orrs	r3, r2
 800e716:	4a3a      	ldr	r2, [pc, #232]	; (800e800 <MX_LWIP_Init+0x24c>)
 800e718:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800e71a:	4b37      	ldr	r3, [pc, #220]	; (800e7f8 <MX_LWIP_Init+0x244>)
 800e71c:	781b      	ldrb	r3, [r3, #0]
 800e71e:	061a      	lsls	r2, r3, #24
 800e720:	4b35      	ldr	r3, [pc, #212]	; (800e7f8 <MX_LWIP_Init+0x244>)
 800e722:	785b      	ldrb	r3, [r3, #1]
 800e724:	041b      	lsls	r3, r3, #16
 800e726:	431a      	orrs	r2, r3
 800e728:	4b33      	ldr	r3, [pc, #204]	; (800e7f8 <MX_LWIP_Init+0x244>)
 800e72a:	789b      	ldrb	r3, [r3, #2]
 800e72c:	021b      	lsls	r3, r3, #8
 800e72e:	4313      	orrs	r3, r2
 800e730:	4a31      	ldr	r2, [pc, #196]	; (800e7f8 <MX_LWIP_Init+0x244>)
 800e732:	78d2      	ldrb	r2, [r2, #3]
 800e734:	4313      	orrs	r3, r2
 800e736:	061a      	lsls	r2, r3, #24
 800e738:	4b2f      	ldr	r3, [pc, #188]	; (800e7f8 <MX_LWIP_Init+0x244>)
 800e73a:	781b      	ldrb	r3, [r3, #0]
 800e73c:	0619      	lsls	r1, r3, #24
 800e73e:	4b2e      	ldr	r3, [pc, #184]	; (800e7f8 <MX_LWIP_Init+0x244>)
 800e740:	785b      	ldrb	r3, [r3, #1]
 800e742:	041b      	lsls	r3, r3, #16
 800e744:	4319      	orrs	r1, r3
 800e746:	4b2c      	ldr	r3, [pc, #176]	; (800e7f8 <MX_LWIP_Init+0x244>)
 800e748:	789b      	ldrb	r3, [r3, #2]
 800e74a:	021b      	lsls	r3, r3, #8
 800e74c:	430b      	orrs	r3, r1
 800e74e:	492a      	ldr	r1, [pc, #168]	; (800e7f8 <MX_LWIP_Init+0x244>)
 800e750:	78c9      	ldrb	r1, [r1, #3]
 800e752:	430b      	orrs	r3, r1
 800e754:	021b      	lsls	r3, r3, #8
 800e756:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e75a:	431a      	orrs	r2, r3
 800e75c:	4b26      	ldr	r3, [pc, #152]	; (800e7f8 <MX_LWIP_Init+0x244>)
 800e75e:	781b      	ldrb	r3, [r3, #0]
 800e760:	0619      	lsls	r1, r3, #24
 800e762:	4b25      	ldr	r3, [pc, #148]	; (800e7f8 <MX_LWIP_Init+0x244>)
 800e764:	785b      	ldrb	r3, [r3, #1]
 800e766:	041b      	lsls	r3, r3, #16
 800e768:	4319      	orrs	r1, r3
 800e76a:	4b23      	ldr	r3, [pc, #140]	; (800e7f8 <MX_LWIP_Init+0x244>)
 800e76c:	789b      	ldrb	r3, [r3, #2]
 800e76e:	021b      	lsls	r3, r3, #8
 800e770:	430b      	orrs	r3, r1
 800e772:	4921      	ldr	r1, [pc, #132]	; (800e7f8 <MX_LWIP_Init+0x244>)
 800e774:	78c9      	ldrb	r1, [r1, #3]
 800e776:	430b      	orrs	r3, r1
 800e778:	0a1b      	lsrs	r3, r3, #8
 800e77a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e77e:	431a      	orrs	r2, r3
 800e780:	4b1d      	ldr	r3, [pc, #116]	; (800e7f8 <MX_LWIP_Init+0x244>)
 800e782:	781b      	ldrb	r3, [r3, #0]
 800e784:	0619      	lsls	r1, r3, #24
 800e786:	4b1c      	ldr	r3, [pc, #112]	; (800e7f8 <MX_LWIP_Init+0x244>)
 800e788:	785b      	ldrb	r3, [r3, #1]
 800e78a:	041b      	lsls	r3, r3, #16
 800e78c:	4319      	orrs	r1, r3
 800e78e:	4b1a      	ldr	r3, [pc, #104]	; (800e7f8 <MX_LWIP_Init+0x244>)
 800e790:	789b      	ldrb	r3, [r3, #2]
 800e792:	021b      	lsls	r3, r3, #8
 800e794:	430b      	orrs	r3, r1
 800e796:	4918      	ldr	r1, [pc, #96]	; (800e7f8 <MX_LWIP_Init+0x244>)
 800e798:	78c9      	ldrb	r1, [r1, #3]
 800e79a:	430b      	orrs	r3, r1
 800e79c:	0e1b      	lsrs	r3, r3, #24
 800e79e:	4313      	orrs	r3, r2
 800e7a0:	4a18      	ldr	r2, [pc, #96]	; (800e804 <MX_LWIP_Init+0x250>)
 800e7a2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800e7a4:	4b18      	ldr	r3, [pc, #96]	; (800e808 <MX_LWIP_Init+0x254>)
 800e7a6:	9302      	str	r3, [sp, #8]
 800e7a8:	4b18      	ldr	r3, [pc, #96]	; (800e80c <MX_LWIP_Init+0x258>)
 800e7aa:	9301      	str	r3, [sp, #4]
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	9300      	str	r3, [sp, #0]
 800e7b0:	4b14      	ldr	r3, [pc, #80]	; (800e804 <MX_LWIP_Init+0x250>)
 800e7b2:	4a13      	ldr	r2, [pc, #76]	; (800e800 <MX_LWIP_Init+0x24c>)
 800e7b4:	4911      	ldr	r1, [pc, #68]	; (800e7fc <MX_LWIP_Init+0x248>)
 800e7b6:	4816      	ldr	r0, [pc, #88]	; (800e810 <MX_LWIP_Init+0x25c>)
 800e7b8:	f7f6 fbbe 	bl	8004f38 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800e7bc:	4814      	ldr	r0, [pc, #80]	; (800e810 <MX_LWIP_Init+0x25c>)
 800e7be:	f7f6 fc9d 	bl	80050fc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800e7c2:	4b13      	ldr	r3, [pc, #76]	; (800e810 <MX_LWIP_Init+0x25c>)
 800e7c4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e7c8:	089b      	lsrs	r3, r3, #2
 800e7ca:	f003 0301 	and.w	r3, r3, #1
 800e7ce:	b2db      	uxtb	r3, r3
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d003      	beq.n	800e7dc <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800e7d4:	480e      	ldr	r0, [pc, #56]	; (800e810 <MX_LWIP_Init+0x25c>)
 800e7d6:	f7f6 fc9f 	bl	8005118 <netif_set_up>
 800e7da:	e002      	b.n	800e7e2 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800e7dc:	480c      	ldr	r0, [pc, #48]	; (800e810 <MX_LWIP_Init+0x25c>)
 800e7de:	f7f6 fcdf 	bl	80051a0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800e7e2:	490c      	ldr	r1, [pc, #48]	; (800e814 <MX_LWIP_Init+0x260>)
 800e7e4:	480a      	ldr	r0, [pc, #40]	; (800e810 <MX_LWIP_Init+0x25c>)
 800e7e6:	f7f6 fcfd 	bl	80051e4 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800e7ea:	bf00      	nop
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	bd80      	pop	{r7, pc}
 800e7f0:	200081dc 	.word	0x200081dc
 800e7f4:	200081d8 	.word	0x200081d8
 800e7f8:	2000819c 	.word	0x2000819c
 800e7fc:	200081d4 	.word	0x200081d4
 800e800:	200081e0 	.word	0x200081e0
 800e804:	200081e4 	.word	0x200081e4
 800e808:	0800d8b1 	.word	0x0800d8b1
 800e80c:	0800e305 	.word	0x0800e305
 800e810:	200081a0 	.word	0x200081a0
 800e814:	0800e371 	.word	0x0800e371

0800e818 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800e81c:	4803      	ldr	r0, [pc, #12]	; (800e82c <MX_LWIP_Process+0x14>)
 800e81e:	f7ff fd51 	bl	800e2c4 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800e822:	f7fc fd75 	bl	800b310 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800e826:	bf00      	nop
 800e828:	bd80      	pop	{r7, pc}
 800e82a:	bf00      	nop
 800e82c:	200081a0 	.word	0x200081a0

0800e830 <__io_putchar>:
  #else
  #define PUTCHAR_PROTOTYPE int fputc(int ch,FILE *f)
  #endif

  PUTCHAR_PROTOTYPE
  {//                        "SALAM"       5 100
 800e830:	b580      	push	{r7, lr}
 800e832:	b082      	sub	sp, #8
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1,(uint8_t*)&ch,1,100);
 800e838:	1d39      	adds	r1, r7, #4
 800e83a:	2364      	movs	r3, #100	; 0x64
 800e83c:	2201      	movs	r2, #1
 800e83e:	4804      	ldr	r0, [pc, #16]	; (800e850 <__io_putchar+0x20>)
 800e840:	f7f5 fdeb 	bl	800441a <HAL_UART_Transmit>

    return ch;
 800e844:	687b      	ldr	r3, [r7, #4]

  }
 800e846:	4618      	mov	r0, r3
 800e848:	3708      	adds	r7, #8
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bd80      	pop	{r7, pc}
 800e84e:	bf00      	nop
 800e850:	200081ec 	.word	0x200081ec

0800e854 <get_adc_raw>:



//-------------------------------------------------------------------------------------------
uint16_t get_adc_raw(int chanel)
{
 800e854:	b580      	push	{r7, lr}
 800e856:	b084      	sub	sp, #16
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]

	uint16_t digital_result=0;
 800e85c:	2300      	movs	r3, #0
 800e85e:	81fb      	strh	r3, [r7, #14]

	if(chanel==READ_ADC_CH_HV_PDUCL_PX)
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2b01      	cmp	r3, #1
 800e864:	d119      	bne.n	800e89a <get_adc_raw+0x46>
	{

			hadc1.Init.NbrOfConversion=READ_ADC_CH_HV_PDUCL_PX;// READ PIN 31 // ADC1_IN6
 800e866:	4b57      	ldr	r3, [pc, #348]	; (800e9c4 <get_adc_raw+0x170>)
 800e868:	2201      	movs	r2, #1
 800e86a:	611a      	str	r2, [r3, #16]
			HAL_ADC_Init(&hadc1);
 800e86c:	4855      	ldr	r0, [pc, #340]	; (800e9c4 <get_adc_raw+0x170>)
 800e86e:	f7f2 fcfb 	bl	8001268 <HAL_ADC_Init>
			HAL_ADC_Start(&hadc1);
 800e872:	4854      	ldr	r0, [pc, #336]	; (800e9c4 <get_adc_raw+0x170>)
 800e874:	f7f2 fdd0 	bl	8001418 <HAL_ADC_Start>
			if(HAL_ADC_PollForConversion(&hadc1,500)== HAL_OK)
 800e878:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e87c:	4851      	ldr	r0, [pc, #324]	; (800e9c4 <get_adc_raw+0x170>)
 800e87e:	f7f2 fea5 	bl	80015cc <HAL_ADC_PollForConversion>
 800e882:	4603      	mov	r3, r0
 800e884:	2b00      	cmp	r3, #0
 800e886:	d104      	bne.n	800e892 <get_adc_raw+0x3e>
			{

			digital_result=HAL_ADC_GetValue(&hadc1);
 800e888:	484e      	ldr	r0, [pc, #312]	; (800e9c4 <get_adc_raw+0x170>)
 800e88a:	f7f2 ff99 	bl	80017c0 <HAL_ADC_GetValue>
 800e88e:	4603      	mov	r3, r0
 800e890:	81fb      	strh	r3, [r7, #14]

			}
			HAL_ADC_Stop(&hadc1);
 800e892:	484c      	ldr	r0, [pc, #304]	; (800e9c4 <get_adc_raw+0x170>)
 800e894:	f7f2 fe6e 	bl	8001574 <HAL_ADC_Stop>
 800e898:	e08f      	b.n	800e9ba <get_adc_raw+0x166>


	}

	else if(chanel==READ_ADC_CH_HV_PDUCL_PY)// // READ PIN 31 // ADC1_IN7
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2b02      	cmp	r3, #2
 800e89e:	d119      	bne.n	800e8d4 <get_adc_raw+0x80>
	{

				hadc1.Init.NbrOfConversion=READ_ADC_CH_HV_PDUCL_PY;//
 800e8a0:	4b48      	ldr	r3, [pc, #288]	; (800e9c4 <get_adc_raw+0x170>)
 800e8a2:	2202      	movs	r2, #2
 800e8a4:	611a      	str	r2, [r3, #16]
				HAL_ADC_Init(&hadc1);
 800e8a6:	4847      	ldr	r0, [pc, #284]	; (800e9c4 <get_adc_raw+0x170>)
 800e8a8:	f7f2 fcde 	bl	8001268 <HAL_ADC_Init>
				HAL_ADC_Start(&hadc1);
 800e8ac:	4845      	ldr	r0, [pc, #276]	; (800e9c4 <get_adc_raw+0x170>)
 800e8ae:	f7f2 fdb3 	bl	8001418 <HAL_ADC_Start>
				if(HAL_ADC_PollForConversion(&hadc1,500)== HAL_OK)
 800e8b2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e8b6:	4843      	ldr	r0, [pc, #268]	; (800e9c4 <get_adc_raw+0x170>)
 800e8b8:	f7f2 fe88 	bl	80015cc <HAL_ADC_PollForConversion>
 800e8bc:	4603      	mov	r3, r0
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d104      	bne.n	800e8cc <get_adc_raw+0x78>
				{

				digital_result=HAL_ADC_GetValue(&hadc1);
 800e8c2:	4840      	ldr	r0, [pc, #256]	; (800e9c4 <get_adc_raw+0x170>)
 800e8c4:	f7f2 ff7c 	bl	80017c0 <HAL_ADC_GetValue>
 800e8c8:	4603      	mov	r3, r0
 800e8ca:	81fb      	strh	r3, [r7, #14]

				}
				HAL_ADC_Stop(&hadc1);
 800e8cc:	483d      	ldr	r0, [pc, #244]	; (800e9c4 <get_adc_raw+0x170>)
 800e8ce:	f7f2 fe51 	bl	8001574 <HAL_ADC_Stop>
 800e8d2:	e072      	b.n	800e9ba <get_adc_raw+0x166>


	}
	else if(chanel==READ_ADC_SENS1)
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2b05      	cmp	r3, #5
 800e8d8:	d119      	bne.n	800e90e <get_adc_raw+0xba>
	{

			hadc1.Init.NbrOfConversion=READ_ADC_SENS1;//ch2
 800e8da:	4b3a      	ldr	r3, [pc, #232]	; (800e9c4 <get_adc_raw+0x170>)
 800e8dc:	2205      	movs	r2, #5
 800e8de:	611a      	str	r2, [r3, #16]
			HAL_ADC_Init(&hadc1);
 800e8e0:	4838      	ldr	r0, [pc, #224]	; (800e9c4 <get_adc_raw+0x170>)
 800e8e2:	f7f2 fcc1 	bl	8001268 <HAL_ADC_Init>
			HAL_ADC_Start(&hadc1);
 800e8e6:	4837      	ldr	r0, [pc, #220]	; (800e9c4 <get_adc_raw+0x170>)
 800e8e8:	f7f2 fd96 	bl	8001418 <HAL_ADC_Start>
			if(HAL_ADC_PollForConversion(&hadc1,500)== HAL_OK)
 800e8ec:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e8f0:	4834      	ldr	r0, [pc, #208]	; (800e9c4 <get_adc_raw+0x170>)
 800e8f2:	f7f2 fe6b 	bl	80015cc <HAL_ADC_PollForConversion>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d104      	bne.n	800e906 <get_adc_raw+0xb2>
			{

			digital_result=HAL_ADC_GetValue(&hadc1);
 800e8fc:	4831      	ldr	r0, [pc, #196]	; (800e9c4 <get_adc_raw+0x170>)
 800e8fe:	f7f2 ff5f 	bl	80017c0 <HAL_ADC_GetValue>
 800e902:	4603      	mov	r3, r0
 800e904:	81fb      	strh	r3, [r7, #14]

			}
			HAL_ADC_Stop(&hadc1);
 800e906:	482f      	ldr	r0, [pc, #188]	; (800e9c4 <get_adc_raw+0x170>)
 800e908:	f7f2 fe34 	bl	8001574 <HAL_ADC_Stop>
 800e90c:	e055      	b.n	800e9ba <get_adc_raw+0x166>


	}

	else  if(chanel== READ_ADC_SENS2)//
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	2b06      	cmp	r3, #6
 800e912:	d119      	bne.n	800e948 <get_adc_raw+0xf4>
	{


			hadc1.Init.NbrOfConversion=READ_ADC_SENS2;
 800e914:	4b2b      	ldr	r3, [pc, #172]	; (800e9c4 <get_adc_raw+0x170>)
 800e916:	2206      	movs	r2, #6
 800e918:	611a      	str	r2, [r3, #16]
			HAL_ADC_Init(&hadc1);
 800e91a:	482a      	ldr	r0, [pc, #168]	; (800e9c4 <get_adc_raw+0x170>)
 800e91c:	f7f2 fca4 	bl	8001268 <HAL_ADC_Init>
			HAL_ADC_Start(&hadc1);
 800e920:	4828      	ldr	r0, [pc, #160]	; (800e9c4 <get_adc_raw+0x170>)
 800e922:	f7f2 fd79 	bl	8001418 <HAL_ADC_Start>
			if(HAL_ADC_PollForConversion(&hadc1,500)== HAL_OK)
 800e926:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e92a:	4826      	ldr	r0, [pc, #152]	; (800e9c4 <get_adc_raw+0x170>)
 800e92c:	f7f2 fe4e 	bl	80015cc <HAL_ADC_PollForConversion>
 800e930:	4603      	mov	r3, r0
 800e932:	2b00      	cmp	r3, #0
 800e934:	d104      	bne.n	800e940 <get_adc_raw+0xec>
			{

			digital_result=HAL_ADC_GetValue(&hadc1);
 800e936:	4823      	ldr	r0, [pc, #140]	; (800e9c4 <get_adc_raw+0x170>)
 800e938:	f7f2 ff42 	bl	80017c0 <HAL_ADC_GetValue>
 800e93c:	4603      	mov	r3, r0
 800e93e:	81fb      	strh	r3, [r7, #14]

			}
			HAL_ADC_Stop(&hadc1);
 800e940:	4820      	ldr	r0, [pc, #128]	; (800e9c4 <get_adc_raw+0x170>)
 800e942:	f7f2 fe17 	bl	8001574 <HAL_ADC_Stop>
 800e946:	e038      	b.n	800e9ba <get_adc_raw+0x166>

	}

	else  if(chanel== READ_ADC_CH_HV_PDU_MX)// ADC1_IN14 //PIN 33 //
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2b03      	cmp	r3, #3
 800e94c:	d119      	bne.n	800e982 <get_adc_raw+0x12e>
	{


			hadc1.Init.NbrOfConversion=READ_ADC_CH_HV_PDU_MX;
 800e94e:	4b1d      	ldr	r3, [pc, #116]	; (800e9c4 <get_adc_raw+0x170>)
 800e950:	2203      	movs	r2, #3
 800e952:	611a      	str	r2, [r3, #16]
			HAL_ADC_Init(&hadc1);
 800e954:	481b      	ldr	r0, [pc, #108]	; (800e9c4 <get_adc_raw+0x170>)
 800e956:	f7f2 fc87 	bl	8001268 <HAL_ADC_Init>
			HAL_ADC_Start(&hadc1);
 800e95a:	481a      	ldr	r0, [pc, #104]	; (800e9c4 <get_adc_raw+0x170>)
 800e95c:	f7f2 fd5c 	bl	8001418 <HAL_ADC_Start>
			if(HAL_ADC_PollForConversion(&hadc1,500)== HAL_OK)
 800e960:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e964:	4817      	ldr	r0, [pc, #92]	; (800e9c4 <get_adc_raw+0x170>)
 800e966:	f7f2 fe31 	bl	80015cc <HAL_ADC_PollForConversion>
 800e96a:	4603      	mov	r3, r0
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d104      	bne.n	800e97a <get_adc_raw+0x126>
			{

			digital_result=HAL_ADC_GetValue(&hadc1);
 800e970:	4814      	ldr	r0, [pc, #80]	; (800e9c4 <get_adc_raw+0x170>)
 800e972:	f7f2 ff25 	bl	80017c0 <HAL_ADC_GetValue>
 800e976:	4603      	mov	r3, r0
 800e978:	81fb      	strh	r3, [r7, #14]

			}
			HAL_ADC_Stop(&hadc1);
 800e97a:	4812      	ldr	r0, [pc, #72]	; (800e9c4 <get_adc_raw+0x170>)
 800e97c:	f7f2 fdfa 	bl	8001574 <HAL_ADC_Stop>
 800e980:	e01b      	b.n	800e9ba <get_adc_raw+0x166>

	}
	else  if(chanel== READ_ADC_CH_HV_PDU_MY)//ADC1_IN15
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	2b04      	cmp	r3, #4
 800e986:	d118      	bne.n	800e9ba <get_adc_raw+0x166>
	{


			hadc1.Init.NbrOfConversion=READ_ADC_CH_HV_PDU_MY;
 800e988:	4b0e      	ldr	r3, [pc, #56]	; (800e9c4 <get_adc_raw+0x170>)
 800e98a:	2204      	movs	r2, #4
 800e98c:	611a      	str	r2, [r3, #16]
			HAL_ADC_Init(&hadc1);
 800e98e:	480d      	ldr	r0, [pc, #52]	; (800e9c4 <get_adc_raw+0x170>)
 800e990:	f7f2 fc6a 	bl	8001268 <HAL_ADC_Init>
			HAL_ADC_Start(&hadc1);
 800e994:	480b      	ldr	r0, [pc, #44]	; (800e9c4 <get_adc_raw+0x170>)
 800e996:	f7f2 fd3f 	bl	8001418 <HAL_ADC_Start>
			if(HAL_ADC_PollForConversion(&hadc1,500)== HAL_OK)
 800e99a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e99e:	4809      	ldr	r0, [pc, #36]	; (800e9c4 <get_adc_raw+0x170>)
 800e9a0:	f7f2 fe14 	bl	80015cc <HAL_ADC_PollForConversion>
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d104      	bne.n	800e9b4 <get_adc_raw+0x160>
			{

			digital_result=HAL_ADC_GetValue(&hadc1);
 800e9aa:	4806      	ldr	r0, [pc, #24]	; (800e9c4 <get_adc_raw+0x170>)
 800e9ac:	f7f2 ff08 	bl	80017c0 <HAL_ADC_GetValue>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	81fb      	strh	r3, [r7, #14]

			}
			HAL_ADC_Stop(&hadc1);
 800e9b4:	4803      	ldr	r0, [pc, #12]	; (800e9c4 <get_adc_raw+0x170>)
 800e9b6:	f7f2 fddd 	bl	8001574 <HAL_ADC_Stop>

	}


	return digital_result;
 800e9ba:	89fb      	ldrh	r3, [r7, #14]

}
 800e9bc:	4618      	mov	r0, r3
 800e9be:	3710      	adds	r7, #16
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	bd80      	pop	{r7, pc}
 800e9c4:	200038e0 	.word	0x200038e0

0800e9c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800e9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9cc:	b091      	sub	sp, #68	; 0x44
 800e9ce:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800e9d0:	f7f2 fbc6 	bl	8001160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800e9d4:	f000 faa0 	bl	800ef18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800e9d8:	f7ff fd50 	bl	800e47c <MX_GPIO_Init>
  MX_LWIP_Init();
 800e9dc:	f7ff fdea 	bl	800e5b4 <MX_LWIP_Init>
  MX_ADC1_Init();
 800e9e0:	f7ff f842 	bl	800da68 <MX_ADC1_Init>
  MX_DAC_Init();
 800e9e4:	f7ff f932 	bl	800dc4c <MX_DAC_Init>
  MX_USART1_UART_Init();
 800e9e8:	f001 f9fe 	bl	800fde8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  SET_BUZZ(0)  ;
 800e9ec:	2201      	movs	r2, #1
 800e9ee:	2101      	movs	r1, #1
 800e9f0:	48d5      	ldr	r0, [pc, #852]	; (800ed48 <main+0x380>)
 800e9f2:	f7f4 fca4 	bl	800333e <HAL_GPIO_WritePin>
  HAL_Delay(300);
 800e9f6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800e9fa:	f7f2 fc13 	bl	8001224 <HAL_Delay>
  SET_BUZZ(1)  ;
 800e9fe:	2200      	movs	r2, #0
 800ea00:	2101      	movs	r1, #1
 800ea02:	48d1      	ldr	r0, [pc, #836]	; (800ed48 <main+0x380>)
 800ea04:	f7f4 fc9b 	bl	800333e <HAL_GPIO_WritePin>
  HAL_Delay(300);
 800ea08:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ea0c:	f7f2 fc0a 	bl	8001224 <HAL_Delay>



  server_init(1000);
 800ea10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ea14:	f000 ffd6 	bl	800f9c4 <server_init>


  //RELAY_USER_INT(1) ;
  PDU_POWER(0)  ;
 800ea18:	2200      	movs	r2, #0
 800ea1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ea1e:	48cb      	ldr	r0, [pc, #812]	; (800ed4c <main+0x384>)
 800ea20:	f7f4 fc8d 	bl	800333e <HAL_GPIO_WritePin>
  //RELAY_USER_INT(1) ;
  printf("hiiii\nstarted\n");
 800ea24:	48ca      	ldr	r0, [pc, #808]	; (800ed50 <main+0x388>)
 800ea26:	f002 f965 	bl	8010cf4 <puts>




    HAL_DAC_Start(&hdac, DAC_CH_X);
 800ea2a:	2100      	movs	r1, #0
 800ea2c:	48c9      	ldr	r0, [pc, #804]	; (800ed54 <main+0x38c>)
 800ea2e:	f7f3 f95c 	bl	8001cea <HAL_DAC_Start>
    HAL_DAC_Start(&hdac, DAC_CH_Y);
 800ea32:	2110      	movs	r1, #16
 800ea34:	48c7      	ldr	r0, [pc, #796]	; (800ed54 <main+0x38c>)
 800ea36:	f7f3 f958 	bl	8001cea <HAL_DAC_Start>

	HAL_DAC_SetValue(&hdac, DAC_CH_X, DAC_ALIGN_12B_R, 255);
 800ea3a:	23ff      	movs	r3, #255	; 0xff
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	2100      	movs	r1, #0
 800ea40:	48c4      	ldr	r0, [pc, #784]	; (800ed54 <main+0x38c>)
 800ea42:	f7f3 f9a3 	bl	8001d8c <HAL_DAC_SetValue>

	HAL_DAC_SetValue(&hdac, DAC_CH_Y, DAC_ALIGN_12B_R, 255);
 800ea46:	23ff      	movs	r3, #255	; 0xff
 800ea48:	2200      	movs	r2, #0
 800ea4a:	2110      	movs	r1, #16
 800ea4c:	48c1      	ldr	r0, [pc, #772]	; (800ed54 <main+0x38c>)
 800ea4e:	f7f3 f99d 	bl	8001d8c <HAL_DAC_SetValue>

	printf("dac=128\n");
 800ea52:	48c1      	ldr	r0, [pc, #772]	; (800ed58 <main+0x390>)
 800ea54:	f002 f94e 	bl	8010cf4 <puts>

	HAL_Delay(2000);
 800ea58:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ea5c:	f7f2 fbe2 	bl	8001224 <HAL_Delay>
	//PDU_POWER(0)  ;
   // RELAY_USER_INT(0) ;


            printf(" PDUCL_PX=%4.2fV\n PDUCL_PY=%4.2fV\n SENS1=%4.2fV\n SENS2=%4.2fV\nPDU_MX=%4.2fV\n PDU_MY=%4.2fV\n \n\n",
             ((float)get_adc_raw( READ_ADC_CH_HV_PDUCL_PX  )*3.30)/4096.0     ,
 800ea60:	2001      	movs	r0, #1
 800ea62:	f7ff fef7 	bl	800e854 <get_adc_raw>
 800ea66:	4603      	mov	r3, r0
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f7f2 f99f 	bl	8000dac <__aeabi_ui2f>
 800ea6e:	4603      	mov	r3, r0
 800ea70:	4618      	mov	r0, r3
 800ea72:	f7f1 fd45 	bl	8000500 <__aeabi_f2d>
 800ea76:	a3b2      	add	r3, pc, #712	; (adr r3, 800ed40 <main+0x378>)
 800ea78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea7c:	f7f1 fd98 	bl	80005b0 <__aeabi_dmul>
 800ea80:	4603      	mov	r3, r0
 800ea82:	460c      	mov	r4, r1
 800ea84:	4618      	mov	r0, r3
 800ea86:	4621      	mov	r1, r4
            printf(" PDUCL_PX=%4.2fV\n PDUCL_PY=%4.2fV\n SENS1=%4.2fV\n SENS2=%4.2fV\nPDU_MX=%4.2fV\n PDU_MY=%4.2fV\n \n\n",
 800ea88:	f04f 0200 	mov.w	r2, #0
 800ea8c:	4bb3      	ldr	r3, [pc, #716]	; (800ed5c <main+0x394>)
 800ea8e:	f7f1 feb9 	bl	8000804 <__aeabi_ddiv>
 800ea92:	4603      	mov	r3, r0
 800ea94:	460c      	mov	r4, r1
 800ea96:	e9c7 3402 	strd	r3, r4, [r7, #8]
			 ((float)get_adc_raw( READ_ADC_CH_HV_PDUCL_PY  )*3.30)/4096.0     ,
 800ea9a:	2002      	movs	r0, #2
 800ea9c:	f7ff feda 	bl	800e854 <get_adc_raw>
 800eaa0:	4603      	mov	r3, r0
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	f7f2 f982 	bl	8000dac <__aeabi_ui2f>
 800eaa8:	4603      	mov	r3, r0
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f7f1 fd28 	bl	8000500 <__aeabi_f2d>
 800eab0:	a3a3      	add	r3, pc, #652	; (adr r3, 800ed40 <main+0x378>)
 800eab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eab6:	f7f1 fd7b 	bl	80005b0 <__aeabi_dmul>
 800eaba:	4603      	mov	r3, r0
 800eabc:	460c      	mov	r4, r1
 800eabe:	4618      	mov	r0, r3
 800eac0:	4621      	mov	r1, r4
            printf(" PDUCL_PX=%4.2fV\n PDUCL_PY=%4.2fV\n SENS1=%4.2fV\n SENS2=%4.2fV\nPDU_MX=%4.2fV\n PDU_MY=%4.2fV\n \n\n",
 800eac2:	f04f 0200 	mov.w	r2, #0
 800eac6:	4ba5      	ldr	r3, [pc, #660]	; (800ed5c <main+0x394>)
 800eac8:	f7f1 fe9c 	bl	8000804 <__aeabi_ddiv>
 800eacc:	4603      	mov	r3, r0
 800eace:	460c      	mov	r4, r1
 800ead0:	4698      	mov	r8, r3
 800ead2:	46a1      	mov	r9, r4
			 ((float)get_adc_raw( READ_ADC_SENS1        )*3.30)/4096.0     ,
 800ead4:	2005      	movs	r0, #5
 800ead6:	f7ff febd 	bl	800e854 <get_adc_raw>
 800eada:	4603      	mov	r3, r0
 800eadc:	4618      	mov	r0, r3
 800eade:	f7f2 f965 	bl	8000dac <__aeabi_ui2f>
 800eae2:	4603      	mov	r3, r0
 800eae4:	4618      	mov	r0, r3
 800eae6:	f7f1 fd0b 	bl	8000500 <__aeabi_f2d>
 800eaea:	a395      	add	r3, pc, #596	; (adr r3, 800ed40 <main+0x378>)
 800eaec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaf0:	f7f1 fd5e 	bl	80005b0 <__aeabi_dmul>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	460c      	mov	r4, r1
 800eaf8:	4618      	mov	r0, r3
 800eafa:	4621      	mov	r1, r4
            printf(" PDUCL_PX=%4.2fV\n PDUCL_PY=%4.2fV\n SENS1=%4.2fV\n SENS2=%4.2fV\nPDU_MX=%4.2fV\n PDU_MY=%4.2fV\n \n\n",
 800eafc:	f04f 0200 	mov.w	r2, #0
 800eb00:	4b96      	ldr	r3, [pc, #600]	; (800ed5c <main+0x394>)
 800eb02:	f7f1 fe7f 	bl	8000804 <__aeabi_ddiv>
 800eb06:	4603      	mov	r3, r0
 800eb08:	460c      	mov	r4, r1
 800eb0a:	469a      	mov	sl, r3
 800eb0c:	46a3      	mov	fp, r4
			 ((float)get_adc_raw( READ_ADC_SENS2        )*3.30)/4096.0     ,
 800eb0e:	2006      	movs	r0, #6
 800eb10:	f7ff fea0 	bl	800e854 <get_adc_raw>
 800eb14:	4603      	mov	r3, r0
 800eb16:	4618      	mov	r0, r3
 800eb18:	f7f2 f948 	bl	8000dac <__aeabi_ui2f>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	4618      	mov	r0, r3
 800eb20:	f7f1 fcee 	bl	8000500 <__aeabi_f2d>
 800eb24:	a386      	add	r3, pc, #536	; (adr r3, 800ed40 <main+0x378>)
 800eb26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb2a:	f7f1 fd41 	bl	80005b0 <__aeabi_dmul>
 800eb2e:	4603      	mov	r3, r0
 800eb30:	460c      	mov	r4, r1
 800eb32:	4618      	mov	r0, r3
 800eb34:	4621      	mov	r1, r4
            printf(" PDUCL_PX=%4.2fV\n PDUCL_PY=%4.2fV\n SENS1=%4.2fV\n SENS2=%4.2fV\nPDU_MX=%4.2fV\n PDU_MY=%4.2fV\n \n\n",
 800eb36:	f04f 0200 	mov.w	r2, #0
 800eb3a:	4b88      	ldr	r3, [pc, #544]	; (800ed5c <main+0x394>)
 800eb3c:	f7f1 fe62 	bl	8000804 <__aeabi_ddiv>
 800eb40:	4603      	mov	r3, r0
 800eb42:	460c      	mov	r4, r1
 800eb44:	e9c7 3400 	strd	r3, r4, [r7]
			 ((float)get_adc_raw( READ_ADC_CH_HV_PDU_MX    )*3.30)/4096.0     ,
 800eb48:	2003      	movs	r0, #3
 800eb4a:	f7ff fe83 	bl	800e854 <get_adc_raw>
 800eb4e:	4603      	mov	r3, r0
 800eb50:	4618      	mov	r0, r3
 800eb52:	f7f2 f92b 	bl	8000dac <__aeabi_ui2f>
 800eb56:	4603      	mov	r3, r0
 800eb58:	4618      	mov	r0, r3
 800eb5a:	f7f1 fcd1 	bl	8000500 <__aeabi_f2d>
 800eb5e:	a378      	add	r3, pc, #480	; (adr r3, 800ed40 <main+0x378>)
 800eb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb64:	f7f1 fd24 	bl	80005b0 <__aeabi_dmul>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	460c      	mov	r4, r1
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	4621      	mov	r1, r4
            printf(" PDUCL_PX=%4.2fV\n PDUCL_PY=%4.2fV\n SENS1=%4.2fV\n SENS2=%4.2fV\nPDU_MX=%4.2fV\n PDU_MY=%4.2fV\n \n\n",
 800eb70:	f04f 0200 	mov.w	r2, #0
 800eb74:	4b79      	ldr	r3, [pc, #484]	; (800ed5c <main+0x394>)
 800eb76:	f7f1 fe45 	bl	8000804 <__aeabi_ddiv>
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	460c      	mov	r4, r1
 800eb7e:	461d      	mov	r5, r3
 800eb80:	4626      	mov	r6, r4
			 ((float)get_adc_raw( READ_ADC_CH_HV_PDU_MY    )*3.30)/4096.0     );
 800eb82:	2004      	movs	r0, #4
 800eb84:	f7ff fe66 	bl	800e854 <get_adc_raw>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	f7f2 f90e 	bl	8000dac <__aeabi_ui2f>
 800eb90:	4603      	mov	r3, r0
 800eb92:	4618      	mov	r0, r3
 800eb94:	f7f1 fcb4 	bl	8000500 <__aeabi_f2d>
 800eb98:	a369      	add	r3, pc, #420	; (adr r3, 800ed40 <main+0x378>)
 800eb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb9e:	f7f1 fd07 	bl	80005b0 <__aeabi_dmul>
 800eba2:	4603      	mov	r3, r0
 800eba4:	460c      	mov	r4, r1
 800eba6:	4618      	mov	r0, r3
 800eba8:	4621      	mov	r1, r4
            printf(" PDUCL_PX=%4.2fV\n PDUCL_PY=%4.2fV\n SENS1=%4.2fV\n SENS2=%4.2fV\nPDU_MX=%4.2fV\n PDU_MY=%4.2fV\n \n\n",
 800ebaa:	f04f 0200 	mov.w	r2, #0
 800ebae:	4b6b      	ldr	r3, [pc, #428]	; (800ed5c <main+0x394>)
 800ebb0:	f7f1 fe28 	bl	8000804 <__aeabi_ddiv>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	460c      	mov	r4, r1
 800ebb8:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800ebbc:	e9cd 5606 	strd	r5, r6, [sp, #24]
 800ebc0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ebc4:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800ebc8:	e9cd ab02 	strd	sl, fp, [sp, #8]
 800ebcc:	e9cd 8900 	strd	r8, r9, [sp]
 800ebd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ebd4:	4862      	ldr	r0, [pc, #392]	; (800ed60 <main+0x398>)
 800ebd6:	f002 f819 	bl	8010c0c <iprintf>

            float cof=18.2;
 800ebda:	4b62      	ldr	r3, [pc, #392]	; (800ed64 <main+0x39c>)
 800ebdc:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  LED_TOGG;
 800ebde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ebe2:	485a      	ldr	r0, [pc, #360]	; (800ed4c <main+0x384>)
 800ebe4:	f7f4 fbc3 	bl	800336e <HAL_GPIO_TogglePin>
	  HAL_Delay(300);
 800ebe8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ebec:	f7f2 fb1a 	bl	8001224 <HAL_Delay>
printf(" PDUCL_PX=%4.2fV\n PDUCL_PY=%4.2fV\n SENS1=%4.2fV\n SENS2=%4.2fV\n PDU_MX=%4.2fV\n PDU_MY=%4.2fV\n----\n",
((float)get_adc_raw( READ_ADC_CH_HV_PDUCL_PX  )*3.30)/4096.0     ,
 800ebf0:	2001      	movs	r0, #1
 800ebf2:	f7ff fe2f 	bl	800e854 <get_adc_raw>
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f7f2 f8d7 	bl	8000dac <__aeabi_ui2f>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	4618      	mov	r0, r3
 800ec02:	f7f1 fc7d 	bl	8000500 <__aeabi_f2d>
 800ec06:	a34e      	add	r3, pc, #312	; (adr r3, 800ed40 <main+0x378>)
 800ec08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec0c:	f7f1 fcd0 	bl	80005b0 <__aeabi_dmul>
 800ec10:	4603      	mov	r3, r0
 800ec12:	460c      	mov	r4, r1
 800ec14:	4618      	mov	r0, r3
 800ec16:	4621      	mov	r1, r4
printf(" PDUCL_PX=%4.2fV\n PDUCL_PY=%4.2fV\n SENS1=%4.2fV\n SENS2=%4.2fV\n PDU_MX=%4.2fV\n PDU_MY=%4.2fV\n----\n",
 800ec18:	f04f 0200 	mov.w	r2, #0
 800ec1c:	4b4f      	ldr	r3, [pc, #316]	; (800ed5c <main+0x394>)
 800ec1e:	f7f1 fdf1 	bl	8000804 <__aeabi_ddiv>
 800ec22:	4603      	mov	r3, r0
 800ec24:	460c      	mov	r4, r1
 800ec26:	e9c7 3402 	strd	r3, r4, [r7, #8]
((float)get_adc_raw( READ_ADC_CH_HV_PDUCL_PY  )*3.30)/4096.0     ,
 800ec2a:	2002      	movs	r0, #2
 800ec2c:	f7ff fe12 	bl	800e854 <get_adc_raw>
 800ec30:	4603      	mov	r3, r0
 800ec32:	4618      	mov	r0, r3
 800ec34:	f7f2 f8ba 	bl	8000dac <__aeabi_ui2f>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f7f1 fc60 	bl	8000500 <__aeabi_f2d>
 800ec40:	a33f      	add	r3, pc, #252	; (adr r3, 800ed40 <main+0x378>)
 800ec42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec46:	f7f1 fcb3 	bl	80005b0 <__aeabi_dmul>
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	460c      	mov	r4, r1
 800ec4e:	4618      	mov	r0, r3
 800ec50:	4621      	mov	r1, r4
printf(" PDUCL_PX=%4.2fV\n PDUCL_PY=%4.2fV\n SENS1=%4.2fV\n SENS2=%4.2fV\n PDU_MX=%4.2fV\n PDU_MY=%4.2fV\n----\n",
 800ec52:	f04f 0200 	mov.w	r2, #0
 800ec56:	4b41      	ldr	r3, [pc, #260]	; (800ed5c <main+0x394>)
 800ec58:	f7f1 fdd4 	bl	8000804 <__aeabi_ddiv>
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	460c      	mov	r4, r1
 800ec60:	4698      	mov	r8, r3
 800ec62:	46a1      	mov	r9, r4
((float)get_adc_raw( READ_ADC_SENS1        )*3.30)/4096.0     ,
 800ec64:	2005      	movs	r0, #5
 800ec66:	f7ff fdf5 	bl	800e854 <get_adc_raw>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	f7f2 f89d 	bl	8000dac <__aeabi_ui2f>
 800ec72:	4603      	mov	r3, r0
 800ec74:	4618      	mov	r0, r3
 800ec76:	f7f1 fc43 	bl	8000500 <__aeabi_f2d>
 800ec7a:	a331      	add	r3, pc, #196	; (adr r3, 800ed40 <main+0x378>)
 800ec7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec80:	f7f1 fc96 	bl	80005b0 <__aeabi_dmul>
 800ec84:	4603      	mov	r3, r0
 800ec86:	460c      	mov	r4, r1
 800ec88:	4618      	mov	r0, r3
 800ec8a:	4621      	mov	r1, r4
printf(" PDUCL_PX=%4.2fV\n PDUCL_PY=%4.2fV\n SENS1=%4.2fV\n SENS2=%4.2fV\n PDU_MX=%4.2fV\n PDU_MY=%4.2fV\n----\n",
 800ec8c:	f04f 0200 	mov.w	r2, #0
 800ec90:	4b32      	ldr	r3, [pc, #200]	; (800ed5c <main+0x394>)
 800ec92:	f7f1 fdb7 	bl	8000804 <__aeabi_ddiv>
 800ec96:	4603      	mov	r3, r0
 800ec98:	460c      	mov	r4, r1
 800ec9a:	469a      	mov	sl, r3
 800ec9c:	46a3      	mov	fp, r4
((float)get_adc_raw( READ_ADC_SENS2        )*3.30)/4096.0     ,
 800ec9e:	2006      	movs	r0, #6
 800eca0:	f7ff fdd8 	bl	800e854 <get_adc_raw>
 800eca4:	4603      	mov	r3, r0
 800eca6:	4618      	mov	r0, r3
 800eca8:	f7f2 f880 	bl	8000dac <__aeabi_ui2f>
 800ecac:	4603      	mov	r3, r0
 800ecae:	4618      	mov	r0, r3
 800ecb0:	f7f1 fc26 	bl	8000500 <__aeabi_f2d>
 800ecb4:	a322      	add	r3, pc, #136	; (adr r3, 800ed40 <main+0x378>)
 800ecb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecba:	f7f1 fc79 	bl	80005b0 <__aeabi_dmul>
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	460c      	mov	r4, r1
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	4621      	mov	r1, r4
printf(" PDUCL_PX=%4.2fV\n PDUCL_PY=%4.2fV\n SENS1=%4.2fV\n SENS2=%4.2fV\n PDU_MX=%4.2fV\n PDU_MY=%4.2fV\n----\n",
 800ecc6:	f04f 0200 	mov.w	r2, #0
 800ecca:	4b24      	ldr	r3, [pc, #144]	; (800ed5c <main+0x394>)
 800eccc:	f7f1 fd9a 	bl	8000804 <__aeabi_ddiv>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	460c      	mov	r4, r1
 800ecd4:	e9c7 3400 	strd	r3, r4, [r7]
((float)get_adc_raw( READ_ADC_CH_HV_PDU_MX    )*3.30)/4096.0     ,
 800ecd8:	2003      	movs	r0, #3
 800ecda:	f7ff fdbb 	bl	800e854 <get_adc_raw>
 800ecde:	4603      	mov	r3, r0
 800ece0:	4618      	mov	r0, r3
 800ece2:	f7f2 f863 	bl	8000dac <__aeabi_ui2f>
 800ece6:	4603      	mov	r3, r0
 800ece8:	4618      	mov	r0, r3
 800ecea:	f7f1 fc09 	bl	8000500 <__aeabi_f2d>
 800ecee:	a314      	add	r3, pc, #80	; (adr r3, 800ed40 <main+0x378>)
 800ecf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecf4:	f7f1 fc5c 	bl	80005b0 <__aeabi_dmul>
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	460c      	mov	r4, r1
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	4621      	mov	r1, r4
printf(" PDUCL_PX=%4.2fV\n PDUCL_PY=%4.2fV\n SENS1=%4.2fV\n SENS2=%4.2fV\n PDU_MX=%4.2fV\n PDU_MY=%4.2fV\n----\n",
 800ed00:	f04f 0200 	mov.w	r2, #0
 800ed04:	4b15      	ldr	r3, [pc, #84]	; (800ed5c <main+0x394>)
 800ed06:	f7f1 fd7d 	bl	8000804 <__aeabi_ddiv>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	460c      	mov	r4, r1
 800ed0e:	461d      	mov	r5, r3
 800ed10:	4626      	mov	r6, r4
((float)get_adc_raw( READ_ADC_CH_HV_PDU_MY    )*3.30)/4096.0     );
 800ed12:	2004      	movs	r0, #4
 800ed14:	f7ff fd9e 	bl	800e854 <get_adc_raw>
 800ed18:	4603      	mov	r3, r0
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	f7f2 f846 	bl	8000dac <__aeabi_ui2f>
 800ed20:	4603      	mov	r3, r0
 800ed22:	4618      	mov	r0, r3
 800ed24:	f7f1 fbec 	bl	8000500 <__aeabi_f2d>
 800ed28:	a305      	add	r3, pc, #20	; (adr r3, 800ed40 <main+0x378>)
 800ed2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed2e:	f7f1 fc3f 	bl	80005b0 <__aeabi_dmul>
 800ed32:	4603      	mov	r3, r0
 800ed34:	460c      	mov	r4, r1
 800ed36:	4618      	mov	r0, r3
 800ed38:	e016      	b.n	800ed68 <main+0x3a0>
 800ed3a:	bf00      	nop
 800ed3c:	f3af 8000 	nop.w
 800ed40:	66666666 	.word	0x66666666
 800ed44:	400a6666 	.word	0x400a6666
 800ed48:	40010800 	.word	0x40010800
 800ed4c:	40010c00 	.word	0x40010c00
 800ed50:	0801613c 	.word	0x0801613c
 800ed54:	20003910 	.word	0x20003910
 800ed58:	0801614c 	.word	0x0801614c
 800ed5c:	40b00000 	.word	0x40b00000
 800ed60:	08016154 	.word	0x08016154
 800ed64:	4191999a 	.word	0x4191999a
 800ed68:	4621      	mov	r1, r4
printf(" PDUCL_PX=%4.2fV\n PDUCL_PY=%4.2fV\n SENS1=%4.2fV\n SENS2=%4.2fV\n PDU_MX=%4.2fV\n PDU_MY=%4.2fV\n----\n",
 800ed6a:	f04f 0200 	mov.w	r2, #0
 800ed6e:	4b57      	ldr	r3, [pc, #348]	; (800eecc <main+0x504>)
 800ed70:	f7f1 fd48 	bl	8000804 <__aeabi_ddiv>
 800ed74:	4603      	mov	r3, r0
 800ed76:	460c      	mov	r4, r1
 800ed78:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800ed7c:	e9cd 5606 	strd	r5, r6, [sp, #24]
 800ed80:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ed84:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800ed88:	e9cd ab02 	strd	sl, fp, [sp, #8]
 800ed8c:	e9cd 8900 	strd	r8, r9, [sp]
 800ed90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ed94:	484e      	ldr	r0, [pc, #312]	; (800eed0 <main+0x508>)
 800ed96:	f001 ff39 	bl	8010c0c <iprintf>





	  if(flag_run_loop)
 800ed9a:	4b4e      	ldr	r3, [pc, #312]	; (800eed4 <main+0x50c>)
 800ed9c:	781b      	ldrb	r3, [r3, #0]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	f000 8091 	beq.w	800eec6 <main+0x4fe>
	  {
		  flag_run_loop=false;
 800eda4:	4b4b      	ldr	r3, [pc, #300]	; (800eed4 <main+0x50c>)
 800eda6:	2200      	movs	r2, #0
 800eda8:	701a      	strb	r2, [r3, #0]


		  for(k=0 ; k <= loop ; k++ )
 800edaa:	4b4b      	ldr	r3, [pc, #300]	; (800eed8 <main+0x510>)
 800edac:	2200      	movs	r2, #0
 800edae:	801a      	strh	r2, [r3, #0]
 800edb0:	e080      	b.n	800eeb4 <main+0x4ec>
		  {
			  _even = true;
 800edb2:	4b4a      	ldr	r3, [pc, #296]	; (800eedc <main+0x514>)
 800edb4:	2201      	movs	r2, #1
 800edb6:	701a      	strb	r2, [r3, #0]
			   for (i = xs ; i <= xe ; i = i + sx)
 800edb8:	4b49      	ldr	r3, [pc, #292]	; (800eee0 <main+0x518>)
 800edba:	881a      	ldrh	r2, [r3, #0]
 800edbc:	4b49      	ldr	r3, [pc, #292]	; (800eee4 <main+0x51c>)
 800edbe:	801a      	strh	r2, [r3, #0]
 800edc0:	e066      	b.n	800ee90 <main+0x4c8>
			   {

				   _even = !_even;
 800edc2:	4b46      	ldr	r3, [pc, #280]	; (800eedc <main+0x514>)
 800edc4:	781b      	ldrb	r3, [r3, #0]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	bf14      	ite	ne
 800edca:	2301      	movne	r3, #1
 800edcc:	2300      	moveq	r3, #0
 800edce:	b2db      	uxtb	r3, r3
 800edd0:	f083 0301 	eor.w	r3, r3, #1
 800edd4:	b2db      	uxtb	r3, r3
 800edd6:	f003 0301 	and.w	r3, r3, #1
 800edda:	b2da      	uxtb	r2, r3
 800eddc:	4b3f      	ldr	r3, [pc, #252]	; (800eedc <main+0x514>)
 800edde:	701a      	strb	r2, [r3, #0]
				 for (j = ys ; j <= ye ; j = j + sy)
 800ede0:	4b41      	ldr	r3, [pc, #260]	; (800eee8 <main+0x520>)
 800ede2:	881a      	ldrh	r2, [r3, #0]
 800ede4:	4b41      	ldr	r3, [pc, #260]	; (800eeec <main+0x524>)
 800ede6:	801a      	strh	r2, [r3, #0]
 800ede8:	e03e      	b.n	800ee68 <main+0x4a0>
				 {
					   if (_even)
 800edea:	4b3c      	ldr	r3, [pc, #240]	; (800eedc <main+0x514>)
 800edec:	781b      	ldrb	r3, [r3, #0]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d00c      	beq.n	800ee0c <main+0x444>
					   {
						 j1 = ye + ys - j;
 800edf2:	4b3f      	ldr	r3, [pc, #252]	; (800eef0 <main+0x528>)
 800edf4:	881a      	ldrh	r2, [r3, #0]
 800edf6:	4b3c      	ldr	r3, [pc, #240]	; (800eee8 <main+0x520>)
 800edf8:	881b      	ldrh	r3, [r3, #0]
 800edfa:	4413      	add	r3, r2
 800edfc:	b29a      	uxth	r2, r3
 800edfe:	4b3b      	ldr	r3, [pc, #236]	; (800eeec <main+0x524>)
 800ee00:	881b      	ldrh	r3, [r3, #0]
 800ee02:	1ad3      	subs	r3, r2, r3
 800ee04:	b29a      	uxth	r2, r3
 800ee06:	4b3b      	ldr	r3, [pc, #236]	; (800eef4 <main+0x52c>)
 800ee08:	801a      	strh	r2, [r3, #0]
 800ee0a:	e003      	b.n	800ee14 <main+0x44c>
					   }
					   else
					   {
						 j1 = j;
 800ee0c:	4b37      	ldr	r3, [pc, #220]	; (800eeec <main+0x524>)
 800ee0e:	881a      	ldrh	r2, [r3, #0]
 800ee10:	4b38      	ldr	r3, [pc, #224]	; (800eef4 <main+0x52c>)
 800ee12:	801a      	strh	r2, [r3, #0]
					   }


					    HAL_DAC_SetValue(&hdac, DAC_CH_X , DAC_ALIGN_12B_R ,  i);
 800ee14:	4b33      	ldr	r3, [pc, #204]	; (800eee4 <main+0x51c>)
 800ee16:	881b      	ldrh	r3, [r3, #0]
 800ee18:	2200      	movs	r2, #0
 800ee1a:	2100      	movs	r1, #0
 800ee1c:	4836      	ldr	r0, [pc, #216]	; (800eef8 <main+0x530>)
 800ee1e:	f7f2 ffb5 	bl	8001d8c <HAL_DAC_SetValue>
					    HAL_DAC_SetValue(&hdac, DAC_CH_Y , DAC_ALIGN_12B_R ,  j1);
 800ee22:	4b34      	ldr	r3, [pc, #208]	; (800eef4 <main+0x52c>)
 800ee24:	881b      	ldrh	r3, [r3, #0]
 800ee26:	2200      	movs	r2, #0
 800ee28:	2110      	movs	r1, #16
 800ee2a:	4833      	ldr	r0, [pc, #204]	; (800eef8 <main+0x530>)
 800ee2c:	f7f2 ffae 	bl	8001d8c <HAL_DAC_SetValue>

					   printf("\nx = %d  \ny = %d\n", i , j1 );
 800ee30:	4b2c      	ldr	r3, [pc, #176]	; (800eee4 <main+0x51c>)
 800ee32:	881b      	ldrh	r3, [r3, #0]
 800ee34:	4619      	mov	r1, r3
 800ee36:	4b2f      	ldr	r3, [pc, #188]	; (800eef4 <main+0x52c>)
 800ee38:	881b      	ldrh	r3, [r3, #0]
 800ee3a:	461a      	mov	r2, r3
 800ee3c:	482f      	ldr	r0, [pc, #188]	; (800eefc <main+0x534>)
 800ee3e:	f001 fee5 	bl	8010c0c <iprintf>
					   dac.begin(0x60);
					   dac.setVoltage(i, false);
					   dac.begin(0x61);
					   dac.setVoltage(j1, false);
					   */
					   MX_LWIP_Process();
 800ee42:	f7ff fce9 	bl	800e818 <MX_LWIP_Process>

					   if(flag_exit_loop) break;
 800ee46:	4b2e      	ldr	r3, [pc, #184]	; (800ef00 <main+0x538>)
 800ee48:	781b      	ldrb	r3, [r3, #0]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d113      	bne.n	800ee76 <main+0x4ae>

				       HAL_Delay(dly);
 800ee4e:	4b2d      	ldr	r3, [pc, #180]	; (800ef04 <main+0x53c>)
 800ee50:	881b      	ldrh	r3, [r3, #0]
 800ee52:	4618      	mov	r0, r3
 800ee54:	f7f2 f9e6 	bl	8001224 <HAL_Delay>
				 for (j = ys ; j <= ye ; j = j + sy)
 800ee58:	4b24      	ldr	r3, [pc, #144]	; (800eeec <main+0x524>)
 800ee5a:	881a      	ldrh	r2, [r3, #0]
 800ee5c:	4b2a      	ldr	r3, [pc, #168]	; (800ef08 <main+0x540>)
 800ee5e:	881b      	ldrh	r3, [r3, #0]
 800ee60:	4413      	add	r3, r2
 800ee62:	b29a      	uxth	r2, r3
 800ee64:	4b21      	ldr	r3, [pc, #132]	; (800eeec <main+0x524>)
 800ee66:	801a      	strh	r2, [r3, #0]
 800ee68:	4b20      	ldr	r3, [pc, #128]	; (800eeec <main+0x524>)
 800ee6a:	881a      	ldrh	r2, [r3, #0]
 800ee6c:	4b20      	ldr	r3, [pc, #128]	; (800eef0 <main+0x528>)
 800ee6e:	881b      	ldrh	r3, [r3, #0]
 800ee70:	429a      	cmp	r2, r3
 800ee72:	d9ba      	bls.n	800edea <main+0x422>
 800ee74:	e000      	b.n	800ee78 <main+0x4b0>
					   if(flag_exit_loop) break;
 800ee76:	bf00      	nop

				   //--------
				 }

				 if(flag_exit_loop) break;
 800ee78:	4b21      	ldr	r3, [pc, #132]	; (800ef00 <main+0x538>)
 800ee7a:	781b      	ldrb	r3, [r3, #0]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d10e      	bne.n	800ee9e <main+0x4d6>
			   for (i = xs ; i <= xe ; i = i + sx)
 800ee80:	4b18      	ldr	r3, [pc, #96]	; (800eee4 <main+0x51c>)
 800ee82:	881a      	ldrh	r2, [r3, #0]
 800ee84:	4b21      	ldr	r3, [pc, #132]	; (800ef0c <main+0x544>)
 800ee86:	881b      	ldrh	r3, [r3, #0]
 800ee88:	4413      	add	r3, r2
 800ee8a:	b29a      	uxth	r2, r3
 800ee8c:	4b15      	ldr	r3, [pc, #84]	; (800eee4 <main+0x51c>)
 800ee8e:	801a      	strh	r2, [r3, #0]
 800ee90:	4b14      	ldr	r3, [pc, #80]	; (800eee4 <main+0x51c>)
 800ee92:	881a      	ldrh	r2, [r3, #0]
 800ee94:	4b1e      	ldr	r3, [pc, #120]	; (800ef10 <main+0x548>)
 800ee96:	881b      	ldrh	r3, [r3, #0]
 800ee98:	429a      	cmp	r2, r3
 800ee9a:	d992      	bls.n	800edc2 <main+0x3fa>
 800ee9c:	e000      	b.n	800eea0 <main+0x4d8>
				 if(flag_exit_loop) break;
 800ee9e:	bf00      	nop

				 //--------
			   }


			   if(flag_exit_loop) break;
 800eea0:	4b17      	ldr	r3, [pc, #92]	; (800ef00 <main+0x538>)
 800eea2:	781b      	ldrb	r3, [r3, #0]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d10d      	bne.n	800eec4 <main+0x4fc>
		  for(k=0 ; k <= loop ; k++ )
 800eea8:	4b0b      	ldr	r3, [pc, #44]	; (800eed8 <main+0x510>)
 800eeaa:	881b      	ldrh	r3, [r3, #0]
 800eeac:	3301      	adds	r3, #1
 800eeae:	b29a      	uxth	r2, r3
 800eeb0:	4b09      	ldr	r3, [pc, #36]	; (800eed8 <main+0x510>)
 800eeb2:	801a      	strh	r2, [r3, #0]
 800eeb4:	4b08      	ldr	r3, [pc, #32]	; (800eed8 <main+0x510>)
 800eeb6:	881a      	ldrh	r2, [r3, #0]
 800eeb8:	4b16      	ldr	r3, [pc, #88]	; (800ef14 <main+0x54c>)
 800eeba:	881b      	ldrh	r3, [r3, #0]
 800eebc:	429a      	cmp	r2, r3
 800eebe:	f67f af78 	bls.w	800edb2 <main+0x3ea>
 800eec2:	e000      	b.n	800eec6 <main+0x4fe>
			   if(flag_exit_loop) break;
 800eec4:	bf00      	nop


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_LWIP_Process();
 800eec6:	f7ff fca7 	bl	800e818 <MX_LWIP_Process>
	  LED_TOGG;
 800eeca:	e688      	b.n	800ebde <main+0x216>
 800eecc:	40b00000 	.word	0x40b00000
 800eed0:	080161b4 	.word	0x080161b4
 800eed4:	20000372 	.word	0x20000372
 800eed8:	2000036a 	.word	0x2000036a
 800eedc:	200081e8 	.word	0x200081e8
 800eee0:	20000374 	.word	0x20000374
 800eee4:	2000036c 	.word	0x2000036c
 800eee8:	20000378 	.word	0x20000378
 800eeec:	2000036e 	.word	0x2000036e
 800eef0:	2000037a 	.word	0x2000037a
 800eef4:	20000370 	.word	0x20000370
 800eef8:	20003910 	.word	0x20003910
 800eefc:	08016218 	.word	0x08016218
 800ef00:	20000373 	.word	0x20000373
 800ef04:	20000380 	.word	0x20000380
 800ef08:	2000037e 	.word	0x2000037e
 800ef0c:	2000037c 	.word	0x2000037c
 800ef10:	20000376 	.word	0x20000376
 800ef14:	20000382 	.word	0x20000382

0800ef18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b09c      	sub	sp, #112	; 0x70
 800ef1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ef1e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ef22:	2238      	movs	r2, #56	; 0x38
 800ef24:	2100      	movs	r1, #0
 800ef26:	4618      	mov	r0, r3
 800ef28:	f001 f838 	bl	800ff9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ef2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ef30:	2200      	movs	r2, #0
 800ef32:	601a      	str	r2, [r3, #0]
 800ef34:	605a      	str	r2, [r3, #4]
 800ef36:	609a      	str	r2, [r3, #8]
 800ef38:	60da      	str	r2, [r3, #12]
 800ef3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ef3c:	1d3b      	adds	r3, r7, #4
 800ef3e:	2220      	movs	r2, #32
 800ef40:	2100      	movs	r1, #0
 800ef42:	4618      	mov	r0, r3
 800ef44:	f001 f82a 	bl	800ff9c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800ef48:	2301      	movs	r3, #1
 800ef4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800ef4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ef50:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 800ef52:	2304      	movs	r3, #4
 800ef54:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800ef56:	2301      	movs	r3, #1
 800ef58:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 800ef5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ef5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ef60:	2302      	movs	r3, #2
 800ef62:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800ef64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ef68:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800ef6a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800ef6e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 800ef70:	2302      	movs	r3, #2
 800ef72:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL10;
 800ef74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ef78:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV2;
 800ef7a:	2310      	movs	r3, #16
 800ef7c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ef7e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ef82:	4618      	mov	r0, r3
 800ef84:	f7f4 fa0c 	bl	80033a0 <HAL_RCC_OscConfig>
 800ef88:	4603      	mov	r3, r0
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d001      	beq.n	800ef92 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800ef8e:	f000 fdf3 	bl	800fb78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ef92:	230f      	movs	r3, #15
 800ef94:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ef96:	2302      	movs	r3, #2
 800ef98:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800ef9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800efa2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800efa4:	2300      	movs	r3, #0
 800efa6:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800efa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800efac:	2102      	movs	r1, #2
 800efae:	4618      	mov	r0, r3
 800efb0:	f7f4 fd0c 	bl	80039cc <HAL_RCC_ClockConfig>
 800efb4:	4603      	mov	r3, r0
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d001      	beq.n	800efbe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800efba:	f000 fddd 	bl	800fb78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800efbe:	2302      	movs	r3, #2
 800efc0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800efc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800efc6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800efc8:	1d3b      	adds	r3, r7, #4
 800efca:	4618      	mov	r0, r3
 800efcc:	f7f4 ff42 	bl	8003e54 <HAL_RCCEx_PeriphCLKConfig>
 800efd0:	4603      	mov	r3, r0
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d001      	beq.n	800efda <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800efd6:	f000 fdcf 	bl	800fb78 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800efda:	f7f4 fde1 	bl	8003ba0 <HAL_RCC_EnableCSS>
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800efde:	4b03      	ldr	r3, [pc, #12]	; (800efec <SystemClock_Config+0xd4>)
 800efe0:	2201      	movs	r2, #1
 800efe2:	601a      	str	r2, [r3, #0]
}
 800efe4:	bf00      	nop
 800efe6:	3770      	adds	r7, #112	; 0x70
 800efe8:	46bd      	mov	sp, r7
 800efea:	bd80      	pop	{r7, pc}
 800efec:	42420070 	.word	0x42420070

0800eff0 <server_recv>:
  * @param  p	the packet buffer
  * @param  err	the error value linked with the received data
  * @retval error value
  */
err_t server_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800eff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eff2:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 800eff6:	af06      	add	r7, sp, #24
 800eff8:	f107 040c 	add.w	r4, r7, #12
 800effc:	6020      	str	r0, [r4, #0]
 800effe:	f107 0008 	add.w	r0, r7, #8
 800f002:	6001      	str	r1, [r0, #0]
 800f004:	1d39      	adds	r1, r7, #4
 800f006:	600a      	str	r2, [r1, #0]
 800f008:	461a      	mov	r2, r3
 800f00a:	1cfb      	adds	r3, r7, #3
 800f00c:	701a      	strb	r2, [r3, #0]


  char *c;
  int i;
	char data_read[200]={0,0,0,0};
 800f00e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f012:	22c8      	movs	r2, #200	; 0xc8
 800f014:	2100      	movs	r1, #0
 800f016:	4618      	mov	r0, r3
 800f018:	f000 ffc0 	bl	800ff9c <memset>
	char data_send[200]={0,0,0,0};
 800f01c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800f020:	4618      	mov	r0, r3
 800f022:	23c8      	movs	r3, #200	; 0xc8
 800f024:	461a      	mov	r2, r3
 800f026:	2100      	movs	r1, #0
 800f028:	f000 ffb8 	bl	800ff9c <memset>


/* We perform here any necessary processing on the pbuf */
if (p != NULL)
 800f02c:	1d3b      	adds	r3, r7, #4
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	2b00      	cmp	r3, #0
 800f032:	f000 848c 	beq.w	800f94e <server_recv+0x95e>
{
	/* We call this function to tell the LwIp that we have processed the data */
	/* This lets the stack advertise a larger window, so more data can be received*/
	tcp_recved(pcb, p->tot_len);
 800f036:	1d3b      	adds	r3, r7, #4
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	891b      	ldrh	r3, [r3, #8]
 800f03c:	461a      	mov	r2, r3
 800f03e:	f107 0308 	add.w	r3, r7, #8
 800f042:	4611      	mov	r1, r2
 800f044:	6818      	ldr	r0, [r3, #0]
 800f046:	f7f7 fb13 	bl	8006670 <tcp_recved>

	c = p->payload;
 800f04a:	1d3b      	adds	r3, r7, #4
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	685b      	ldr	r3, [r3, #4]
 800f050:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

	for( i = 0 ; i < p->len ; i++)
 800f054:	2300      	movs	r3, #0
 800f056:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800f05a:	e011      	b.n	800f080 <server_recv+0x90>
    {
	  data_read[i] = c[i];
 800f05c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800f060:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800f064:	4413      	add	r3, r2
 800f066:	7819      	ldrb	r1, [r3, #0]
 800f068:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800f06c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800f070:	4413      	add	r3, r2
 800f072:	460a      	mov	r2, r1
 800f074:	701a      	strb	r2, [r3, #0]
	for( i = 0 ; i < p->len ; i++)
 800f076:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800f07a:	3301      	adds	r3, #1
 800f07c:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800f080:	1d3b      	adds	r3, r7, #4
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	895b      	ldrh	r3, [r3, #10]
 800f086:	461a      	mov	r2, r3
 800f088:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800f08c:	4293      	cmp	r3, r2
 800f08e:	dbe5      	blt.n	800f05c <server_recv+0x6c>
	}

	 tcp_write(pcb , data_read , p->len , 1);
 800f090:	1d3b      	adds	r3, r7, #4
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	895b      	ldrh	r3, [r3, #10]
 800f096:	461a      	mov	r2, r3
 800f098:	f507 719c 	add.w	r1, r7, #312	; 0x138
 800f09c:	f107 0008 	add.w	r0, r7, #8
 800f0a0:	2301      	movs	r3, #1
 800f0a2:	6800      	ldr	r0, [r0, #0]
 800f0a4:	f7fa fea6 	bl	8009df4 <tcp_write>
	 pbuf_free(p);
 800f0a8:	1d3b      	adds	r3, r7, #4
 800f0aa:	6818      	ldr	r0, [r3, #0]
 800f0ac:	f7f6 fc4c 	bl	8005948 <pbuf_free>

//	p->payload=0;
//	p->tot_len=0;

//HAL_Delay(100);
if(data_read[0] == 0x7E)
 800f0b0:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 800f0b4:	2b7e      	cmp	r3, #126	; 0x7e
 800f0b6:	f040 83ce 	bne.w	800f856 <server_recv+0x866>
{

	        printf("get command,len data=%d\n",p->len);
 800f0ba:	1d3b      	adds	r3, r7, #4
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	895b      	ldrh	r3, [r3, #10]
 800f0c0:	4619      	mov	r1, r3
 800f0c2:	48be      	ldr	r0, [pc, #760]	; (800f3bc <server_recv+0x3cc>)
 800f0c4:	f001 fda2 	bl	8010c0c <iprintf>

			if(data_read[1] == 0xBC)  //READ COMMAND
 800f0c8:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 800f0cc:	2bbc      	cmp	r3, #188	; 0xbc
 800f0ce:	f040 8094 	bne.w	800f1fa <server_recv+0x20a>
			{
				  k=0 ; i=0 ; j=0 ; j1=0;
 800f0d2:	4bbb      	ldr	r3, [pc, #748]	; (800f3c0 <server_recv+0x3d0>)
 800f0d4:	2200      	movs	r2, #0
 800f0d6:	801a      	strh	r2, [r3, #0]
 800f0d8:	2300      	movs	r3, #0
 800f0da:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800f0de:	4bb9      	ldr	r3, [pc, #740]	; (800f3c4 <server_recv+0x3d4>)
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	801a      	strh	r2, [r3, #0]
 800f0e4:	4bb8      	ldr	r3, [pc, #736]	; (800f3c8 <server_recv+0x3d8>)
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	801a      	strh	r2, [r3, #0]



				  xs =  (data_read[2]<<8 ) | data_read[3] ;
 800f0ea:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 800f0ee:	021b      	lsls	r3, r3, #8
 800f0f0:	b21a      	sxth	r2, r3
 800f0f2:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 800f0f6:	b21b      	sxth	r3, r3
 800f0f8:	4313      	orrs	r3, r2
 800f0fa:	b21b      	sxth	r3, r3
 800f0fc:	b29a      	uxth	r2, r3
 800f0fe:	4bb3      	ldr	r3, [pc, #716]	; (800f3cc <server_recv+0x3dc>)
 800f100:	801a      	strh	r2, [r3, #0]
				  xe =  (data_read[4]<<8 ) | data_read[5] ;
 800f102:	f897 313c 	ldrb.w	r3, [r7, #316]	; 0x13c
 800f106:	021b      	lsls	r3, r3, #8
 800f108:	b21a      	sxth	r2, r3
 800f10a:	f897 313d 	ldrb.w	r3, [r7, #317]	; 0x13d
 800f10e:	b21b      	sxth	r3, r3
 800f110:	4313      	orrs	r3, r2
 800f112:	b21b      	sxth	r3, r3
 800f114:	b29a      	uxth	r2, r3
 800f116:	4bae      	ldr	r3, [pc, #696]	; (800f3d0 <server_recv+0x3e0>)
 800f118:	801a      	strh	r2, [r3, #0]

				  ys =  (data_read[6]<<8 ) | data_read[7] ;
 800f11a:	f897 313e 	ldrb.w	r3, [r7, #318]	; 0x13e
 800f11e:	021b      	lsls	r3, r3, #8
 800f120:	b21a      	sxth	r2, r3
 800f122:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800f126:	b21b      	sxth	r3, r3
 800f128:	4313      	orrs	r3, r2
 800f12a:	b21b      	sxth	r3, r3
 800f12c:	b29a      	uxth	r2, r3
 800f12e:	4ba9      	ldr	r3, [pc, #676]	; (800f3d4 <server_recv+0x3e4>)
 800f130:	801a      	strh	r2, [r3, #0]
				  ye =  (data_read[8]<<8 ) | data_read[9] ;
 800f132:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 800f136:	021b      	lsls	r3, r3, #8
 800f138:	b21a      	sxth	r2, r3
 800f13a:	f897 3141 	ldrb.w	r3, [r7, #321]	; 0x141
 800f13e:	b21b      	sxth	r3, r3
 800f140:	4313      	orrs	r3, r2
 800f142:	b21b      	sxth	r3, r3
 800f144:	b29a      	uxth	r2, r3
 800f146:	4ba4      	ldr	r3, [pc, #656]	; (800f3d8 <server_recv+0x3e8>)
 800f148:	801a      	strh	r2, [r3, #0]

				  sx =  (data_read[6]<<8 ) | data_read[7] ;
 800f14a:	f897 313e 	ldrb.w	r3, [r7, #318]	; 0x13e
 800f14e:	021b      	lsls	r3, r3, #8
 800f150:	b21a      	sxth	r2, r3
 800f152:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800f156:	b21b      	sxth	r3, r3
 800f158:	4313      	orrs	r3, r2
 800f15a:	b21b      	sxth	r3, r3
 800f15c:	b29a      	uxth	r2, r3
 800f15e:	4b9f      	ldr	r3, [pc, #636]	; (800f3dc <server_recv+0x3ec>)
 800f160:	801a      	strh	r2, [r3, #0]
				  sy =  (data_read[8]<<8 ) | data_read[9] ;
 800f162:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 800f166:	021b      	lsls	r3, r3, #8
 800f168:	b21a      	sxth	r2, r3
 800f16a:	f897 3141 	ldrb.w	r3, [r7, #321]	; 0x141
 800f16e:	b21b      	sxth	r3, r3
 800f170:	4313      	orrs	r3, r2
 800f172:	b21b      	sxth	r3, r3
 800f174:	b29a      	uxth	r2, r3
 800f176:	4b9a      	ldr	r3, [pc, #616]	; (800f3e0 <server_recv+0x3f0>)
 800f178:	801a      	strh	r2, [r3, #0]

				  dly  = (data_read[10]<<8 ) | data_read[11] ;
 800f17a:	f897 3142 	ldrb.w	r3, [r7, #322]	; 0x142
 800f17e:	021b      	lsls	r3, r3, #8
 800f180:	b21a      	sxth	r2, r3
 800f182:	f897 3143 	ldrb.w	r3, [r7, #323]	; 0x143
 800f186:	b21b      	sxth	r3, r3
 800f188:	4313      	orrs	r3, r2
 800f18a:	b21b      	sxth	r3, r3
 800f18c:	b29a      	uxth	r2, r3
 800f18e:	4b95      	ldr	r3, [pc, #596]	; (800f3e4 <server_recv+0x3f4>)
 800f190:	801a      	strh	r2, [r3, #0]

				  loop = (data_read[12]<<8 ) | data_read[13] ;
 800f192:	f897 3144 	ldrb.w	r3, [r7, #324]	; 0x144
 800f196:	021b      	lsls	r3, r3, #8
 800f198:	b21a      	sxth	r2, r3
 800f19a:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800f19e:	b21b      	sxth	r3, r3
 800f1a0:	4313      	orrs	r3, r2
 800f1a2:	b21b      	sxth	r3, r3
 800f1a4:	b29a      	uxth	r2, r3
 800f1a6:	4b90      	ldr	r3, [pc, #576]	; (800f3e8 <server_recv+0x3f8>)
 800f1a8:	801a      	strh	r2, [r3, #0]

			    printf("\nxs=%d,xe=%d,ys=%d,ye=%d,sx=%d,sy=%d,delay=%d,loop=%d\n",xs,xe,ys,ye,sx,sy,dly,loop);
 800f1aa:	4b88      	ldr	r3, [pc, #544]	; (800f3cc <server_recv+0x3dc>)
 800f1ac:	881b      	ldrh	r3, [r3, #0]
 800f1ae:	461d      	mov	r5, r3
 800f1b0:	4b87      	ldr	r3, [pc, #540]	; (800f3d0 <server_recv+0x3e0>)
 800f1b2:	881b      	ldrh	r3, [r3, #0]
 800f1b4:	461e      	mov	r6, r3
 800f1b6:	4b87      	ldr	r3, [pc, #540]	; (800f3d4 <server_recv+0x3e4>)
 800f1b8:	881b      	ldrh	r3, [r3, #0]
 800f1ba:	469c      	mov	ip, r3
 800f1bc:	4b86      	ldr	r3, [pc, #536]	; (800f3d8 <server_recv+0x3e8>)
 800f1be:	881b      	ldrh	r3, [r3, #0]
 800f1c0:	461a      	mov	r2, r3
 800f1c2:	4b86      	ldr	r3, [pc, #536]	; (800f3dc <server_recv+0x3ec>)
 800f1c4:	881b      	ldrh	r3, [r3, #0]
 800f1c6:	4619      	mov	r1, r3
 800f1c8:	4b85      	ldr	r3, [pc, #532]	; (800f3e0 <server_recv+0x3f0>)
 800f1ca:	881b      	ldrh	r3, [r3, #0]
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	4b85      	ldr	r3, [pc, #532]	; (800f3e4 <server_recv+0x3f4>)
 800f1d0:	881b      	ldrh	r3, [r3, #0]
 800f1d2:	461c      	mov	r4, r3
 800f1d4:	4b84      	ldr	r3, [pc, #528]	; (800f3e8 <server_recv+0x3f8>)
 800f1d6:	881b      	ldrh	r3, [r3, #0]
 800f1d8:	9304      	str	r3, [sp, #16]
 800f1da:	9403      	str	r4, [sp, #12]
 800f1dc:	9002      	str	r0, [sp, #8]
 800f1de:	9101      	str	r1, [sp, #4]
 800f1e0:	9200      	str	r2, [sp, #0]
 800f1e2:	4663      	mov	r3, ip
 800f1e4:	4632      	mov	r2, r6
 800f1e6:	4629      	mov	r1, r5
 800f1e8:	4880      	ldr	r0, [pc, #512]	; (800f3ec <server_recv+0x3fc>)
 800f1ea:	f001 fd0f 	bl	8010c0c <iprintf>
			    flag_exit_loop=false;
 800f1ee:	4b80      	ldr	r3, [pc, #512]	; (800f3f0 <server_recv+0x400>)
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	701a      	strb	r2, [r3, #0]

			    flag_run_loop=true;
 800f1f4:	4b7f      	ldr	r3, [pc, #508]	; (800f3f4 <server_recv+0x404>)
 800f1f6:	2201      	movs	r2, #1
 800f1f8:	701a      	strb	r2, [r3, #0]


			}
			if(data_read[1] == 0xBB)  //stop loop COMMAND
 800f1fa:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 800f1fe:	2bbb      	cmp	r3, #187	; 0xbb
 800f200:	d102      	bne.n	800f208 <server_recv+0x218>
			{
				flag_exit_loop=true;
 800f202:	4b7b      	ldr	r3, [pc, #492]	; (800f3f0 <server_recv+0x400>)
 800f204:	2201      	movs	r2, #1
 800f206:	701a      	strb	r2, [r3, #0]

			}
			if(data_read[1] == 0xBD)  //RUN loop COMMAND
 800f208:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 800f20c:	2bbd      	cmp	r3, #189	; 0xbd
 800f20e:	d105      	bne.n	800f21c <server_recv+0x22c>
			{
				flag_run_loop=true;
 800f210:	4b78      	ldr	r3, [pc, #480]	; (800f3f4 <server_recv+0x404>)
 800f212:	2201      	movs	r2, #1
 800f214:	701a      	strb	r2, [r3, #0]
				flag_exit_loop=false;
 800f216:	4b76      	ldr	r3, [pc, #472]	; (800f3f0 <server_recv+0x400>)
 800f218:	2200      	movs	r2, #0
 800f21a:	701a      	strb	r2, [r3, #0]
			}

			if(data_read[1] == 0x0D)//READ COMMAND
 800f21c:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 800f220:	2b0d      	cmp	r3, #13
 800f222:	f040 81bb 	bne.w	800f59c <server_recv+0x5ac>
			{

					if(data_read[2] == 0x1D)	//READ PDU X+ VAL  mv
 800f226:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 800f22a:	2b1d      	cmp	r3, #29
 800f22c:	d13f      	bne.n	800f2ae <server_recv+0x2be>
					{
						uint16_t val = get_adc_raw(READ_ADC_CH_HV_PDUCL_PX) ;
 800f22e:	2001      	movs	r0, #1
 800f230:	f7ff fb10 	bl	800e854 <get_adc_raw>
 800f234:	4603      	mov	r3, r0
 800f236:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
						uint8_t res[7] = "___";
 800f23a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f23e:	4a6e      	ldr	r2, [pc, #440]	; (800f3f8 <server_recv+0x408>)
 800f240:	601a      	str	r2, [r3, #0]
 800f242:	3304      	adds	r3, #4
 800f244:	2100      	movs	r1, #0
 800f246:	460a      	mov	r2, r1
 800f248:	801a      	strh	r2, [r3, #0]
 800f24a:	460a      	mov	r2, r1
 800f24c:	709a      	strb	r2, [r3, #2]
						res[0] = 0x7E;
 800f24e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f252:	227e      	movs	r2, #126	; 0x7e
 800f254:	701a      	strb	r2, [r3, #0]
						res[1] = 0X0D;
 800f256:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f25a:	220d      	movs	r2, #13
 800f25c:	705a      	strb	r2, [r3, #1]
						res[2] = 0X1D;
 800f25e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f262:	221d      	movs	r2, #29
 800f264:	709a      	strb	r2, [r3, #2]
						res[3] = Hi_byte(val);
 800f266:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 800f26a:	4618      	mov	r0, r3
 800f26c:	f000 fc58 	bl	800fb20 <Hi_byte>
 800f270:	4603      	mov	r3, r0
 800f272:	461a      	mov	r2, r3
 800f274:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f278:	70da      	strb	r2, [r3, #3]
						res[4] = Lo_byte(val);
 800f27a:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 800f27e:	4618      	mov	r0, r3
 800f280:	f000 fc64 	bl	800fb4c <Lo_byte>
 800f284:	4603      	mov	r3, r0
 800f286:	461a      	mov	r2, r3
 800f288:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f28c:	711a      	strb	r2, [r3, #4]
						tcp_write(pcb , res , 5 , 1);
 800f28e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800f292:	f107 0008 	add.w	r0, r7, #8
 800f296:	2301      	movs	r3, #1
 800f298:	2205      	movs	r2, #5
 800f29a:	6800      	ldr	r0, [r0, #0]
 800f29c:	f7fa fdaa 	bl	8009df4 <tcp_write>
						printf("READ PDUCL->x+ =%d\n" , val);
 800f2a0:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 800f2a4:	4619      	mov	r1, r3
 800f2a6:	4855      	ldr	r0, [pc, #340]	; (800f3fc <server_recv+0x40c>)
 800f2a8:	f001 fcb0 	bl	8010c0c <iprintf>
 800f2ac:	e042      	b.n	800f334 <server_recv+0x344>

					}
					else if(data_read[2] == 0x2D)	//READ PDU Y+ VAL mv
 800f2ae:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 800f2b2:	2b2d      	cmp	r3, #45	; 0x2d
 800f2b4:	d13e      	bne.n	800f334 <server_recv+0x344>
					{
						uint16_t val = get_adc_raw(READ_ADC_CH_HV_PDUCL_PY);
 800f2b6:	2002      	movs	r0, #2
 800f2b8:	f7ff facc 	bl	800e854 <get_adc_raw>
 800f2bc:	4603      	mov	r3, r0
 800f2be:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
						uint8_t res[7] = "___";
 800f2c2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f2c6:	4a4c      	ldr	r2, [pc, #304]	; (800f3f8 <server_recv+0x408>)
 800f2c8:	601a      	str	r2, [r3, #0]
 800f2ca:	3304      	adds	r3, #4
 800f2cc:	2100      	movs	r1, #0
 800f2ce:	460a      	mov	r2, r1
 800f2d0:	801a      	strh	r2, [r3, #0]
 800f2d2:	460a      	mov	r2, r1
 800f2d4:	709a      	strb	r2, [r3, #2]
						res[0] = 0x7E;
 800f2d6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f2da:	227e      	movs	r2, #126	; 0x7e
 800f2dc:	701a      	strb	r2, [r3, #0]
						res[1] = 0X0D;
 800f2de:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f2e2:	220d      	movs	r2, #13
 800f2e4:	705a      	strb	r2, [r3, #1]
						res[2] = 0X2D;
 800f2e6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f2ea:	222d      	movs	r2, #45	; 0x2d
 800f2ec:	709a      	strb	r2, [r3, #2]
						res[3] = Hi_byte(val);
 800f2ee:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	f000 fc14 	bl	800fb20 <Hi_byte>
 800f2f8:	4603      	mov	r3, r0
 800f2fa:	461a      	mov	r2, r3
 800f2fc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f300:	70da      	strb	r2, [r3, #3]
						res[4] = Lo_byte(val);
 800f302:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 800f306:	4618      	mov	r0, r3
 800f308:	f000 fc20 	bl	800fb4c <Lo_byte>
 800f30c:	4603      	mov	r3, r0
 800f30e:	461a      	mov	r2, r3
 800f310:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f314:	711a      	strb	r2, [r3, #4]
						tcp_write(pcb , res , 5 , 1);
 800f316:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800f31a:	f107 0008 	add.w	r0, r7, #8
 800f31e:	2301      	movs	r3, #1
 800f320:	2205      	movs	r2, #5
 800f322:	6800      	ldr	r0, [r0, #0]
 800f324:	f7fa fd66 	bl	8009df4 <tcp_write>
						printf("READ PDUCL->y+ =%d\n",val);
 800f328:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 800f32c:	4619      	mov	r1, r3
 800f32e:	4834      	ldr	r0, [pc, #208]	; (800f400 <server_recv+0x410>)
 800f330:	f001 fc6c 	bl	8010c0c <iprintf>
					}
					if(data_read[2] == 0x3D)	//READ PDU X- VAL  mv
 800f334:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 800f338:	2b3d      	cmp	r3, #61	; 0x3d
 800f33a:	d165      	bne.n	800f408 <server_recv+0x418>
					{
						uint16_t val = get_adc_raw(READ_ADC_CH_HV_PDU_MX);
 800f33c:	2003      	movs	r0, #3
 800f33e:	f7ff fa89 	bl	800e854 <get_adc_raw>
 800f342:	4603      	mov	r3, r0
 800f344:	f8a7 3208 	strh.w	r3, [r7, #520]	; 0x208
						uint8_t res[7] = "___";
 800f348:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f34c:	4a2a      	ldr	r2, [pc, #168]	; (800f3f8 <server_recv+0x408>)
 800f34e:	601a      	str	r2, [r3, #0]
 800f350:	3304      	adds	r3, #4
 800f352:	2100      	movs	r1, #0
 800f354:	460a      	mov	r2, r1
 800f356:	801a      	strh	r2, [r3, #0]
 800f358:	460a      	mov	r2, r1
 800f35a:	709a      	strb	r2, [r3, #2]
						res[0] = 0x7E;
 800f35c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f360:	227e      	movs	r2, #126	; 0x7e
 800f362:	701a      	strb	r2, [r3, #0]
						res[1] = 0X0D;
 800f364:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f368:	220d      	movs	r2, #13
 800f36a:	705a      	strb	r2, [r3, #1]
						res[2] = 0X3D;
 800f36c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f370:	223d      	movs	r2, #61	; 0x3d
 800f372:	709a      	strb	r2, [r3, #2]
						res[3] = Hi_byte(val);
 800f374:	f8b7 3208 	ldrh.w	r3, [r7, #520]	; 0x208
 800f378:	4618      	mov	r0, r3
 800f37a:	f000 fbd1 	bl	800fb20 <Hi_byte>
 800f37e:	4603      	mov	r3, r0
 800f380:	461a      	mov	r2, r3
 800f382:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f386:	70da      	strb	r2, [r3, #3]
						res[4] = Lo_byte(val);
 800f388:	f8b7 3208 	ldrh.w	r3, [r7, #520]	; 0x208
 800f38c:	4618      	mov	r0, r3
 800f38e:	f000 fbdd 	bl	800fb4c <Lo_byte>
 800f392:	4603      	mov	r3, r0
 800f394:	461a      	mov	r2, r3
 800f396:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f39a:	711a      	strb	r2, [r3, #4]
						tcp_write(pcb , res , 5 , 1);
 800f39c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800f3a0:	f107 0008 	add.w	r0, r7, #8
 800f3a4:	2301      	movs	r3, #1
 800f3a6:	2205      	movs	r2, #5
 800f3a8:	6800      	ldr	r0, [r0, #0]
 800f3aa:	f7fa fd23 	bl	8009df4 <tcp_write>
						printf("READ PDU->x- =%d\n",val);
 800f3ae:	f8b7 3208 	ldrh.w	r3, [r7, #520]	; 0x208
 800f3b2:	4619      	mov	r1, r3
 800f3b4:	4813      	ldr	r0, [pc, #76]	; (800f404 <server_recv+0x414>)
 800f3b6:	f001 fc29 	bl	8010c0c <iprintf>
 800f3ba:	e068      	b.n	800f48e <server_recv+0x49e>
 800f3bc:	0801622c 	.word	0x0801622c
 800f3c0:	2000036a 	.word	0x2000036a
 800f3c4:	2000036e 	.word	0x2000036e
 800f3c8:	20000370 	.word	0x20000370
 800f3cc:	20000374 	.word	0x20000374
 800f3d0:	20000376 	.word	0x20000376
 800f3d4:	20000378 	.word	0x20000378
 800f3d8:	2000037a 	.word	0x2000037a
 800f3dc:	2000037c 	.word	0x2000037c
 800f3e0:	2000037e 	.word	0x2000037e
 800f3e4:	20000380 	.word	0x20000380
 800f3e8:	20000382 	.word	0x20000382
 800f3ec:	08016248 	.word	0x08016248
 800f3f0:	20000373 	.word	0x20000373
 800f3f4:	20000372 	.word	0x20000372
 800f3f8:	005f5f5f 	.word	0x005f5f5f
 800f3fc:	08016280 	.word	0x08016280
 800f400:	08016294 	.word	0x08016294
 800f404:	080162a8 	.word	0x080162a8

					}
					else if(data_read[2] == 0x4D)	//READ PDU Y- VAL mv
 800f408:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 800f40c:	2b4d      	cmp	r3, #77	; 0x4d
 800f40e:	d13e      	bne.n	800f48e <server_recv+0x49e>
					{
						uint16_t val = get_adc_raw(READ_ADC_CH_HV_PDU_MY);
 800f410:	2004      	movs	r0, #4
 800f412:	f7ff fa1f 	bl	800e854 <get_adc_raw>
 800f416:	4603      	mov	r3, r0
 800f418:	f8a7 320a 	strh.w	r3, [r7, #522]	; 0x20a
						uint8_t res[7] = "___";
 800f41c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f420:	4ad7      	ldr	r2, [pc, #860]	; (800f780 <server_recv+0x790>)
 800f422:	601a      	str	r2, [r3, #0]
 800f424:	3304      	adds	r3, #4
 800f426:	2100      	movs	r1, #0
 800f428:	460a      	mov	r2, r1
 800f42a:	801a      	strh	r2, [r3, #0]
 800f42c:	460a      	mov	r2, r1
 800f42e:	709a      	strb	r2, [r3, #2]
						res[0] = 0x7E;
 800f430:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f434:	227e      	movs	r2, #126	; 0x7e
 800f436:	701a      	strb	r2, [r3, #0]
						res[1] = 0X0D;
 800f438:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f43c:	220d      	movs	r2, #13
 800f43e:	705a      	strb	r2, [r3, #1]
						res[2] = 0X4D;
 800f440:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f444:	224d      	movs	r2, #77	; 0x4d
 800f446:	709a      	strb	r2, [r3, #2]
						res[3] = Hi_byte(val);
 800f448:	f8b7 320a 	ldrh.w	r3, [r7, #522]	; 0x20a
 800f44c:	4618      	mov	r0, r3
 800f44e:	f000 fb67 	bl	800fb20 <Hi_byte>
 800f452:	4603      	mov	r3, r0
 800f454:	461a      	mov	r2, r3
 800f456:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f45a:	70da      	strb	r2, [r3, #3]
						res[4] = Lo_byte(val);
 800f45c:	f8b7 320a 	ldrh.w	r3, [r7, #522]	; 0x20a
 800f460:	4618      	mov	r0, r3
 800f462:	f000 fb73 	bl	800fb4c <Lo_byte>
 800f466:	4603      	mov	r3, r0
 800f468:	461a      	mov	r2, r3
 800f46a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f46e:	711a      	strb	r2, [r3, #4]
						tcp_write(pcb , res , 5 , 1);
 800f470:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800f474:	f107 0008 	add.w	r0, r7, #8
 800f478:	2301      	movs	r3, #1
 800f47a:	2205      	movs	r2, #5
 800f47c:	6800      	ldr	r0, [r0, #0]
 800f47e:	f7fa fcb9 	bl	8009df4 <tcp_write>
						printf("READ PDU->y- =%d\n",val);
 800f482:	f8b7 320a 	ldrh.w	r3, [r7, #522]	; 0x20a
 800f486:	4619      	mov	r1, r3
 800f488:	48be      	ldr	r0, [pc, #760]	; (800f784 <server_recv+0x794>)
 800f48a:	f001 fbbf 	bl	8010c0c <iprintf>
					}

					if(data_read[2] == 0x5D)	//READ PDU X- VAL  mv
 800f48e:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 800f492:	2b5d      	cmp	r3, #93	; 0x5d
 800f494:	d13f      	bne.n	800f516 <server_recv+0x526>
					{
						uint16_t val = get_adc_raw(READ_ADC_SENS1);
 800f496:	2005      	movs	r0, #5
 800f498:	f7ff f9dc 	bl	800e854 <get_adc_raw>
 800f49c:	4603      	mov	r3, r0
 800f49e:	f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204
						uint8_t res[7] = "___";
 800f4a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f4a6:	4ab6      	ldr	r2, [pc, #728]	; (800f780 <server_recv+0x790>)
 800f4a8:	601a      	str	r2, [r3, #0]
 800f4aa:	3304      	adds	r3, #4
 800f4ac:	2100      	movs	r1, #0
 800f4ae:	460a      	mov	r2, r1
 800f4b0:	801a      	strh	r2, [r3, #0]
 800f4b2:	460a      	mov	r2, r1
 800f4b4:	709a      	strb	r2, [r3, #2]
						res[0] = 0x7E;
 800f4b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f4ba:	227e      	movs	r2, #126	; 0x7e
 800f4bc:	701a      	strb	r2, [r3, #0]
						res[1] = 0X0D;
 800f4be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f4c2:	220d      	movs	r2, #13
 800f4c4:	705a      	strb	r2, [r3, #1]
						res[2] = 0X3D;
 800f4c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f4ca:	223d      	movs	r2, #61	; 0x3d
 800f4cc:	709a      	strb	r2, [r3, #2]
						res[3] = Hi_byte(val);
 800f4ce:	f8b7 3204 	ldrh.w	r3, [r7, #516]	; 0x204
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	f000 fb24 	bl	800fb20 <Hi_byte>
 800f4d8:	4603      	mov	r3, r0
 800f4da:	461a      	mov	r2, r3
 800f4dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f4e0:	70da      	strb	r2, [r3, #3]
						res[4] = Lo_byte(val);
 800f4e2:	f8b7 3204 	ldrh.w	r3, [r7, #516]	; 0x204
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f000 fb30 	bl	800fb4c <Lo_byte>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	461a      	mov	r2, r3
 800f4f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f4f4:	711a      	strb	r2, [r3, #4]
						tcp_write(pcb , res , 5 , 1);
 800f4f6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800f4fa:	f107 0008 	add.w	r0, r7, #8
 800f4fe:	2301      	movs	r3, #1
 800f500:	2205      	movs	r2, #5
 800f502:	6800      	ldr	r0, [r0, #0]
 800f504:	f7fa fc76 	bl	8009df4 <tcp_write>
						printf("READ_ADC_SENS CL1->x- =%d\n",val);
 800f508:	f8b7 3204 	ldrh.w	r3, [r7, #516]	; 0x204
 800f50c:	4619      	mov	r1, r3
 800f50e:	489e      	ldr	r0, [pc, #632]	; (800f788 <server_recv+0x798>)
 800f510:	f001 fb7c 	bl	8010c0c <iprintf>
 800f514:	e042      	b.n	800f59c <server_recv+0x5ac>

					}
					else if(data_read[2] == 0x6D)	//READ PDU Y- VAL mv
 800f516:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 800f51a:	2b6d      	cmp	r3, #109	; 0x6d
 800f51c:	d13e      	bne.n	800f59c <server_recv+0x5ac>
					{
						uint16_t val = get_adc_raw(READ_ADC_SENS2);
 800f51e:	2006      	movs	r0, #6
 800f520:	f7ff f998 	bl	800e854 <get_adc_raw>
 800f524:	4603      	mov	r3, r0
 800f526:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
						uint8_t res[7] = "___";
 800f52a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f52e:	4a94      	ldr	r2, [pc, #592]	; (800f780 <server_recv+0x790>)
 800f530:	601a      	str	r2, [r3, #0]
 800f532:	3304      	adds	r3, #4
 800f534:	2100      	movs	r1, #0
 800f536:	460a      	mov	r2, r1
 800f538:	801a      	strh	r2, [r3, #0]
 800f53a:	460a      	mov	r2, r1
 800f53c:	709a      	strb	r2, [r3, #2]
						res[0] = 0x7E;
 800f53e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f542:	227e      	movs	r2, #126	; 0x7e
 800f544:	701a      	strb	r2, [r3, #0]
						res[1] = 0X0D;
 800f546:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f54a:	220d      	movs	r2, #13
 800f54c:	705a      	strb	r2, [r3, #1]
						res[2] = 0X4D;
 800f54e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f552:	224d      	movs	r2, #77	; 0x4d
 800f554:	709a      	strb	r2, [r3, #2]
						res[3] = Hi_byte(val);
 800f556:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 800f55a:	4618      	mov	r0, r3
 800f55c:	f000 fae0 	bl	800fb20 <Hi_byte>
 800f560:	4603      	mov	r3, r0
 800f562:	461a      	mov	r2, r3
 800f564:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f568:	70da      	strb	r2, [r3, #3]
						res[4] = Lo_byte(val);
 800f56a:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 800f56e:	4618      	mov	r0, r3
 800f570:	f000 faec 	bl	800fb4c <Lo_byte>
 800f574:	4603      	mov	r3, r0
 800f576:	461a      	mov	r2, r3
 800f578:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f57c:	711a      	strb	r2, [r3, #4]
						tcp_write(pcb , res , 5 , 1);
 800f57e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800f582:	f107 0008 	add.w	r0, r7, #8
 800f586:	2301      	movs	r3, #1
 800f588:	2205      	movs	r2, #5
 800f58a:	6800      	ldr	r0, [r0, #0]
 800f58c:	f7fa fc32 	bl	8009df4 <tcp_write>
						printf("READ_ADC_SENS CL2->y- =%d\n",val);
 800f590:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 800f594:	4619      	mov	r1, r3
 800f596:	487d      	ldr	r0, [pc, #500]	; (800f78c <server_recv+0x79c>)
 800f598:	f001 fb38 	bl	8010c0c <iprintf>
					}

			}
			if(data_read[1]==0x0F)//SET x y value COMMAND
 800f59c:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 800f5a0:	2b0f      	cmp	r3, #15
 800f5a2:	f040 8095 	bne.w	800f6d0 <server_recv+0x6e0>
			{

					if(data_read[2]==0x1F)	//SET PDU X+ VAL  mv
 800f5a6:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 800f5aa:	2b1f      	cmp	r3, #31
 800f5ac:	d145      	bne.n	800f63a <server_recv+0x64a>
					{
						uint16_t val =  (data_read[3]<<8 ) | data_read[4] ;
 800f5ae:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 800f5b2:	021b      	lsls	r3, r3, #8
 800f5b4:	b21a      	sxth	r2, r3
 800f5b6:	f897 313c 	ldrb.w	r3, [r7, #316]	; 0x13c
 800f5ba:	b21b      	sxth	r3, r3
 800f5bc:	4313      	orrs	r3, r2
 800f5be:	b21b      	sxth	r3, r3
 800f5c0:	f8a7 3200 	strh.w	r3, [r7, #512]	; 0x200
						HAL_DAC_SetValue(&hdac, DAC_CH_X , DAC_ALIGN_12B_R ,  val);
 800f5c4:	f8b7 3200 	ldrh.w	r3, [r7, #512]	; 0x200
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	2100      	movs	r1, #0
 800f5cc:	4870      	ldr	r0, [pc, #448]	; (800f790 <server_recv+0x7a0>)
 800f5ce:	f7f2 fbdd 	bl	8001d8c <HAL_DAC_SetValue>
						uint8_t res[7] = "___";
 800f5d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f5d6:	4a6a      	ldr	r2, [pc, #424]	; (800f780 <server_recv+0x790>)
 800f5d8:	601a      	str	r2, [r3, #0]
 800f5da:	3304      	adds	r3, #4
 800f5dc:	2100      	movs	r1, #0
 800f5de:	460a      	mov	r2, r1
 800f5e0:	801a      	strh	r2, [r3, #0]
 800f5e2:	460a      	mov	r2, r1
 800f5e4:	709a      	strb	r2, [r3, #2]
						res[0] = 0x7E;
 800f5e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f5ea:	227e      	movs	r2, #126	; 0x7e
 800f5ec:	701a      	strb	r2, [r3, #0]
						res[1] = 0x0F;
 800f5ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f5f2:	220f      	movs	r2, #15
 800f5f4:	705a      	strb	r2, [r3, #1]
						res[2] = 0x1F;
 800f5f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f5fa:	221f      	movs	r2, #31
 800f5fc:	709a      	strb	r2, [r3, #2]
						res[3]=(uint8_t)val>>8;
 800f5fe:	f8b7 3200 	ldrh.w	r3, [r7, #512]	; 0x200
 800f602:	b2db      	uxtb	r3, r3
 800f604:	121b      	asrs	r3, r3, #8
 800f606:	b2da      	uxtb	r2, r3
 800f608:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f60c:	70da      	strb	r2, [r3, #3]
						res[4]=(uint8_t)val;
 800f60e:	f8b7 3200 	ldrh.w	r3, [r7, #512]	; 0x200
 800f612:	b2da      	uxtb	r2, r3
 800f614:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f618:	711a      	strb	r2, [r3, #4]
						tcp_write(pcb , res , 5 , 1);
 800f61a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800f61e:	f107 0008 	add.w	r0, r7, #8
 800f622:	2301      	movs	r3, #1
 800f624:	2205      	movs	r2, #5
 800f626:	6800      	ldr	r0, [r0, #0]
 800f628:	f7fa fbe4 	bl	8009df4 <tcp_write>
						printf("SET PDU-x val=%d\n",  val);
 800f62c:	f8b7 3200 	ldrh.w	r3, [r7, #512]	; 0x200
 800f630:	4619      	mov	r1, r3
 800f632:	4858      	ldr	r0, [pc, #352]	; (800f794 <server_recv+0x7a4>)
 800f634:	f001 faea 	bl	8010c0c <iprintf>
 800f638:	e196      	b.n	800f968 <server_recv+0x978>
						//printf("repund=%X",);
					}
					else if(data_read[2]==0x2F)	//SET PDU Y+ VAL mv
 800f63a:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 800f63e:	2b2f      	cmp	r3, #47	; 0x2f
 800f640:	f040 8192 	bne.w	800f968 <server_recv+0x978>
					{
						uint16_t val =  (data_read[3]<<8 ) | data_read[4] ;
 800f644:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 800f648:	021b      	lsls	r3, r3, #8
 800f64a:	b21a      	sxth	r2, r3
 800f64c:	f897 313c 	ldrb.w	r3, [r7, #316]	; 0x13c
 800f650:	b21b      	sxth	r3, r3
 800f652:	4313      	orrs	r3, r2
 800f654:	b21b      	sxth	r3, r3
 800f656:	f8a7 3202 	strh.w	r3, [r7, #514]	; 0x202
						HAL_DAC_SetValue(&hdac, DAC_CH_Y , DAC_ALIGN_12B_R , val);
 800f65a:	f8b7 3202 	ldrh.w	r3, [r7, #514]	; 0x202
 800f65e:	2200      	movs	r2, #0
 800f660:	2110      	movs	r1, #16
 800f662:	484b      	ldr	r0, [pc, #300]	; (800f790 <server_recv+0x7a0>)
 800f664:	f7f2 fb92 	bl	8001d8c <HAL_DAC_SetValue>
						uint8_t res[7] = "___";
 800f668:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f66c:	4a44      	ldr	r2, [pc, #272]	; (800f780 <server_recv+0x790>)
 800f66e:	601a      	str	r2, [r3, #0]
 800f670:	3304      	adds	r3, #4
 800f672:	2100      	movs	r1, #0
 800f674:	460a      	mov	r2, r1
 800f676:	801a      	strh	r2, [r3, #0]
 800f678:	460a      	mov	r2, r1
 800f67a:	709a      	strb	r2, [r3, #2]
						res[0] = 0x7E;
 800f67c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f680:	227e      	movs	r2, #126	; 0x7e
 800f682:	701a      	strb	r2, [r3, #0]
						res[1] = 0x0F;
 800f684:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f688:	220f      	movs	r2, #15
 800f68a:	705a      	strb	r2, [r3, #1]
						res[2] = 0x2F;
 800f68c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f690:	222f      	movs	r2, #47	; 0x2f
 800f692:	709a      	strb	r2, [r3, #2]
						res[3]=(uint8_t)val>>8;
 800f694:	f8b7 3202 	ldrh.w	r3, [r7, #514]	; 0x202
 800f698:	b2db      	uxtb	r3, r3
 800f69a:	121b      	asrs	r3, r3, #8
 800f69c:	b2da      	uxtb	r2, r3
 800f69e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f6a2:	70da      	strb	r2, [r3, #3]
						res[4]=(uint8_t)val;
 800f6a4:	f8b7 3202 	ldrh.w	r3, [r7, #514]	; 0x202
 800f6a8:	b2da      	uxtb	r2, r3
 800f6aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f6ae:	711a      	strb	r2, [r3, #4]
						tcp_write(pcb , res , 5 , 1);
 800f6b0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800f6b4:	f107 0008 	add.w	r0, r7, #8
 800f6b8:	2301      	movs	r3, #1
 800f6ba:	2205      	movs	r2, #5
 800f6bc:	6800      	ldr	r0, [r0, #0]
 800f6be:	f7fa fb99 	bl	8009df4 <tcp_write>
						printf("SET PDU-y val=%d\n",  val);
 800f6c2:	f8b7 3202 	ldrh.w	r3, [r7, #514]	; 0x202
 800f6c6:	4619      	mov	r1, r3
 800f6c8:	4833      	ldr	r0, [pc, #204]	; (800f798 <server_recv+0x7a8>)
 800f6ca:	f001 fa9f 	bl	8010c0c <iprintf>
 800f6ce:	e14b      	b.n	800f968 <server_recv+0x978>
					}

			}

			else if(data_read[1]==0xAA)//pdu power on off
 800f6d0:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 800f6d4:	2baa      	cmp	r3, #170	; 0xaa
 800f6d6:	d167      	bne.n	800f7a8 <server_recv+0x7b8>
			{

					if(data_read[2]==0x1A)//pdu power   off
 800f6d8:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 800f6dc:	2b1a      	cmp	r3, #26
 800f6de:	d124      	bne.n	800f72a <server_recv+0x73a>
					{
						PDU_POWER(1)  ;
 800f6e0:	2201      	movs	r2, #1
 800f6e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f6e6:	482d      	ldr	r0, [pc, #180]	; (800f79c <server_recv+0x7ac>)
 800f6e8:	f7f3 fe29 	bl	800333e <HAL_GPIO_WritePin>
						uint8_t res[7]={0x7E,0XAA,0X0A,0X00,0X00};
 800f6ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f6f0:	461a      	mov	r2, r3
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	6013      	str	r3, [r2, #0]
 800f6f6:	f8c2 3003 	str.w	r3, [r2, #3]
 800f6fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f6fe:	227e      	movs	r2, #126	; 0x7e
 800f700:	701a      	strb	r2, [r3, #0]
 800f702:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f706:	22aa      	movs	r2, #170	; 0xaa
 800f708:	705a      	strb	r2, [r3, #1]
 800f70a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f70e:	220a      	movs	r2, #10
 800f710:	709a      	strb	r2, [r3, #2]
						tcp_write(pcb , res , 5 , 1);
 800f712:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800f716:	f107 0008 	add.w	r0, r7, #8
 800f71a:	2301      	movs	r3, #1
 800f71c:	2205      	movs	r2, #5
 800f71e:	6800      	ldr	r0, [r0, #0]
 800f720:	f7fa fb68 	bl	8009df4 <tcp_write>
						printf("relay  pdu off\n");
 800f724:	481e      	ldr	r0, [pc, #120]	; (800f7a0 <server_recv+0x7b0>)
 800f726:	f001 fae5 	bl	8010cf4 <puts>
					}
					if(data_read[2]==0x0A)//pdu power on
 800f72a:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 800f72e:	2b0a      	cmp	r3, #10
 800f730:	f040 811a 	bne.w	800f968 <server_recv+0x978>
					{
						PDU_POWER(0)  ;
 800f734:	2200      	movs	r2, #0
 800f736:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f73a:	4818      	ldr	r0, [pc, #96]	; (800f79c <server_recv+0x7ac>)
 800f73c:	f7f3 fdff 	bl	800333e <HAL_GPIO_WritePin>
						uint8_t res[7]={0x7E,0XAA,0X1A,0X00,0X00};
 800f740:	f107 0320 	add.w	r3, r7, #32
 800f744:	461a      	mov	r2, r3
 800f746:	2300      	movs	r3, #0
 800f748:	6013      	str	r3, [r2, #0]
 800f74a:	f8c2 3003 	str.w	r3, [r2, #3]
 800f74e:	f107 0320 	add.w	r3, r7, #32
 800f752:	227e      	movs	r2, #126	; 0x7e
 800f754:	701a      	strb	r2, [r3, #0]
 800f756:	f107 0320 	add.w	r3, r7, #32
 800f75a:	22aa      	movs	r2, #170	; 0xaa
 800f75c:	705a      	strb	r2, [r3, #1]
 800f75e:	f107 0320 	add.w	r3, r7, #32
 800f762:	221a      	movs	r2, #26
 800f764:	709a      	strb	r2, [r3, #2]
						tcp_write(pcb , res , 5 , 1);
 800f766:	f107 0120 	add.w	r1, r7, #32
 800f76a:	f107 0008 	add.w	r0, r7, #8
 800f76e:	2301      	movs	r3, #1
 800f770:	2205      	movs	r2, #5
 800f772:	6800      	ldr	r0, [r0, #0]
 800f774:	f7fa fb3e 	bl	8009df4 <tcp_write>
						printf("relay pdu on \n");
 800f778:	480a      	ldr	r0, [pc, #40]	; (800f7a4 <server_recv+0x7b4>)
 800f77a:	f001 fabb 	bl	8010cf4 <puts>
 800f77e:	e0f3      	b.n	800f968 <server_recv+0x978>
 800f780:	005f5f5f 	.word	0x005f5f5f
 800f784:	080162bc 	.word	0x080162bc
 800f788:	080162d0 	.word	0x080162d0
 800f78c:	080162ec 	.word	0x080162ec
 800f790:	20003910 	.word	0x20003910
 800f794:	08016308 	.word	0x08016308
 800f798:	0801631c 	.word	0x0801631c
 800f79c:	40010c00 	.word	0x40010c00
 800f7a0:	08016330 	.word	0x08016330
 800f7a4:	08016340 	.word	0x08016340
					}

			}

			else if(data_read[1]==0xC0)
 800f7a8:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 800f7ac:	2bc0      	cmp	r3, #192	; 0xc0
 800f7ae:	f040 80db 	bne.w	800f968 <server_recv+0x978>
			{

					if(data_read[2]==0xC1)//pdu set internal
 800f7b2:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 800f7b6:	2bc1      	cmp	r3, #193	; 0xc1
 800f7b8:	d123      	bne.n	800f802 <server_recv+0x812>
					{
						RELAY_USER_INT(0)  ;
 800f7ba:	2200      	movs	r2, #0
 800f7bc:	2108      	movs	r1, #8
 800f7be:	486d      	ldr	r0, [pc, #436]	; (800f974 <server_recv+0x984>)
 800f7c0:	f7f3 fdbd 	bl	800333e <HAL_GPIO_WritePin>
						uint8_t res[7]={0x7E,0XC0,0XC1,0X00,0X00};
 800f7c4:	f107 0318 	add.w	r3, r7, #24
 800f7c8:	461a      	mov	r2, r3
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	6013      	str	r3, [r2, #0]
 800f7ce:	f8c2 3003 	str.w	r3, [r2, #3]
 800f7d2:	f107 0318 	add.w	r3, r7, #24
 800f7d6:	227e      	movs	r2, #126	; 0x7e
 800f7d8:	701a      	strb	r2, [r3, #0]
 800f7da:	f107 0318 	add.w	r3, r7, #24
 800f7de:	22c0      	movs	r2, #192	; 0xc0
 800f7e0:	705a      	strb	r2, [r3, #1]
 800f7e2:	f107 0318 	add.w	r3, r7, #24
 800f7e6:	22c1      	movs	r2, #193	; 0xc1
 800f7e8:	709a      	strb	r2, [r3, #2]
						tcp_write(pcb , res , 5 , 1);
 800f7ea:	f107 0118 	add.w	r1, r7, #24
 800f7ee:	f107 0008 	add.w	r0, r7, #8
 800f7f2:	2301      	movs	r3, #1
 800f7f4:	2205      	movs	r2, #5
 800f7f6:	6800      	ldr	r0, [r0, #0]
 800f7f8:	f7fa fafc 	bl	8009df4 <tcp_write>
						printf("relay set on internal on \n");
 800f7fc:	485e      	ldr	r0, [pc, #376]	; (800f978 <server_recv+0x988>)
 800f7fe:	f001 fa79 	bl	8010cf4 <puts>
					}
					if(data_read[2]==0xC2)//pdu set user
 800f802:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 800f806:	2bc2      	cmp	r3, #194	; 0xc2
 800f808:	f040 80ae 	bne.w	800f968 <server_recv+0x978>
					{
						RELAY_USER_INT(1)  ;
 800f80c:	2201      	movs	r2, #1
 800f80e:	2108      	movs	r1, #8
 800f810:	4858      	ldr	r0, [pc, #352]	; (800f974 <server_recv+0x984>)
 800f812:	f7f3 fd94 	bl	800333e <HAL_GPIO_WritePin>
						uint8_t res[7]={0x7E,0XC0,0XC2,0X00,0X00};
 800f816:	f107 0310 	add.w	r3, r7, #16
 800f81a:	461a      	mov	r2, r3
 800f81c:	2300      	movs	r3, #0
 800f81e:	6013      	str	r3, [r2, #0]
 800f820:	f8c2 3003 	str.w	r3, [r2, #3]
 800f824:	f107 0310 	add.w	r3, r7, #16
 800f828:	227e      	movs	r2, #126	; 0x7e
 800f82a:	701a      	strb	r2, [r3, #0]
 800f82c:	f107 0310 	add.w	r3, r7, #16
 800f830:	22c0      	movs	r2, #192	; 0xc0
 800f832:	705a      	strb	r2, [r3, #1]
 800f834:	f107 0310 	add.w	r3, r7, #16
 800f838:	22c2      	movs	r2, #194	; 0xc2
 800f83a:	709a      	strb	r2, [r3, #2]
						tcp_write(pcb , res , 5 , 1);
 800f83c:	f107 0110 	add.w	r1, r7, #16
 800f840:	f107 0008 	add.w	r0, r7, #8
 800f844:	2301      	movs	r3, #1
 800f846:	2205      	movs	r2, #5
 800f848:	6800      	ldr	r0, [r0, #0]
 800f84a:	f7fa fad3 	bl	8009df4 <tcp_write>
						printf("relay set on external on \n");
 800f84e:	484b      	ldr	r0, [pc, #300]	; (800f97c <server_recv+0x98c>)
 800f850:	f001 fa50 	bl	8010cf4 <puts>
 800f854:	e088      	b.n	800f968 <server_recv+0x978>


	}
	else
	{
		switch (data_read[0])
 800f856:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 800f85a:	3b31      	subs	r3, #49	; 0x31
 800f85c:	2b08      	cmp	r3, #8
 800f85e:	f200 8083 	bhi.w	800f968 <server_recv+0x978>
 800f862:	a201      	add	r2, pc, #4	; (adr r2, 800f868 <server_recv+0x878>)
 800f864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f868:	0800f88d 	.word	0x0800f88d
 800f86c:	0800f8af 	.word	0x0800f8af
 800f870:	0800f8d1 	.word	0x0800f8d1
 800f874:	0800f8dd 	.word	0x0800f8dd
 800f878:	0800f8e9 	.word	0x0800f8e9
 800f87c:	0800f8f7 	.word	0x0800f8f7
 800f880:	0800f903 	.word	0x0800f903
 800f884:	0800f90f 	.word	0x0800f90f
 800f888:	0800f91b 	.word	0x0800f91b
		{
		  case LED1_ON:
				HAL_GPIO_WritePin(buzz_GPIO_Port,buzz_Pin,1);
 800f88c:	2201      	movs	r2, #1
 800f88e:	2101      	movs	r1, #1
 800f890:	4838      	ldr	r0, [pc, #224]	; (800f974 <server_recv+0x984>)
 800f892:	f7f3 fd54 	bl	800333e <HAL_GPIO_WritePin>

				tcp_write(pcb,"buzz1_onn\n",10,1);
 800f896:	f107 0008 	add.w	r0, r7, #8
 800f89a:	2301      	movs	r3, #1
 800f89c:	220a      	movs	r2, #10
 800f89e:	4938      	ldr	r1, [pc, #224]	; (800f980 <server_recv+0x990>)
 800f8a0:	6800      	ldr	r0, [r0, #0]
 800f8a2:	f7fa faa7 	bl	8009df4 <tcp_write>
				HAL_Delay(100);
 800f8a6:	2064      	movs	r0, #100	; 0x64
 800f8a8:	f7f1 fcbc 	bl	8001224 <HAL_Delay>
				break;
 800f8ac:	e05c      	b.n	800f968 <server_recv+0x978>
			case LED2_ON:
				HAL_GPIO_WritePin(buzz_GPIO_Port,buzz_Pin,0);
 800f8ae:	2200      	movs	r2, #0
 800f8b0:	2101      	movs	r1, #1
 800f8b2:	4830      	ldr	r0, [pc, #192]	; (800f974 <server_recv+0x984>)
 800f8b4:	f7f3 fd43 	bl	800333e <HAL_GPIO_WritePin>
				tcp_write(pcb,"buzz1_off\n",10,1);
 800f8b8:	f107 0008 	add.w	r0, r7, #8
 800f8bc:	2301      	movs	r3, #1
 800f8be:	220a      	movs	r2, #10
 800f8c0:	4930      	ldr	r1, [pc, #192]	; (800f984 <server_recv+0x994>)
 800f8c2:	6800      	ldr	r0, [r0, #0]
 800f8c4:	f7fa fa96 	bl	8009df4 <tcp_write>
				HAL_Delay(100);
 800f8c8:	2064      	movs	r0, #100	; 0x64
 800f8ca:	f7f1 fcab 	bl	8001224 <HAL_Delay>
				break;
 800f8ce:	e04b      	b.n	800f968 <server_recv+0x978>
			case LED3_ON:
				HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,1);
 800f8d0:	2201      	movs	r2, #1
 800f8d2:	2110      	movs	r1, #16
 800f8d4:	482c      	ldr	r0, [pc, #176]	; (800f988 <server_recv+0x998>)
 800f8d6:	f7f3 fd32 	bl	800333e <HAL_GPIO_WritePin>
				break;
 800f8da:	e045      	b.n	800f968 <server_recv+0x978>
			case LED4_ON:
				HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,1);
 800f8dc:	2201      	movs	r2, #1
 800f8de:	2180      	movs	r1, #128	; 0x80
 800f8e0:	4829      	ldr	r0, [pc, #164]	; (800f988 <server_recv+0x998>)
 800f8e2:	f7f3 fd2c 	bl	800333e <HAL_GPIO_WritePin>
				break;
 800f8e6:	e03f      	b.n	800f968 <server_recv+0x978>
			case LED1_OFF:
				HAL_GPIO_WritePin(LED_1_GPIO_Port,LED_1_Pin,0);
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f8ee:	4827      	ldr	r0, [pc, #156]	; (800f98c <server_recv+0x99c>)
 800f8f0:	f7f3 fd25 	bl	800333e <HAL_GPIO_WritePin>
				break;
 800f8f4:	e038      	b.n	800f968 <server_recv+0x978>
			case LED2_OFF:
				HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,0);
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	2108      	movs	r1, #8
 800f8fa:	4823      	ldr	r0, [pc, #140]	; (800f988 <server_recv+0x998>)
 800f8fc:	f7f3 fd1f 	bl	800333e <HAL_GPIO_WritePin>
				break;
 800f900:	e032      	b.n	800f968 <server_recv+0x978>
			case LED3_OFF:
				HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,0);
 800f902:	2200      	movs	r2, #0
 800f904:	2110      	movs	r1, #16
 800f906:	4820      	ldr	r0, [pc, #128]	; (800f988 <server_recv+0x998>)
 800f908:	f7f3 fd19 	bl	800333e <HAL_GPIO_WritePin>
				break;
 800f90c:	e02c      	b.n	800f968 <server_recv+0x978>
			case LED4_OFF:
				HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,0);
 800f90e:	2200      	movs	r2, #0
 800f910:	2180      	movs	r1, #128	; 0x80
 800f912:	481d      	ldr	r0, [pc, #116]	; (800f988 <server_recv+0x998>)
 800f914:	f7f3 fd13 	bl	800333e <HAL_GPIO_WritePin>
				break;
 800f918:	e026      	b.n	800f968 <server_recv+0x978>
			case GET_PB1:
				sprintf(data_send,"%d",get_key_state());
 800f91a:	f000 f883 	bl	800fa24 <get_key_state>
 800f91e:	4603      	mov	r3, r0
 800f920:	461a      	mov	r2, r3
 800f922:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800f926:	491a      	ldr	r1, [pc, #104]	; (800f990 <server_recv+0x9a0>)
 800f928:	4618      	mov	r0, r3
 800f92a:	f001 f9ef 	bl	8010d0c <siprintf>
			  tcp_write(pcb,data_send,strlen(data_send),1);
 800f92e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800f932:	4618      	mov	r0, r3
 800f934:	f7f0 fc78 	bl	8000228 <strlen>
 800f938:	4602      	mov	r2, r0
 800f93a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800f93e:	f107 0008 	add.w	r0, r7, #8
 800f942:	2301      	movs	r3, #1
 800f944:	6800      	ldr	r0, [r0, #0]
 800f946:	f7fa fa55 	bl	8009df4 <tcp_write>
				break;
 800f94a:	bf00      	nop
 800f94c:	e00c      	b.n	800f968 <server_recv+0x978>
  }//else

	/* End of processing, we free the pbuf */
 //   pbuf_free(p);
  }
  else if (err == ERR_OK)
 800f94e:	1cfb      	adds	r3, r7, #3
 800f950:	f993 3000 	ldrsb.w	r3, [r3]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d107      	bne.n	800f968 <server_recv+0x978>
  {
    /* When the pbuf is NULL and the err is ERR_OK, the remote end is closing the connection. */
    /* We close the connection */
    return tcp_close(pcb);
 800f958:	f107 0308 	add.w	r3, r7, #8
 800f95c:	6818      	ldr	r0, [r3, #0]
 800f95e:	f7f6 fc17 	bl	8006190 <tcp_close>
 800f962:	4603      	mov	r3, r0
 800f964:	b25b      	sxtb	r3, r3
 800f966:	e000      	b.n	800f96a <server_recv+0x97a>
  }
  return ERR_OK;
 800f968:	2300      	movs	r3, #0


}
 800f96a:	4618      	mov	r0, r3
 800f96c:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 800f970:	46bd      	mov	sp, r7
 800f972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f974:	40010800 	.word	0x40010800
 800f978:	08016350 	.word	0x08016350
 800f97c:	0801636c 	.word	0x0801636c
 800f980:	08016388 	.word	0x08016388
 800f984:	08016394 	.word	0x08016394
 800f988:	40011400 	.word	0x40011400
 800f98c:	40010c00 	.word	0x40010c00
 800f990:	080163a0 	.word	0x080163a0

0800f994 <server_accept>:
  * @param  pcb	 the tcp_pcb which accepted the connection
  * @param  err	 error value
  * @retval ERR_OK
  */
err_t server_accept(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b084      	sub	sp, #16
 800f998:	af00      	add	r7, sp, #0
 800f99a:	60f8      	str	r0, [r7, #12]
 800f99c:	60b9      	str	r1, [r7, #8]
 800f99e:	4613      	mov	r3, r2
 800f9a0:	71fb      	strb	r3, [r7, #7]
  /* Configure LwIP to use our call back functions. */
  tcp_err(pcb, server_conn_err);
 800f9a2:	4906      	ldr	r1, [pc, #24]	; (800f9bc <server_accept+0x28>)
 800f9a4:	68b8      	ldr	r0, [r7, #8]
 800f9a6:	f7f7 fc61 	bl	800726c <tcp_err>
  tcp_recv(pcb, server_recv);
 800f9aa:	4905      	ldr	r1, [pc, #20]	; (800f9c0 <server_accept+0x2c>)
 800f9ac:	68b8      	ldr	r0, [r7, #8]
 800f9ae:	f7f7 fc3b 	bl	8007228 <tcp_recv>
  return ERR_OK;
 800f9b2:	2300      	movs	r3, #0
}
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	3710      	adds	r7, #16
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	bd80      	pop	{r7, pc}
 800f9bc:	0800fa05 	.word	0x0800fa05
 800f9c0:	0800eff1 	.word	0x0800eff1

0800f9c4 <server_init>:
  * @brief  Initialize the server application
  * @param  None
  * @retval None
  */
void server_init(u16_t port)
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b084      	sub	sp, #16
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	80fb      	strh	r3, [r7, #6]
  struct tcp_pcb *pcb;

  /* Create a new TCP control block  */
  pcb = tcp_new();
 800f9ce:	f7f7 fc23 	bl	8007218 <tcp_new>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	60fb      	str	r3, [r7, #12]

  /* Assign to the new pcb a local IP address and a port number */
  /* Using IP_ADDR_ANY allow the pcb to be used by any local interface */
  tcp_bind(pcb, IP_ADDR_ANY, port);
 800f9d6:	88fb      	ldrh	r3, [r7, #6]
 800f9d8:	461a      	mov	r2, r3
 800f9da:	4908      	ldr	r1, [pc, #32]	; (800f9fc <server_init+0x38>)
 800f9dc:	68f8      	ldr	r0, [r7, #12]
 800f9de:	f7f6 fcad 	bl	800633c <tcp_bind>


  /* Set the connection to the LISTEN state */
 // pcb = tcp_listen(pcb);
  pcb = tcp_listen_with_backlog(pcb);
 800f9e2:	68f8      	ldr	r0, [r7, #12]
 800f9e4:	f7f6 fd4c 	bl	8006480 <tcp_listen_with_backlog>
 800f9e8:	4603      	mov	r3, r0
 800f9ea:	60fb      	str	r3, [r7, #12]

  /* Specify the function to be called when a connection is established */
  tcp_accept(pcb, server_accept);
 800f9ec:	4904      	ldr	r1, [pc, #16]	; (800fa00 <server_init+0x3c>)
 800f9ee:	68f8      	ldr	r0, [r7, #12]
 800f9f0:	f7f7 fc5e 	bl	80072b0 <tcp_accept>

}
 800f9f4:	bf00      	nop
 800f9f6:	3710      	adds	r7, #16
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	bd80      	pop	{r7, pc}
 800f9fc:	08016474 	.word	0x08016474
 800fa00:	0800f995 	.word	0x0800f995

0800fa04 <server_conn_err>:
  * @param  arg
  * @parm   err
  * @retval None
  */
void server_conn_err(void *arg, err_t err)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b084      	sub	sp, #16
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
 800fa0c:	460b      	mov	r3, r1
 800fa0e:	70fb      	strb	r3, [r7, #3]
  struct name *name;
  name = (struct name *)arg;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	60fb      	str	r3, [r7, #12]

  mem_free(name);
 800fa14:	68f8      	ldr	r0, [r7, #12]
 800fa16:	f7f4 ff79 	bl	800490c <mem_free>
}
 800fa1a:	bf00      	nop
 800fa1c:	3710      	adds	r7, #16
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	bd80      	pop	{r7, pc}
	...

0800fa24 <get_key_state>:


char get_key_state(void)
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	af00      	add	r7, sp, #0
 if(!HAL_GPIO_ReadPin(PB1_GPIO_Port,PB1_Pin))
 800fa28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800fa2c:	483a      	ldr	r0, [pc, #232]	; (800fb18 <get_key_state+0xf4>)
 800fa2e:	f7f3 fc6f 	bl	8003310 <HAL_GPIO_ReadPin>
 800fa32:	4603      	mov	r3, r0
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d115      	bne.n	800fa64 <get_key_state+0x40>
	{
		HAL_Delay(KEYDEBOUNCE);
 800fa38:	2014      	movs	r0, #20
 800fa3a:	f7f1 fbf3 	bl	8001224 <HAL_Delay>
		if(!HAL_GPIO_ReadPin(PB1_GPIO_Port,PB1_Pin))
 800fa3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800fa42:	4835      	ldr	r0, [pc, #212]	; (800fb18 <get_key_state+0xf4>)
 800fa44:	f7f3 fc64 	bl	8003310 <HAL_GPIO_ReadPin>
 800fa48:	4603      	mov	r3, r0
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d10a      	bne.n	800fa64 <get_key_state+0x40>
		{
		 while(!HAL_GPIO_ReadPin(PB1_GPIO_Port,PB1_Pin));
 800fa4e:	bf00      	nop
 800fa50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800fa54:	4830      	ldr	r0, [pc, #192]	; (800fb18 <get_key_state+0xf4>)
 800fa56:	f7f3 fc5b 	bl	8003310 <HAL_GPIO_ReadPin>
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d0f7      	beq.n	800fa50 <get_key_state+0x2c>

		 return 1;
 800fa60:	2301      	movs	r3, #1
 800fa62:	e057      	b.n	800fb14 <get_key_state+0xf0>
		}
	}

  if(!HAL_GPIO_ReadPin(PB2_GPIO_Port,PB2_Pin))
 800fa64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800fa68:	482b      	ldr	r0, [pc, #172]	; (800fb18 <get_key_state+0xf4>)
 800fa6a:	f7f3 fc51 	bl	8003310 <HAL_GPIO_ReadPin>
 800fa6e:	4603      	mov	r3, r0
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d115      	bne.n	800faa0 <get_key_state+0x7c>
	{
		HAL_Delay(KEYDEBOUNCE);
 800fa74:	2014      	movs	r0, #20
 800fa76:	f7f1 fbd5 	bl	8001224 <HAL_Delay>
		if(!HAL_GPIO_ReadPin(PB2_GPIO_Port,PB2_Pin))
 800fa7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800fa7e:	4826      	ldr	r0, [pc, #152]	; (800fb18 <get_key_state+0xf4>)
 800fa80:	f7f3 fc46 	bl	8003310 <HAL_GPIO_ReadPin>
 800fa84:	4603      	mov	r3, r0
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d10a      	bne.n	800faa0 <get_key_state+0x7c>
		{
		 while(!HAL_GPIO_ReadPin(PB2_GPIO_Port,PB2_Pin));
 800fa8a:	bf00      	nop
 800fa8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800fa90:	4821      	ldr	r0, [pc, #132]	; (800fb18 <get_key_state+0xf4>)
 800fa92:	f7f3 fc3d 	bl	8003310 <HAL_GPIO_ReadPin>
 800fa96:	4603      	mov	r3, r0
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d0f7      	beq.n	800fa8c <get_key_state+0x68>
		 return 2;
 800fa9c:	2302      	movs	r3, #2
 800fa9e:	e039      	b.n	800fb14 <get_key_state+0xf0>
		}
	}

  if(!HAL_GPIO_ReadPin(PB3_GPIO_Port,PB3_Pin))
 800faa0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800faa4:	481c      	ldr	r0, [pc, #112]	; (800fb18 <get_key_state+0xf4>)
 800faa6:	f7f3 fc33 	bl	8003310 <HAL_GPIO_ReadPin>
 800faaa:	4603      	mov	r3, r0
 800faac:	2b00      	cmp	r3, #0
 800faae:	d115      	bne.n	800fadc <get_key_state+0xb8>
	{
		HAL_Delay(KEYDEBOUNCE);
 800fab0:	2014      	movs	r0, #20
 800fab2:	f7f1 fbb7 	bl	8001224 <HAL_Delay>
		if(!HAL_GPIO_ReadPin(PB3_GPIO_Port,PB3_Pin))
 800fab6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800faba:	4817      	ldr	r0, [pc, #92]	; (800fb18 <get_key_state+0xf4>)
 800fabc:	f7f3 fc28 	bl	8003310 <HAL_GPIO_ReadPin>
 800fac0:	4603      	mov	r3, r0
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d10a      	bne.n	800fadc <get_key_state+0xb8>
		{
		 while(!HAL_GPIO_ReadPin(PB3_GPIO_Port,PB3_Pin));
 800fac6:	bf00      	nop
 800fac8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800facc:	4812      	ldr	r0, [pc, #72]	; (800fb18 <get_key_state+0xf4>)
 800face:	f7f3 fc1f 	bl	8003310 <HAL_GPIO_ReadPin>
 800fad2:	4603      	mov	r3, r0
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d0f7      	beq.n	800fac8 <get_key_state+0xa4>
		 return 3;
 800fad8:	2303      	movs	r3, #3
 800fada:	e01b      	b.n	800fb14 <get_key_state+0xf0>
		}
	}

  if(!HAL_GPIO_ReadPin(PB4_GPIO_Port,PB4_Pin))
 800fadc:	2180      	movs	r1, #128	; 0x80
 800fade:	480f      	ldr	r0, [pc, #60]	; (800fb1c <get_key_state+0xf8>)
 800fae0:	f7f3 fc16 	bl	8003310 <HAL_GPIO_ReadPin>
 800fae4:	4603      	mov	r3, r0
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d113      	bne.n	800fb12 <get_key_state+0xee>
	{
		HAL_Delay(KEYDEBOUNCE);
 800faea:	2014      	movs	r0, #20
 800faec:	f7f1 fb9a 	bl	8001224 <HAL_Delay>
		if(!HAL_GPIO_ReadPin(PB4_GPIO_Port,PB4_Pin))
 800faf0:	2180      	movs	r1, #128	; 0x80
 800faf2:	480a      	ldr	r0, [pc, #40]	; (800fb1c <get_key_state+0xf8>)
 800faf4:	f7f3 fc0c 	bl	8003310 <HAL_GPIO_ReadPin>
 800faf8:	4603      	mov	r3, r0
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d109      	bne.n	800fb12 <get_key_state+0xee>
		{
		 while(!HAL_GPIO_ReadPin(PB4_GPIO_Port,PB4_Pin));
 800fafe:	bf00      	nop
 800fb00:	2180      	movs	r1, #128	; 0x80
 800fb02:	4806      	ldr	r0, [pc, #24]	; (800fb1c <get_key_state+0xf8>)
 800fb04:	f7f3 fc04 	bl	8003310 <HAL_GPIO_ReadPin>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d0f8      	beq.n	800fb00 <get_key_state+0xdc>
		 return 4;
 800fb0e:	2304      	movs	r3, #4
 800fb10:	e000      	b.n	800fb14 <get_key_state+0xf0>
		}
	}

  return 0;
 800fb12:	2300      	movs	r3, #0
}
 800fb14:	4618      	mov	r0, r3
 800fb16:	bd80      	pop	{r7, pc}
 800fb18:	40011400 	.word	0x40011400
 800fb1c:	40011000 	.word	0x40011000

0800fb20 <Hi_byte>:



uint8_t Hi_byte(uint16_t i )
{
 800fb20:	b480      	push	{r7}
 800fb22:	b085      	sub	sp, #20
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	4603      	mov	r3, r0
 800fb28:	80fb      	strh	r3, [r7, #6]
	 uint8_t u81=0,u82=0;
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	73fb      	strb	r3, [r7, #15]
 800fb2e:	2300      	movs	r3, #0
 800fb30:	73bb      	strb	r3, [r7, #14]
	 u81 = i;
 800fb32:	88fb      	ldrh	r3, [r7, #6]
 800fb34:	73fb      	strb	r3, [r7, #15]
	 i>>=8;
 800fb36:	88fb      	ldrh	r3, [r7, #6]
 800fb38:	0a1b      	lsrs	r3, r3, #8
 800fb3a:	80fb      	strh	r3, [r7, #6]
	 u82 = i;
 800fb3c:	88fb      	ldrh	r3, [r7, #6]
 800fb3e:	73bb      	strb	r3, [r7, #14]
	 return u82;
 800fb40:	7bbb      	ldrb	r3, [r7, #14]
 }
 800fb42:	4618      	mov	r0, r3
 800fb44:	3714      	adds	r7, #20
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bc80      	pop	{r7}
 800fb4a:	4770      	bx	lr

0800fb4c <Lo_byte>:


 uint8_t Lo_byte(uint16_t i )
 {
 800fb4c:	b480      	push	{r7}
 800fb4e:	b085      	sub	sp, #20
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	4603      	mov	r3, r0
 800fb54:	80fb      	strh	r3, [r7, #6]
 	uint8_t u81=0,u82=0;
 800fb56:	2300      	movs	r3, #0
 800fb58:	73fb      	strb	r3, [r7, #15]
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	73bb      	strb	r3, [r7, #14]
 	u81 = i;
 800fb5e:	88fb      	ldrh	r3, [r7, #6]
 800fb60:	73fb      	strb	r3, [r7, #15]
 	i>>=8;
 800fb62:	88fb      	ldrh	r3, [r7, #6]
 800fb64:	0a1b      	lsrs	r3, r3, #8
 800fb66:	80fb      	strh	r3, [r7, #6]
 	u82 = i;
 800fb68:	88fb      	ldrh	r3, [r7, #6]
 800fb6a:	73bb      	strb	r3, [r7, #14]
 	return u81;
 800fb6c:	7bfb      	ldrb	r3, [r7, #15]
 }
 800fb6e:	4618      	mov	r0, r3
 800fb70:	3714      	adds	r7, #20
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bc80      	pop	{r7}
 800fb76:	4770      	bx	lr

0800fb78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800fb78:	b480      	push	{r7}
 800fb7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800fb7c:	bf00      	nop
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	bc80      	pop	{r7}
 800fb82:	4770      	bx	lr

0800fb84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800fb84:	b480      	push	{r7}
 800fb86:	b085      	sub	sp, #20
 800fb88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800fb8a:	4b15      	ldr	r3, [pc, #84]	; (800fbe0 <HAL_MspInit+0x5c>)
 800fb8c:	699b      	ldr	r3, [r3, #24]
 800fb8e:	4a14      	ldr	r2, [pc, #80]	; (800fbe0 <HAL_MspInit+0x5c>)
 800fb90:	f043 0301 	orr.w	r3, r3, #1
 800fb94:	6193      	str	r3, [r2, #24]
 800fb96:	4b12      	ldr	r3, [pc, #72]	; (800fbe0 <HAL_MspInit+0x5c>)
 800fb98:	699b      	ldr	r3, [r3, #24]
 800fb9a:	f003 0301 	and.w	r3, r3, #1
 800fb9e:	60bb      	str	r3, [r7, #8]
 800fba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800fba2:	4b0f      	ldr	r3, [pc, #60]	; (800fbe0 <HAL_MspInit+0x5c>)
 800fba4:	69db      	ldr	r3, [r3, #28]
 800fba6:	4a0e      	ldr	r2, [pc, #56]	; (800fbe0 <HAL_MspInit+0x5c>)
 800fba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fbac:	61d3      	str	r3, [r2, #28]
 800fbae:	4b0c      	ldr	r3, [pc, #48]	; (800fbe0 <HAL_MspInit+0x5c>)
 800fbb0:	69db      	ldr	r3, [r3, #28]
 800fbb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fbb6:	607b      	str	r3, [r7, #4]
 800fbb8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800fbba:	4b0a      	ldr	r3, [pc, #40]	; (800fbe4 <HAL_MspInit+0x60>)
 800fbbc:	685b      	ldr	r3, [r3, #4]
 800fbbe:	60fb      	str	r3, [r7, #12]
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800fbc6:	60fb      	str	r3, [r7, #12]
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800fbce:	60fb      	str	r3, [r7, #12]
 800fbd0:	4a04      	ldr	r2, [pc, #16]	; (800fbe4 <HAL_MspInit+0x60>)
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800fbd6:	bf00      	nop
 800fbd8:	3714      	adds	r7, #20
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	bc80      	pop	{r7}
 800fbde:	4770      	bx	lr
 800fbe0:	40021000 	.word	0x40021000
 800fbe4:	40010000 	.word	0x40010000

0800fbe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800fbec:	f7f4 f8fa 	bl	8003de4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800fbf0:	bf00      	nop
 800fbf2:	bd80      	pop	{r7, pc}

0800fbf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800fbf4:	b480      	push	{r7}
 800fbf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800fbf8:	e7fe      	b.n	800fbf8 <HardFault_Handler+0x4>

0800fbfa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800fbfa:	b480      	push	{r7}
 800fbfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800fbfe:	e7fe      	b.n	800fbfe <MemManage_Handler+0x4>

0800fc00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800fc00:	b480      	push	{r7}
 800fc02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800fc04:	e7fe      	b.n	800fc04 <BusFault_Handler+0x4>

0800fc06 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800fc06:	b480      	push	{r7}
 800fc08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800fc0a:	e7fe      	b.n	800fc0a <UsageFault_Handler+0x4>

0800fc0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800fc0c:	b480      	push	{r7}
 800fc0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800fc10:	bf00      	nop
 800fc12:	46bd      	mov	sp, r7
 800fc14:	bc80      	pop	{r7}
 800fc16:	4770      	bx	lr

0800fc18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800fc18:	b480      	push	{r7}
 800fc1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800fc1c:	bf00      	nop
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bc80      	pop	{r7}
 800fc22:	4770      	bx	lr

0800fc24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800fc24:	b480      	push	{r7}
 800fc26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800fc28:	bf00      	nop
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	bc80      	pop	{r7}
 800fc2e:	4770      	bx	lr

0800fc30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800fc30:	b580      	push	{r7, lr}
 800fc32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800fc34:	f7f1 fada 	bl	80011ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800fc38:	bf00      	nop
 800fc3a:	bd80      	pop	{r7, pc}

0800fc3c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b086      	sub	sp, #24
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	60f8      	str	r0, [r7, #12]
 800fc44:	60b9      	str	r1, [r7, #8]
 800fc46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800fc48:	2300      	movs	r3, #0
 800fc4a:	617b      	str	r3, [r7, #20]
 800fc4c:	e00a      	b.n	800fc64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800fc4e:	f3af 8000 	nop.w
 800fc52:	4601      	mov	r1, r0
 800fc54:	68bb      	ldr	r3, [r7, #8]
 800fc56:	1c5a      	adds	r2, r3, #1
 800fc58:	60ba      	str	r2, [r7, #8]
 800fc5a:	b2ca      	uxtb	r2, r1
 800fc5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800fc5e:	697b      	ldr	r3, [r7, #20]
 800fc60:	3301      	adds	r3, #1
 800fc62:	617b      	str	r3, [r7, #20]
 800fc64:	697a      	ldr	r2, [r7, #20]
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	429a      	cmp	r2, r3
 800fc6a:	dbf0      	blt.n	800fc4e <_read+0x12>
	}

return len;
 800fc6c:	687b      	ldr	r3, [r7, #4]
}
 800fc6e:	4618      	mov	r0, r3
 800fc70:	3718      	adds	r7, #24
 800fc72:	46bd      	mov	sp, r7
 800fc74:	bd80      	pop	{r7, pc}

0800fc76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800fc76:	b580      	push	{r7, lr}
 800fc78:	b086      	sub	sp, #24
 800fc7a:	af00      	add	r7, sp, #0
 800fc7c:	60f8      	str	r0, [r7, #12]
 800fc7e:	60b9      	str	r1, [r7, #8]
 800fc80:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800fc82:	2300      	movs	r3, #0
 800fc84:	617b      	str	r3, [r7, #20]
 800fc86:	e009      	b.n	800fc9c <_write+0x26>
	{
		__io_putchar(*ptr++);
 800fc88:	68bb      	ldr	r3, [r7, #8]
 800fc8a:	1c5a      	adds	r2, r3, #1
 800fc8c:	60ba      	str	r2, [r7, #8]
 800fc8e:	781b      	ldrb	r3, [r3, #0]
 800fc90:	4618      	mov	r0, r3
 800fc92:	f7fe fdcd 	bl	800e830 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800fc96:	697b      	ldr	r3, [r7, #20]
 800fc98:	3301      	adds	r3, #1
 800fc9a:	617b      	str	r3, [r7, #20]
 800fc9c:	697a      	ldr	r2, [r7, #20]
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	429a      	cmp	r2, r3
 800fca2:	dbf1      	blt.n	800fc88 <_write+0x12>
	}
	return len;
 800fca4:	687b      	ldr	r3, [r7, #4]
}
 800fca6:	4618      	mov	r0, r3
 800fca8:	3718      	adds	r7, #24
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	bd80      	pop	{r7, pc}

0800fcae <_close>:

int _close(int file)
{
 800fcae:	b480      	push	{r7}
 800fcb0:	b083      	sub	sp, #12
 800fcb2:	af00      	add	r7, sp, #0
 800fcb4:	6078      	str	r0, [r7, #4]
	return -1;
 800fcb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fcba:	4618      	mov	r0, r3
 800fcbc:	370c      	adds	r7, #12
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	bc80      	pop	{r7}
 800fcc2:	4770      	bx	lr

0800fcc4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800fcc4:	b480      	push	{r7}
 800fcc6:	b083      	sub	sp, #12
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
 800fccc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800fcce:	683b      	ldr	r3, [r7, #0]
 800fcd0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800fcd4:	605a      	str	r2, [r3, #4]
	return 0;
 800fcd6:	2300      	movs	r3, #0
}
 800fcd8:	4618      	mov	r0, r3
 800fcda:	370c      	adds	r7, #12
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	bc80      	pop	{r7}
 800fce0:	4770      	bx	lr

0800fce2 <_isatty>:

int _isatty(int file)
{
 800fce2:	b480      	push	{r7}
 800fce4:	b083      	sub	sp, #12
 800fce6:	af00      	add	r7, sp, #0
 800fce8:	6078      	str	r0, [r7, #4]
	return 1;
 800fcea:	2301      	movs	r3, #1
}
 800fcec:	4618      	mov	r0, r3
 800fcee:	370c      	adds	r7, #12
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bc80      	pop	{r7}
 800fcf4:	4770      	bx	lr

0800fcf6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800fcf6:	b480      	push	{r7}
 800fcf8:	b085      	sub	sp, #20
 800fcfa:	af00      	add	r7, sp, #0
 800fcfc:	60f8      	str	r0, [r7, #12]
 800fcfe:	60b9      	str	r1, [r7, #8]
 800fd00:	607a      	str	r2, [r7, #4]
	return 0;
 800fd02:	2300      	movs	r3, #0
}
 800fd04:	4618      	mov	r0, r3
 800fd06:	3714      	adds	r7, #20
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	bc80      	pop	{r7}
 800fd0c:	4770      	bx	lr
	...

0800fd10 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800fd10:	b480      	push	{r7}
 800fd12:	b085      	sub	sp, #20
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800fd18:	4b11      	ldr	r3, [pc, #68]	; (800fd60 <_sbrk+0x50>)
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d102      	bne.n	800fd26 <_sbrk+0x16>
		heap_end = &end;
 800fd20:	4b0f      	ldr	r3, [pc, #60]	; (800fd60 <_sbrk+0x50>)
 800fd22:	4a10      	ldr	r2, [pc, #64]	; (800fd64 <_sbrk+0x54>)
 800fd24:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800fd26:	4b0e      	ldr	r3, [pc, #56]	; (800fd60 <_sbrk+0x50>)
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800fd2c:	4b0c      	ldr	r3, [pc, #48]	; (800fd60 <_sbrk+0x50>)
 800fd2e:	681a      	ldr	r2, [r3, #0]
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	4413      	add	r3, r2
 800fd34:	466a      	mov	r2, sp
 800fd36:	4293      	cmp	r3, r2
 800fd38:	d905      	bls.n	800fd46 <_sbrk+0x36>
	{
		errno = ENOMEM;
 800fd3a:	4b0b      	ldr	r3, [pc, #44]	; (800fd68 <_sbrk+0x58>)
 800fd3c:	220c      	movs	r2, #12
 800fd3e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800fd40:	f04f 33ff 	mov.w	r3, #4294967295
 800fd44:	e006      	b.n	800fd54 <_sbrk+0x44>
	}

	heap_end += incr;
 800fd46:	4b06      	ldr	r3, [pc, #24]	; (800fd60 <_sbrk+0x50>)
 800fd48:	681a      	ldr	r2, [r3, #0]
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	4413      	add	r3, r2
 800fd4e:	4a04      	ldr	r2, [pc, #16]	; (800fd60 <_sbrk+0x50>)
 800fd50:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800fd52:	68fb      	ldr	r3, [r7, #12]
}
 800fd54:	4618      	mov	r0, r3
 800fd56:	3714      	adds	r7, #20
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	bc80      	pop	{r7}
 800fd5c:	4770      	bx	lr
 800fd5e:	bf00      	nop
 800fd60:	20000384 	.word	0x20000384
 800fd64:	20008230 	.word	0x20008230
 800fd68:	2000822c 	.word	0x2000822c

0800fd6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800fd6c:	b480      	push	{r7}
 800fd6e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800fd70:	4b1a      	ldr	r3, [pc, #104]	; (800fddc <SystemInit+0x70>)
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	4a19      	ldr	r2, [pc, #100]	; (800fddc <SystemInit+0x70>)
 800fd76:	f043 0301 	orr.w	r3, r3, #1
 800fd7a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
#else
  RCC->CFGR &= 0xF0FF0000U;
 800fd7c:	4b17      	ldr	r3, [pc, #92]	; (800fddc <SystemInit+0x70>)
 800fd7e:	685a      	ldr	r2, [r3, #4]
 800fd80:	4916      	ldr	r1, [pc, #88]	; (800fddc <SystemInit+0x70>)
 800fd82:	4b17      	ldr	r3, [pc, #92]	; (800fde0 <SystemInit+0x74>)
 800fd84:	4013      	ands	r3, r2
 800fd86:	604b      	str	r3, [r1, #4]
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800fd88:	4b14      	ldr	r3, [pc, #80]	; (800fddc <SystemInit+0x70>)
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	4a13      	ldr	r2, [pc, #76]	; (800fddc <SystemInit+0x70>)
 800fd8e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800fd92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fd96:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800fd98:	4b10      	ldr	r3, [pc, #64]	; (800fddc <SystemInit+0x70>)
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	4a0f      	ldr	r2, [pc, #60]	; (800fddc <SystemInit+0x70>)
 800fd9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fda2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800fda4:	4b0d      	ldr	r3, [pc, #52]	; (800fddc <SystemInit+0x70>)
 800fda6:	685b      	ldr	r3, [r3, #4]
 800fda8:	4a0c      	ldr	r2, [pc, #48]	; (800fddc <SystemInit+0x70>)
 800fdaa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800fdae:	6053      	str	r3, [r2, #4]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEBFFFFFFU;
 800fdb0:	4b0a      	ldr	r3, [pc, #40]	; (800fddc <SystemInit+0x70>)
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	4a09      	ldr	r2, [pc, #36]	; (800fddc <SystemInit+0x70>)
 800fdb6:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800fdba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000U;
 800fdbc:	4b07      	ldr	r3, [pc, #28]	; (800fddc <SystemInit+0x70>)
 800fdbe:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800fdc2:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
 800fdc4:	4b05      	ldr	r3, [pc, #20]	; (800fddc <SystemInit+0x70>)
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800fdca:	4b06      	ldr	r3, [pc, #24]	; (800fde4 <SystemInit+0x78>)
 800fdcc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800fdd0:	609a      	str	r2, [r3, #8]
#endif 
}
 800fdd2:	bf00      	nop
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bc80      	pop	{r7}
 800fdd8:	4770      	bx	lr
 800fdda:	bf00      	nop
 800fddc:	40021000 	.word	0x40021000
 800fde0:	f0ff0000 	.word	0xf0ff0000
 800fde4:	e000ed00 	.word	0xe000ed00

0800fde8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800fdec:	4b11      	ldr	r3, [pc, #68]	; (800fe34 <MX_USART1_UART_Init+0x4c>)
 800fdee:	4a12      	ldr	r2, [pc, #72]	; (800fe38 <MX_USART1_UART_Init+0x50>)
 800fdf0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800fdf2:	4b10      	ldr	r3, [pc, #64]	; (800fe34 <MX_USART1_UART_Init+0x4c>)
 800fdf4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800fdf8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800fdfa:	4b0e      	ldr	r3, [pc, #56]	; (800fe34 <MX_USART1_UART_Init+0x4c>)
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800fe00:	4b0c      	ldr	r3, [pc, #48]	; (800fe34 <MX_USART1_UART_Init+0x4c>)
 800fe02:	2200      	movs	r2, #0
 800fe04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800fe06:	4b0b      	ldr	r3, [pc, #44]	; (800fe34 <MX_USART1_UART_Init+0x4c>)
 800fe08:	2200      	movs	r2, #0
 800fe0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800fe0c:	4b09      	ldr	r3, [pc, #36]	; (800fe34 <MX_USART1_UART_Init+0x4c>)
 800fe0e:	220c      	movs	r2, #12
 800fe10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800fe12:	4b08      	ldr	r3, [pc, #32]	; (800fe34 <MX_USART1_UART_Init+0x4c>)
 800fe14:	2200      	movs	r2, #0
 800fe16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800fe18:	4b06      	ldr	r3, [pc, #24]	; (800fe34 <MX_USART1_UART_Init+0x4c>)
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800fe1e:	4805      	ldr	r0, [pc, #20]	; (800fe34 <MX_USART1_UART_Init+0x4c>)
 800fe20:	f7f4 faae 	bl	8004380 <HAL_UART_Init>
 800fe24:	4603      	mov	r3, r0
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d001      	beq.n	800fe2e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800fe2a:	f7ff fea5 	bl	800fb78 <Error_Handler>
  }

}
 800fe2e:	bf00      	nop
 800fe30:	bd80      	pop	{r7, pc}
 800fe32:	bf00      	nop
 800fe34:	200081ec 	.word	0x200081ec
 800fe38:	40013800 	.word	0x40013800

0800fe3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b088      	sub	sp, #32
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fe44:	f107 0310 	add.w	r3, r7, #16
 800fe48:	2200      	movs	r2, #0
 800fe4a:	601a      	str	r2, [r3, #0]
 800fe4c:	605a      	str	r2, [r3, #4]
 800fe4e:	609a      	str	r2, [r3, #8]
 800fe50:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	4a1c      	ldr	r2, [pc, #112]	; (800fec8 <HAL_UART_MspInit+0x8c>)
 800fe58:	4293      	cmp	r3, r2
 800fe5a:	d131      	bne.n	800fec0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800fe5c:	4b1b      	ldr	r3, [pc, #108]	; (800fecc <HAL_UART_MspInit+0x90>)
 800fe5e:	699b      	ldr	r3, [r3, #24]
 800fe60:	4a1a      	ldr	r2, [pc, #104]	; (800fecc <HAL_UART_MspInit+0x90>)
 800fe62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fe66:	6193      	str	r3, [r2, #24]
 800fe68:	4b18      	ldr	r3, [pc, #96]	; (800fecc <HAL_UART_MspInit+0x90>)
 800fe6a:	699b      	ldr	r3, [r3, #24]
 800fe6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fe70:	60fb      	str	r3, [r7, #12]
 800fe72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fe74:	4b15      	ldr	r3, [pc, #84]	; (800fecc <HAL_UART_MspInit+0x90>)
 800fe76:	699b      	ldr	r3, [r3, #24]
 800fe78:	4a14      	ldr	r2, [pc, #80]	; (800fecc <HAL_UART_MspInit+0x90>)
 800fe7a:	f043 0304 	orr.w	r3, r3, #4
 800fe7e:	6193      	str	r3, [r2, #24]
 800fe80:	4b12      	ldr	r3, [pc, #72]	; (800fecc <HAL_UART_MspInit+0x90>)
 800fe82:	699b      	ldr	r3, [r3, #24]
 800fe84:	f003 0304 	and.w	r3, r3, #4
 800fe88:	60bb      	str	r3, [r7, #8]
 800fe8a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800fe8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fe90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fe92:	2302      	movs	r3, #2
 800fe94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800fe96:	2303      	movs	r3, #3
 800fe98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fe9a:	f107 0310 	add.w	r3, r7, #16
 800fe9e:	4619      	mov	r1, r3
 800fea0:	480b      	ldr	r0, [pc, #44]	; (800fed0 <HAL_UART_MspInit+0x94>)
 800fea2:	f7f3 f8db 	bl	800305c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800fea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800feaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800feac:	2300      	movs	r3, #0
 800feae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800feb0:	2300      	movs	r3, #0
 800feb2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800feb4:	f107 0310 	add.w	r3, r7, #16
 800feb8:	4619      	mov	r1, r3
 800feba:	4805      	ldr	r0, [pc, #20]	; (800fed0 <HAL_UART_MspInit+0x94>)
 800febc:	f7f3 f8ce 	bl	800305c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800fec0:	bf00      	nop
 800fec2:	3720      	adds	r7, #32
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}
 800fec8:	40013800 	.word	0x40013800
 800fecc:	40021000 	.word	0x40021000
 800fed0:	40010800 	.word	0x40010800

0800fed4 <Reset_Handler>:
 800fed4:	2100      	movs	r1, #0
 800fed6:	e003      	b.n	800fee0 <LoopCopyDataInit>

0800fed8 <CopyDataInit>:
 800fed8:	4b0b      	ldr	r3, [pc, #44]	; (800ff08 <LoopFillZerobss+0x14>)
 800feda:	585b      	ldr	r3, [r3, r1]
 800fedc:	5043      	str	r3, [r0, r1]
 800fede:	3104      	adds	r1, #4

0800fee0 <LoopCopyDataInit>:
 800fee0:	480a      	ldr	r0, [pc, #40]	; (800ff0c <LoopFillZerobss+0x18>)
 800fee2:	4b0b      	ldr	r3, [pc, #44]	; (800ff10 <LoopFillZerobss+0x1c>)
 800fee4:	1842      	adds	r2, r0, r1
 800fee6:	429a      	cmp	r2, r3
 800fee8:	d3f6      	bcc.n	800fed8 <CopyDataInit>
 800feea:	4a0a      	ldr	r2, [pc, #40]	; (800ff14 <LoopFillZerobss+0x20>)
 800feec:	e002      	b.n	800fef4 <LoopFillZerobss>

0800feee <FillZerobss>:
 800feee:	2300      	movs	r3, #0
 800fef0:	f842 3b04 	str.w	r3, [r2], #4

0800fef4 <LoopFillZerobss>:
 800fef4:	4b08      	ldr	r3, [pc, #32]	; (800ff18 <LoopFillZerobss+0x24>)
 800fef6:	429a      	cmp	r2, r3
 800fef8:	d3f9      	bcc.n	800feee <FillZerobss>
 800fefa:	f7ff ff37 	bl	800fd6c <SystemInit>
 800fefe:	f000 f80f 	bl	800ff20 <__libc_init_array>
 800ff02:	f7fe fd61 	bl	800e9c8 <main>
 800ff06:	4770      	bx	lr
 800ff08:	080167d0 	.word	0x080167d0
 800ff0c:	20000000 	.word	0x20000000
 800ff10:	200001e0 	.word	0x200001e0
 800ff14:	200001e0 	.word	0x200001e0
 800ff18:	20008230 	.word	0x20008230

0800ff1c <ADC1_2_IRQHandler>:
 800ff1c:	e7fe      	b.n	800ff1c <ADC1_2_IRQHandler>
	...

0800ff20 <__libc_init_array>:
 800ff20:	b570      	push	{r4, r5, r6, lr}
 800ff22:	2500      	movs	r5, #0
 800ff24:	4e0c      	ldr	r6, [pc, #48]	; (800ff58 <__libc_init_array+0x38>)
 800ff26:	4c0d      	ldr	r4, [pc, #52]	; (800ff5c <__libc_init_array+0x3c>)
 800ff28:	1ba4      	subs	r4, r4, r6
 800ff2a:	10a4      	asrs	r4, r4, #2
 800ff2c:	42a5      	cmp	r5, r4
 800ff2e:	d109      	bne.n	800ff44 <__libc_init_array+0x24>
 800ff30:	f004 fa72 	bl	8014418 <_init>
 800ff34:	2500      	movs	r5, #0
 800ff36:	4e0a      	ldr	r6, [pc, #40]	; (800ff60 <__libc_init_array+0x40>)
 800ff38:	4c0a      	ldr	r4, [pc, #40]	; (800ff64 <__libc_init_array+0x44>)
 800ff3a:	1ba4      	subs	r4, r4, r6
 800ff3c:	10a4      	asrs	r4, r4, #2
 800ff3e:	42a5      	cmp	r5, r4
 800ff40:	d105      	bne.n	800ff4e <__libc_init_array+0x2e>
 800ff42:	bd70      	pop	{r4, r5, r6, pc}
 800ff44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ff48:	4798      	blx	r3
 800ff4a:	3501      	adds	r5, #1
 800ff4c:	e7ee      	b.n	800ff2c <__libc_init_array+0xc>
 800ff4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ff52:	4798      	blx	r3
 800ff54:	3501      	adds	r5, #1
 800ff56:	e7f2      	b.n	800ff3e <__libc_init_array+0x1e>
 800ff58:	080167c8 	.word	0x080167c8
 800ff5c:	080167c8 	.word	0x080167c8
 800ff60:	080167c8 	.word	0x080167c8
 800ff64:	080167cc 	.word	0x080167cc

0800ff68 <memcmp>:
 800ff68:	b530      	push	{r4, r5, lr}
 800ff6a:	2400      	movs	r4, #0
 800ff6c:	42a2      	cmp	r2, r4
 800ff6e:	d101      	bne.n	800ff74 <memcmp+0xc>
 800ff70:	2000      	movs	r0, #0
 800ff72:	e007      	b.n	800ff84 <memcmp+0x1c>
 800ff74:	5d03      	ldrb	r3, [r0, r4]
 800ff76:	3401      	adds	r4, #1
 800ff78:	190d      	adds	r5, r1, r4
 800ff7a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800ff7e:	42ab      	cmp	r3, r5
 800ff80:	d0f4      	beq.n	800ff6c <memcmp+0x4>
 800ff82:	1b58      	subs	r0, r3, r5
 800ff84:	bd30      	pop	{r4, r5, pc}

0800ff86 <memcpy>:
 800ff86:	b510      	push	{r4, lr}
 800ff88:	1e43      	subs	r3, r0, #1
 800ff8a:	440a      	add	r2, r1
 800ff8c:	4291      	cmp	r1, r2
 800ff8e:	d100      	bne.n	800ff92 <memcpy+0xc>
 800ff90:	bd10      	pop	{r4, pc}
 800ff92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff96:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ff9a:	e7f7      	b.n	800ff8c <memcpy+0x6>

0800ff9c <memset>:
 800ff9c:	4603      	mov	r3, r0
 800ff9e:	4402      	add	r2, r0
 800ffa0:	4293      	cmp	r3, r2
 800ffa2:	d100      	bne.n	800ffa6 <memset+0xa>
 800ffa4:	4770      	bx	lr
 800ffa6:	f803 1b01 	strb.w	r1, [r3], #1
 800ffaa:	e7f9      	b.n	800ffa0 <memset+0x4>

0800ffac <__cvt>:
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffb2:	461e      	mov	r6, r3
 800ffb4:	bfbb      	ittet	lt
 800ffb6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800ffba:	461e      	movlt	r6, r3
 800ffbc:	2300      	movge	r3, #0
 800ffbe:	232d      	movlt	r3, #45	; 0x2d
 800ffc0:	b088      	sub	sp, #32
 800ffc2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800ffc4:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800ffc8:	f027 0720 	bic.w	r7, r7, #32
 800ffcc:	2f46      	cmp	r7, #70	; 0x46
 800ffce:	4614      	mov	r4, r2
 800ffd0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800ffd2:	700b      	strb	r3, [r1, #0]
 800ffd4:	d004      	beq.n	800ffe0 <__cvt+0x34>
 800ffd6:	2f45      	cmp	r7, #69	; 0x45
 800ffd8:	d100      	bne.n	800ffdc <__cvt+0x30>
 800ffda:	3501      	adds	r5, #1
 800ffdc:	2302      	movs	r3, #2
 800ffde:	e000      	b.n	800ffe2 <__cvt+0x36>
 800ffe0:	2303      	movs	r3, #3
 800ffe2:	aa07      	add	r2, sp, #28
 800ffe4:	9204      	str	r2, [sp, #16]
 800ffe6:	aa06      	add	r2, sp, #24
 800ffe8:	e9cd a202 	strd	sl, r2, [sp, #8]
 800ffec:	e9cd 3500 	strd	r3, r5, [sp]
 800fff0:	4622      	mov	r2, r4
 800fff2:	4633      	mov	r3, r6
 800fff4:	f001 fecc 	bl	8011d90 <_dtoa_r>
 800fff8:	2f47      	cmp	r7, #71	; 0x47
 800fffa:	4680      	mov	r8, r0
 800fffc:	d102      	bne.n	8010004 <__cvt+0x58>
 800fffe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010000:	07db      	lsls	r3, r3, #31
 8010002:	d526      	bpl.n	8010052 <__cvt+0xa6>
 8010004:	2f46      	cmp	r7, #70	; 0x46
 8010006:	eb08 0905 	add.w	r9, r8, r5
 801000a:	d111      	bne.n	8010030 <__cvt+0x84>
 801000c:	f898 3000 	ldrb.w	r3, [r8]
 8010010:	2b30      	cmp	r3, #48	; 0x30
 8010012:	d10a      	bne.n	801002a <__cvt+0x7e>
 8010014:	2200      	movs	r2, #0
 8010016:	2300      	movs	r3, #0
 8010018:	4620      	mov	r0, r4
 801001a:	4631      	mov	r1, r6
 801001c:	f7f0 fd30 	bl	8000a80 <__aeabi_dcmpeq>
 8010020:	b918      	cbnz	r0, 801002a <__cvt+0x7e>
 8010022:	f1c5 0501 	rsb	r5, r5, #1
 8010026:	f8ca 5000 	str.w	r5, [sl]
 801002a:	f8da 3000 	ldr.w	r3, [sl]
 801002e:	4499      	add	r9, r3
 8010030:	2200      	movs	r2, #0
 8010032:	2300      	movs	r3, #0
 8010034:	4620      	mov	r0, r4
 8010036:	4631      	mov	r1, r6
 8010038:	f7f0 fd22 	bl	8000a80 <__aeabi_dcmpeq>
 801003c:	b938      	cbnz	r0, 801004e <__cvt+0xa2>
 801003e:	2230      	movs	r2, #48	; 0x30
 8010040:	9b07      	ldr	r3, [sp, #28]
 8010042:	454b      	cmp	r3, r9
 8010044:	d205      	bcs.n	8010052 <__cvt+0xa6>
 8010046:	1c59      	adds	r1, r3, #1
 8010048:	9107      	str	r1, [sp, #28]
 801004a:	701a      	strb	r2, [r3, #0]
 801004c:	e7f8      	b.n	8010040 <__cvt+0x94>
 801004e:	f8cd 901c 	str.w	r9, [sp, #28]
 8010052:	4640      	mov	r0, r8
 8010054:	9b07      	ldr	r3, [sp, #28]
 8010056:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010058:	eba3 0308 	sub.w	r3, r3, r8
 801005c:	6013      	str	r3, [r2, #0]
 801005e:	b008      	add	sp, #32
 8010060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010064 <__exponent>:
 8010064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010066:	2900      	cmp	r1, #0
 8010068:	bfb4      	ite	lt
 801006a:	232d      	movlt	r3, #45	; 0x2d
 801006c:	232b      	movge	r3, #43	; 0x2b
 801006e:	4604      	mov	r4, r0
 8010070:	bfb8      	it	lt
 8010072:	4249      	neglt	r1, r1
 8010074:	2909      	cmp	r1, #9
 8010076:	f804 2b02 	strb.w	r2, [r4], #2
 801007a:	7043      	strb	r3, [r0, #1]
 801007c:	dd21      	ble.n	80100c2 <__exponent+0x5e>
 801007e:	f10d 0307 	add.w	r3, sp, #7
 8010082:	461f      	mov	r7, r3
 8010084:	260a      	movs	r6, #10
 8010086:	fb91 f5f6 	sdiv	r5, r1, r6
 801008a:	fb06 1115 	mls	r1, r6, r5, r1
 801008e:	2d09      	cmp	r5, #9
 8010090:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8010094:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010098:	f103 32ff 	add.w	r2, r3, #4294967295
 801009c:	4629      	mov	r1, r5
 801009e:	dc09      	bgt.n	80100b4 <__exponent+0x50>
 80100a0:	3130      	adds	r1, #48	; 0x30
 80100a2:	3b02      	subs	r3, #2
 80100a4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80100a8:	42bb      	cmp	r3, r7
 80100aa:	4622      	mov	r2, r4
 80100ac:	d304      	bcc.n	80100b8 <__exponent+0x54>
 80100ae:	1a10      	subs	r0, r2, r0
 80100b0:	b003      	add	sp, #12
 80100b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100b4:	4613      	mov	r3, r2
 80100b6:	e7e6      	b.n	8010086 <__exponent+0x22>
 80100b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80100bc:	f804 2b01 	strb.w	r2, [r4], #1
 80100c0:	e7f2      	b.n	80100a8 <__exponent+0x44>
 80100c2:	2330      	movs	r3, #48	; 0x30
 80100c4:	4419      	add	r1, r3
 80100c6:	7083      	strb	r3, [r0, #2]
 80100c8:	1d02      	adds	r2, r0, #4
 80100ca:	70c1      	strb	r1, [r0, #3]
 80100cc:	e7ef      	b.n	80100ae <__exponent+0x4a>
	...

080100d0 <_printf_float>:
 80100d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100d4:	b091      	sub	sp, #68	; 0x44
 80100d6:	460c      	mov	r4, r1
 80100d8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80100da:	4693      	mov	fp, r2
 80100dc:	461e      	mov	r6, r3
 80100de:	4605      	mov	r5, r0
 80100e0:	f003 f8b2 	bl	8013248 <_localeconv_r>
 80100e4:	6803      	ldr	r3, [r0, #0]
 80100e6:	4618      	mov	r0, r3
 80100e8:	9309      	str	r3, [sp, #36]	; 0x24
 80100ea:	f7f0 f89d 	bl	8000228 <strlen>
 80100ee:	2300      	movs	r3, #0
 80100f0:	930e      	str	r3, [sp, #56]	; 0x38
 80100f2:	683b      	ldr	r3, [r7, #0]
 80100f4:	900a      	str	r0, [sp, #40]	; 0x28
 80100f6:	3307      	adds	r3, #7
 80100f8:	f023 0307 	bic.w	r3, r3, #7
 80100fc:	f103 0208 	add.w	r2, r3, #8
 8010100:	f894 8018 	ldrb.w	r8, [r4, #24]
 8010104:	f8d4 a000 	ldr.w	sl, [r4]
 8010108:	603a      	str	r2, [r7, #0]
 801010a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801010e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010112:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8010116:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801011a:	930b      	str	r3, [sp, #44]	; 0x2c
 801011c:	f04f 32ff 	mov.w	r2, #4294967295
 8010120:	4ba6      	ldr	r3, [pc, #664]	; (80103bc <_printf_float+0x2ec>)
 8010122:	4638      	mov	r0, r7
 8010124:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010126:	f7f0 fcdd 	bl	8000ae4 <__aeabi_dcmpun>
 801012a:	bb68      	cbnz	r0, 8010188 <_printf_float+0xb8>
 801012c:	f04f 32ff 	mov.w	r2, #4294967295
 8010130:	4ba2      	ldr	r3, [pc, #648]	; (80103bc <_printf_float+0x2ec>)
 8010132:	4638      	mov	r0, r7
 8010134:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010136:	f7f0 fcb7 	bl	8000aa8 <__aeabi_dcmple>
 801013a:	bb28      	cbnz	r0, 8010188 <_printf_float+0xb8>
 801013c:	2200      	movs	r2, #0
 801013e:	2300      	movs	r3, #0
 8010140:	4638      	mov	r0, r7
 8010142:	4649      	mov	r1, r9
 8010144:	f7f0 fca6 	bl	8000a94 <__aeabi_dcmplt>
 8010148:	b110      	cbz	r0, 8010150 <_printf_float+0x80>
 801014a:	232d      	movs	r3, #45	; 0x2d
 801014c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010150:	4f9b      	ldr	r7, [pc, #620]	; (80103c0 <_printf_float+0x2f0>)
 8010152:	4b9c      	ldr	r3, [pc, #624]	; (80103c4 <_printf_float+0x2f4>)
 8010154:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010158:	bf98      	it	ls
 801015a:	461f      	movls	r7, r3
 801015c:	2303      	movs	r3, #3
 801015e:	f04f 0900 	mov.w	r9, #0
 8010162:	6123      	str	r3, [r4, #16]
 8010164:	f02a 0304 	bic.w	r3, sl, #4
 8010168:	6023      	str	r3, [r4, #0]
 801016a:	9600      	str	r6, [sp, #0]
 801016c:	465b      	mov	r3, fp
 801016e:	aa0f      	add	r2, sp, #60	; 0x3c
 8010170:	4621      	mov	r1, r4
 8010172:	4628      	mov	r0, r5
 8010174:	f000 f9e2 	bl	801053c <_printf_common>
 8010178:	3001      	adds	r0, #1
 801017a:	f040 8090 	bne.w	801029e <_printf_float+0x1ce>
 801017e:	f04f 30ff 	mov.w	r0, #4294967295
 8010182:	b011      	add	sp, #68	; 0x44
 8010184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010188:	463a      	mov	r2, r7
 801018a:	464b      	mov	r3, r9
 801018c:	4638      	mov	r0, r7
 801018e:	4649      	mov	r1, r9
 8010190:	f7f0 fca8 	bl	8000ae4 <__aeabi_dcmpun>
 8010194:	b110      	cbz	r0, 801019c <_printf_float+0xcc>
 8010196:	4f8c      	ldr	r7, [pc, #560]	; (80103c8 <_printf_float+0x2f8>)
 8010198:	4b8c      	ldr	r3, [pc, #560]	; (80103cc <_printf_float+0x2fc>)
 801019a:	e7db      	b.n	8010154 <_printf_float+0x84>
 801019c:	6863      	ldr	r3, [r4, #4]
 801019e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80101a2:	1c59      	adds	r1, r3, #1
 80101a4:	a80d      	add	r0, sp, #52	; 0x34
 80101a6:	a90e      	add	r1, sp, #56	; 0x38
 80101a8:	d140      	bne.n	801022c <_printf_float+0x15c>
 80101aa:	2306      	movs	r3, #6
 80101ac:	6063      	str	r3, [r4, #4]
 80101ae:	f04f 0c00 	mov.w	ip, #0
 80101b2:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80101b6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80101ba:	6863      	ldr	r3, [r4, #4]
 80101bc:	6022      	str	r2, [r4, #0]
 80101be:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80101c2:	9300      	str	r3, [sp, #0]
 80101c4:	463a      	mov	r2, r7
 80101c6:	464b      	mov	r3, r9
 80101c8:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80101cc:	4628      	mov	r0, r5
 80101ce:	f7ff feed 	bl	800ffac <__cvt>
 80101d2:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80101d6:	2b47      	cmp	r3, #71	; 0x47
 80101d8:	4607      	mov	r7, r0
 80101da:	d109      	bne.n	80101f0 <_printf_float+0x120>
 80101dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80101de:	1cd8      	adds	r0, r3, #3
 80101e0:	db02      	blt.n	80101e8 <_printf_float+0x118>
 80101e2:	6862      	ldr	r2, [r4, #4]
 80101e4:	4293      	cmp	r3, r2
 80101e6:	dd47      	ble.n	8010278 <_printf_float+0x1a8>
 80101e8:	f1a8 0802 	sub.w	r8, r8, #2
 80101ec:	fa5f f888 	uxtb.w	r8, r8
 80101f0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80101f4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80101f6:	d824      	bhi.n	8010242 <_printf_float+0x172>
 80101f8:	3901      	subs	r1, #1
 80101fa:	4642      	mov	r2, r8
 80101fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010200:	910d      	str	r1, [sp, #52]	; 0x34
 8010202:	f7ff ff2f 	bl	8010064 <__exponent>
 8010206:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010208:	4681      	mov	r9, r0
 801020a:	1813      	adds	r3, r2, r0
 801020c:	2a01      	cmp	r2, #1
 801020e:	6123      	str	r3, [r4, #16]
 8010210:	dc02      	bgt.n	8010218 <_printf_float+0x148>
 8010212:	6822      	ldr	r2, [r4, #0]
 8010214:	07d1      	lsls	r1, r2, #31
 8010216:	d501      	bpl.n	801021c <_printf_float+0x14c>
 8010218:	3301      	adds	r3, #1
 801021a:	6123      	str	r3, [r4, #16]
 801021c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8010220:	2b00      	cmp	r3, #0
 8010222:	d0a2      	beq.n	801016a <_printf_float+0x9a>
 8010224:	232d      	movs	r3, #45	; 0x2d
 8010226:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801022a:	e79e      	b.n	801016a <_printf_float+0x9a>
 801022c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8010230:	f000 816e 	beq.w	8010510 <_printf_float+0x440>
 8010234:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010238:	d1b9      	bne.n	80101ae <_printf_float+0xde>
 801023a:	2b00      	cmp	r3, #0
 801023c:	d1b7      	bne.n	80101ae <_printf_float+0xde>
 801023e:	2301      	movs	r3, #1
 8010240:	e7b4      	b.n	80101ac <_printf_float+0xdc>
 8010242:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8010246:	d119      	bne.n	801027c <_printf_float+0x1ac>
 8010248:	2900      	cmp	r1, #0
 801024a:	6863      	ldr	r3, [r4, #4]
 801024c:	dd0c      	ble.n	8010268 <_printf_float+0x198>
 801024e:	6121      	str	r1, [r4, #16]
 8010250:	b913      	cbnz	r3, 8010258 <_printf_float+0x188>
 8010252:	6822      	ldr	r2, [r4, #0]
 8010254:	07d2      	lsls	r2, r2, #31
 8010256:	d502      	bpl.n	801025e <_printf_float+0x18e>
 8010258:	3301      	adds	r3, #1
 801025a:	440b      	add	r3, r1
 801025c:	6123      	str	r3, [r4, #16]
 801025e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010260:	f04f 0900 	mov.w	r9, #0
 8010264:	65a3      	str	r3, [r4, #88]	; 0x58
 8010266:	e7d9      	b.n	801021c <_printf_float+0x14c>
 8010268:	b913      	cbnz	r3, 8010270 <_printf_float+0x1a0>
 801026a:	6822      	ldr	r2, [r4, #0]
 801026c:	07d0      	lsls	r0, r2, #31
 801026e:	d501      	bpl.n	8010274 <_printf_float+0x1a4>
 8010270:	3302      	adds	r3, #2
 8010272:	e7f3      	b.n	801025c <_printf_float+0x18c>
 8010274:	2301      	movs	r3, #1
 8010276:	e7f1      	b.n	801025c <_printf_float+0x18c>
 8010278:	f04f 0867 	mov.w	r8, #103	; 0x67
 801027c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8010280:	4293      	cmp	r3, r2
 8010282:	db05      	blt.n	8010290 <_printf_float+0x1c0>
 8010284:	6822      	ldr	r2, [r4, #0]
 8010286:	6123      	str	r3, [r4, #16]
 8010288:	07d1      	lsls	r1, r2, #31
 801028a:	d5e8      	bpl.n	801025e <_printf_float+0x18e>
 801028c:	3301      	adds	r3, #1
 801028e:	e7e5      	b.n	801025c <_printf_float+0x18c>
 8010290:	2b00      	cmp	r3, #0
 8010292:	bfcc      	ite	gt
 8010294:	2301      	movgt	r3, #1
 8010296:	f1c3 0302 	rsble	r3, r3, #2
 801029a:	4413      	add	r3, r2
 801029c:	e7de      	b.n	801025c <_printf_float+0x18c>
 801029e:	6823      	ldr	r3, [r4, #0]
 80102a0:	055a      	lsls	r2, r3, #21
 80102a2:	d407      	bmi.n	80102b4 <_printf_float+0x1e4>
 80102a4:	6923      	ldr	r3, [r4, #16]
 80102a6:	463a      	mov	r2, r7
 80102a8:	4659      	mov	r1, fp
 80102aa:	4628      	mov	r0, r5
 80102ac:	47b0      	blx	r6
 80102ae:	3001      	adds	r0, #1
 80102b0:	d129      	bne.n	8010306 <_printf_float+0x236>
 80102b2:	e764      	b.n	801017e <_printf_float+0xae>
 80102b4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80102b8:	f240 80d7 	bls.w	801046a <_printf_float+0x39a>
 80102bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80102c0:	2200      	movs	r2, #0
 80102c2:	2300      	movs	r3, #0
 80102c4:	f7f0 fbdc 	bl	8000a80 <__aeabi_dcmpeq>
 80102c8:	b388      	cbz	r0, 801032e <_printf_float+0x25e>
 80102ca:	2301      	movs	r3, #1
 80102cc:	4a40      	ldr	r2, [pc, #256]	; (80103d0 <_printf_float+0x300>)
 80102ce:	4659      	mov	r1, fp
 80102d0:	4628      	mov	r0, r5
 80102d2:	47b0      	blx	r6
 80102d4:	3001      	adds	r0, #1
 80102d6:	f43f af52 	beq.w	801017e <_printf_float+0xae>
 80102da:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80102de:	429a      	cmp	r2, r3
 80102e0:	db02      	blt.n	80102e8 <_printf_float+0x218>
 80102e2:	6823      	ldr	r3, [r4, #0]
 80102e4:	07d8      	lsls	r0, r3, #31
 80102e6:	d50e      	bpl.n	8010306 <_printf_float+0x236>
 80102e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80102ec:	4659      	mov	r1, fp
 80102ee:	4628      	mov	r0, r5
 80102f0:	47b0      	blx	r6
 80102f2:	3001      	adds	r0, #1
 80102f4:	f43f af43 	beq.w	801017e <_printf_float+0xae>
 80102f8:	2700      	movs	r7, #0
 80102fa:	f104 081a 	add.w	r8, r4, #26
 80102fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010300:	3b01      	subs	r3, #1
 8010302:	42bb      	cmp	r3, r7
 8010304:	dc09      	bgt.n	801031a <_printf_float+0x24a>
 8010306:	6823      	ldr	r3, [r4, #0]
 8010308:	079f      	lsls	r7, r3, #30
 801030a:	f100 80fd 	bmi.w	8010508 <_printf_float+0x438>
 801030e:	68e0      	ldr	r0, [r4, #12]
 8010310:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010312:	4298      	cmp	r0, r3
 8010314:	bfb8      	it	lt
 8010316:	4618      	movlt	r0, r3
 8010318:	e733      	b.n	8010182 <_printf_float+0xb2>
 801031a:	2301      	movs	r3, #1
 801031c:	4642      	mov	r2, r8
 801031e:	4659      	mov	r1, fp
 8010320:	4628      	mov	r0, r5
 8010322:	47b0      	blx	r6
 8010324:	3001      	adds	r0, #1
 8010326:	f43f af2a 	beq.w	801017e <_printf_float+0xae>
 801032a:	3701      	adds	r7, #1
 801032c:	e7e7      	b.n	80102fe <_printf_float+0x22e>
 801032e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010330:	2b00      	cmp	r3, #0
 8010332:	dc2b      	bgt.n	801038c <_printf_float+0x2bc>
 8010334:	2301      	movs	r3, #1
 8010336:	4a26      	ldr	r2, [pc, #152]	; (80103d0 <_printf_float+0x300>)
 8010338:	4659      	mov	r1, fp
 801033a:	4628      	mov	r0, r5
 801033c:	47b0      	blx	r6
 801033e:	3001      	adds	r0, #1
 8010340:	f43f af1d 	beq.w	801017e <_printf_float+0xae>
 8010344:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010346:	b923      	cbnz	r3, 8010352 <_printf_float+0x282>
 8010348:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801034a:	b913      	cbnz	r3, 8010352 <_printf_float+0x282>
 801034c:	6823      	ldr	r3, [r4, #0]
 801034e:	07d9      	lsls	r1, r3, #31
 8010350:	d5d9      	bpl.n	8010306 <_printf_float+0x236>
 8010352:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010356:	4659      	mov	r1, fp
 8010358:	4628      	mov	r0, r5
 801035a:	47b0      	blx	r6
 801035c:	3001      	adds	r0, #1
 801035e:	f43f af0e 	beq.w	801017e <_printf_float+0xae>
 8010362:	f04f 0800 	mov.w	r8, #0
 8010366:	f104 091a 	add.w	r9, r4, #26
 801036a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801036c:	425b      	negs	r3, r3
 801036e:	4543      	cmp	r3, r8
 8010370:	dc01      	bgt.n	8010376 <_printf_float+0x2a6>
 8010372:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010374:	e797      	b.n	80102a6 <_printf_float+0x1d6>
 8010376:	2301      	movs	r3, #1
 8010378:	464a      	mov	r2, r9
 801037a:	4659      	mov	r1, fp
 801037c:	4628      	mov	r0, r5
 801037e:	47b0      	blx	r6
 8010380:	3001      	adds	r0, #1
 8010382:	f43f aefc 	beq.w	801017e <_printf_float+0xae>
 8010386:	f108 0801 	add.w	r8, r8, #1
 801038a:	e7ee      	b.n	801036a <_printf_float+0x29a>
 801038c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801038e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010390:	429a      	cmp	r2, r3
 8010392:	bfa8      	it	ge
 8010394:	461a      	movge	r2, r3
 8010396:	2a00      	cmp	r2, #0
 8010398:	4690      	mov	r8, r2
 801039a:	dd07      	ble.n	80103ac <_printf_float+0x2dc>
 801039c:	4613      	mov	r3, r2
 801039e:	4659      	mov	r1, fp
 80103a0:	463a      	mov	r2, r7
 80103a2:	4628      	mov	r0, r5
 80103a4:	47b0      	blx	r6
 80103a6:	3001      	adds	r0, #1
 80103a8:	f43f aee9 	beq.w	801017e <_printf_float+0xae>
 80103ac:	f104 031a 	add.w	r3, r4, #26
 80103b0:	f04f 0a00 	mov.w	sl, #0
 80103b4:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80103b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80103ba:	e015      	b.n	80103e8 <_printf_float+0x318>
 80103bc:	7fefffff 	.word	0x7fefffff
 80103c0:	080164a8 	.word	0x080164a8
 80103c4:	080164a4 	.word	0x080164a4
 80103c8:	080164b0 	.word	0x080164b0
 80103cc:	080164ac 	.word	0x080164ac
 80103d0:	080164b4 	.word	0x080164b4
 80103d4:	2301      	movs	r3, #1
 80103d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80103d8:	4659      	mov	r1, fp
 80103da:	4628      	mov	r0, r5
 80103dc:	47b0      	blx	r6
 80103de:	3001      	adds	r0, #1
 80103e0:	f43f aecd 	beq.w	801017e <_printf_float+0xae>
 80103e4:	f10a 0a01 	add.w	sl, sl, #1
 80103e8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80103ec:	eba9 0308 	sub.w	r3, r9, r8
 80103f0:	4553      	cmp	r3, sl
 80103f2:	dcef      	bgt.n	80103d4 <_printf_float+0x304>
 80103f4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80103f8:	429a      	cmp	r2, r3
 80103fa:	444f      	add	r7, r9
 80103fc:	db14      	blt.n	8010428 <_printf_float+0x358>
 80103fe:	6823      	ldr	r3, [r4, #0]
 8010400:	07da      	lsls	r2, r3, #31
 8010402:	d411      	bmi.n	8010428 <_printf_float+0x358>
 8010404:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010406:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010408:	eba3 0209 	sub.w	r2, r3, r9
 801040c:	eba3 0901 	sub.w	r9, r3, r1
 8010410:	4591      	cmp	r9, r2
 8010412:	bfa8      	it	ge
 8010414:	4691      	movge	r9, r2
 8010416:	f1b9 0f00 	cmp.w	r9, #0
 801041a:	dc0d      	bgt.n	8010438 <_printf_float+0x368>
 801041c:	2700      	movs	r7, #0
 801041e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010422:	f104 081a 	add.w	r8, r4, #26
 8010426:	e018      	b.n	801045a <_printf_float+0x38a>
 8010428:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801042c:	4659      	mov	r1, fp
 801042e:	4628      	mov	r0, r5
 8010430:	47b0      	blx	r6
 8010432:	3001      	adds	r0, #1
 8010434:	d1e6      	bne.n	8010404 <_printf_float+0x334>
 8010436:	e6a2      	b.n	801017e <_printf_float+0xae>
 8010438:	464b      	mov	r3, r9
 801043a:	463a      	mov	r2, r7
 801043c:	4659      	mov	r1, fp
 801043e:	4628      	mov	r0, r5
 8010440:	47b0      	blx	r6
 8010442:	3001      	adds	r0, #1
 8010444:	d1ea      	bne.n	801041c <_printf_float+0x34c>
 8010446:	e69a      	b.n	801017e <_printf_float+0xae>
 8010448:	2301      	movs	r3, #1
 801044a:	4642      	mov	r2, r8
 801044c:	4659      	mov	r1, fp
 801044e:	4628      	mov	r0, r5
 8010450:	47b0      	blx	r6
 8010452:	3001      	adds	r0, #1
 8010454:	f43f ae93 	beq.w	801017e <_printf_float+0xae>
 8010458:	3701      	adds	r7, #1
 801045a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801045e:	1a9b      	subs	r3, r3, r2
 8010460:	eba3 0309 	sub.w	r3, r3, r9
 8010464:	42bb      	cmp	r3, r7
 8010466:	dcef      	bgt.n	8010448 <_printf_float+0x378>
 8010468:	e74d      	b.n	8010306 <_printf_float+0x236>
 801046a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801046c:	2a01      	cmp	r2, #1
 801046e:	dc01      	bgt.n	8010474 <_printf_float+0x3a4>
 8010470:	07db      	lsls	r3, r3, #31
 8010472:	d538      	bpl.n	80104e6 <_printf_float+0x416>
 8010474:	2301      	movs	r3, #1
 8010476:	463a      	mov	r2, r7
 8010478:	4659      	mov	r1, fp
 801047a:	4628      	mov	r0, r5
 801047c:	47b0      	blx	r6
 801047e:	3001      	adds	r0, #1
 8010480:	f43f ae7d 	beq.w	801017e <_printf_float+0xae>
 8010484:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010488:	4659      	mov	r1, fp
 801048a:	4628      	mov	r0, r5
 801048c:	47b0      	blx	r6
 801048e:	3001      	adds	r0, #1
 8010490:	f107 0701 	add.w	r7, r7, #1
 8010494:	f43f ae73 	beq.w	801017e <_printf_float+0xae>
 8010498:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801049c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801049e:	2200      	movs	r2, #0
 80104a0:	f103 38ff 	add.w	r8, r3, #4294967295
 80104a4:	2300      	movs	r3, #0
 80104a6:	f7f0 faeb 	bl	8000a80 <__aeabi_dcmpeq>
 80104aa:	b9c0      	cbnz	r0, 80104de <_printf_float+0x40e>
 80104ac:	4643      	mov	r3, r8
 80104ae:	463a      	mov	r2, r7
 80104b0:	4659      	mov	r1, fp
 80104b2:	4628      	mov	r0, r5
 80104b4:	47b0      	blx	r6
 80104b6:	3001      	adds	r0, #1
 80104b8:	d10d      	bne.n	80104d6 <_printf_float+0x406>
 80104ba:	e660      	b.n	801017e <_printf_float+0xae>
 80104bc:	2301      	movs	r3, #1
 80104be:	4642      	mov	r2, r8
 80104c0:	4659      	mov	r1, fp
 80104c2:	4628      	mov	r0, r5
 80104c4:	47b0      	blx	r6
 80104c6:	3001      	adds	r0, #1
 80104c8:	f43f ae59 	beq.w	801017e <_printf_float+0xae>
 80104cc:	3701      	adds	r7, #1
 80104ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80104d0:	3b01      	subs	r3, #1
 80104d2:	42bb      	cmp	r3, r7
 80104d4:	dcf2      	bgt.n	80104bc <_printf_float+0x3ec>
 80104d6:	464b      	mov	r3, r9
 80104d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80104dc:	e6e4      	b.n	80102a8 <_printf_float+0x1d8>
 80104de:	2700      	movs	r7, #0
 80104e0:	f104 081a 	add.w	r8, r4, #26
 80104e4:	e7f3      	b.n	80104ce <_printf_float+0x3fe>
 80104e6:	2301      	movs	r3, #1
 80104e8:	e7e1      	b.n	80104ae <_printf_float+0x3de>
 80104ea:	2301      	movs	r3, #1
 80104ec:	4642      	mov	r2, r8
 80104ee:	4659      	mov	r1, fp
 80104f0:	4628      	mov	r0, r5
 80104f2:	47b0      	blx	r6
 80104f4:	3001      	adds	r0, #1
 80104f6:	f43f ae42 	beq.w	801017e <_printf_float+0xae>
 80104fa:	3701      	adds	r7, #1
 80104fc:	68e3      	ldr	r3, [r4, #12]
 80104fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010500:	1a9b      	subs	r3, r3, r2
 8010502:	42bb      	cmp	r3, r7
 8010504:	dcf1      	bgt.n	80104ea <_printf_float+0x41a>
 8010506:	e702      	b.n	801030e <_printf_float+0x23e>
 8010508:	2700      	movs	r7, #0
 801050a:	f104 0819 	add.w	r8, r4, #25
 801050e:	e7f5      	b.n	80104fc <_printf_float+0x42c>
 8010510:	2b00      	cmp	r3, #0
 8010512:	f43f ae94 	beq.w	801023e <_printf_float+0x16e>
 8010516:	f04f 0c00 	mov.w	ip, #0
 801051a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 801051e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8010522:	6022      	str	r2, [r4, #0]
 8010524:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8010528:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801052c:	9300      	str	r3, [sp, #0]
 801052e:	463a      	mov	r2, r7
 8010530:	464b      	mov	r3, r9
 8010532:	4628      	mov	r0, r5
 8010534:	f7ff fd3a 	bl	800ffac <__cvt>
 8010538:	4607      	mov	r7, r0
 801053a:	e64f      	b.n	80101dc <_printf_float+0x10c>

0801053c <_printf_common>:
 801053c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010540:	4691      	mov	r9, r2
 8010542:	461f      	mov	r7, r3
 8010544:	688a      	ldr	r2, [r1, #8]
 8010546:	690b      	ldr	r3, [r1, #16]
 8010548:	4606      	mov	r6, r0
 801054a:	4293      	cmp	r3, r2
 801054c:	bfb8      	it	lt
 801054e:	4613      	movlt	r3, r2
 8010550:	f8c9 3000 	str.w	r3, [r9]
 8010554:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010558:	460c      	mov	r4, r1
 801055a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801055e:	b112      	cbz	r2, 8010566 <_printf_common+0x2a>
 8010560:	3301      	adds	r3, #1
 8010562:	f8c9 3000 	str.w	r3, [r9]
 8010566:	6823      	ldr	r3, [r4, #0]
 8010568:	0699      	lsls	r1, r3, #26
 801056a:	bf42      	ittt	mi
 801056c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010570:	3302      	addmi	r3, #2
 8010572:	f8c9 3000 	strmi.w	r3, [r9]
 8010576:	6825      	ldr	r5, [r4, #0]
 8010578:	f015 0506 	ands.w	r5, r5, #6
 801057c:	d107      	bne.n	801058e <_printf_common+0x52>
 801057e:	f104 0a19 	add.w	sl, r4, #25
 8010582:	68e3      	ldr	r3, [r4, #12]
 8010584:	f8d9 2000 	ldr.w	r2, [r9]
 8010588:	1a9b      	subs	r3, r3, r2
 801058a:	42ab      	cmp	r3, r5
 801058c:	dc29      	bgt.n	80105e2 <_printf_common+0xa6>
 801058e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010592:	6822      	ldr	r2, [r4, #0]
 8010594:	3300      	adds	r3, #0
 8010596:	bf18      	it	ne
 8010598:	2301      	movne	r3, #1
 801059a:	0692      	lsls	r2, r2, #26
 801059c:	d42e      	bmi.n	80105fc <_printf_common+0xc0>
 801059e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80105a2:	4639      	mov	r1, r7
 80105a4:	4630      	mov	r0, r6
 80105a6:	47c0      	blx	r8
 80105a8:	3001      	adds	r0, #1
 80105aa:	d021      	beq.n	80105f0 <_printf_common+0xb4>
 80105ac:	6823      	ldr	r3, [r4, #0]
 80105ae:	68e5      	ldr	r5, [r4, #12]
 80105b0:	f003 0306 	and.w	r3, r3, #6
 80105b4:	2b04      	cmp	r3, #4
 80105b6:	bf18      	it	ne
 80105b8:	2500      	movne	r5, #0
 80105ba:	f8d9 2000 	ldr.w	r2, [r9]
 80105be:	f04f 0900 	mov.w	r9, #0
 80105c2:	bf08      	it	eq
 80105c4:	1aad      	subeq	r5, r5, r2
 80105c6:	68a3      	ldr	r3, [r4, #8]
 80105c8:	6922      	ldr	r2, [r4, #16]
 80105ca:	bf08      	it	eq
 80105cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80105d0:	4293      	cmp	r3, r2
 80105d2:	bfc4      	itt	gt
 80105d4:	1a9b      	subgt	r3, r3, r2
 80105d6:	18ed      	addgt	r5, r5, r3
 80105d8:	341a      	adds	r4, #26
 80105da:	454d      	cmp	r5, r9
 80105dc:	d11a      	bne.n	8010614 <_printf_common+0xd8>
 80105de:	2000      	movs	r0, #0
 80105e0:	e008      	b.n	80105f4 <_printf_common+0xb8>
 80105e2:	2301      	movs	r3, #1
 80105e4:	4652      	mov	r2, sl
 80105e6:	4639      	mov	r1, r7
 80105e8:	4630      	mov	r0, r6
 80105ea:	47c0      	blx	r8
 80105ec:	3001      	adds	r0, #1
 80105ee:	d103      	bne.n	80105f8 <_printf_common+0xbc>
 80105f0:	f04f 30ff 	mov.w	r0, #4294967295
 80105f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105f8:	3501      	adds	r5, #1
 80105fa:	e7c2      	b.n	8010582 <_printf_common+0x46>
 80105fc:	2030      	movs	r0, #48	; 0x30
 80105fe:	18e1      	adds	r1, r4, r3
 8010600:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010604:	1c5a      	adds	r2, r3, #1
 8010606:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801060a:	4422      	add	r2, r4
 801060c:	3302      	adds	r3, #2
 801060e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010612:	e7c4      	b.n	801059e <_printf_common+0x62>
 8010614:	2301      	movs	r3, #1
 8010616:	4622      	mov	r2, r4
 8010618:	4639      	mov	r1, r7
 801061a:	4630      	mov	r0, r6
 801061c:	47c0      	blx	r8
 801061e:	3001      	adds	r0, #1
 8010620:	d0e6      	beq.n	80105f0 <_printf_common+0xb4>
 8010622:	f109 0901 	add.w	r9, r9, #1
 8010626:	e7d8      	b.n	80105da <_printf_common+0x9e>

08010628 <_printf_i>:
 8010628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801062c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010630:	460c      	mov	r4, r1
 8010632:	7e09      	ldrb	r1, [r1, #24]
 8010634:	b085      	sub	sp, #20
 8010636:	296e      	cmp	r1, #110	; 0x6e
 8010638:	4617      	mov	r7, r2
 801063a:	4606      	mov	r6, r0
 801063c:	4698      	mov	r8, r3
 801063e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010640:	f000 80b3 	beq.w	80107aa <_printf_i+0x182>
 8010644:	d822      	bhi.n	801068c <_printf_i+0x64>
 8010646:	2963      	cmp	r1, #99	; 0x63
 8010648:	d036      	beq.n	80106b8 <_printf_i+0x90>
 801064a:	d80a      	bhi.n	8010662 <_printf_i+0x3a>
 801064c:	2900      	cmp	r1, #0
 801064e:	f000 80b9 	beq.w	80107c4 <_printf_i+0x19c>
 8010652:	2958      	cmp	r1, #88	; 0x58
 8010654:	f000 8083 	beq.w	801075e <_printf_i+0x136>
 8010658:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801065c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010660:	e032      	b.n	80106c8 <_printf_i+0xa0>
 8010662:	2964      	cmp	r1, #100	; 0x64
 8010664:	d001      	beq.n	801066a <_printf_i+0x42>
 8010666:	2969      	cmp	r1, #105	; 0x69
 8010668:	d1f6      	bne.n	8010658 <_printf_i+0x30>
 801066a:	6820      	ldr	r0, [r4, #0]
 801066c:	6813      	ldr	r3, [r2, #0]
 801066e:	0605      	lsls	r5, r0, #24
 8010670:	f103 0104 	add.w	r1, r3, #4
 8010674:	d52a      	bpl.n	80106cc <_printf_i+0xa4>
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	6011      	str	r1, [r2, #0]
 801067a:	2b00      	cmp	r3, #0
 801067c:	da03      	bge.n	8010686 <_printf_i+0x5e>
 801067e:	222d      	movs	r2, #45	; 0x2d
 8010680:	425b      	negs	r3, r3
 8010682:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010686:	486f      	ldr	r0, [pc, #444]	; (8010844 <_printf_i+0x21c>)
 8010688:	220a      	movs	r2, #10
 801068a:	e039      	b.n	8010700 <_printf_i+0xd8>
 801068c:	2973      	cmp	r1, #115	; 0x73
 801068e:	f000 809d 	beq.w	80107cc <_printf_i+0x1a4>
 8010692:	d808      	bhi.n	80106a6 <_printf_i+0x7e>
 8010694:	296f      	cmp	r1, #111	; 0x6f
 8010696:	d020      	beq.n	80106da <_printf_i+0xb2>
 8010698:	2970      	cmp	r1, #112	; 0x70
 801069a:	d1dd      	bne.n	8010658 <_printf_i+0x30>
 801069c:	6823      	ldr	r3, [r4, #0]
 801069e:	f043 0320 	orr.w	r3, r3, #32
 80106a2:	6023      	str	r3, [r4, #0]
 80106a4:	e003      	b.n	80106ae <_printf_i+0x86>
 80106a6:	2975      	cmp	r1, #117	; 0x75
 80106a8:	d017      	beq.n	80106da <_printf_i+0xb2>
 80106aa:	2978      	cmp	r1, #120	; 0x78
 80106ac:	d1d4      	bne.n	8010658 <_printf_i+0x30>
 80106ae:	2378      	movs	r3, #120	; 0x78
 80106b0:	4865      	ldr	r0, [pc, #404]	; (8010848 <_printf_i+0x220>)
 80106b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80106b6:	e055      	b.n	8010764 <_printf_i+0x13c>
 80106b8:	6813      	ldr	r3, [r2, #0]
 80106ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80106be:	1d19      	adds	r1, r3, #4
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	6011      	str	r1, [r2, #0]
 80106c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80106c8:	2301      	movs	r3, #1
 80106ca:	e08c      	b.n	80107e6 <_printf_i+0x1be>
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80106d2:	6011      	str	r1, [r2, #0]
 80106d4:	bf18      	it	ne
 80106d6:	b21b      	sxthne	r3, r3
 80106d8:	e7cf      	b.n	801067a <_printf_i+0x52>
 80106da:	6813      	ldr	r3, [r2, #0]
 80106dc:	6825      	ldr	r5, [r4, #0]
 80106de:	1d18      	adds	r0, r3, #4
 80106e0:	6010      	str	r0, [r2, #0]
 80106e2:	0628      	lsls	r0, r5, #24
 80106e4:	d501      	bpl.n	80106ea <_printf_i+0xc2>
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	e002      	b.n	80106f0 <_printf_i+0xc8>
 80106ea:	0668      	lsls	r0, r5, #25
 80106ec:	d5fb      	bpl.n	80106e6 <_printf_i+0xbe>
 80106ee:	881b      	ldrh	r3, [r3, #0]
 80106f0:	296f      	cmp	r1, #111	; 0x6f
 80106f2:	bf14      	ite	ne
 80106f4:	220a      	movne	r2, #10
 80106f6:	2208      	moveq	r2, #8
 80106f8:	4852      	ldr	r0, [pc, #328]	; (8010844 <_printf_i+0x21c>)
 80106fa:	2100      	movs	r1, #0
 80106fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010700:	6865      	ldr	r5, [r4, #4]
 8010702:	2d00      	cmp	r5, #0
 8010704:	60a5      	str	r5, [r4, #8]
 8010706:	f2c0 8095 	blt.w	8010834 <_printf_i+0x20c>
 801070a:	6821      	ldr	r1, [r4, #0]
 801070c:	f021 0104 	bic.w	r1, r1, #4
 8010710:	6021      	str	r1, [r4, #0]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d13d      	bne.n	8010792 <_printf_i+0x16a>
 8010716:	2d00      	cmp	r5, #0
 8010718:	f040 808e 	bne.w	8010838 <_printf_i+0x210>
 801071c:	4665      	mov	r5, ip
 801071e:	2a08      	cmp	r2, #8
 8010720:	d10b      	bne.n	801073a <_printf_i+0x112>
 8010722:	6823      	ldr	r3, [r4, #0]
 8010724:	07db      	lsls	r3, r3, #31
 8010726:	d508      	bpl.n	801073a <_printf_i+0x112>
 8010728:	6923      	ldr	r3, [r4, #16]
 801072a:	6862      	ldr	r2, [r4, #4]
 801072c:	429a      	cmp	r2, r3
 801072e:	bfde      	ittt	le
 8010730:	2330      	movle	r3, #48	; 0x30
 8010732:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010736:	f105 35ff 	addle.w	r5, r5, #4294967295
 801073a:	ebac 0305 	sub.w	r3, ip, r5
 801073e:	6123      	str	r3, [r4, #16]
 8010740:	f8cd 8000 	str.w	r8, [sp]
 8010744:	463b      	mov	r3, r7
 8010746:	aa03      	add	r2, sp, #12
 8010748:	4621      	mov	r1, r4
 801074a:	4630      	mov	r0, r6
 801074c:	f7ff fef6 	bl	801053c <_printf_common>
 8010750:	3001      	adds	r0, #1
 8010752:	d14d      	bne.n	80107f0 <_printf_i+0x1c8>
 8010754:	f04f 30ff 	mov.w	r0, #4294967295
 8010758:	b005      	add	sp, #20
 801075a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801075e:	4839      	ldr	r0, [pc, #228]	; (8010844 <_printf_i+0x21c>)
 8010760:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010764:	6813      	ldr	r3, [r2, #0]
 8010766:	6821      	ldr	r1, [r4, #0]
 8010768:	1d1d      	adds	r5, r3, #4
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	6015      	str	r5, [r2, #0]
 801076e:	060a      	lsls	r2, r1, #24
 8010770:	d50b      	bpl.n	801078a <_printf_i+0x162>
 8010772:	07ca      	lsls	r2, r1, #31
 8010774:	bf44      	itt	mi
 8010776:	f041 0120 	orrmi.w	r1, r1, #32
 801077a:	6021      	strmi	r1, [r4, #0]
 801077c:	b91b      	cbnz	r3, 8010786 <_printf_i+0x15e>
 801077e:	6822      	ldr	r2, [r4, #0]
 8010780:	f022 0220 	bic.w	r2, r2, #32
 8010784:	6022      	str	r2, [r4, #0]
 8010786:	2210      	movs	r2, #16
 8010788:	e7b7      	b.n	80106fa <_printf_i+0xd2>
 801078a:	064d      	lsls	r5, r1, #25
 801078c:	bf48      	it	mi
 801078e:	b29b      	uxthmi	r3, r3
 8010790:	e7ef      	b.n	8010772 <_printf_i+0x14a>
 8010792:	4665      	mov	r5, ip
 8010794:	fbb3 f1f2 	udiv	r1, r3, r2
 8010798:	fb02 3311 	mls	r3, r2, r1, r3
 801079c:	5cc3      	ldrb	r3, [r0, r3]
 801079e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80107a2:	460b      	mov	r3, r1
 80107a4:	2900      	cmp	r1, #0
 80107a6:	d1f5      	bne.n	8010794 <_printf_i+0x16c>
 80107a8:	e7b9      	b.n	801071e <_printf_i+0xf6>
 80107aa:	6813      	ldr	r3, [r2, #0]
 80107ac:	6825      	ldr	r5, [r4, #0]
 80107ae:	1d18      	adds	r0, r3, #4
 80107b0:	6961      	ldr	r1, [r4, #20]
 80107b2:	6010      	str	r0, [r2, #0]
 80107b4:	0628      	lsls	r0, r5, #24
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	d501      	bpl.n	80107be <_printf_i+0x196>
 80107ba:	6019      	str	r1, [r3, #0]
 80107bc:	e002      	b.n	80107c4 <_printf_i+0x19c>
 80107be:	066a      	lsls	r2, r5, #25
 80107c0:	d5fb      	bpl.n	80107ba <_printf_i+0x192>
 80107c2:	8019      	strh	r1, [r3, #0]
 80107c4:	2300      	movs	r3, #0
 80107c6:	4665      	mov	r5, ip
 80107c8:	6123      	str	r3, [r4, #16]
 80107ca:	e7b9      	b.n	8010740 <_printf_i+0x118>
 80107cc:	6813      	ldr	r3, [r2, #0]
 80107ce:	1d19      	adds	r1, r3, #4
 80107d0:	6011      	str	r1, [r2, #0]
 80107d2:	681d      	ldr	r5, [r3, #0]
 80107d4:	6862      	ldr	r2, [r4, #4]
 80107d6:	2100      	movs	r1, #0
 80107d8:	4628      	mov	r0, r5
 80107da:	f002 fdc1 	bl	8013360 <memchr>
 80107de:	b108      	cbz	r0, 80107e4 <_printf_i+0x1bc>
 80107e0:	1b40      	subs	r0, r0, r5
 80107e2:	6060      	str	r0, [r4, #4]
 80107e4:	6863      	ldr	r3, [r4, #4]
 80107e6:	6123      	str	r3, [r4, #16]
 80107e8:	2300      	movs	r3, #0
 80107ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80107ee:	e7a7      	b.n	8010740 <_printf_i+0x118>
 80107f0:	6923      	ldr	r3, [r4, #16]
 80107f2:	462a      	mov	r2, r5
 80107f4:	4639      	mov	r1, r7
 80107f6:	4630      	mov	r0, r6
 80107f8:	47c0      	blx	r8
 80107fa:	3001      	adds	r0, #1
 80107fc:	d0aa      	beq.n	8010754 <_printf_i+0x12c>
 80107fe:	6823      	ldr	r3, [r4, #0]
 8010800:	079b      	lsls	r3, r3, #30
 8010802:	d413      	bmi.n	801082c <_printf_i+0x204>
 8010804:	68e0      	ldr	r0, [r4, #12]
 8010806:	9b03      	ldr	r3, [sp, #12]
 8010808:	4298      	cmp	r0, r3
 801080a:	bfb8      	it	lt
 801080c:	4618      	movlt	r0, r3
 801080e:	e7a3      	b.n	8010758 <_printf_i+0x130>
 8010810:	2301      	movs	r3, #1
 8010812:	464a      	mov	r2, r9
 8010814:	4639      	mov	r1, r7
 8010816:	4630      	mov	r0, r6
 8010818:	47c0      	blx	r8
 801081a:	3001      	adds	r0, #1
 801081c:	d09a      	beq.n	8010754 <_printf_i+0x12c>
 801081e:	3501      	adds	r5, #1
 8010820:	68e3      	ldr	r3, [r4, #12]
 8010822:	9a03      	ldr	r2, [sp, #12]
 8010824:	1a9b      	subs	r3, r3, r2
 8010826:	42ab      	cmp	r3, r5
 8010828:	dcf2      	bgt.n	8010810 <_printf_i+0x1e8>
 801082a:	e7eb      	b.n	8010804 <_printf_i+0x1dc>
 801082c:	2500      	movs	r5, #0
 801082e:	f104 0919 	add.w	r9, r4, #25
 8010832:	e7f5      	b.n	8010820 <_printf_i+0x1f8>
 8010834:	2b00      	cmp	r3, #0
 8010836:	d1ac      	bne.n	8010792 <_printf_i+0x16a>
 8010838:	7803      	ldrb	r3, [r0, #0]
 801083a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801083e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010842:	e76c      	b.n	801071e <_printf_i+0xf6>
 8010844:	080164b6 	.word	0x080164b6
 8010848:	080164c7 	.word	0x080164c7

0801084c <_scanf_float>:
 801084c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010850:	469a      	mov	sl, r3
 8010852:	688b      	ldr	r3, [r1, #8]
 8010854:	4616      	mov	r6, r2
 8010856:	1e5a      	subs	r2, r3, #1
 8010858:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801085c:	bf88      	it	hi
 801085e:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8010862:	b087      	sub	sp, #28
 8010864:	bf85      	ittet	hi
 8010866:	189b      	addhi	r3, r3, r2
 8010868:	9301      	strhi	r3, [sp, #4]
 801086a:	2300      	movls	r3, #0
 801086c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010870:	4688      	mov	r8, r1
 8010872:	f04f 0b00 	mov.w	fp, #0
 8010876:	bf8c      	ite	hi
 8010878:	608b      	strhi	r3, [r1, #8]
 801087a:	9301      	strls	r3, [sp, #4]
 801087c:	680b      	ldr	r3, [r1, #0]
 801087e:	4607      	mov	r7, r0
 8010880:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8010884:	f848 3b1c 	str.w	r3, [r8], #28
 8010888:	460c      	mov	r4, r1
 801088a:	4645      	mov	r5, r8
 801088c:	465a      	mov	r2, fp
 801088e:	46d9      	mov	r9, fp
 8010890:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8010894:	f8cd b008 	str.w	fp, [sp, #8]
 8010898:	68a1      	ldr	r1, [r4, #8]
 801089a:	b181      	cbz	r1, 80108be <_scanf_float+0x72>
 801089c:	6833      	ldr	r3, [r6, #0]
 801089e:	781b      	ldrb	r3, [r3, #0]
 80108a0:	2b49      	cmp	r3, #73	; 0x49
 80108a2:	d071      	beq.n	8010988 <_scanf_float+0x13c>
 80108a4:	d84d      	bhi.n	8010942 <_scanf_float+0xf6>
 80108a6:	2b39      	cmp	r3, #57	; 0x39
 80108a8:	d840      	bhi.n	801092c <_scanf_float+0xe0>
 80108aa:	2b31      	cmp	r3, #49	; 0x31
 80108ac:	f080 8088 	bcs.w	80109c0 <_scanf_float+0x174>
 80108b0:	2b2d      	cmp	r3, #45	; 0x2d
 80108b2:	f000 8090 	beq.w	80109d6 <_scanf_float+0x18a>
 80108b6:	d815      	bhi.n	80108e4 <_scanf_float+0x98>
 80108b8:	2b2b      	cmp	r3, #43	; 0x2b
 80108ba:	f000 808c 	beq.w	80109d6 <_scanf_float+0x18a>
 80108be:	f1b9 0f00 	cmp.w	r9, #0
 80108c2:	d003      	beq.n	80108cc <_scanf_float+0x80>
 80108c4:	6823      	ldr	r3, [r4, #0]
 80108c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80108ca:	6023      	str	r3, [r4, #0]
 80108cc:	3a01      	subs	r2, #1
 80108ce:	2a01      	cmp	r2, #1
 80108d0:	f200 80ea 	bhi.w	8010aa8 <_scanf_float+0x25c>
 80108d4:	4545      	cmp	r5, r8
 80108d6:	f200 80dc 	bhi.w	8010a92 <_scanf_float+0x246>
 80108da:	2601      	movs	r6, #1
 80108dc:	4630      	mov	r0, r6
 80108de:	b007      	add	sp, #28
 80108e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108e4:	2b2e      	cmp	r3, #46	; 0x2e
 80108e6:	f000 809f 	beq.w	8010a28 <_scanf_float+0x1dc>
 80108ea:	2b30      	cmp	r3, #48	; 0x30
 80108ec:	d1e7      	bne.n	80108be <_scanf_float+0x72>
 80108ee:	6820      	ldr	r0, [r4, #0]
 80108f0:	f410 7f80 	tst.w	r0, #256	; 0x100
 80108f4:	d064      	beq.n	80109c0 <_scanf_float+0x174>
 80108f6:	9b01      	ldr	r3, [sp, #4]
 80108f8:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80108fc:	6020      	str	r0, [r4, #0]
 80108fe:	f109 0901 	add.w	r9, r9, #1
 8010902:	b11b      	cbz	r3, 801090c <_scanf_float+0xc0>
 8010904:	3b01      	subs	r3, #1
 8010906:	3101      	adds	r1, #1
 8010908:	9301      	str	r3, [sp, #4]
 801090a:	60a1      	str	r1, [r4, #8]
 801090c:	68a3      	ldr	r3, [r4, #8]
 801090e:	3b01      	subs	r3, #1
 8010910:	60a3      	str	r3, [r4, #8]
 8010912:	6923      	ldr	r3, [r4, #16]
 8010914:	3301      	adds	r3, #1
 8010916:	6123      	str	r3, [r4, #16]
 8010918:	6873      	ldr	r3, [r6, #4]
 801091a:	3b01      	subs	r3, #1
 801091c:	2b00      	cmp	r3, #0
 801091e:	6073      	str	r3, [r6, #4]
 8010920:	f340 80ac 	ble.w	8010a7c <_scanf_float+0x230>
 8010924:	6833      	ldr	r3, [r6, #0]
 8010926:	3301      	adds	r3, #1
 8010928:	6033      	str	r3, [r6, #0]
 801092a:	e7b5      	b.n	8010898 <_scanf_float+0x4c>
 801092c:	2b45      	cmp	r3, #69	; 0x45
 801092e:	f000 8085 	beq.w	8010a3c <_scanf_float+0x1f0>
 8010932:	2b46      	cmp	r3, #70	; 0x46
 8010934:	d06a      	beq.n	8010a0c <_scanf_float+0x1c0>
 8010936:	2b41      	cmp	r3, #65	; 0x41
 8010938:	d1c1      	bne.n	80108be <_scanf_float+0x72>
 801093a:	2a01      	cmp	r2, #1
 801093c:	d1bf      	bne.n	80108be <_scanf_float+0x72>
 801093e:	2202      	movs	r2, #2
 8010940:	e046      	b.n	80109d0 <_scanf_float+0x184>
 8010942:	2b65      	cmp	r3, #101	; 0x65
 8010944:	d07a      	beq.n	8010a3c <_scanf_float+0x1f0>
 8010946:	d818      	bhi.n	801097a <_scanf_float+0x12e>
 8010948:	2b54      	cmp	r3, #84	; 0x54
 801094a:	d066      	beq.n	8010a1a <_scanf_float+0x1ce>
 801094c:	d811      	bhi.n	8010972 <_scanf_float+0x126>
 801094e:	2b4e      	cmp	r3, #78	; 0x4e
 8010950:	d1b5      	bne.n	80108be <_scanf_float+0x72>
 8010952:	2a00      	cmp	r2, #0
 8010954:	d146      	bne.n	80109e4 <_scanf_float+0x198>
 8010956:	f1b9 0f00 	cmp.w	r9, #0
 801095a:	d145      	bne.n	80109e8 <_scanf_float+0x19c>
 801095c:	6821      	ldr	r1, [r4, #0]
 801095e:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8010962:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8010966:	d13f      	bne.n	80109e8 <_scanf_float+0x19c>
 8010968:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801096c:	6021      	str	r1, [r4, #0]
 801096e:	2201      	movs	r2, #1
 8010970:	e02e      	b.n	80109d0 <_scanf_float+0x184>
 8010972:	2b59      	cmp	r3, #89	; 0x59
 8010974:	d01e      	beq.n	80109b4 <_scanf_float+0x168>
 8010976:	2b61      	cmp	r3, #97	; 0x61
 8010978:	e7de      	b.n	8010938 <_scanf_float+0xec>
 801097a:	2b6e      	cmp	r3, #110	; 0x6e
 801097c:	d0e9      	beq.n	8010952 <_scanf_float+0x106>
 801097e:	d815      	bhi.n	80109ac <_scanf_float+0x160>
 8010980:	2b66      	cmp	r3, #102	; 0x66
 8010982:	d043      	beq.n	8010a0c <_scanf_float+0x1c0>
 8010984:	2b69      	cmp	r3, #105	; 0x69
 8010986:	d19a      	bne.n	80108be <_scanf_float+0x72>
 8010988:	f1bb 0f00 	cmp.w	fp, #0
 801098c:	d138      	bne.n	8010a00 <_scanf_float+0x1b4>
 801098e:	f1b9 0f00 	cmp.w	r9, #0
 8010992:	d197      	bne.n	80108c4 <_scanf_float+0x78>
 8010994:	6821      	ldr	r1, [r4, #0]
 8010996:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801099a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 801099e:	d195      	bne.n	80108cc <_scanf_float+0x80>
 80109a0:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80109a4:	6021      	str	r1, [r4, #0]
 80109a6:	f04f 0b01 	mov.w	fp, #1
 80109aa:	e011      	b.n	80109d0 <_scanf_float+0x184>
 80109ac:	2b74      	cmp	r3, #116	; 0x74
 80109ae:	d034      	beq.n	8010a1a <_scanf_float+0x1ce>
 80109b0:	2b79      	cmp	r3, #121	; 0x79
 80109b2:	d184      	bne.n	80108be <_scanf_float+0x72>
 80109b4:	f1bb 0f07 	cmp.w	fp, #7
 80109b8:	d181      	bne.n	80108be <_scanf_float+0x72>
 80109ba:	f04f 0b08 	mov.w	fp, #8
 80109be:	e007      	b.n	80109d0 <_scanf_float+0x184>
 80109c0:	eb12 0f0b 	cmn.w	r2, fp
 80109c4:	f47f af7b 	bne.w	80108be <_scanf_float+0x72>
 80109c8:	6821      	ldr	r1, [r4, #0]
 80109ca:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80109ce:	6021      	str	r1, [r4, #0]
 80109d0:	702b      	strb	r3, [r5, #0]
 80109d2:	3501      	adds	r5, #1
 80109d4:	e79a      	b.n	801090c <_scanf_float+0xc0>
 80109d6:	6821      	ldr	r1, [r4, #0]
 80109d8:	0608      	lsls	r0, r1, #24
 80109da:	f57f af70 	bpl.w	80108be <_scanf_float+0x72>
 80109de:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80109e2:	e7f4      	b.n	80109ce <_scanf_float+0x182>
 80109e4:	2a02      	cmp	r2, #2
 80109e6:	d047      	beq.n	8010a78 <_scanf_float+0x22c>
 80109e8:	f1bb 0f01 	cmp.w	fp, #1
 80109ec:	d003      	beq.n	80109f6 <_scanf_float+0x1aa>
 80109ee:	f1bb 0f04 	cmp.w	fp, #4
 80109f2:	f47f af64 	bne.w	80108be <_scanf_float+0x72>
 80109f6:	f10b 0b01 	add.w	fp, fp, #1
 80109fa:	fa5f fb8b 	uxtb.w	fp, fp
 80109fe:	e7e7      	b.n	80109d0 <_scanf_float+0x184>
 8010a00:	f1bb 0f03 	cmp.w	fp, #3
 8010a04:	d0f7      	beq.n	80109f6 <_scanf_float+0x1aa>
 8010a06:	f1bb 0f05 	cmp.w	fp, #5
 8010a0a:	e7f2      	b.n	80109f2 <_scanf_float+0x1a6>
 8010a0c:	f1bb 0f02 	cmp.w	fp, #2
 8010a10:	f47f af55 	bne.w	80108be <_scanf_float+0x72>
 8010a14:	f04f 0b03 	mov.w	fp, #3
 8010a18:	e7da      	b.n	80109d0 <_scanf_float+0x184>
 8010a1a:	f1bb 0f06 	cmp.w	fp, #6
 8010a1e:	f47f af4e 	bne.w	80108be <_scanf_float+0x72>
 8010a22:	f04f 0b07 	mov.w	fp, #7
 8010a26:	e7d3      	b.n	80109d0 <_scanf_float+0x184>
 8010a28:	6821      	ldr	r1, [r4, #0]
 8010a2a:	0588      	lsls	r0, r1, #22
 8010a2c:	f57f af47 	bpl.w	80108be <_scanf_float+0x72>
 8010a30:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8010a34:	6021      	str	r1, [r4, #0]
 8010a36:	f8cd 9008 	str.w	r9, [sp, #8]
 8010a3a:	e7c9      	b.n	80109d0 <_scanf_float+0x184>
 8010a3c:	6821      	ldr	r1, [r4, #0]
 8010a3e:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8010a42:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8010a46:	d006      	beq.n	8010a56 <_scanf_float+0x20a>
 8010a48:	0548      	lsls	r0, r1, #21
 8010a4a:	f57f af38 	bpl.w	80108be <_scanf_float+0x72>
 8010a4e:	f1b9 0f00 	cmp.w	r9, #0
 8010a52:	f43f af3b 	beq.w	80108cc <_scanf_float+0x80>
 8010a56:	0588      	lsls	r0, r1, #22
 8010a58:	bf58      	it	pl
 8010a5a:	9802      	ldrpl	r0, [sp, #8]
 8010a5c:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8010a60:	bf58      	it	pl
 8010a62:	eba9 0000 	subpl.w	r0, r9, r0
 8010a66:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8010a6a:	bf58      	it	pl
 8010a6c:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8010a70:	6021      	str	r1, [r4, #0]
 8010a72:	f04f 0900 	mov.w	r9, #0
 8010a76:	e7ab      	b.n	80109d0 <_scanf_float+0x184>
 8010a78:	2203      	movs	r2, #3
 8010a7a:	e7a9      	b.n	80109d0 <_scanf_float+0x184>
 8010a7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010a80:	4631      	mov	r1, r6
 8010a82:	4638      	mov	r0, r7
 8010a84:	9205      	str	r2, [sp, #20]
 8010a86:	4798      	blx	r3
 8010a88:	9a05      	ldr	r2, [sp, #20]
 8010a8a:	2800      	cmp	r0, #0
 8010a8c:	f43f af04 	beq.w	8010898 <_scanf_float+0x4c>
 8010a90:	e715      	b.n	80108be <_scanf_float+0x72>
 8010a92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010a96:	4632      	mov	r2, r6
 8010a98:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010a9c:	4638      	mov	r0, r7
 8010a9e:	4798      	blx	r3
 8010aa0:	6923      	ldr	r3, [r4, #16]
 8010aa2:	3b01      	subs	r3, #1
 8010aa4:	6123      	str	r3, [r4, #16]
 8010aa6:	e715      	b.n	80108d4 <_scanf_float+0x88>
 8010aa8:	f10b 33ff 	add.w	r3, fp, #4294967295
 8010aac:	2b06      	cmp	r3, #6
 8010aae:	d80a      	bhi.n	8010ac6 <_scanf_float+0x27a>
 8010ab0:	f1bb 0f02 	cmp.w	fp, #2
 8010ab4:	d967      	bls.n	8010b86 <_scanf_float+0x33a>
 8010ab6:	f1ab 0b03 	sub.w	fp, fp, #3
 8010aba:	fa5f fb8b 	uxtb.w	fp, fp
 8010abe:	eba5 0b0b 	sub.w	fp, r5, fp
 8010ac2:	455d      	cmp	r5, fp
 8010ac4:	d14a      	bne.n	8010b5c <_scanf_float+0x310>
 8010ac6:	6823      	ldr	r3, [r4, #0]
 8010ac8:	05da      	lsls	r2, r3, #23
 8010aca:	d51f      	bpl.n	8010b0c <_scanf_float+0x2c0>
 8010acc:	055b      	lsls	r3, r3, #21
 8010ace:	d467      	bmi.n	8010ba0 <_scanf_float+0x354>
 8010ad0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010ad4:	6923      	ldr	r3, [r4, #16]
 8010ad6:	2965      	cmp	r1, #101	; 0x65
 8010ad8:	f103 33ff 	add.w	r3, r3, #4294967295
 8010adc:	f105 3bff 	add.w	fp, r5, #4294967295
 8010ae0:	6123      	str	r3, [r4, #16]
 8010ae2:	d00d      	beq.n	8010b00 <_scanf_float+0x2b4>
 8010ae4:	2945      	cmp	r1, #69	; 0x45
 8010ae6:	d00b      	beq.n	8010b00 <_scanf_float+0x2b4>
 8010ae8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010aec:	4632      	mov	r2, r6
 8010aee:	4638      	mov	r0, r7
 8010af0:	4798      	blx	r3
 8010af2:	6923      	ldr	r3, [r4, #16]
 8010af4:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8010af8:	3b01      	subs	r3, #1
 8010afa:	f1a5 0b02 	sub.w	fp, r5, #2
 8010afe:	6123      	str	r3, [r4, #16]
 8010b00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010b04:	4632      	mov	r2, r6
 8010b06:	4638      	mov	r0, r7
 8010b08:	4798      	blx	r3
 8010b0a:	465d      	mov	r5, fp
 8010b0c:	6826      	ldr	r6, [r4, #0]
 8010b0e:	f016 0610 	ands.w	r6, r6, #16
 8010b12:	d176      	bne.n	8010c02 <_scanf_float+0x3b6>
 8010b14:	702e      	strb	r6, [r5, #0]
 8010b16:	6823      	ldr	r3, [r4, #0]
 8010b18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010b20:	d141      	bne.n	8010ba6 <_scanf_float+0x35a>
 8010b22:	9b02      	ldr	r3, [sp, #8]
 8010b24:	eba9 0303 	sub.w	r3, r9, r3
 8010b28:	425a      	negs	r2, r3
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d148      	bne.n	8010bc0 <_scanf_float+0x374>
 8010b2e:	4641      	mov	r1, r8
 8010b30:	2200      	movs	r2, #0
 8010b32:	4638      	mov	r0, r7
 8010b34:	f000 ff40 	bl	80119b8 <_strtod_r>
 8010b38:	6825      	ldr	r5, [r4, #0]
 8010b3a:	4680      	mov	r8, r0
 8010b3c:	f015 0f02 	tst.w	r5, #2
 8010b40:	4689      	mov	r9, r1
 8010b42:	f8da 3000 	ldr.w	r3, [sl]
 8010b46:	d046      	beq.n	8010bd6 <_scanf_float+0x38a>
 8010b48:	1d1a      	adds	r2, r3, #4
 8010b4a:	f8ca 2000 	str.w	r2, [sl]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	e9c3 8900 	strd	r8, r9, [r3]
 8010b54:	68e3      	ldr	r3, [r4, #12]
 8010b56:	3301      	adds	r3, #1
 8010b58:	60e3      	str	r3, [r4, #12]
 8010b5a:	e6bf      	b.n	80108dc <_scanf_float+0x90>
 8010b5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010b60:	4632      	mov	r2, r6
 8010b62:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010b66:	4638      	mov	r0, r7
 8010b68:	4798      	blx	r3
 8010b6a:	6923      	ldr	r3, [r4, #16]
 8010b6c:	3b01      	subs	r3, #1
 8010b6e:	6123      	str	r3, [r4, #16]
 8010b70:	e7a7      	b.n	8010ac2 <_scanf_float+0x276>
 8010b72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010b76:	4632      	mov	r2, r6
 8010b78:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010b7c:	4638      	mov	r0, r7
 8010b7e:	4798      	blx	r3
 8010b80:	6923      	ldr	r3, [r4, #16]
 8010b82:	3b01      	subs	r3, #1
 8010b84:	6123      	str	r3, [r4, #16]
 8010b86:	4545      	cmp	r5, r8
 8010b88:	d8f3      	bhi.n	8010b72 <_scanf_float+0x326>
 8010b8a:	e6a6      	b.n	80108da <_scanf_float+0x8e>
 8010b8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010b90:	4632      	mov	r2, r6
 8010b92:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010b96:	4638      	mov	r0, r7
 8010b98:	4798      	blx	r3
 8010b9a:	6923      	ldr	r3, [r4, #16]
 8010b9c:	3b01      	subs	r3, #1
 8010b9e:	6123      	str	r3, [r4, #16]
 8010ba0:	4545      	cmp	r5, r8
 8010ba2:	d8f3      	bhi.n	8010b8c <_scanf_float+0x340>
 8010ba4:	e699      	b.n	80108da <_scanf_float+0x8e>
 8010ba6:	9b03      	ldr	r3, [sp, #12]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d0c0      	beq.n	8010b2e <_scanf_float+0x2e2>
 8010bac:	9904      	ldr	r1, [sp, #16]
 8010bae:	230a      	movs	r3, #10
 8010bb0:	4632      	mov	r2, r6
 8010bb2:	3101      	adds	r1, #1
 8010bb4:	4638      	mov	r0, r7
 8010bb6:	f000 ff8b 	bl	8011ad0 <_strtol_r>
 8010bba:	9b03      	ldr	r3, [sp, #12]
 8010bbc:	9d04      	ldr	r5, [sp, #16]
 8010bbe:	1ac2      	subs	r2, r0, r3
 8010bc0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8010bc4:	429d      	cmp	r5, r3
 8010bc6:	bf28      	it	cs
 8010bc8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8010bcc:	490e      	ldr	r1, [pc, #56]	; (8010c08 <_scanf_float+0x3bc>)
 8010bce:	4628      	mov	r0, r5
 8010bd0:	f000 f89c 	bl	8010d0c <siprintf>
 8010bd4:	e7ab      	b.n	8010b2e <_scanf_float+0x2e2>
 8010bd6:	1d1f      	adds	r7, r3, #4
 8010bd8:	f015 0504 	ands.w	r5, r5, #4
 8010bdc:	f8ca 7000 	str.w	r7, [sl]
 8010be0:	d1b5      	bne.n	8010b4e <_scanf_float+0x302>
 8010be2:	681f      	ldr	r7, [r3, #0]
 8010be4:	4602      	mov	r2, r0
 8010be6:	460b      	mov	r3, r1
 8010be8:	f7ef ff7c 	bl	8000ae4 <__aeabi_dcmpun>
 8010bec:	b120      	cbz	r0, 8010bf8 <_scanf_float+0x3ac>
 8010bee:	4628      	mov	r0, r5
 8010bf0:	f000 f888 	bl	8010d04 <nanf>
 8010bf4:	6038      	str	r0, [r7, #0]
 8010bf6:	e7ad      	b.n	8010b54 <_scanf_float+0x308>
 8010bf8:	4640      	mov	r0, r8
 8010bfa:	4649      	mov	r1, r9
 8010bfc:	f7ef ffd0 	bl	8000ba0 <__aeabi_d2f>
 8010c00:	e7f8      	b.n	8010bf4 <_scanf_float+0x3a8>
 8010c02:	2600      	movs	r6, #0
 8010c04:	e66a      	b.n	80108dc <_scanf_float+0x90>
 8010c06:	bf00      	nop
 8010c08:	080164d8 	.word	0x080164d8

08010c0c <iprintf>:
 8010c0c:	b40f      	push	{r0, r1, r2, r3}
 8010c0e:	4b0a      	ldr	r3, [pc, #40]	; (8010c38 <iprintf+0x2c>)
 8010c10:	b513      	push	{r0, r1, r4, lr}
 8010c12:	681c      	ldr	r4, [r3, #0]
 8010c14:	b124      	cbz	r4, 8010c20 <iprintf+0x14>
 8010c16:	69a3      	ldr	r3, [r4, #24]
 8010c18:	b913      	cbnz	r3, 8010c20 <iprintf+0x14>
 8010c1a:	4620      	mov	r0, r4
 8010c1c:	f001 ff5c 	bl	8012ad8 <__sinit>
 8010c20:	ab05      	add	r3, sp, #20
 8010c22:	9a04      	ldr	r2, [sp, #16]
 8010c24:	68a1      	ldr	r1, [r4, #8]
 8010c26:	4620      	mov	r0, r4
 8010c28:	9301      	str	r3, [sp, #4]
 8010c2a:	f003 f9cd 	bl	8013fc8 <_vfiprintf_r>
 8010c2e:	b002      	add	sp, #8
 8010c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c34:	b004      	add	sp, #16
 8010c36:	4770      	bx	lr
 8010c38:	20000010 	.word	0x20000010

08010c3c <_puts_r>:
 8010c3c:	b570      	push	{r4, r5, r6, lr}
 8010c3e:	460e      	mov	r6, r1
 8010c40:	4605      	mov	r5, r0
 8010c42:	b118      	cbz	r0, 8010c4c <_puts_r+0x10>
 8010c44:	6983      	ldr	r3, [r0, #24]
 8010c46:	b90b      	cbnz	r3, 8010c4c <_puts_r+0x10>
 8010c48:	f001 ff46 	bl	8012ad8 <__sinit>
 8010c4c:	69ab      	ldr	r3, [r5, #24]
 8010c4e:	68ac      	ldr	r4, [r5, #8]
 8010c50:	b913      	cbnz	r3, 8010c58 <_puts_r+0x1c>
 8010c52:	4628      	mov	r0, r5
 8010c54:	f001 ff40 	bl	8012ad8 <__sinit>
 8010c58:	4b23      	ldr	r3, [pc, #140]	; (8010ce8 <_puts_r+0xac>)
 8010c5a:	429c      	cmp	r4, r3
 8010c5c:	d117      	bne.n	8010c8e <_puts_r+0x52>
 8010c5e:	686c      	ldr	r4, [r5, #4]
 8010c60:	89a3      	ldrh	r3, [r4, #12]
 8010c62:	071b      	lsls	r3, r3, #28
 8010c64:	d51d      	bpl.n	8010ca2 <_puts_r+0x66>
 8010c66:	6923      	ldr	r3, [r4, #16]
 8010c68:	b1db      	cbz	r3, 8010ca2 <_puts_r+0x66>
 8010c6a:	3e01      	subs	r6, #1
 8010c6c:	68a3      	ldr	r3, [r4, #8]
 8010c6e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010c72:	3b01      	subs	r3, #1
 8010c74:	60a3      	str	r3, [r4, #8]
 8010c76:	b9e9      	cbnz	r1, 8010cb4 <_puts_r+0x78>
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	da2e      	bge.n	8010cda <_puts_r+0x9e>
 8010c7c:	4622      	mov	r2, r4
 8010c7e:	210a      	movs	r1, #10
 8010c80:	4628      	mov	r0, r5
 8010c82:	f000 ff37 	bl	8011af4 <__swbuf_r>
 8010c86:	3001      	adds	r0, #1
 8010c88:	d011      	beq.n	8010cae <_puts_r+0x72>
 8010c8a:	200a      	movs	r0, #10
 8010c8c:	e011      	b.n	8010cb2 <_puts_r+0x76>
 8010c8e:	4b17      	ldr	r3, [pc, #92]	; (8010cec <_puts_r+0xb0>)
 8010c90:	429c      	cmp	r4, r3
 8010c92:	d101      	bne.n	8010c98 <_puts_r+0x5c>
 8010c94:	68ac      	ldr	r4, [r5, #8]
 8010c96:	e7e3      	b.n	8010c60 <_puts_r+0x24>
 8010c98:	4b15      	ldr	r3, [pc, #84]	; (8010cf0 <_puts_r+0xb4>)
 8010c9a:	429c      	cmp	r4, r3
 8010c9c:	bf08      	it	eq
 8010c9e:	68ec      	ldreq	r4, [r5, #12]
 8010ca0:	e7de      	b.n	8010c60 <_puts_r+0x24>
 8010ca2:	4621      	mov	r1, r4
 8010ca4:	4628      	mov	r0, r5
 8010ca6:	f000 ff77 	bl	8011b98 <__swsetup_r>
 8010caa:	2800      	cmp	r0, #0
 8010cac:	d0dd      	beq.n	8010c6a <_puts_r+0x2e>
 8010cae:	f04f 30ff 	mov.w	r0, #4294967295
 8010cb2:	bd70      	pop	{r4, r5, r6, pc}
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	da04      	bge.n	8010cc2 <_puts_r+0x86>
 8010cb8:	69a2      	ldr	r2, [r4, #24]
 8010cba:	429a      	cmp	r2, r3
 8010cbc:	dc06      	bgt.n	8010ccc <_puts_r+0x90>
 8010cbe:	290a      	cmp	r1, #10
 8010cc0:	d004      	beq.n	8010ccc <_puts_r+0x90>
 8010cc2:	6823      	ldr	r3, [r4, #0]
 8010cc4:	1c5a      	adds	r2, r3, #1
 8010cc6:	6022      	str	r2, [r4, #0]
 8010cc8:	7019      	strb	r1, [r3, #0]
 8010cca:	e7cf      	b.n	8010c6c <_puts_r+0x30>
 8010ccc:	4622      	mov	r2, r4
 8010cce:	4628      	mov	r0, r5
 8010cd0:	f000 ff10 	bl	8011af4 <__swbuf_r>
 8010cd4:	3001      	adds	r0, #1
 8010cd6:	d1c9      	bne.n	8010c6c <_puts_r+0x30>
 8010cd8:	e7e9      	b.n	8010cae <_puts_r+0x72>
 8010cda:	200a      	movs	r0, #10
 8010cdc:	6823      	ldr	r3, [r4, #0]
 8010cde:	1c5a      	adds	r2, r3, #1
 8010ce0:	6022      	str	r2, [r4, #0]
 8010ce2:	7018      	strb	r0, [r3, #0]
 8010ce4:	e7e5      	b.n	8010cb2 <_puts_r+0x76>
 8010ce6:	bf00      	nop
 8010ce8:	08016560 	.word	0x08016560
 8010cec:	08016580 	.word	0x08016580
 8010cf0:	08016540 	.word	0x08016540

08010cf4 <puts>:
 8010cf4:	4b02      	ldr	r3, [pc, #8]	; (8010d00 <puts+0xc>)
 8010cf6:	4601      	mov	r1, r0
 8010cf8:	6818      	ldr	r0, [r3, #0]
 8010cfa:	f7ff bf9f 	b.w	8010c3c <_puts_r>
 8010cfe:	bf00      	nop
 8010d00:	20000010 	.word	0x20000010

08010d04 <nanf>:
 8010d04:	4800      	ldr	r0, [pc, #0]	; (8010d08 <nanf+0x4>)
 8010d06:	4770      	bx	lr
 8010d08:	7fc00000 	.word	0x7fc00000

08010d0c <siprintf>:
 8010d0c:	b40e      	push	{r1, r2, r3}
 8010d0e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010d12:	b500      	push	{lr}
 8010d14:	b09c      	sub	sp, #112	; 0x70
 8010d16:	ab1d      	add	r3, sp, #116	; 0x74
 8010d18:	9002      	str	r0, [sp, #8]
 8010d1a:	9006      	str	r0, [sp, #24]
 8010d1c:	9107      	str	r1, [sp, #28]
 8010d1e:	9104      	str	r1, [sp, #16]
 8010d20:	4808      	ldr	r0, [pc, #32]	; (8010d44 <siprintf+0x38>)
 8010d22:	4909      	ldr	r1, [pc, #36]	; (8010d48 <siprintf+0x3c>)
 8010d24:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d28:	9105      	str	r1, [sp, #20]
 8010d2a:	6800      	ldr	r0, [r0, #0]
 8010d2c:	a902      	add	r1, sp, #8
 8010d2e:	9301      	str	r3, [sp, #4]
 8010d30:	f003 f82a 	bl	8013d88 <_svfiprintf_r>
 8010d34:	2200      	movs	r2, #0
 8010d36:	9b02      	ldr	r3, [sp, #8]
 8010d38:	701a      	strb	r2, [r3, #0]
 8010d3a:	b01c      	add	sp, #112	; 0x70
 8010d3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d40:	b003      	add	sp, #12
 8010d42:	4770      	bx	lr
 8010d44:	20000010 	.word	0x20000010
 8010d48:	ffff0208 	.word	0xffff0208

08010d4c <strncmp>:
 8010d4c:	b510      	push	{r4, lr}
 8010d4e:	b16a      	cbz	r2, 8010d6c <strncmp+0x20>
 8010d50:	3901      	subs	r1, #1
 8010d52:	1884      	adds	r4, r0, r2
 8010d54:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010d58:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010d5c:	4293      	cmp	r3, r2
 8010d5e:	d103      	bne.n	8010d68 <strncmp+0x1c>
 8010d60:	42a0      	cmp	r0, r4
 8010d62:	d001      	beq.n	8010d68 <strncmp+0x1c>
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d1f5      	bne.n	8010d54 <strncmp+0x8>
 8010d68:	1a98      	subs	r0, r3, r2
 8010d6a:	bd10      	pop	{r4, pc}
 8010d6c:	4610      	mov	r0, r2
 8010d6e:	e7fc      	b.n	8010d6a <strncmp+0x1e>

08010d70 <sulp>:
 8010d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d74:	460f      	mov	r7, r1
 8010d76:	4690      	mov	r8, r2
 8010d78:	f002 fdca 	bl	8013910 <__ulp>
 8010d7c:	4604      	mov	r4, r0
 8010d7e:	460d      	mov	r5, r1
 8010d80:	f1b8 0f00 	cmp.w	r8, #0
 8010d84:	d011      	beq.n	8010daa <sulp+0x3a>
 8010d86:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8010d8a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	dd0b      	ble.n	8010daa <sulp+0x3a>
 8010d92:	2400      	movs	r4, #0
 8010d94:	051b      	lsls	r3, r3, #20
 8010d96:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010d9a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010d9e:	4622      	mov	r2, r4
 8010da0:	462b      	mov	r3, r5
 8010da2:	f7ef fc05 	bl	80005b0 <__aeabi_dmul>
 8010da6:	4604      	mov	r4, r0
 8010da8:	460d      	mov	r5, r1
 8010daa:	4620      	mov	r0, r4
 8010dac:	4629      	mov	r1, r5
 8010dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010db2:	0000      	movs	r0, r0
 8010db4:	0000      	movs	r0, r0
	...

08010db8 <_strtod_l>:
 8010db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dbc:	461f      	mov	r7, r3
 8010dbe:	2300      	movs	r3, #0
 8010dc0:	b0a1      	sub	sp, #132	; 0x84
 8010dc2:	4683      	mov	fp, r0
 8010dc4:	4638      	mov	r0, r7
 8010dc6:	460e      	mov	r6, r1
 8010dc8:	9217      	str	r2, [sp, #92]	; 0x5c
 8010dca:	931c      	str	r3, [sp, #112]	; 0x70
 8010dcc:	f002 fa39 	bl	8013242 <__localeconv_l>
 8010dd0:	4680      	mov	r8, r0
 8010dd2:	6800      	ldr	r0, [r0, #0]
 8010dd4:	f7ef fa28 	bl	8000228 <strlen>
 8010dd8:	f04f 0900 	mov.w	r9, #0
 8010ddc:	4604      	mov	r4, r0
 8010dde:	f04f 0a00 	mov.w	sl, #0
 8010de2:	961b      	str	r6, [sp, #108]	; 0x6c
 8010de4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010de6:	781a      	ldrb	r2, [r3, #0]
 8010de8:	2a0d      	cmp	r2, #13
 8010dea:	d832      	bhi.n	8010e52 <_strtod_l+0x9a>
 8010dec:	2a09      	cmp	r2, #9
 8010dee:	d236      	bcs.n	8010e5e <_strtod_l+0xa6>
 8010df0:	2a00      	cmp	r2, #0
 8010df2:	d03e      	beq.n	8010e72 <_strtod_l+0xba>
 8010df4:	2300      	movs	r3, #0
 8010df6:	930d      	str	r3, [sp, #52]	; 0x34
 8010df8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8010dfa:	782b      	ldrb	r3, [r5, #0]
 8010dfc:	2b30      	cmp	r3, #48	; 0x30
 8010dfe:	f040 80ac 	bne.w	8010f5a <_strtod_l+0x1a2>
 8010e02:	786b      	ldrb	r3, [r5, #1]
 8010e04:	2b58      	cmp	r3, #88	; 0x58
 8010e06:	d001      	beq.n	8010e0c <_strtod_l+0x54>
 8010e08:	2b78      	cmp	r3, #120	; 0x78
 8010e0a:	d167      	bne.n	8010edc <_strtod_l+0x124>
 8010e0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e0e:	9702      	str	r7, [sp, #8]
 8010e10:	9301      	str	r3, [sp, #4]
 8010e12:	ab1c      	add	r3, sp, #112	; 0x70
 8010e14:	9300      	str	r3, [sp, #0]
 8010e16:	4a89      	ldr	r2, [pc, #548]	; (801103c <_strtod_l+0x284>)
 8010e18:	ab1d      	add	r3, sp, #116	; 0x74
 8010e1a:	a91b      	add	r1, sp, #108	; 0x6c
 8010e1c:	4658      	mov	r0, fp
 8010e1e:	f001 ff35 	bl	8012c8c <__gethex>
 8010e22:	f010 0407 	ands.w	r4, r0, #7
 8010e26:	4606      	mov	r6, r0
 8010e28:	d005      	beq.n	8010e36 <_strtod_l+0x7e>
 8010e2a:	2c06      	cmp	r4, #6
 8010e2c:	d12b      	bne.n	8010e86 <_strtod_l+0xce>
 8010e2e:	2300      	movs	r3, #0
 8010e30:	3501      	adds	r5, #1
 8010e32:	951b      	str	r5, [sp, #108]	; 0x6c
 8010e34:	930d      	str	r3, [sp, #52]	; 0x34
 8010e36:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	f040 85a6 	bne.w	801198a <_strtod_l+0xbd2>
 8010e3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e40:	b1e3      	cbz	r3, 8010e7c <_strtod_l+0xc4>
 8010e42:	464a      	mov	r2, r9
 8010e44:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8010e48:	4610      	mov	r0, r2
 8010e4a:	4619      	mov	r1, r3
 8010e4c:	b021      	add	sp, #132	; 0x84
 8010e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e52:	2a2b      	cmp	r2, #43	; 0x2b
 8010e54:	d015      	beq.n	8010e82 <_strtod_l+0xca>
 8010e56:	2a2d      	cmp	r2, #45	; 0x2d
 8010e58:	d004      	beq.n	8010e64 <_strtod_l+0xac>
 8010e5a:	2a20      	cmp	r2, #32
 8010e5c:	d1ca      	bne.n	8010df4 <_strtod_l+0x3c>
 8010e5e:	3301      	adds	r3, #1
 8010e60:	931b      	str	r3, [sp, #108]	; 0x6c
 8010e62:	e7bf      	b.n	8010de4 <_strtod_l+0x2c>
 8010e64:	2201      	movs	r2, #1
 8010e66:	920d      	str	r2, [sp, #52]	; 0x34
 8010e68:	1c5a      	adds	r2, r3, #1
 8010e6a:	921b      	str	r2, [sp, #108]	; 0x6c
 8010e6c:	785b      	ldrb	r3, [r3, #1]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d1c2      	bne.n	8010df8 <_strtod_l+0x40>
 8010e72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010e74:	961b      	str	r6, [sp, #108]	; 0x6c
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	f040 8585 	bne.w	8011986 <_strtod_l+0xbce>
 8010e7c:	464a      	mov	r2, r9
 8010e7e:	4653      	mov	r3, sl
 8010e80:	e7e2      	b.n	8010e48 <_strtod_l+0x90>
 8010e82:	2200      	movs	r2, #0
 8010e84:	e7ef      	b.n	8010e66 <_strtod_l+0xae>
 8010e86:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8010e88:	b13a      	cbz	r2, 8010e9a <_strtod_l+0xe2>
 8010e8a:	2135      	movs	r1, #53	; 0x35
 8010e8c:	a81e      	add	r0, sp, #120	; 0x78
 8010e8e:	f002 fe32 	bl	8013af6 <__copybits>
 8010e92:	991c      	ldr	r1, [sp, #112]	; 0x70
 8010e94:	4658      	mov	r0, fp
 8010e96:	f002 faa5 	bl	80133e4 <_Bfree>
 8010e9a:	3c01      	subs	r4, #1
 8010e9c:	2c04      	cmp	r4, #4
 8010e9e:	d806      	bhi.n	8010eae <_strtod_l+0xf6>
 8010ea0:	e8df f004 	tbb	[pc, r4]
 8010ea4:	1714030a 	.word	0x1714030a
 8010ea8:	0a          	.byte	0x0a
 8010ea9:	00          	.byte	0x00
 8010eaa:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8010eae:	0731      	lsls	r1, r6, #28
 8010eb0:	d5c1      	bpl.n	8010e36 <_strtod_l+0x7e>
 8010eb2:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8010eb6:	e7be      	b.n	8010e36 <_strtod_l+0x7e>
 8010eb8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8010eba:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8010ebe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010ec2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010ec6:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8010eca:	e7f0      	b.n	8010eae <_strtod_l+0xf6>
 8010ecc:	f8df a170 	ldr.w	sl, [pc, #368]	; 8011040 <_strtod_l+0x288>
 8010ed0:	e7ed      	b.n	8010eae <_strtod_l+0xf6>
 8010ed2:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8010ed6:	f04f 39ff 	mov.w	r9, #4294967295
 8010eda:	e7e8      	b.n	8010eae <_strtod_l+0xf6>
 8010edc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010ede:	1c5a      	adds	r2, r3, #1
 8010ee0:	921b      	str	r2, [sp, #108]	; 0x6c
 8010ee2:	785b      	ldrb	r3, [r3, #1]
 8010ee4:	2b30      	cmp	r3, #48	; 0x30
 8010ee6:	d0f9      	beq.n	8010edc <_strtod_l+0x124>
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d0a4      	beq.n	8010e36 <_strtod_l+0x7e>
 8010eec:	2301      	movs	r3, #1
 8010eee:	2500      	movs	r5, #0
 8010ef0:	220a      	movs	r2, #10
 8010ef2:	9307      	str	r3, [sp, #28]
 8010ef4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010ef6:	9506      	str	r5, [sp, #24]
 8010ef8:	9308      	str	r3, [sp, #32]
 8010efa:	9504      	str	r5, [sp, #16]
 8010efc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8010efe:	7807      	ldrb	r7, [r0, #0]
 8010f00:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8010f04:	b2d9      	uxtb	r1, r3
 8010f06:	2909      	cmp	r1, #9
 8010f08:	d929      	bls.n	8010f5e <_strtod_l+0x1a6>
 8010f0a:	4622      	mov	r2, r4
 8010f0c:	f8d8 1000 	ldr.w	r1, [r8]
 8010f10:	f7ff ff1c 	bl	8010d4c <strncmp>
 8010f14:	2800      	cmp	r0, #0
 8010f16:	d031      	beq.n	8010f7c <_strtod_l+0x1c4>
 8010f18:	2000      	movs	r0, #0
 8010f1a:	463b      	mov	r3, r7
 8010f1c:	4602      	mov	r2, r0
 8010f1e:	9c04      	ldr	r4, [sp, #16]
 8010f20:	9005      	str	r0, [sp, #20]
 8010f22:	2b65      	cmp	r3, #101	; 0x65
 8010f24:	d001      	beq.n	8010f2a <_strtod_l+0x172>
 8010f26:	2b45      	cmp	r3, #69	; 0x45
 8010f28:	d114      	bne.n	8010f54 <_strtod_l+0x19c>
 8010f2a:	b924      	cbnz	r4, 8010f36 <_strtod_l+0x17e>
 8010f2c:	b910      	cbnz	r0, 8010f34 <_strtod_l+0x17c>
 8010f2e:	9b07      	ldr	r3, [sp, #28]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d09e      	beq.n	8010e72 <_strtod_l+0xba>
 8010f34:	2400      	movs	r4, #0
 8010f36:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8010f38:	1c73      	adds	r3, r6, #1
 8010f3a:	931b      	str	r3, [sp, #108]	; 0x6c
 8010f3c:	7873      	ldrb	r3, [r6, #1]
 8010f3e:	2b2b      	cmp	r3, #43	; 0x2b
 8010f40:	d078      	beq.n	8011034 <_strtod_l+0x27c>
 8010f42:	2b2d      	cmp	r3, #45	; 0x2d
 8010f44:	d070      	beq.n	8011028 <_strtod_l+0x270>
 8010f46:	f04f 0c00 	mov.w	ip, #0
 8010f4a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8010f4e:	2f09      	cmp	r7, #9
 8010f50:	d97c      	bls.n	801104c <_strtod_l+0x294>
 8010f52:	961b      	str	r6, [sp, #108]	; 0x6c
 8010f54:	f04f 0e00 	mov.w	lr, #0
 8010f58:	e09a      	b.n	8011090 <_strtod_l+0x2d8>
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	e7c7      	b.n	8010eee <_strtod_l+0x136>
 8010f5e:	9904      	ldr	r1, [sp, #16]
 8010f60:	3001      	adds	r0, #1
 8010f62:	2908      	cmp	r1, #8
 8010f64:	bfd7      	itett	le
 8010f66:	9906      	ldrle	r1, [sp, #24]
 8010f68:	fb02 3505 	mlagt	r5, r2, r5, r3
 8010f6c:	fb02 3301 	mlale	r3, r2, r1, r3
 8010f70:	9306      	strle	r3, [sp, #24]
 8010f72:	9b04      	ldr	r3, [sp, #16]
 8010f74:	901b      	str	r0, [sp, #108]	; 0x6c
 8010f76:	3301      	adds	r3, #1
 8010f78:	9304      	str	r3, [sp, #16]
 8010f7a:	e7bf      	b.n	8010efc <_strtod_l+0x144>
 8010f7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010f7e:	191a      	adds	r2, r3, r4
 8010f80:	921b      	str	r2, [sp, #108]	; 0x6c
 8010f82:	9a04      	ldr	r2, [sp, #16]
 8010f84:	5d1b      	ldrb	r3, [r3, r4]
 8010f86:	2a00      	cmp	r2, #0
 8010f88:	d037      	beq.n	8010ffa <_strtod_l+0x242>
 8010f8a:	4602      	mov	r2, r0
 8010f8c:	9c04      	ldr	r4, [sp, #16]
 8010f8e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8010f92:	2909      	cmp	r1, #9
 8010f94:	d913      	bls.n	8010fbe <_strtod_l+0x206>
 8010f96:	2101      	movs	r1, #1
 8010f98:	9105      	str	r1, [sp, #20]
 8010f9a:	e7c2      	b.n	8010f22 <_strtod_l+0x16a>
 8010f9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010f9e:	3001      	adds	r0, #1
 8010fa0:	1c5a      	adds	r2, r3, #1
 8010fa2:	921b      	str	r2, [sp, #108]	; 0x6c
 8010fa4:	785b      	ldrb	r3, [r3, #1]
 8010fa6:	2b30      	cmp	r3, #48	; 0x30
 8010fa8:	d0f8      	beq.n	8010f9c <_strtod_l+0x1e4>
 8010faa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8010fae:	2a08      	cmp	r2, #8
 8010fb0:	f200 84f0 	bhi.w	8011994 <_strtod_l+0xbdc>
 8010fb4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8010fb6:	9208      	str	r2, [sp, #32]
 8010fb8:	4602      	mov	r2, r0
 8010fba:	2000      	movs	r0, #0
 8010fbc:	4604      	mov	r4, r0
 8010fbe:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8010fc2:	f100 0101 	add.w	r1, r0, #1
 8010fc6:	d012      	beq.n	8010fee <_strtod_l+0x236>
 8010fc8:	440a      	add	r2, r1
 8010fca:	270a      	movs	r7, #10
 8010fcc:	4621      	mov	r1, r4
 8010fce:	eb00 0c04 	add.w	ip, r0, r4
 8010fd2:	458c      	cmp	ip, r1
 8010fd4:	d113      	bne.n	8010ffe <_strtod_l+0x246>
 8010fd6:	1821      	adds	r1, r4, r0
 8010fd8:	2908      	cmp	r1, #8
 8010fda:	f104 0401 	add.w	r4, r4, #1
 8010fde:	4404      	add	r4, r0
 8010fe0:	dc19      	bgt.n	8011016 <_strtod_l+0x25e>
 8010fe2:	210a      	movs	r1, #10
 8010fe4:	9b06      	ldr	r3, [sp, #24]
 8010fe6:	fb01 e303 	mla	r3, r1, r3, lr
 8010fea:	9306      	str	r3, [sp, #24]
 8010fec:	2100      	movs	r1, #0
 8010fee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010ff0:	1c58      	adds	r0, r3, #1
 8010ff2:	901b      	str	r0, [sp, #108]	; 0x6c
 8010ff4:	785b      	ldrb	r3, [r3, #1]
 8010ff6:	4608      	mov	r0, r1
 8010ff8:	e7c9      	b.n	8010f8e <_strtod_l+0x1d6>
 8010ffa:	9804      	ldr	r0, [sp, #16]
 8010ffc:	e7d3      	b.n	8010fa6 <_strtod_l+0x1ee>
 8010ffe:	2908      	cmp	r1, #8
 8011000:	f101 0101 	add.w	r1, r1, #1
 8011004:	dc03      	bgt.n	801100e <_strtod_l+0x256>
 8011006:	9b06      	ldr	r3, [sp, #24]
 8011008:	437b      	muls	r3, r7
 801100a:	9306      	str	r3, [sp, #24]
 801100c:	e7e1      	b.n	8010fd2 <_strtod_l+0x21a>
 801100e:	2910      	cmp	r1, #16
 8011010:	bfd8      	it	le
 8011012:	437d      	mulle	r5, r7
 8011014:	e7dd      	b.n	8010fd2 <_strtod_l+0x21a>
 8011016:	2c10      	cmp	r4, #16
 8011018:	bfdc      	itt	le
 801101a:	210a      	movle	r1, #10
 801101c:	fb01 e505 	mlale	r5, r1, r5, lr
 8011020:	e7e4      	b.n	8010fec <_strtod_l+0x234>
 8011022:	2301      	movs	r3, #1
 8011024:	9305      	str	r3, [sp, #20]
 8011026:	e781      	b.n	8010f2c <_strtod_l+0x174>
 8011028:	f04f 0c01 	mov.w	ip, #1
 801102c:	1cb3      	adds	r3, r6, #2
 801102e:	931b      	str	r3, [sp, #108]	; 0x6c
 8011030:	78b3      	ldrb	r3, [r6, #2]
 8011032:	e78a      	b.n	8010f4a <_strtod_l+0x192>
 8011034:	f04f 0c00 	mov.w	ip, #0
 8011038:	e7f8      	b.n	801102c <_strtod_l+0x274>
 801103a:	bf00      	nop
 801103c:	080164e0 	.word	0x080164e0
 8011040:	7ff00000 	.word	0x7ff00000
 8011044:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011046:	1c5f      	adds	r7, r3, #1
 8011048:	971b      	str	r7, [sp, #108]	; 0x6c
 801104a:	785b      	ldrb	r3, [r3, #1]
 801104c:	2b30      	cmp	r3, #48	; 0x30
 801104e:	d0f9      	beq.n	8011044 <_strtod_l+0x28c>
 8011050:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8011054:	2f08      	cmp	r7, #8
 8011056:	f63f af7d 	bhi.w	8010f54 <_strtod_l+0x19c>
 801105a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801105e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011060:	9309      	str	r3, [sp, #36]	; 0x24
 8011062:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011064:	1c5f      	adds	r7, r3, #1
 8011066:	971b      	str	r7, [sp, #108]	; 0x6c
 8011068:	785b      	ldrb	r3, [r3, #1]
 801106a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801106e:	f1b8 0f09 	cmp.w	r8, #9
 8011072:	d937      	bls.n	80110e4 <_strtod_l+0x32c>
 8011074:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011076:	1a7f      	subs	r7, r7, r1
 8011078:	2f08      	cmp	r7, #8
 801107a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801107e:	dc37      	bgt.n	80110f0 <_strtod_l+0x338>
 8011080:	45be      	cmp	lr, r7
 8011082:	bfa8      	it	ge
 8011084:	46be      	movge	lr, r7
 8011086:	f1bc 0f00 	cmp.w	ip, #0
 801108a:	d001      	beq.n	8011090 <_strtod_l+0x2d8>
 801108c:	f1ce 0e00 	rsb	lr, lr, #0
 8011090:	2c00      	cmp	r4, #0
 8011092:	d151      	bne.n	8011138 <_strtod_l+0x380>
 8011094:	2800      	cmp	r0, #0
 8011096:	f47f aece 	bne.w	8010e36 <_strtod_l+0x7e>
 801109a:	9a07      	ldr	r2, [sp, #28]
 801109c:	2a00      	cmp	r2, #0
 801109e:	f47f aeca 	bne.w	8010e36 <_strtod_l+0x7e>
 80110a2:	9a05      	ldr	r2, [sp, #20]
 80110a4:	2a00      	cmp	r2, #0
 80110a6:	f47f aee4 	bne.w	8010e72 <_strtod_l+0xba>
 80110aa:	2b4e      	cmp	r3, #78	; 0x4e
 80110ac:	d027      	beq.n	80110fe <_strtod_l+0x346>
 80110ae:	dc21      	bgt.n	80110f4 <_strtod_l+0x33c>
 80110b0:	2b49      	cmp	r3, #73	; 0x49
 80110b2:	f47f aede 	bne.w	8010e72 <_strtod_l+0xba>
 80110b6:	49a4      	ldr	r1, [pc, #656]	; (8011348 <_strtod_l+0x590>)
 80110b8:	a81b      	add	r0, sp, #108	; 0x6c
 80110ba:	f002 f81b 	bl	80130f4 <__match>
 80110be:	2800      	cmp	r0, #0
 80110c0:	f43f aed7 	beq.w	8010e72 <_strtod_l+0xba>
 80110c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80110c6:	49a1      	ldr	r1, [pc, #644]	; (801134c <_strtod_l+0x594>)
 80110c8:	3b01      	subs	r3, #1
 80110ca:	a81b      	add	r0, sp, #108	; 0x6c
 80110cc:	931b      	str	r3, [sp, #108]	; 0x6c
 80110ce:	f002 f811 	bl	80130f4 <__match>
 80110d2:	b910      	cbnz	r0, 80110da <_strtod_l+0x322>
 80110d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80110d6:	3301      	adds	r3, #1
 80110d8:	931b      	str	r3, [sp, #108]	; 0x6c
 80110da:	f8df a284 	ldr.w	sl, [pc, #644]	; 8011360 <_strtod_l+0x5a8>
 80110de:	f04f 0900 	mov.w	r9, #0
 80110e2:	e6a8      	b.n	8010e36 <_strtod_l+0x7e>
 80110e4:	210a      	movs	r1, #10
 80110e6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80110ea:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80110ee:	e7b8      	b.n	8011062 <_strtod_l+0x2aa>
 80110f0:	46be      	mov	lr, r7
 80110f2:	e7c8      	b.n	8011086 <_strtod_l+0x2ce>
 80110f4:	2b69      	cmp	r3, #105	; 0x69
 80110f6:	d0de      	beq.n	80110b6 <_strtod_l+0x2fe>
 80110f8:	2b6e      	cmp	r3, #110	; 0x6e
 80110fa:	f47f aeba 	bne.w	8010e72 <_strtod_l+0xba>
 80110fe:	4994      	ldr	r1, [pc, #592]	; (8011350 <_strtod_l+0x598>)
 8011100:	a81b      	add	r0, sp, #108	; 0x6c
 8011102:	f001 fff7 	bl	80130f4 <__match>
 8011106:	2800      	cmp	r0, #0
 8011108:	f43f aeb3 	beq.w	8010e72 <_strtod_l+0xba>
 801110c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801110e:	781b      	ldrb	r3, [r3, #0]
 8011110:	2b28      	cmp	r3, #40	; 0x28
 8011112:	d10e      	bne.n	8011132 <_strtod_l+0x37a>
 8011114:	aa1e      	add	r2, sp, #120	; 0x78
 8011116:	498f      	ldr	r1, [pc, #572]	; (8011354 <_strtod_l+0x59c>)
 8011118:	a81b      	add	r0, sp, #108	; 0x6c
 801111a:	f001 ffff 	bl	801311c <__hexnan>
 801111e:	2805      	cmp	r0, #5
 8011120:	d107      	bne.n	8011132 <_strtod_l+0x37a>
 8011122:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011124:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8011128:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 801112c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8011130:	e681      	b.n	8010e36 <_strtod_l+0x7e>
 8011132:	f8df a234 	ldr.w	sl, [pc, #564]	; 8011368 <_strtod_l+0x5b0>
 8011136:	e7d2      	b.n	80110de <_strtod_l+0x326>
 8011138:	ebae 0302 	sub.w	r3, lr, r2
 801113c:	9307      	str	r3, [sp, #28]
 801113e:	9b04      	ldr	r3, [sp, #16]
 8011140:	9806      	ldr	r0, [sp, #24]
 8011142:	2b00      	cmp	r3, #0
 8011144:	bf08      	it	eq
 8011146:	4623      	moveq	r3, r4
 8011148:	2c10      	cmp	r4, #16
 801114a:	9304      	str	r3, [sp, #16]
 801114c:	46a0      	mov	r8, r4
 801114e:	bfa8      	it	ge
 8011150:	f04f 0810 	movge.w	r8, #16
 8011154:	f7ef f9b2 	bl	80004bc <__aeabi_ui2d>
 8011158:	2c09      	cmp	r4, #9
 801115a:	4681      	mov	r9, r0
 801115c:	468a      	mov	sl, r1
 801115e:	dc13      	bgt.n	8011188 <_strtod_l+0x3d0>
 8011160:	9b07      	ldr	r3, [sp, #28]
 8011162:	2b00      	cmp	r3, #0
 8011164:	f43f ae67 	beq.w	8010e36 <_strtod_l+0x7e>
 8011168:	9b07      	ldr	r3, [sp, #28]
 801116a:	dd7e      	ble.n	801126a <_strtod_l+0x4b2>
 801116c:	2b16      	cmp	r3, #22
 801116e:	dc65      	bgt.n	801123c <_strtod_l+0x484>
 8011170:	4a79      	ldr	r2, [pc, #484]	; (8011358 <_strtod_l+0x5a0>)
 8011172:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8011176:	464a      	mov	r2, r9
 8011178:	e9de 0100 	ldrd	r0, r1, [lr]
 801117c:	4653      	mov	r3, sl
 801117e:	f7ef fa17 	bl	80005b0 <__aeabi_dmul>
 8011182:	4681      	mov	r9, r0
 8011184:	468a      	mov	sl, r1
 8011186:	e656      	b.n	8010e36 <_strtod_l+0x7e>
 8011188:	4b73      	ldr	r3, [pc, #460]	; (8011358 <_strtod_l+0x5a0>)
 801118a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801118e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8011192:	f7ef fa0d 	bl	80005b0 <__aeabi_dmul>
 8011196:	4606      	mov	r6, r0
 8011198:	4628      	mov	r0, r5
 801119a:	460f      	mov	r7, r1
 801119c:	f7ef f98e 	bl	80004bc <__aeabi_ui2d>
 80111a0:	4602      	mov	r2, r0
 80111a2:	460b      	mov	r3, r1
 80111a4:	4630      	mov	r0, r6
 80111a6:	4639      	mov	r1, r7
 80111a8:	f7ef f84c 	bl	8000244 <__adddf3>
 80111ac:	2c0f      	cmp	r4, #15
 80111ae:	4681      	mov	r9, r0
 80111b0:	468a      	mov	sl, r1
 80111b2:	ddd5      	ble.n	8011160 <_strtod_l+0x3a8>
 80111b4:	9b07      	ldr	r3, [sp, #28]
 80111b6:	eba4 0808 	sub.w	r8, r4, r8
 80111ba:	4498      	add	r8, r3
 80111bc:	f1b8 0f00 	cmp.w	r8, #0
 80111c0:	f340 809a 	ble.w	80112f8 <_strtod_l+0x540>
 80111c4:	f018 030f 	ands.w	r3, r8, #15
 80111c8:	d00a      	beq.n	80111e0 <_strtod_l+0x428>
 80111ca:	4963      	ldr	r1, [pc, #396]	; (8011358 <_strtod_l+0x5a0>)
 80111cc:	464a      	mov	r2, r9
 80111ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80111d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80111d6:	4653      	mov	r3, sl
 80111d8:	f7ef f9ea 	bl	80005b0 <__aeabi_dmul>
 80111dc:	4681      	mov	r9, r0
 80111de:	468a      	mov	sl, r1
 80111e0:	f038 080f 	bics.w	r8, r8, #15
 80111e4:	d077      	beq.n	80112d6 <_strtod_l+0x51e>
 80111e6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80111ea:	dd4b      	ble.n	8011284 <_strtod_l+0x4cc>
 80111ec:	f04f 0800 	mov.w	r8, #0
 80111f0:	f8cd 8010 	str.w	r8, [sp, #16]
 80111f4:	f8cd 8020 	str.w	r8, [sp, #32]
 80111f8:	f8cd 8018 	str.w	r8, [sp, #24]
 80111fc:	2322      	movs	r3, #34	; 0x22
 80111fe:	f04f 0900 	mov.w	r9, #0
 8011202:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8011360 <_strtod_l+0x5a8>
 8011206:	f8cb 3000 	str.w	r3, [fp]
 801120a:	9b08      	ldr	r3, [sp, #32]
 801120c:	2b00      	cmp	r3, #0
 801120e:	f43f ae12 	beq.w	8010e36 <_strtod_l+0x7e>
 8011212:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011214:	4658      	mov	r0, fp
 8011216:	f002 f8e5 	bl	80133e4 <_Bfree>
 801121a:	9906      	ldr	r1, [sp, #24]
 801121c:	4658      	mov	r0, fp
 801121e:	f002 f8e1 	bl	80133e4 <_Bfree>
 8011222:	9904      	ldr	r1, [sp, #16]
 8011224:	4658      	mov	r0, fp
 8011226:	f002 f8dd 	bl	80133e4 <_Bfree>
 801122a:	9908      	ldr	r1, [sp, #32]
 801122c:	4658      	mov	r0, fp
 801122e:	f002 f8d9 	bl	80133e4 <_Bfree>
 8011232:	4641      	mov	r1, r8
 8011234:	4658      	mov	r0, fp
 8011236:	f002 f8d5 	bl	80133e4 <_Bfree>
 801123a:	e5fc      	b.n	8010e36 <_strtod_l+0x7e>
 801123c:	9a07      	ldr	r2, [sp, #28]
 801123e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8011242:	4293      	cmp	r3, r2
 8011244:	dbb6      	blt.n	80111b4 <_strtod_l+0x3fc>
 8011246:	4d44      	ldr	r5, [pc, #272]	; (8011358 <_strtod_l+0x5a0>)
 8011248:	f1c4 040f 	rsb	r4, r4, #15
 801124c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8011250:	464a      	mov	r2, r9
 8011252:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011256:	4653      	mov	r3, sl
 8011258:	f7ef f9aa 	bl	80005b0 <__aeabi_dmul>
 801125c:	9b07      	ldr	r3, [sp, #28]
 801125e:	1b1c      	subs	r4, r3, r4
 8011260:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8011264:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011268:	e789      	b.n	801117e <_strtod_l+0x3c6>
 801126a:	f113 0f16 	cmn.w	r3, #22
 801126e:	dba1      	blt.n	80111b4 <_strtod_l+0x3fc>
 8011270:	4a39      	ldr	r2, [pc, #228]	; (8011358 <_strtod_l+0x5a0>)
 8011272:	4648      	mov	r0, r9
 8011274:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8011278:	e9d2 2300 	ldrd	r2, r3, [r2]
 801127c:	4651      	mov	r1, sl
 801127e:	f7ef fac1 	bl	8000804 <__aeabi_ddiv>
 8011282:	e77e      	b.n	8011182 <_strtod_l+0x3ca>
 8011284:	2300      	movs	r3, #0
 8011286:	4648      	mov	r0, r9
 8011288:	4651      	mov	r1, sl
 801128a:	461d      	mov	r5, r3
 801128c:	4e33      	ldr	r6, [pc, #204]	; (801135c <_strtod_l+0x5a4>)
 801128e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8011292:	f1b8 0f01 	cmp.w	r8, #1
 8011296:	dc21      	bgt.n	80112dc <_strtod_l+0x524>
 8011298:	b10b      	cbz	r3, 801129e <_strtod_l+0x4e6>
 801129a:	4681      	mov	r9, r0
 801129c:	468a      	mov	sl, r1
 801129e:	4b2f      	ldr	r3, [pc, #188]	; (801135c <_strtod_l+0x5a4>)
 80112a0:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 80112a4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80112a8:	464a      	mov	r2, r9
 80112aa:	e9d5 0100 	ldrd	r0, r1, [r5]
 80112ae:	4653      	mov	r3, sl
 80112b0:	f7ef f97e 	bl	80005b0 <__aeabi_dmul>
 80112b4:	4b2a      	ldr	r3, [pc, #168]	; (8011360 <_strtod_l+0x5a8>)
 80112b6:	460a      	mov	r2, r1
 80112b8:	400b      	ands	r3, r1
 80112ba:	492a      	ldr	r1, [pc, #168]	; (8011364 <_strtod_l+0x5ac>)
 80112bc:	4681      	mov	r9, r0
 80112be:	428b      	cmp	r3, r1
 80112c0:	d894      	bhi.n	80111ec <_strtod_l+0x434>
 80112c2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80112c6:	428b      	cmp	r3, r1
 80112c8:	bf86      	itte	hi
 80112ca:	f04f 39ff 	movhi.w	r9, #4294967295
 80112ce:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 801136c <_strtod_l+0x5b4>
 80112d2:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 80112d6:	2300      	movs	r3, #0
 80112d8:	9305      	str	r3, [sp, #20]
 80112da:	e07b      	b.n	80113d4 <_strtod_l+0x61c>
 80112dc:	f018 0f01 	tst.w	r8, #1
 80112e0:	d006      	beq.n	80112f0 <_strtod_l+0x538>
 80112e2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80112e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ea:	f7ef f961 	bl	80005b0 <__aeabi_dmul>
 80112ee:	2301      	movs	r3, #1
 80112f0:	3501      	adds	r5, #1
 80112f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80112f6:	e7cc      	b.n	8011292 <_strtod_l+0x4da>
 80112f8:	d0ed      	beq.n	80112d6 <_strtod_l+0x51e>
 80112fa:	f1c8 0800 	rsb	r8, r8, #0
 80112fe:	f018 020f 	ands.w	r2, r8, #15
 8011302:	d00a      	beq.n	801131a <_strtod_l+0x562>
 8011304:	4b14      	ldr	r3, [pc, #80]	; (8011358 <_strtod_l+0x5a0>)
 8011306:	4648      	mov	r0, r9
 8011308:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801130c:	4651      	mov	r1, sl
 801130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011312:	f7ef fa77 	bl	8000804 <__aeabi_ddiv>
 8011316:	4681      	mov	r9, r0
 8011318:	468a      	mov	sl, r1
 801131a:	ea5f 1828 	movs.w	r8, r8, asr #4
 801131e:	d0da      	beq.n	80112d6 <_strtod_l+0x51e>
 8011320:	f1b8 0f1f 	cmp.w	r8, #31
 8011324:	dd24      	ble.n	8011370 <_strtod_l+0x5b8>
 8011326:	f04f 0800 	mov.w	r8, #0
 801132a:	f8cd 8010 	str.w	r8, [sp, #16]
 801132e:	f8cd 8020 	str.w	r8, [sp, #32]
 8011332:	f8cd 8018 	str.w	r8, [sp, #24]
 8011336:	2322      	movs	r3, #34	; 0x22
 8011338:	f04f 0900 	mov.w	r9, #0
 801133c:	f04f 0a00 	mov.w	sl, #0
 8011340:	f8cb 3000 	str.w	r3, [fp]
 8011344:	e761      	b.n	801120a <_strtod_l+0x452>
 8011346:	bf00      	nop
 8011348:	080164a9 	.word	0x080164a9
 801134c:	08016533 	.word	0x08016533
 8011350:	080164b1 	.word	0x080164b1
 8011354:	080164f4 	.word	0x080164f4
 8011358:	080165d8 	.word	0x080165d8
 801135c:	080165b0 	.word	0x080165b0
 8011360:	7ff00000 	.word	0x7ff00000
 8011364:	7ca00000 	.word	0x7ca00000
 8011368:	fff80000 	.word	0xfff80000
 801136c:	7fefffff 	.word	0x7fefffff
 8011370:	f018 0310 	ands.w	r3, r8, #16
 8011374:	bf18      	it	ne
 8011376:	236a      	movne	r3, #106	; 0x6a
 8011378:	4648      	mov	r0, r9
 801137a:	9305      	str	r3, [sp, #20]
 801137c:	4651      	mov	r1, sl
 801137e:	2300      	movs	r3, #0
 8011380:	4da1      	ldr	r5, [pc, #644]	; (8011608 <_strtod_l+0x850>)
 8011382:	f1b8 0f00 	cmp.w	r8, #0
 8011386:	f300 8113 	bgt.w	80115b0 <_strtod_l+0x7f8>
 801138a:	b10b      	cbz	r3, 8011390 <_strtod_l+0x5d8>
 801138c:	4681      	mov	r9, r0
 801138e:	468a      	mov	sl, r1
 8011390:	9b05      	ldr	r3, [sp, #20]
 8011392:	b1bb      	cbz	r3, 80113c4 <_strtod_l+0x60c>
 8011394:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8011398:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801139c:	2b00      	cmp	r3, #0
 801139e:	4651      	mov	r1, sl
 80113a0:	dd10      	ble.n	80113c4 <_strtod_l+0x60c>
 80113a2:	2b1f      	cmp	r3, #31
 80113a4:	f340 8110 	ble.w	80115c8 <_strtod_l+0x810>
 80113a8:	2b34      	cmp	r3, #52	; 0x34
 80113aa:	bfd8      	it	le
 80113ac:	f04f 32ff 	movle.w	r2, #4294967295
 80113b0:	f04f 0900 	mov.w	r9, #0
 80113b4:	bfcf      	iteee	gt
 80113b6:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 80113ba:	3b20      	suble	r3, #32
 80113bc:	fa02 f303 	lslle.w	r3, r2, r3
 80113c0:	ea03 0a01 	andle.w	sl, r3, r1
 80113c4:	2200      	movs	r2, #0
 80113c6:	2300      	movs	r3, #0
 80113c8:	4648      	mov	r0, r9
 80113ca:	4651      	mov	r1, sl
 80113cc:	f7ef fb58 	bl	8000a80 <__aeabi_dcmpeq>
 80113d0:	2800      	cmp	r0, #0
 80113d2:	d1a8      	bne.n	8011326 <_strtod_l+0x56e>
 80113d4:	9b06      	ldr	r3, [sp, #24]
 80113d6:	9a04      	ldr	r2, [sp, #16]
 80113d8:	9300      	str	r3, [sp, #0]
 80113da:	9908      	ldr	r1, [sp, #32]
 80113dc:	4623      	mov	r3, r4
 80113de:	4658      	mov	r0, fp
 80113e0:	f002 f852 	bl	8013488 <__s2b>
 80113e4:	9008      	str	r0, [sp, #32]
 80113e6:	2800      	cmp	r0, #0
 80113e8:	f43f af00 	beq.w	80111ec <_strtod_l+0x434>
 80113ec:	9a07      	ldr	r2, [sp, #28]
 80113ee:	9b07      	ldr	r3, [sp, #28]
 80113f0:	2a00      	cmp	r2, #0
 80113f2:	f1c3 0300 	rsb	r3, r3, #0
 80113f6:	bfa8      	it	ge
 80113f8:	2300      	movge	r3, #0
 80113fa:	f04f 0800 	mov.w	r8, #0
 80113fe:	930e      	str	r3, [sp, #56]	; 0x38
 8011400:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011404:	9316      	str	r3, [sp, #88]	; 0x58
 8011406:	f8cd 8010 	str.w	r8, [sp, #16]
 801140a:	9b08      	ldr	r3, [sp, #32]
 801140c:	4658      	mov	r0, fp
 801140e:	6859      	ldr	r1, [r3, #4]
 8011410:	f001 ffb4 	bl	801337c <_Balloc>
 8011414:	9006      	str	r0, [sp, #24]
 8011416:	2800      	cmp	r0, #0
 8011418:	f43f aef0 	beq.w	80111fc <_strtod_l+0x444>
 801141c:	9b08      	ldr	r3, [sp, #32]
 801141e:	300c      	adds	r0, #12
 8011420:	691a      	ldr	r2, [r3, #16]
 8011422:	f103 010c 	add.w	r1, r3, #12
 8011426:	3202      	adds	r2, #2
 8011428:	0092      	lsls	r2, r2, #2
 801142a:	f7fe fdac 	bl	800ff86 <memcpy>
 801142e:	ab1e      	add	r3, sp, #120	; 0x78
 8011430:	9301      	str	r3, [sp, #4]
 8011432:	ab1d      	add	r3, sp, #116	; 0x74
 8011434:	9300      	str	r3, [sp, #0]
 8011436:	464a      	mov	r2, r9
 8011438:	4653      	mov	r3, sl
 801143a:	4658      	mov	r0, fp
 801143c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8011440:	f002 fadc 	bl	80139fc <__d2b>
 8011444:	901c      	str	r0, [sp, #112]	; 0x70
 8011446:	2800      	cmp	r0, #0
 8011448:	f43f aed8 	beq.w	80111fc <_strtod_l+0x444>
 801144c:	2101      	movs	r1, #1
 801144e:	4658      	mov	r0, fp
 8011450:	f002 f8a6 	bl	80135a0 <__i2b>
 8011454:	9004      	str	r0, [sp, #16]
 8011456:	4603      	mov	r3, r0
 8011458:	2800      	cmp	r0, #0
 801145a:	f43f aecf 	beq.w	80111fc <_strtod_l+0x444>
 801145e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8011460:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011462:	2d00      	cmp	r5, #0
 8011464:	bfab      	itete	ge
 8011466:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8011468:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 801146a:	18ee      	addge	r6, r5, r3
 801146c:	1b5c      	sublt	r4, r3, r5
 801146e:	9b05      	ldr	r3, [sp, #20]
 8011470:	bfa8      	it	ge
 8011472:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8011474:	eba5 0503 	sub.w	r5, r5, r3
 8011478:	4415      	add	r5, r2
 801147a:	4b64      	ldr	r3, [pc, #400]	; (801160c <_strtod_l+0x854>)
 801147c:	f105 35ff 	add.w	r5, r5, #4294967295
 8011480:	bfb8      	it	lt
 8011482:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8011484:	429d      	cmp	r5, r3
 8011486:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801148a:	f280 80af 	bge.w	80115ec <_strtod_l+0x834>
 801148e:	1b5b      	subs	r3, r3, r5
 8011490:	2b1f      	cmp	r3, #31
 8011492:	eba2 0203 	sub.w	r2, r2, r3
 8011496:	f04f 0701 	mov.w	r7, #1
 801149a:	f300 809c 	bgt.w	80115d6 <_strtod_l+0x81e>
 801149e:	2500      	movs	r5, #0
 80114a0:	fa07 f303 	lsl.w	r3, r7, r3
 80114a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80114a6:	18b7      	adds	r7, r6, r2
 80114a8:	9b05      	ldr	r3, [sp, #20]
 80114aa:	42be      	cmp	r6, r7
 80114ac:	4414      	add	r4, r2
 80114ae:	441c      	add	r4, r3
 80114b0:	4633      	mov	r3, r6
 80114b2:	bfa8      	it	ge
 80114b4:	463b      	movge	r3, r7
 80114b6:	42a3      	cmp	r3, r4
 80114b8:	bfa8      	it	ge
 80114ba:	4623      	movge	r3, r4
 80114bc:	2b00      	cmp	r3, #0
 80114be:	bfc2      	ittt	gt
 80114c0:	1aff      	subgt	r7, r7, r3
 80114c2:	1ae4      	subgt	r4, r4, r3
 80114c4:	1af6      	subgt	r6, r6, r3
 80114c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80114c8:	b1bb      	cbz	r3, 80114fa <_strtod_l+0x742>
 80114ca:	461a      	mov	r2, r3
 80114cc:	9904      	ldr	r1, [sp, #16]
 80114ce:	4658      	mov	r0, fp
 80114d0:	f002 f904 	bl	80136dc <__pow5mult>
 80114d4:	9004      	str	r0, [sp, #16]
 80114d6:	2800      	cmp	r0, #0
 80114d8:	f43f ae90 	beq.w	80111fc <_strtod_l+0x444>
 80114dc:	4601      	mov	r1, r0
 80114de:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80114e0:	4658      	mov	r0, fp
 80114e2:	f002 f866 	bl	80135b2 <__multiply>
 80114e6:	9009      	str	r0, [sp, #36]	; 0x24
 80114e8:	2800      	cmp	r0, #0
 80114ea:	f43f ae87 	beq.w	80111fc <_strtod_l+0x444>
 80114ee:	991c      	ldr	r1, [sp, #112]	; 0x70
 80114f0:	4658      	mov	r0, fp
 80114f2:	f001 ff77 	bl	80133e4 <_Bfree>
 80114f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80114f8:	931c      	str	r3, [sp, #112]	; 0x70
 80114fa:	2f00      	cmp	r7, #0
 80114fc:	dc7a      	bgt.n	80115f4 <_strtod_l+0x83c>
 80114fe:	9b07      	ldr	r3, [sp, #28]
 8011500:	2b00      	cmp	r3, #0
 8011502:	dd08      	ble.n	8011516 <_strtod_l+0x75e>
 8011504:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011506:	9906      	ldr	r1, [sp, #24]
 8011508:	4658      	mov	r0, fp
 801150a:	f002 f8e7 	bl	80136dc <__pow5mult>
 801150e:	9006      	str	r0, [sp, #24]
 8011510:	2800      	cmp	r0, #0
 8011512:	f43f ae73 	beq.w	80111fc <_strtod_l+0x444>
 8011516:	2c00      	cmp	r4, #0
 8011518:	dd08      	ble.n	801152c <_strtod_l+0x774>
 801151a:	4622      	mov	r2, r4
 801151c:	9906      	ldr	r1, [sp, #24]
 801151e:	4658      	mov	r0, fp
 8011520:	f002 f92a 	bl	8013778 <__lshift>
 8011524:	9006      	str	r0, [sp, #24]
 8011526:	2800      	cmp	r0, #0
 8011528:	f43f ae68 	beq.w	80111fc <_strtod_l+0x444>
 801152c:	2e00      	cmp	r6, #0
 801152e:	dd08      	ble.n	8011542 <_strtod_l+0x78a>
 8011530:	4632      	mov	r2, r6
 8011532:	9904      	ldr	r1, [sp, #16]
 8011534:	4658      	mov	r0, fp
 8011536:	f002 f91f 	bl	8013778 <__lshift>
 801153a:	9004      	str	r0, [sp, #16]
 801153c:	2800      	cmp	r0, #0
 801153e:	f43f ae5d 	beq.w	80111fc <_strtod_l+0x444>
 8011542:	9a06      	ldr	r2, [sp, #24]
 8011544:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011546:	4658      	mov	r0, fp
 8011548:	f002 f984 	bl	8013854 <__mdiff>
 801154c:	4680      	mov	r8, r0
 801154e:	2800      	cmp	r0, #0
 8011550:	f43f ae54 	beq.w	80111fc <_strtod_l+0x444>
 8011554:	2400      	movs	r4, #0
 8011556:	68c3      	ldr	r3, [r0, #12]
 8011558:	9904      	ldr	r1, [sp, #16]
 801155a:	60c4      	str	r4, [r0, #12]
 801155c:	930c      	str	r3, [sp, #48]	; 0x30
 801155e:	f002 f95f 	bl	8013820 <__mcmp>
 8011562:	42a0      	cmp	r0, r4
 8011564:	da54      	bge.n	8011610 <_strtod_l+0x858>
 8011566:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011568:	b9f3      	cbnz	r3, 80115a8 <_strtod_l+0x7f0>
 801156a:	f1b9 0f00 	cmp.w	r9, #0
 801156e:	d11b      	bne.n	80115a8 <_strtod_l+0x7f0>
 8011570:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8011574:	b9c3      	cbnz	r3, 80115a8 <_strtod_l+0x7f0>
 8011576:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 801157a:	0d1b      	lsrs	r3, r3, #20
 801157c:	051b      	lsls	r3, r3, #20
 801157e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011582:	d911      	bls.n	80115a8 <_strtod_l+0x7f0>
 8011584:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8011588:	b91b      	cbnz	r3, 8011592 <_strtod_l+0x7da>
 801158a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801158e:	2b01      	cmp	r3, #1
 8011590:	dd0a      	ble.n	80115a8 <_strtod_l+0x7f0>
 8011592:	4641      	mov	r1, r8
 8011594:	2201      	movs	r2, #1
 8011596:	4658      	mov	r0, fp
 8011598:	f002 f8ee 	bl	8013778 <__lshift>
 801159c:	9904      	ldr	r1, [sp, #16]
 801159e:	4680      	mov	r8, r0
 80115a0:	f002 f93e 	bl	8013820 <__mcmp>
 80115a4:	2800      	cmp	r0, #0
 80115a6:	dc68      	bgt.n	801167a <_strtod_l+0x8c2>
 80115a8:	9b05      	ldr	r3, [sp, #20]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d172      	bne.n	8011694 <_strtod_l+0x8dc>
 80115ae:	e630      	b.n	8011212 <_strtod_l+0x45a>
 80115b0:	f018 0f01 	tst.w	r8, #1
 80115b4:	d004      	beq.n	80115c0 <_strtod_l+0x808>
 80115b6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80115ba:	f7ee fff9 	bl	80005b0 <__aeabi_dmul>
 80115be:	2301      	movs	r3, #1
 80115c0:	ea4f 0868 	mov.w	r8, r8, asr #1
 80115c4:	3508      	adds	r5, #8
 80115c6:	e6dc      	b.n	8011382 <_strtod_l+0x5ca>
 80115c8:	f04f 32ff 	mov.w	r2, #4294967295
 80115cc:	fa02 f303 	lsl.w	r3, r2, r3
 80115d0:	ea03 0909 	and.w	r9, r3, r9
 80115d4:	e6f6      	b.n	80113c4 <_strtod_l+0x60c>
 80115d6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80115da:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80115de:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80115e2:	35e2      	adds	r5, #226	; 0xe2
 80115e4:	fa07 f505 	lsl.w	r5, r7, r5
 80115e8:	970f      	str	r7, [sp, #60]	; 0x3c
 80115ea:	e75c      	b.n	80114a6 <_strtod_l+0x6ee>
 80115ec:	2301      	movs	r3, #1
 80115ee:	2500      	movs	r5, #0
 80115f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80115f2:	e758      	b.n	80114a6 <_strtod_l+0x6ee>
 80115f4:	463a      	mov	r2, r7
 80115f6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80115f8:	4658      	mov	r0, fp
 80115fa:	f002 f8bd 	bl	8013778 <__lshift>
 80115fe:	901c      	str	r0, [sp, #112]	; 0x70
 8011600:	2800      	cmp	r0, #0
 8011602:	f47f af7c 	bne.w	80114fe <_strtod_l+0x746>
 8011606:	e5f9      	b.n	80111fc <_strtod_l+0x444>
 8011608:	08016508 	.word	0x08016508
 801160c:	fffffc02 	.word	0xfffffc02
 8011610:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8011614:	f040 8089 	bne.w	801172a <_strtod_l+0x972>
 8011618:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801161a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 801161e:	b342      	cbz	r2, 8011672 <_strtod_l+0x8ba>
 8011620:	4aaf      	ldr	r2, [pc, #700]	; (80118e0 <_strtod_l+0xb28>)
 8011622:	4293      	cmp	r3, r2
 8011624:	d156      	bne.n	80116d4 <_strtod_l+0x91c>
 8011626:	9b05      	ldr	r3, [sp, #20]
 8011628:	4648      	mov	r0, r9
 801162a:	b1eb      	cbz	r3, 8011668 <_strtod_l+0x8b0>
 801162c:	4653      	mov	r3, sl
 801162e:	4aad      	ldr	r2, [pc, #692]	; (80118e4 <_strtod_l+0xb2c>)
 8011630:	f04f 31ff 	mov.w	r1, #4294967295
 8011634:	401a      	ands	r2, r3
 8011636:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801163a:	d818      	bhi.n	801166e <_strtod_l+0x8b6>
 801163c:	0d12      	lsrs	r2, r2, #20
 801163e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8011642:	fa01 f303 	lsl.w	r3, r1, r3
 8011646:	4298      	cmp	r0, r3
 8011648:	d144      	bne.n	80116d4 <_strtod_l+0x91c>
 801164a:	4ba7      	ldr	r3, [pc, #668]	; (80118e8 <_strtod_l+0xb30>)
 801164c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801164e:	429a      	cmp	r2, r3
 8011650:	d102      	bne.n	8011658 <_strtod_l+0x8a0>
 8011652:	3001      	adds	r0, #1
 8011654:	f43f add2 	beq.w	80111fc <_strtod_l+0x444>
 8011658:	4ba2      	ldr	r3, [pc, #648]	; (80118e4 <_strtod_l+0xb2c>)
 801165a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801165c:	f04f 0900 	mov.w	r9, #0
 8011660:	401a      	ands	r2, r3
 8011662:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8011666:	e79f      	b.n	80115a8 <_strtod_l+0x7f0>
 8011668:	f04f 33ff 	mov.w	r3, #4294967295
 801166c:	e7eb      	b.n	8011646 <_strtod_l+0x88e>
 801166e:	460b      	mov	r3, r1
 8011670:	e7e9      	b.n	8011646 <_strtod_l+0x88e>
 8011672:	bb7b      	cbnz	r3, 80116d4 <_strtod_l+0x91c>
 8011674:	f1b9 0f00 	cmp.w	r9, #0
 8011678:	d12c      	bne.n	80116d4 <_strtod_l+0x91c>
 801167a:	9905      	ldr	r1, [sp, #20]
 801167c:	4653      	mov	r3, sl
 801167e:	4a99      	ldr	r2, [pc, #612]	; (80118e4 <_strtod_l+0xb2c>)
 8011680:	b1f1      	cbz	r1, 80116c0 <_strtod_l+0x908>
 8011682:	ea02 010a 	and.w	r1, r2, sl
 8011686:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801168a:	dc19      	bgt.n	80116c0 <_strtod_l+0x908>
 801168c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011690:	f77f ae51 	ble.w	8011336 <_strtod_l+0x57e>
 8011694:	2300      	movs	r3, #0
 8011696:	4a95      	ldr	r2, [pc, #596]	; (80118ec <_strtod_l+0xb34>)
 8011698:	4648      	mov	r0, r9
 801169a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 801169e:	4651      	mov	r1, sl
 80116a0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80116a4:	f7ee ff84 	bl	80005b0 <__aeabi_dmul>
 80116a8:	4681      	mov	r9, r0
 80116aa:	468a      	mov	sl, r1
 80116ac:	2900      	cmp	r1, #0
 80116ae:	f47f adb0 	bne.w	8011212 <_strtod_l+0x45a>
 80116b2:	2800      	cmp	r0, #0
 80116b4:	f47f adad 	bne.w	8011212 <_strtod_l+0x45a>
 80116b8:	2322      	movs	r3, #34	; 0x22
 80116ba:	f8cb 3000 	str.w	r3, [fp]
 80116be:	e5a8      	b.n	8011212 <_strtod_l+0x45a>
 80116c0:	4013      	ands	r3, r2
 80116c2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80116c6:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 80116ca:	f04f 39ff 	mov.w	r9, #4294967295
 80116ce:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 80116d2:	e769      	b.n	80115a8 <_strtod_l+0x7f0>
 80116d4:	b19d      	cbz	r5, 80116fe <_strtod_l+0x946>
 80116d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116d8:	421d      	tst	r5, r3
 80116da:	f43f af65 	beq.w	80115a8 <_strtod_l+0x7f0>
 80116de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80116e0:	9a05      	ldr	r2, [sp, #20]
 80116e2:	4648      	mov	r0, r9
 80116e4:	4651      	mov	r1, sl
 80116e6:	b173      	cbz	r3, 8011706 <_strtod_l+0x94e>
 80116e8:	f7ff fb42 	bl	8010d70 <sulp>
 80116ec:	4602      	mov	r2, r0
 80116ee:	460b      	mov	r3, r1
 80116f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80116f4:	f7ee fda6 	bl	8000244 <__adddf3>
 80116f8:	4681      	mov	r9, r0
 80116fa:	468a      	mov	sl, r1
 80116fc:	e754      	b.n	80115a8 <_strtod_l+0x7f0>
 80116fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011700:	ea13 0f09 	tst.w	r3, r9
 8011704:	e7e9      	b.n	80116da <_strtod_l+0x922>
 8011706:	f7ff fb33 	bl	8010d70 <sulp>
 801170a:	4602      	mov	r2, r0
 801170c:	460b      	mov	r3, r1
 801170e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011712:	f7ee fd95 	bl	8000240 <__aeabi_dsub>
 8011716:	2200      	movs	r2, #0
 8011718:	2300      	movs	r3, #0
 801171a:	4681      	mov	r9, r0
 801171c:	468a      	mov	sl, r1
 801171e:	f7ef f9af 	bl	8000a80 <__aeabi_dcmpeq>
 8011722:	2800      	cmp	r0, #0
 8011724:	f47f ae07 	bne.w	8011336 <_strtod_l+0x57e>
 8011728:	e73e      	b.n	80115a8 <_strtod_l+0x7f0>
 801172a:	9904      	ldr	r1, [sp, #16]
 801172c:	4640      	mov	r0, r8
 801172e:	f002 f9b4 	bl	8013a9a <__ratio>
 8011732:	2200      	movs	r2, #0
 8011734:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011738:	4606      	mov	r6, r0
 801173a:	460f      	mov	r7, r1
 801173c:	f7ef f9b4 	bl	8000aa8 <__aeabi_dcmple>
 8011740:	2800      	cmp	r0, #0
 8011742:	d075      	beq.n	8011830 <_strtod_l+0xa78>
 8011744:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011746:	2b00      	cmp	r3, #0
 8011748:	d047      	beq.n	80117da <_strtod_l+0xa22>
 801174a:	2600      	movs	r6, #0
 801174c:	4f68      	ldr	r7, [pc, #416]	; (80118f0 <_strtod_l+0xb38>)
 801174e:	4d68      	ldr	r5, [pc, #416]	; (80118f0 <_strtod_l+0xb38>)
 8011750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011752:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011756:	0d1b      	lsrs	r3, r3, #20
 8011758:	051b      	lsls	r3, r3, #20
 801175a:	930f      	str	r3, [sp, #60]	; 0x3c
 801175c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801175e:	4b65      	ldr	r3, [pc, #404]	; (80118f4 <_strtod_l+0xb3c>)
 8011760:	429a      	cmp	r2, r3
 8011762:	f040 80cf 	bne.w	8011904 <_strtod_l+0xb4c>
 8011766:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801176a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801176e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011770:	4648      	mov	r0, r9
 8011772:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8011776:	4651      	mov	r1, sl
 8011778:	f002 f8ca 	bl	8013910 <__ulp>
 801177c:	4602      	mov	r2, r0
 801177e:	460b      	mov	r3, r1
 8011780:	4630      	mov	r0, r6
 8011782:	4639      	mov	r1, r7
 8011784:	f7ee ff14 	bl	80005b0 <__aeabi_dmul>
 8011788:	464a      	mov	r2, r9
 801178a:	4653      	mov	r3, sl
 801178c:	f7ee fd5a 	bl	8000244 <__adddf3>
 8011790:	460b      	mov	r3, r1
 8011792:	4954      	ldr	r1, [pc, #336]	; (80118e4 <_strtod_l+0xb2c>)
 8011794:	4a58      	ldr	r2, [pc, #352]	; (80118f8 <_strtod_l+0xb40>)
 8011796:	4019      	ands	r1, r3
 8011798:	4291      	cmp	r1, r2
 801179a:	4681      	mov	r9, r0
 801179c:	d95e      	bls.n	801185c <_strtod_l+0xaa4>
 801179e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80117a0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80117a4:	4293      	cmp	r3, r2
 80117a6:	d103      	bne.n	80117b0 <_strtod_l+0x9f8>
 80117a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80117aa:	3301      	adds	r3, #1
 80117ac:	f43f ad26 	beq.w	80111fc <_strtod_l+0x444>
 80117b0:	f04f 39ff 	mov.w	r9, #4294967295
 80117b4:	f8df a130 	ldr.w	sl, [pc, #304]	; 80118e8 <_strtod_l+0xb30>
 80117b8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80117ba:	4658      	mov	r0, fp
 80117bc:	f001 fe12 	bl	80133e4 <_Bfree>
 80117c0:	9906      	ldr	r1, [sp, #24]
 80117c2:	4658      	mov	r0, fp
 80117c4:	f001 fe0e 	bl	80133e4 <_Bfree>
 80117c8:	9904      	ldr	r1, [sp, #16]
 80117ca:	4658      	mov	r0, fp
 80117cc:	f001 fe0a 	bl	80133e4 <_Bfree>
 80117d0:	4641      	mov	r1, r8
 80117d2:	4658      	mov	r0, fp
 80117d4:	f001 fe06 	bl	80133e4 <_Bfree>
 80117d8:	e617      	b.n	801140a <_strtod_l+0x652>
 80117da:	f1b9 0f00 	cmp.w	r9, #0
 80117de:	d119      	bne.n	8011814 <_strtod_l+0xa5c>
 80117e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80117e6:	b9e3      	cbnz	r3, 8011822 <_strtod_l+0xa6a>
 80117e8:	2200      	movs	r2, #0
 80117ea:	4b41      	ldr	r3, [pc, #260]	; (80118f0 <_strtod_l+0xb38>)
 80117ec:	4630      	mov	r0, r6
 80117ee:	4639      	mov	r1, r7
 80117f0:	f7ef f950 	bl	8000a94 <__aeabi_dcmplt>
 80117f4:	b9c8      	cbnz	r0, 801182a <_strtod_l+0xa72>
 80117f6:	2200      	movs	r2, #0
 80117f8:	4b40      	ldr	r3, [pc, #256]	; (80118fc <_strtod_l+0xb44>)
 80117fa:	4630      	mov	r0, r6
 80117fc:	4639      	mov	r1, r7
 80117fe:	f7ee fed7 	bl	80005b0 <__aeabi_dmul>
 8011802:	4604      	mov	r4, r0
 8011804:	460d      	mov	r5, r1
 8011806:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 801180a:	9418      	str	r4, [sp, #96]	; 0x60
 801180c:	9319      	str	r3, [sp, #100]	; 0x64
 801180e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8011812:	e79d      	b.n	8011750 <_strtod_l+0x998>
 8011814:	f1b9 0f01 	cmp.w	r9, #1
 8011818:	d103      	bne.n	8011822 <_strtod_l+0xa6a>
 801181a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801181c:	2b00      	cmp	r3, #0
 801181e:	f43f ad8a 	beq.w	8011336 <_strtod_l+0x57e>
 8011822:	2600      	movs	r6, #0
 8011824:	4f36      	ldr	r7, [pc, #216]	; (8011900 <_strtod_l+0xb48>)
 8011826:	2400      	movs	r4, #0
 8011828:	e791      	b.n	801174e <_strtod_l+0x996>
 801182a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801182c:	4d33      	ldr	r5, [pc, #204]	; (80118fc <_strtod_l+0xb44>)
 801182e:	e7ea      	b.n	8011806 <_strtod_l+0xa4e>
 8011830:	4b32      	ldr	r3, [pc, #200]	; (80118fc <_strtod_l+0xb44>)
 8011832:	2200      	movs	r2, #0
 8011834:	4630      	mov	r0, r6
 8011836:	4639      	mov	r1, r7
 8011838:	f7ee feba 	bl	80005b0 <__aeabi_dmul>
 801183c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801183e:	4604      	mov	r4, r0
 8011840:	460d      	mov	r5, r1
 8011842:	b933      	cbnz	r3, 8011852 <_strtod_l+0xa9a>
 8011844:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011848:	9010      	str	r0, [sp, #64]	; 0x40
 801184a:	9311      	str	r3, [sp, #68]	; 0x44
 801184c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8011850:	e77e      	b.n	8011750 <_strtod_l+0x998>
 8011852:	4602      	mov	r2, r0
 8011854:	460b      	mov	r3, r1
 8011856:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 801185a:	e7f7      	b.n	801184c <_strtod_l+0xa94>
 801185c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8011860:	9b05      	ldr	r3, [sp, #20]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d1a8      	bne.n	80117b8 <_strtod_l+0xa00>
 8011866:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 801186a:	0d1b      	lsrs	r3, r3, #20
 801186c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801186e:	051b      	lsls	r3, r3, #20
 8011870:	429a      	cmp	r2, r3
 8011872:	4656      	mov	r6, sl
 8011874:	d1a0      	bne.n	80117b8 <_strtod_l+0xa00>
 8011876:	4629      	mov	r1, r5
 8011878:	4620      	mov	r0, r4
 801187a:	f7ef f949 	bl	8000b10 <__aeabi_d2iz>
 801187e:	f7ee fe2d 	bl	80004dc <__aeabi_i2d>
 8011882:	460b      	mov	r3, r1
 8011884:	4602      	mov	r2, r0
 8011886:	4629      	mov	r1, r5
 8011888:	4620      	mov	r0, r4
 801188a:	f7ee fcd9 	bl	8000240 <__aeabi_dsub>
 801188e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011890:	4604      	mov	r4, r0
 8011892:	460d      	mov	r5, r1
 8011894:	b933      	cbnz	r3, 80118a4 <_strtod_l+0xaec>
 8011896:	f1b9 0f00 	cmp.w	r9, #0
 801189a:	d103      	bne.n	80118a4 <_strtod_l+0xaec>
 801189c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 80118a0:	2e00      	cmp	r6, #0
 80118a2:	d06a      	beq.n	801197a <_strtod_l+0xbc2>
 80118a4:	a30a      	add	r3, pc, #40	; (adr r3, 80118d0 <_strtod_l+0xb18>)
 80118a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118aa:	4620      	mov	r0, r4
 80118ac:	4629      	mov	r1, r5
 80118ae:	f7ef f8f1 	bl	8000a94 <__aeabi_dcmplt>
 80118b2:	2800      	cmp	r0, #0
 80118b4:	f47f acad 	bne.w	8011212 <_strtod_l+0x45a>
 80118b8:	a307      	add	r3, pc, #28	; (adr r3, 80118d8 <_strtod_l+0xb20>)
 80118ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118be:	4620      	mov	r0, r4
 80118c0:	4629      	mov	r1, r5
 80118c2:	f7ef f905 	bl	8000ad0 <__aeabi_dcmpgt>
 80118c6:	2800      	cmp	r0, #0
 80118c8:	f43f af76 	beq.w	80117b8 <_strtod_l+0xa00>
 80118cc:	e4a1      	b.n	8011212 <_strtod_l+0x45a>
 80118ce:	bf00      	nop
 80118d0:	94a03595 	.word	0x94a03595
 80118d4:	3fdfffff 	.word	0x3fdfffff
 80118d8:	35afe535 	.word	0x35afe535
 80118dc:	3fe00000 	.word	0x3fe00000
 80118e0:	000fffff 	.word	0x000fffff
 80118e4:	7ff00000 	.word	0x7ff00000
 80118e8:	7fefffff 	.word	0x7fefffff
 80118ec:	39500000 	.word	0x39500000
 80118f0:	3ff00000 	.word	0x3ff00000
 80118f4:	7fe00000 	.word	0x7fe00000
 80118f8:	7c9fffff 	.word	0x7c9fffff
 80118fc:	3fe00000 	.word	0x3fe00000
 8011900:	bff00000 	.word	0xbff00000
 8011904:	9b05      	ldr	r3, [sp, #20]
 8011906:	b313      	cbz	r3, 801194e <_strtod_l+0xb96>
 8011908:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801190a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801190e:	d81e      	bhi.n	801194e <_strtod_l+0xb96>
 8011910:	a325      	add	r3, pc, #148	; (adr r3, 80119a8 <_strtod_l+0xbf0>)
 8011912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011916:	4620      	mov	r0, r4
 8011918:	4629      	mov	r1, r5
 801191a:	f7ef f8c5 	bl	8000aa8 <__aeabi_dcmple>
 801191e:	b190      	cbz	r0, 8011946 <_strtod_l+0xb8e>
 8011920:	4629      	mov	r1, r5
 8011922:	4620      	mov	r0, r4
 8011924:	f7ef f91c 	bl	8000b60 <__aeabi_d2uiz>
 8011928:	2800      	cmp	r0, #0
 801192a:	bf08      	it	eq
 801192c:	2001      	moveq	r0, #1
 801192e:	f7ee fdc5 	bl	80004bc <__aeabi_ui2d>
 8011932:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011934:	4604      	mov	r4, r0
 8011936:	460d      	mov	r5, r1
 8011938:	b9d3      	cbnz	r3, 8011970 <_strtod_l+0xbb8>
 801193a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801193e:	9012      	str	r0, [sp, #72]	; 0x48
 8011940:	9313      	str	r3, [sp, #76]	; 0x4c
 8011942:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8011946:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011948:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 801194c:	1a9f      	subs	r7, r3, r2
 801194e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011952:	f001 ffdd 	bl	8013910 <__ulp>
 8011956:	4602      	mov	r2, r0
 8011958:	460b      	mov	r3, r1
 801195a:	4630      	mov	r0, r6
 801195c:	4639      	mov	r1, r7
 801195e:	f7ee fe27 	bl	80005b0 <__aeabi_dmul>
 8011962:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011966:	f7ee fc6d 	bl	8000244 <__adddf3>
 801196a:	4681      	mov	r9, r0
 801196c:	468a      	mov	sl, r1
 801196e:	e777      	b.n	8011860 <_strtod_l+0xaa8>
 8011970:	4602      	mov	r2, r0
 8011972:	460b      	mov	r3, r1
 8011974:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8011978:	e7e3      	b.n	8011942 <_strtod_l+0xb8a>
 801197a:	a30d      	add	r3, pc, #52	; (adr r3, 80119b0 <_strtod_l+0xbf8>)
 801197c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011980:	f7ef f888 	bl	8000a94 <__aeabi_dcmplt>
 8011984:	e79f      	b.n	80118c6 <_strtod_l+0xb0e>
 8011986:	2300      	movs	r3, #0
 8011988:	930d      	str	r3, [sp, #52]	; 0x34
 801198a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801198c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801198e:	6013      	str	r3, [r2, #0]
 8011990:	f7ff ba55 	b.w	8010e3e <_strtod_l+0x86>
 8011994:	2b65      	cmp	r3, #101	; 0x65
 8011996:	f04f 0200 	mov.w	r2, #0
 801199a:	f43f ab42 	beq.w	8011022 <_strtod_l+0x26a>
 801199e:	2101      	movs	r1, #1
 80119a0:	4614      	mov	r4, r2
 80119a2:	9105      	str	r1, [sp, #20]
 80119a4:	f7ff babf 	b.w	8010f26 <_strtod_l+0x16e>
 80119a8:	ffc00000 	.word	0xffc00000
 80119ac:	41dfffff 	.word	0x41dfffff
 80119b0:	94a03595 	.word	0x94a03595
 80119b4:	3fcfffff 	.word	0x3fcfffff

080119b8 <_strtod_r>:
 80119b8:	4b05      	ldr	r3, [pc, #20]	; (80119d0 <_strtod_r+0x18>)
 80119ba:	b410      	push	{r4}
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	4c05      	ldr	r4, [pc, #20]	; (80119d4 <_strtod_r+0x1c>)
 80119c0:	6a1b      	ldr	r3, [r3, #32]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	bf08      	it	eq
 80119c6:	4623      	moveq	r3, r4
 80119c8:	bc10      	pop	{r4}
 80119ca:	f7ff b9f5 	b.w	8010db8 <_strtod_l>
 80119ce:	bf00      	nop
 80119d0:	20000010 	.word	0x20000010
 80119d4:	20000074 	.word	0x20000074

080119d8 <_strtol_l.isra.0>:
 80119d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119dc:	4680      	mov	r8, r0
 80119de:	4689      	mov	r9, r1
 80119e0:	4692      	mov	sl, r2
 80119e2:	461e      	mov	r6, r3
 80119e4:	460f      	mov	r7, r1
 80119e6:	463d      	mov	r5, r7
 80119e8:	9808      	ldr	r0, [sp, #32]
 80119ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80119ee:	f001 fc25 	bl	801323c <__locale_ctype_ptr_l>
 80119f2:	4420      	add	r0, r4
 80119f4:	7843      	ldrb	r3, [r0, #1]
 80119f6:	f013 0308 	ands.w	r3, r3, #8
 80119fa:	d132      	bne.n	8011a62 <_strtol_l.isra.0+0x8a>
 80119fc:	2c2d      	cmp	r4, #45	; 0x2d
 80119fe:	d132      	bne.n	8011a66 <_strtol_l.isra.0+0x8e>
 8011a00:	2201      	movs	r2, #1
 8011a02:	787c      	ldrb	r4, [r7, #1]
 8011a04:	1cbd      	adds	r5, r7, #2
 8011a06:	2e00      	cmp	r6, #0
 8011a08:	d05d      	beq.n	8011ac6 <_strtol_l.isra.0+0xee>
 8011a0a:	2e10      	cmp	r6, #16
 8011a0c:	d109      	bne.n	8011a22 <_strtol_l.isra.0+0x4a>
 8011a0e:	2c30      	cmp	r4, #48	; 0x30
 8011a10:	d107      	bne.n	8011a22 <_strtol_l.isra.0+0x4a>
 8011a12:	782b      	ldrb	r3, [r5, #0]
 8011a14:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011a18:	2b58      	cmp	r3, #88	; 0x58
 8011a1a:	d14f      	bne.n	8011abc <_strtol_l.isra.0+0xe4>
 8011a1c:	2610      	movs	r6, #16
 8011a1e:	786c      	ldrb	r4, [r5, #1]
 8011a20:	3502      	adds	r5, #2
 8011a22:	2a00      	cmp	r2, #0
 8011a24:	bf14      	ite	ne
 8011a26:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8011a2a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8011a2e:	2700      	movs	r7, #0
 8011a30:	fbb1 fcf6 	udiv	ip, r1, r6
 8011a34:	4638      	mov	r0, r7
 8011a36:	fb06 1e1c 	mls	lr, r6, ip, r1
 8011a3a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8011a3e:	2b09      	cmp	r3, #9
 8011a40:	d817      	bhi.n	8011a72 <_strtol_l.isra.0+0x9a>
 8011a42:	461c      	mov	r4, r3
 8011a44:	42a6      	cmp	r6, r4
 8011a46:	dd23      	ble.n	8011a90 <_strtol_l.isra.0+0xb8>
 8011a48:	1c7b      	adds	r3, r7, #1
 8011a4a:	d007      	beq.n	8011a5c <_strtol_l.isra.0+0x84>
 8011a4c:	4584      	cmp	ip, r0
 8011a4e:	d31c      	bcc.n	8011a8a <_strtol_l.isra.0+0xb2>
 8011a50:	d101      	bne.n	8011a56 <_strtol_l.isra.0+0x7e>
 8011a52:	45a6      	cmp	lr, r4
 8011a54:	db19      	blt.n	8011a8a <_strtol_l.isra.0+0xb2>
 8011a56:	2701      	movs	r7, #1
 8011a58:	fb00 4006 	mla	r0, r0, r6, r4
 8011a5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011a60:	e7eb      	b.n	8011a3a <_strtol_l.isra.0+0x62>
 8011a62:	462f      	mov	r7, r5
 8011a64:	e7bf      	b.n	80119e6 <_strtol_l.isra.0+0xe>
 8011a66:	2c2b      	cmp	r4, #43	; 0x2b
 8011a68:	bf04      	itt	eq
 8011a6a:	1cbd      	addeq	r5, r7, #2
 8011a6c:	787c      	ldrbeq	r4, [r7, #1]
 8011a6e:	461a      	mov	r2, r3
 8011a70:	e7c9      	b.n	8011a06 <_strtol_l.isra.0+0x2e>
 8011a72:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8011a76:	2b19      	cmp	r3, #25
 8011a78:	d801      	bhi.n	8011a7e <_strtol_l.isra.0+0xa6>
 8011a7a:	3c37      	subs	r4, #55	; 0x37
 8011a7c:	e7e2      	b.n	8011a44 <_strtol_l.isra.0+0x6c>
 8011a7e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8011a82:	2b19      	cmp	r3, #25
 8011a84:	d804      	bhi.n	8011a90 <_strtol_l.isra.0+0xb8>
 8011a86:	3c57      	subs	r4, #87	; 0x57
 8011a88:	e7dc      	b.n	8011a44 <_strtol_l.isra.0+0x6c>
 8011a8a:	f04f 37ff 	mov.w	r7, #4294967295
 8011a8e:	e7e5      	b.n	8011a5c <_strtol_l.isra.0+0x84>
 8011a90:	1c7b      	adds	r3, r7, #1
 8011a92:	d108      	bne.n	8011aa6 <_strtol_l.isra.0+0xce>
 8011a94:	2322      	movs	r3, #34	; 0x22
 8011a96:	4608      	mov	r0, r1
 8011a98:	f8c8 3000 	str.w	r3, [r8]
 8011a9c:	f1ba 0f00 	cmp.w	sl, #0
 8011aa0:	d107      	bne.n	8011ab2 <_strtol_l.isra.0+0xda>
 8011aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011aa6:	b102      	cbz	r2, 8011aaa <_strtol_l.isra.0+0xd2>
 8011aa8:	4240      	negs	r0, r0
 8011aaa:	f1ba 0f00 	cmp.w	sl, #0
 8011aae:	d0f8      	beq.n	8011aa2 <_strtol_l.isra.0+0xca>
 8011ab0:	b10f      	cbz	r7, 8011ab6 <_strtol_l.isra.0+0xde>
 8011ab2:	f105 39ff 	add.w	r9, r5, #4294967295
 8011ab6:	f8ca 9000 	str.w	r9, [sl]
 8011aba:	e7f2      	b.n	8011aa2 <_strtol_l.isra.0+0xca>
 8011abc:	2430      	movs	r4, #48	; 0x30
 8011abe:	2e00      	cmp	r6, #0
 8011ac0:	d1af      	bne.n	8011a22 <_strtol_l.isra.0+0x4a>
 8011ac2:	2608      	movs	r6, #8
 8011ac4:	e7ad      	b.n	8011a22 <_strtol_l.isra.0+0x4a>
 8011ac6:	2c30      	cmp	r4, #48	; 0x30
 8011ac8:	d0a3      	beq.n	8011a12 <_strtol_l.isra.0+0x3a>
 8011aca:	260a      	movs	r6, #10
 8011acc:	e7a9      	b.n	8011a22 <_strtol_l.isra.0+0x4a>
	...

08011ad0 <_strtol_r>:
 8011ad0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011ad2:	4c06      	ldr	r4, [pc, #24]	; (8011aec <_strtol_r+0x1c>)
 8011ad4:	4d06      	ldr	r5, [pc, #24]	; (8011af0 <_strtol_r+0x20>)
 8011ad6:	6824      	ldr	r4, [r4, #0]
 8011ad8:	6a24      	ldr	r4, [r4, #32]
 8011ada:	2c00      	cmp	r4, #0
 8011adc:	bf08      	it	eq
 8011ade:	462c      	moveq	r4, r5
 8011ae0:	9400      	str	r4, [sp, #0]
 8011ae2:	f7ff ff79 	bl	80119d8 <_strtol_l.isra.0>
 8011ae6:	b003      	add	sp, #12
 8011ae8:	bd30      	pop	{r4, r5, pc}
 8011aea:	bf00      	nop
 8011aec:	20000010 	.word	0x20000010
 8011af0:	20000074 	.word	0x20000074

08011af4 <__swbuf_r>:
 8011af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011af6:	460e      	mov	r6, r1
 8011af8:	4614      	mov	r4, r2
 8011afa:	4605      	mov	r5, r0
 8011afc:	b118      	cbz	r0, 8011b06 <__swbuf_r+0x12>
 8011afe:	6983      	ldr	r3, [r0, #24]
 8011b00:	b90b      	cbnz	r3, 8011b06 <__swbuf_r+0x12>
 8011b02:	f000 ffe9 	bl	8012ad8 <__sinit>
 8011b06:	4b21      	ldr	r3, [pc, #132]	; (8011b8c <__swbuf_r+0x98>)
 8011b08:	429c      	cmp	r4, r3
 8011b0a:	d12a      	bne.n	8011b62 <__swbuf_r+0x6e>
 8011b0c:	686c      	ldr	r4, [r5, #4]
 8011b0e:	69a3      	ldr	r3, [r4, #24]
 8011b10:	60a3      	str	r3, [r4, #8]
 8011b12:	89a3      	ldrh	r3, [r4, #12]
 8011b14:	071a      	lsls	r2, r3, #28
 8011b16:	d52e      	bpl.n	8011b76 <__swbuf_r+0x82>
 8011b18:	6923      	ldr	r3, [r4, #16]
 8011b1a:	b363      	cbz	r3, 8011b76 <__swbuf_r+0x82>
 8011b1c:	6923      	ldr	r3, [r4, #16]
 8011b1e:	6820      	ldr	r0, [r4, #0]
 8011b20:	b2f6      	uxtb	r6, r6
 8011b22:	1ac0      	subs	r0, r0, r3
 8011b24:	6963      	ldr	r3, [r4, #20]
 8011b26:	4637      	mov	r7, r6
 8011b28:	4283      	cmp	r3, r0
 8011b2a:	dc04      	bgt.n	8011b36 <__swbuf_r+0x42>
 8011b2c:	4621      	mov	r1, r4
 8011b2e:	4628      	mov	r0, r5
 8011b30:	f000 ff68 	bl	8012a04 <_fflush_r>
 8011b34:	bb28      	cbnz	r0, 8011b82 <__swbuf_r+0x8e>
 8011b36:	68a3      	ldr	r3, [r4, #8]
 8011b38:	3001      	adds	r0, #1
 8011b3a:	3b01      	subs	r3, #1
 8011b3c:	60a3      	str	r3, [r4, #8]
 8011b3e:	6823      	ldr	r3, [r4, #0]
 8011b40:	1c5a      	adds	r2, r3, #1
 8011b42:	6022      	str	r2, [r4, #0]
 8011b44:	701e      	strb	r6, [r3, #0]
 8011b46:	6963      	ldr	r3, [r4, #20]
 8011b48:	4283      	cmp	r3, r0
 8011b4a:	d004      	beq.n	8011b56 <__swbuf_r+0x62>
 8011b4c:	89a3      	ldrh	r3, [r4, #12]
 8011b4e:	07db      	lsls	r3, r3, #31
 8011b50:	d519      	bpl.n	8011b86 <__swbuf_r+0x92>
 8011b52:	2e0a      	cmp	r6, #10
 8011b54:	d117      	bne.n	8011b86 <__swbuf_r+0x92>
 8011b56:	4621      	mov	r1, r4
 8011b58:	4628      	mov	r0, r5
 8011b5a:	f000 ff53 	bl	8012a04 <_fflush_r>
 8011b5e:	b190      	cbz	r0, 8011b86 <__swbuf_r+0x92>
 8011b60:	e00f      	b.n	8011b82 <__swbuf_r+0x8e>
 8011b62:	4b0b      	ldr	r3, [pc, #44]	; (8011b90 <__swbuf_r+0x9c>)
 8011b64:	429c      	cmp	r4, r3
 8011b66:	d101      	bne.n	8011b6c <__swbuf_r+0x78>
 8011b68:	68ac      	ldr	r4, [r5, #8]
 8011b6a:	e7d0      	b.n	8011b0e <__swbuf_r+0x1a>
 8011b6c:	4b09      	ldr	r3, [pc, #36]	; (8011b94 <__swbuf_r+0xa0>)
 8011b6e:	429c      	cmp	r4, r3
 8011b70:	bf08      	it	eq
 8011b72:	68ec      	ldreq	r4, [r5, #12]
 8011b74:	e7cb      	b.n	8011b0e <__swbuf_r+0x1a>
 8011b76:	4621      	mov	r1, r4
 8011b78:	4628      	mov	r0, r5
 8011b7a:	f000 f80d 	bl	8011b98 <__swsetup_r>
 8011b7e:	2800      	cmp	r0, #0
 8011b80:	d0cc      	beq.n	8011b1c <__swbuf_r+0x28>
 8011b82:	f04f 37ff 	mov.w	r7, #4294967295
 8011b86:	4638      	mov	r0, r7
 8011b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b8a:	bf00      	nop
 8011b8c:	08016560 	.word	0x08016560
 8011b90:	08016580 	.word	0x08016580
 8011b94:	08016540 	.word	0x08016540

08011b98 <__swsetup_r>:
 8011b98:	4b32      	ldr	r3, [pc, #200]	; (8011c64 <__swsetup_r+0xcc>)
 8011b9a:	b570      	push	{r4, r5, r6, lr}
 8011b9c:	681d      	ldr	r5, [r3, #0]
 8011b9e:	4606      	mov	r6, r0
 8011ba0:	460c      	mov	r4, r1
 8011ba2:	b125      	cbz	r5, 8011bae <__swsetup_r+0x16>
 8011ba4:	69ab      	ldr	r3, [r5, #24]
 8011ba6:	b913      	cbnz	r3, 8011bae <__swsetup_r+0x16>
 8011ba8:	4628      	mov	r0, r5
 8011baa:	f000 ff95 	bl	8012ad8 <__sinit>
 8011bae:	4b2e      	ldr	r3, [pc, #184]	; (8011c68 <__swsetup_r+0xd0>)
 8011bb0:	429c      	cmp	r4, r3
 8011bb2:	d10f      	bne.n	8011bd4 <__swsetup_r+0x3c>
 8011bb4:	686c      	ldr	r4, [r5, #4]
 8011bb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011bba:	b29a      	uxth	r2, r3
 8011bbc:	0715      	lsls	r5, r2, #28
 8011bbe:	d42c      	bmi.n	8011c1a <__swsetup_r+0x82>
 8011bc0:	06d0      	lsls	r0, r2, #27
 8011bc2:	d411      	bmi.n	8011be8 <__swsetup_r+0x50>
 8011bc4:	2209      	movs	r2, #9
 8011bc6:	6032      	str	r2, [r6, #0]
 8011bc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011bcc:	81a3      	strh	r3, [r4, #12]
 8011bce:	f04f 30ff 	mov.w	r0, #4294967295
 8011bd2:	e03e      	b.n	8011c52 <__swsetup_r+0xba>
 8011bd4:	4b25      	ldr	r3, [pc, #148]	; (8011c6c <__swsetup_r+0xd4>)
 8011bd6:	429c      	cmp	r4, r3
 8011bd8:	d101      	bne.n	8011bde <__swsetup_r+0x46>
 8011bda:	68ac      	ldr	r4, [r5, #8]
 8011bdc:	e7eb      	b.n	8011bb6 <__swsetup_r+0x1e>
 8011bde:	4b24      	ldr	r3, [pc, #144]	; (8011c70 <__swsetup_r+0xd8>)
 8011be0:	429c      	cmp	r4, r3
 8011be2:	bf08      	it	eq
 8011be4:	68ec      	ldreq	r4, [r5, #12]
 8011be6:	e7e6      	b.n	8011bb6 <__swsetup_r+0x1e>
 8011be8:	0751      	lsls	r1, r2, #29
 8011bea:	d512      	bpl.n	8011c12 <__swsetup_r+0x7a>
 8011bec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011bee:	b141      	cbz	r1, 8011c02 <__swsetup_r+0x6a>
 8011bf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011bf4:	4299      	cmp	r1, r3
 8011bf6:	d002      	beq.n	8011bfe <__swsetup_r+0x66>
 8011bf8:	4630      	mov	r0, r6
 8011bfa:	f001 ffc5 	bl	8013b88 <_free_r>
 8011bfe:	2300      	movs	r3, #0
 8011c00:	6363      	str	r3, [r4, #52]	; 0x34
 8011c02:	89a3      	ldrh	r3, [r4, #12]
 8011c04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011c08:	81a3      	strh	r3, [r4, #12]
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	6063      	str	r3, [r4, #4]
 8011c0e:	6923      	ldr	r3, [r4, #16]
 8011c10:	6023      	str	r3, [r4, #0]
 8011c12:	89a3      	ldrh	r3, [r4, #12]
 8011c14:	f043 0308 	orr.w	r3, r3, #8
 8011c18:	81a3      	strh	r3, [r4, #12]
 8011c1a:	6923      	ldr	r3, [r4, #16]
 8011c1c:	b94b      	cbnz	r3, 8011c32 <__swsetup_r+0x9a>
 8011c1e:	89a3      	ldrh	r3, [r4, #12]
 8011c20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011c28:	d003      	beq.n	8011c32 <__swsetup_r+0x9a>
 8011c2a:	4621      	mov	r1, r4
 8011c2c:	4630      	mov	r0, r6
 8011c2e:	f001 fb3d 	bl	80132ac <__smakebuf_r>
 8011c32:	89a2      	ldrh	r2, [r4, #12]
 8011c34:	f012 0301 	ands.w	r3, r2, #1
 8011c38:	d00c      	beq.n	8011c54 <__swsetup_r+0xbc>
 8011c3a:	2300      	movs	r3, #0
 8011c3c:	60a3      	str	r3, [r4, #8]
 8011c3e:	6963      	ldr	r3, [r4, #20]
 8011c40:	425b      	negs	r3, r3
 8011c42:	61a3      	str	r3, [r4, #24]
 8011c44:	6923      	ldr	r3, [r4, #16]
 8011c46:	b953      	cbnz	r3, 8011c5e <__swsetup_r+0xc6>
 8011c48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c4c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8011c50:	d1ba      	bne.n	8011bc8 <__swsetup_r+0x30>
 8011c52:	bd70      	pop	{r4, r5, r6, pc}
 8011c54:	0792      	lsls	r2, r2, #30
 8011c56:	bf58      	it	pl
 8011c58:	6963      	ldrpl	r3, [r4, #20]
 8011c5a:	60a3      	str	r3, [r4, #8]
 8011c5c:	e7f2      	b.n	8011c44 <__swsetup_r+0xac>
 8011c5e:	2000      	movs	r0, #0
 8011c60:	e7f7      	b.n	8011c52 <__swsetup_r+0xba>
 8011c62:	bf00      	nop
 8011c64:	20000010 	.word	0x20000010
 8011c68:	08016560 	.word	0x08016560
 8011c6c:	08016580 	.word	0x08016580
 8011c70:	08016540 	.word	0x08016540

08011c74 <quorem>:
 8011c74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c78:	6903      	ldr	r3, [r0, #16]
 8011c7a:	690c      	ldr	r4, [r1, #16]
 8011c7c:	4680      	mov	r8, r0
 8011c7e:	42a3      	cmp	r3, r4
 8011c80:	f2c0 8084 	blt.w	8011d8c <quorem+0x118>
 8011c84:	3c01      	subs	r4, #1
 8011c86:	f101 0714 	add.w	r7, r1, #20
 8011c8a:	f100 0614 	add.w	r6, r0, #20
 8011c8e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8011c92:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8011c96:	3501      	adds	r5, #1
 8011c98:	fbb0 f5f5 	udiv	r5, r0, r5
 8011c9c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8011ca0:	eb06 030c 	add.w	r3, r6, ip
 8011ca4:	eb07 090c 	add.w	r9, r7, ip
 8011ca8:	9301      	str	r3, [sp, #4]
 8011caa:	b39d      	cbz	r5, 8011d14 <quorem+0xa0>
 8011cac:	f04f 0a00 	mov.w	sl, #0
 8011cb0:	4638      	mov	r0, r7
 8011cb2:	46b6      	mov	lr, r6
 8011cb4:	46d3      	mov	fp, sl
 8011cb6:	f850 2b04 	ldr.w	r2, [r0], #4
 8011cba:	b293      	uxth	r3, r2
 8011cbc:	fb05 a303 	mla	r3, r5, r3, sl
 8011cc0:	0c12      	lsrs	r2, r2, #16
 8011cc2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011cc6:	fb05 a202 	mla	r2, r5, r2, sl
 8011cca:	b29b      	uxth	r3, r3
 8011ccc:	ebab 0303 	sub.w	r3, fp, r3
 8011cd0:	f8de b000 	ldr.w	fp, [lr]
 8011cd4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8011cd8:	fa1f fb8b 	uxth.w	fp, fp
 8011cdc:	445b      	add	r3, fp
 8011cde:	fa1f fb82 	uxth.w	fp, r2
 8011ce2:	f8de 2000 	ldr.w	r2, [lr]
 8011ce6:	4581      	cmp	r9, r0
 8011ce8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8011cec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011cf0:	b29b      	uxth	r3, r3
 8011cf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011cf6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8011cfa:	f84e 3b04 	str.w	r3, [lr], #4
 8011cfe:	d2da      	bcs.n	8011cb6 <quorem+0x42>
 8011d00:	f856 300c 	ldr.w	r3, [r6, ip]
 8011d04:	b933      	cbnz	r3, 8011d14 <quorem+0xa0>
 8011d06:	9b01      	ldr	r3, [sp, #4]
 8011d08:	3b04      	subs	r3, #4
 8011d0a:	429e      	cmp	r6, r3
 8011d0c:	461a      	mov	r2, r3
 8011d0e:	d331      	bcc.n	8011d74 <quorem+0x100>
 8011d10:	f8c8 4010 	str.w	r4, [r8, #16]
 8011d14:	4640      	mov	r0, r8
 8011d16:	f001 fd83 	bl	8013820 <__mcmp>
 8011d1a:	2800      	cmp	r0, #0
 8011d1c:	db26      	blt.n	8011d6c <quorem+0xf8>
 8011d1e:	4630      	mov	r0, r6
 8011d20:	f04f 0c00 	mov.w	ip, #0
 8011d24:	3501      	adds	r5, #1
 8011d26:	f857 1b04 	ldr.w	r1, [r7], #4
 8011d2a:	f8d0 e000 	ldr.w	lr, [r0]
 8011d2e:	b28b      	uxth	r3, r1
 8011d30:	ebac 0303 	sub.w	r3, ip, r3
 8011d34:	fa1f f28e 	uxth.w	r2, lr
 8011d38:	4413      	add	r3, r2
 8011d3a:	0c0a      	lsrs	r2, r1, #16
 8011d3c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011d40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011d44:	b29b      	uxth	r3, r3
 8011d46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011d4a:	45b9      	cmp	r9, r7
 8011d4c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011d50:	f840 3b04 	str.w	r3, [r0], #4
 8011d54:	d2e7      	bcs.n	8011d26 <quorem+0xb2>
 8011d56:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8011d5a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8011d5e:	b92a      	cbnz	r2, 8011d6c <quorem+0xf8>
 8011d60:	3b04      	subs	r3, #4
 8011d62:	429e      	cmp	r6, r3
 8011d64:	461a      	mov	r2, r3
 8011d66:	d30b      	bcc.n	8011d80 <quorem+0x10c>
 8011d68:	f8c8 4010 	str.w	r4, [r8, #16]
 8011d6c:	4628      	mov	r0, r5
 8011d6e:	b003      	add	sp, #12
 8011d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d74:	6812      	ldr	r2, [r2, #0]
 8011d76:	3b04      	subs	r3, #4
 8011d78:	2a00      	cmp	r2, #0
 8011d7a:	d1c9      	bne.n	8011d10 <quorem+0x9c>
 8011d7c:	3c01      	subs	r4, #1
 8011d7e:	e7c4      	b.n	8011d0a <quorem+0x96>
 8011d80:	6812      	ldr	r2, [r2, #0]
 8011d82:	3b04      	subs	r3, #4
 8011d84:	2a00      	cmp	r2, #0
 8011d86:	d1ef      	bne.n	8011d68 <quorem+0xf4>
 8011d88:	3c01      	subs	r4, #1
 8011d8a:	e7ea      	b.n	8011d62 <quorem+0xee>
 8011d8c:	2000      	movs	r0, #0
 8011d8e:	e7ee      	b.n	8011d6e <quorem+0xfa>

08011d90 <_dtoa_r>:
 8011d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d94:	4616      	mov	r6, r2
 8011d96:	461f      	mov	r7, r3
 8011d98:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011d9a:	b095      	sub	sp, #84	; 0x54
 8011d9c:	4604      	mov	r4, r0
 8011d9e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8011da2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8011da6:	b93d      	cbnz	r5, 8011db8 <_dtoa_r+0x28>
 8011da8:	2010      	movs	r0, #16
 8011daa:	f001 fabf 	bl	801332c <malloc>
 8011dae:	6260      	str	r0, [r4, #36]	; 0x24
 8011db0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011db4:	6005      	str	r5, [r0, #0]
 8011db6:	60c5      	str	r5, [r0, #12]
 8011db8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011dba:	6819      	ldr	r1, [r3, #0]
 8011dbc:	b151      	cbz	r1, 8011dd4 <_dtoa_r+0x44>
 8011dbe:	685a      	ldr	r2, [r3, #4]
 8011dc0:	2301      	movs	r3, #1
 8011dc2:	4093      	lsls	r3, r2
 8011dc4:	604a      	str	r2, [r1, #4]
 8011dc6:	608b      	str	r3, [r1, #8]
 8011dc8:	4620      	mov	r0, r4
 8011dca:	f001 fb0b 	bl	80133e4 <_Bfree>
 8011dce:	2200      	movs	r2, #0
 8011dd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011dd2:	601a      	str	r2, [r3, #0]
 8011dd4:	1e3b      	subs	r3, r7, #0
 8011dd6:	bfaf      	iteee	ge
 8011dd8:	2300      	movge	r3, #0
 8011dda:	2201      	movlt	r2, #1
 8011ddc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011de0:	9303      	strlt	r3, [sp, #12]
 8011de2:	bfac      	ite	ge
 8011de4:	f8c8 3000 	strge.w	r3, [r8]
 8011de8:	f8c8 2000 	strlt.w	r2, [r8]
 8011dec:	4bae      	ldr	r3, [pc, #696]	; (80120a8 <_dtoa_r+0x318>)
 8011dee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8011df2:	ea33 0308 	bics.w	r3, r3, r8
 8011df6:	d11b      	bne.n	8011e30 <_dtoa_r+0xa0>
 8011df8:	f242 730f 	movw	r3, #9999	; 0x270f
 8011dfc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011dfe:	6013      	str	r3, [r2, #0]
 8011e00:	9b02      	ldr	r3, [sp, #8]
 8011e02:	b923      	cbnz	r3, 8011e0e <_dtoa_r+0x7e>
 8011e04:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8011e08:	2800      	cmp	r0, #0
 8011e0a:	f000 8545 	beq.w	8012898 <_dtoa_r+0xb08>
 8011e0e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011e10:	b953      	cbnz	r3, 8011e28 <_dtoa_r+0x98>
 8011e12:	4ba6      	ldr	r3, [pc, #664]	; (80120ac <_dtoa_r+0x31c>)
 8011e14:	e021      	b.n	8011e5a <_dtoa_r+0xca>
 8011e16:	4ba6      	ldr	r3, [pc, #664]	; (80120b0 <_dtoa_r+0x320>)
 8011e18:	9306      	str	r3, [sp, #24]
 8011e1a:	3308      	adds	r3, #8
 8011e1c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8011e1e:	6013      	str	r3, [r2, #0]
 8011e20:	9806      	ldr	r0, [sp, #24]
 8011e22:	b015      	add	sp, #84	; 0x54
 8011e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e28:	4ba0      	ldr	r3, [pc, #640]	; (80120ac <_dtoa_r+0x31c>)
 8011e2a:	9306      	str	r3, [sp, #24]
 8011e2c:	3303      	adds	r3, #3
 8011e2e:	e7f5      	b.n	8011e1c <_dtoa_r+0x8c>
 8011e30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011e34:	2200      	movs	r2, #0
 8011e36:	2300      	movs	r3, #0
 8011e38:	4630      	mov	r0, r6
 8011e3a:	4639      	mov	r1, r7
 8011e3c:	f7ee fe20 	bl	8000a80 <__aeabi_dcmpeq>
 8011e40:	4682      	mov	sl, r0
 8011e42:	b160      	cbz	r0, 8011e5e <_dtoa_r+0xce>
 8011e44:	2301      	movs	r3, #1
 8011e46:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011e48:	6013      	str	r3, [r2, #0]
 8011e4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	f000 8520 	beq.w	8012892 <_dtoa_r+0xb02>
 8011e52:	4b98      	ldr	r3, [pc, #608]	; (80120b4 <_dtoa_r+0x324>)
 8011e54:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8011e56:	6013      	str	r3, [r2, #0]
 8011e58:	3b01      	subs	r3, #1
 8011e5a:	9306      	str	r3, [sp, #24]
 8011e5c:	e7e0      	b.n	8011e20 <_dtoa_r+0x90>
 8011e5e:	ab12      	add	r3, sp, #72	; 0x48
 8011e60:	9301      	str	r3, [sp, #4]
 8011e62:	ab13      	add	r3, sp, #76	; 0x4c
 8011e64:	9300      	str	r3, [sp, #0]
 8011e66:	4632      	mov	r2, r6
 8011e68:	463b      	mov	r3, r7
 8011e6a:	4620      	mov	r0, r4
 8011e6c:	f001 fdc6 	bl	80139fc <__d2b>
 8011e70:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8011e74:	4683      	mov	fp, r0
 8011e76:	2d00      	cmp	r5, #0
 8011e78:	d07d      	beq.n	8011f76 <_dtoa_r+0x1e6>
 8011e7a:	46b0      	mov	r8, r6
 8011e7c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011e80:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8011e84:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8011e88:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011e8c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8011e90:	2200      	movs	r2, #0
 8011e92:	4b89      	ldr	r3, [pc, #548]	; (80120b8 <_dtoa_r+0x328>)
 8011e94:	4640      	mov	r0, r8
 8011e96:	4649      	mov	r1, r9
 8011e98:	f7ee f9d2 	bl	8000240 <__aeabi_dsub>
 8011e9c:	a37c      	add	r3, pc, #496	; (adr r3, 8012090 <_dtoa_r+0x300>)
 8011e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ea2:	f7ee fb85 	bl	80005b0 <__aeabi_dmul>
 8011ea6:	a37c      	add	r3, pc, #496	; (adr r3, 8012098 <_dtoa_r+0x308>)
 8011ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eac:	f7ee f9ca 	bl	8000244 <__adddf3>
 8011eb0:	4606      	mov	r6, r0
 8011eb2:	4628      	mov	r0, r5
 8011eb4:	460f      	mov	r7, r1
 8011eb6:	f7ee fb11 	bl	80004dc <__aeabi_i2d>
 8011eba:	a379      	add	r3, pc, #484	; (adr r3, 80120a0 <_dtoa_r+0x310>)
 8011ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ec0:	f7ee fb76 	bl	80005b0 <__aeabi_dmul>
 8011ec4:	4602      	mov	r2, r0
 8011ec6:	460b      	mov	r3, r1
 8011ec8:	4630      	mov	r0, r6
 8011eca:	4639      	mov	r1, r7
 8011ecc:	f7ee f9ba 	bl	8000244 <__adddf3>
 8011ed0:	4606      	mov	r6, r0
 8011ed2:	460f      	mov	r7, r1
 8011ed4:	f7ee fe1c 	bl	8000b10 <__aeabi_d2iz>
 8011ed8:	2200      	movs	r2, #0
 8011eda:	4682      	mov	sl, r0
 8011edc:	2300      	movs	r3, #0
 8011ede:	4630      	mov	r0, r6
 8011ee0:	4639      	mov	r1, r7
 8011ee2:	f7ee fdd7 	bl	8000a94 <__aeabi_dcmplt>
 8011ee6:	b148      	cbz	r0, 8011efc <_dtoa_r+0x16c>
 8011ee8:	4650      	mov	r0, sl
 8011eea:	f7ee faf7 	bl	80004dc <__aeabi_i2d>
 8011eee:	4632      	mov	r2, r6
 8011ef0:	463b      	mov	r3, r7
 8011ef2:	f7ee fdc5 	bl	8000a80 <__aeabi_dcmpeq>
 8011ef6:	b908      	cbnz	r0, 8011efc <_dtoa_r+0x16c>
 8011ef8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011efc:	f1ba 0f16 	cmp.w	sl, #22
 8011f00:	d85a      	bhi.n	8011fb8 <_dtoa_r+0x228>
 8011f02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011f06:	496d      	ldr	r1, [pc, #436]	; (80120bc <_dtoa_r+0x32c>)
 8011f08:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8011f0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011f10:	f7ee fdde 	bl	8000ad0 <__aeabi_dcmpgt>
 8011f14:	2800      	cmp	r0, #0
 8011f16:	d051      	beq.n	8011fbc <_dtoa_r+0x22c>
 8011f18:	2300      	movs	r3, #0
 8011f1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011f1e:	930d      	str	r3, [sp, #52]	; 0x34
 8011f20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011f22:	1b5d      	subs	r5, r3, r5
 8011f24:	1e6b      	subs	r3, r5, #1
 8011f26:	9307      	str	r3, [sp, #28]
 8011f28:	bf43      	ittte	mi
 8011f2a:	2300      	movmi	r3, #0
 8011f2c:	f1c5 0901 	rsbmi	r9, r5, #1
 8011f30:	9307      	strmi	r3, [sp, #28]
 8011f32:	f04f 0900 	movpl.w	r9, #0
 8011f36:	f1ba 0f00 	cmp.w	sl, #0
 8011f3a:	db41      	blt.n	8011fc0 <_dtoa_r+0x230>
 8011f3c:	9b07      	ldr	r3, [sp, #28]
 8011f3e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8011f42:	4453      	add	r3, sl
 8011f44:	9307      	str	r3, [sp, #28]
 8011f46:	2300      	movs	r3, #0
 8011f48:	9308      	str	r3, [sp, #32]
 8011f4a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011f4c:	2b09      	cmp	r3, #9
 8011f4e:	f200 808f 	bhi.w	8012070 <_dtoa_r+0x2e0>
 8011f52:	2b05      	cmp	r3, #5
 8011f54:	bfc4      	itt	gt
 8011f56:	3b04      	subgt	r3, #4
 8011f58:	931e      	strgt	r3, [sp, #120]	; 0x78
 8011f5a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011f5c:	bfc8      	it	gt
 8011f5e:	2500      	movgt	r5, #0
 8011f60:	f1a3 0302 	sub.w	r3, r3, #2
 8011f64:	bfd8      	it	le
 8011f66:	2501      	movle	r5, #1
 8011f68:	2b03      	cmp	r3, #3
 8011f6a:	f200 808d 	bhi.w	8012088 <_dtoa_r+0x2f8>
 8011f6e:	e8df f003 	tbb	[pc, r3]
 8011f72:	7d7b      	.short	0x7d7b
 8011f74:	6f2f      	.short	0x6f2f
 8011f76:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8011f7a:	441d      	add	r5, r3
 8011f7c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8011f80:	2820      	cmp	r0, #32
 8011f82:	dd13      	ble.n	8011fac <_dtoa_r+0x21c>
 8011f84:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8011f88:	9b02      	ldr	r3, [sp, #8]
 8011f8a:	fa08 f800 	lsl.w	r8, r8, r0
 8011f8e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8011f92:	fa23 f000 	lsr.w	r0, r3, r0
 8011f96:	ea48 0000 	orr.w	r0, r8, r0
 8011f9a:	f7ee fa8f 	bl	80004bc <__aeabi_ui2d>
 8011f9e:	2301      	movs	r3, #1
 8011fa0:	4680      	mov	r8, r0
 8011fa2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8011fa6:	3d01      	subs	r5, #1
 8011fa8:	9310      	str	r3, [sp, #64]	; 0x40
 8011faa:	e771      	b.n	8011e90 <_dtoa_r+0x100>
 8011fac:	9b02      	ldr	r3, [sp, #8]
 8011fae:	f1c0 0020 	rsb	r0, r0, #32
 8011fb2:	fa03 f000 	lsl.w	r0, r3, r0
 8011fb6:	e7f0      	b.n	8011f9a <_dtoa_r+0x20a>
 8011fb8:	2301      	movs	r3, #1
 8011fba:	e7b0      	b.n	8011f1e <_dtoa_r+0x18e>
 8011fbc:	900d      	str	r0, [sp, #52]	; 0x34
 8011fbe:	e7af      	b.n	8011f20 <_dtoa_r+0x190>
 8011fc0:	f1ca 0300 	rsb	r3, sl, #0
 8011fc4:	9308      	str	r3, [sp, #32]
 8011fc6:	2300      	movs	r3, #0
 8011fc8:	eba9 090a 	sub.w	r9, r9, sl
 8011fcc:	930c      	str	r3, [sp, #48]	; 0x30
 8011fce:	e7bc      	b.n	8011f4a <_dtoa_r+0x1ba>
 8011fd0:	2301      	movs	r3, #1
 8011fd2:	9309      	str	r3, [sp, #36]	; 0x24
 8011fd4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	dd74      	ble.n	80120c4 <_dtoa_r+0x334>
 8011fda:	4698      	mov	r8, r3
 8011fdc:	9304      	str	r3, [sp, #16]
 8011fde:	2200      	movs	r2, #0
 8011fe0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011fe2:	6072      	str	r2, [r6, #4]
 8011fe4:	2204      	movs	r2, #4
 8011fe6:	f102 0014 	add.w	r0, r2, #20
 8011fea:	4298      	cmp	r0, r3
 8011fec:	6871      	ldr	r1, [r6, #4]
 8011fee:	d96e      	bls.n	80120ce <_dtoa_r+0x33e>
 8011ff0:	4620      	mov	r0, r4
 8011ff2:	f001 f9c3 	bl	801337c <_Balloc>
 8011ff6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011ff8:	6030      	str	r0, [r6, #0]
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	f1b8 0f0e 	cmp.w	r8, #14
 8012000:	9306      	str	r3, [sp, #24]
 8012002:	f200 80ed 	bhi.w	80121e0 <_dtoa_r+0x450>
 8012006:	2d00      	cmp	r5, #0
 8012008:	f000 80ea 	beq.w	80121e0 <_dtoa_r+0x450>
 801200c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012010:	f1ba 0f00 	cmp.w	sl, #0
 8012014:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8012018:	dd77      	ble.n	801210a <_dtoa_r+0x37a>
 801201a:	4a28      	ldr	r2, [pc, #160]	; (80120bc <_dtoa_r+0x32c>)
 801201c:	f00a 030f 	and.w	r3, sl, #15
 8012020:	ea4f 162a 	mov.w	r6, sl, asr #4
 8012024:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012028:	06f0      	lsls	r0, r6, #27
 801202a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801202e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8012032:	d568      	bpl.n	8012106 <_dtoa_r+0x376>
 8012034:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8012038:	4b21      	ldr	r3, [pc, #132]	; (80120c0 <_dtoa_r+0x330>)
 801203a:	2503      	movs	r5, #3
 801203c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012040:	f7ee fbe0 	bl	8000804 <__aeabi_ddiv>
 8012044:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012048:	f006 060f 	and.w	r6, r6, #15
 801204c:	4f1c      	ldr	r7, [pc, #112]	; (80120c0 <_dtoa_r+0x330>)
 801204e:	e04f      	b.n	80120f0 <_dtoa_r+0x360>
 8012050:	2301      	movs	r3, #1
 8012052:	9309      	str	r3, [sp, #36]	; 0x24
 8012054:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012056:	4453      	add	r3, sl
 8012058:	f103 0801 	add.w	r8, r3, #1
 801205c:	9304      	str	r3, [sp, #16]
 801205e:	4643      	mov	r3, r8
 8012060:	2b01      	cmp	r3, #1
 8012062:	bfb8      	it	lt
 8012064:	2301      	movlt	r3, #1
 8012066:	e7ba      	b.n	8011fde <_dtoa_r+0x24e>
 8012068:	2300      	movs	r3, #0
 801206a:	e7b2      	b.n	8011fd2 <_dtoa_r+0x242>
 801206c:	2300      	movs	r3, #0
 801206e:	e7f0      	b.n	8012052 <_dtoa_r+0x2c2>
 8012070:	2501      	movs	r5, #1
 8012072:	2300      	movs	r3, #0
 8012074:	9509      	str	r5, [sp, #36]	; 0x24
 8012076:	931e      	str	r3, [sp, #120]	; 0x78
 8012078:	f04f 33ff 	mov.w	r3, #4294967295
 801207c:	2200      	movs	r2, #0
 801207e:	9304      	str	r3, [sp, #16]
 8012080:	4698      	mov	r8, r3
 8012082:	2312      	movs	r3, #18
 8012084:	921f      	str	r2, [sp, #124]	; 0x7c
 8012086:	e7aa      	b.n	8011fde <_dtoa_r+0x24e>
 8012088:	2301      	movs	r3, #1
 801208a:	9309      	str	r3, [sp, #36]	; 0x24
 801208c:	e7f4      	b.n	8012078 <_dtoa_r+0x2e8>
 801208e:	bf00      	nop
 8012090:	636f4361 	.word	0x636f4361
 8012094:	3fd287a7 	.word	0x3fd287a7
 8012098:	8b60c8b3 	.word	0x8b60c8b3
 801209c:	3fc68a28 	.word	0x3fc68a28
 80120a0:	509f79fb 	.word	0x509f79fb
 80120a4:	3fd34413 	.word	0x3fd34413
 80120a8:	7ff00000 	.word	0x7ff00000
 80120ac:	08016539 	.word	0x08016539
 80120b0:	08016530 	.word	0x08016530
 80120b4:	080164b5 	.word	0x080164b5
 80120b8:	3ff80000 	.word	0x3ff80000
 80120bc:	080165d8 	.word	0x080165d8
 80120c0:	080165b0 	.word	0x080165b0
 80120c4:	2301      	movs	r3, #1
 80120c6:	9304      	str	r3, [sp, #16]
 80120c8:	4698      	mov	r8, r3
 80120ca:	461a      	mov	r2, r3
 80120cc:	e7da      	b.n	8012084 <_dtoa_r+0x2f4>
 80120ce:	3101      	adds	r1, #1
 80120d0:	6071      	str	r1, [r6, #4]
 80120d2:	0052      	lsls	r2, r2, #1
 80120d4:	e787      	b.n	8011fe6 <_dtoa_r+0x256>
 80120d6:	07f1      	lsls	r1, r6, #31
 80120d8:	d508      	bpl.n	80120ec <_dtoa_r+0x35c>
 80120da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80120de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80120e2:	f7ee fa65 	bl	80005b0 <__aeabi_dmul>
 80120e6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80120ea:	3501      	adds	r5, #1
 80120ec:	1076      	asrs	r6, r6, #1
 80120ee:	3708      	adds	r7, #8
 80120f0:	2e00      	cmp	r6, #0
 80120f2:	d1f0      	bne.n	80120d6 <_dtoa_r+0x346>
 80120f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80120f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80120fc:	f7ee fb82 	bl	8000804 <__aeabi_ddiv>
 8012100:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012104:	e01b      	b.n	801213e <_dtoa_r+0x3ae>
 8012106:	2502      	movs	r5, #2
 8012108:	e7a0      	b.n	801204c <_dtoa_r+0x2bc>
 801210a:	f000 80a4 	beq.w	8012256 <_dtoa_r+0x4c6>
 801210e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8012112:	f1ca 0600 	rsb	r6, sl, #0
 8012116:	4ba0      	ldr	r3, [pc, #640]	; (8012398 <_dtoa_r+0x608>)
 8012118:	f006 020f 	and.w	r2, r6, #15
 801211c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012124:	f7ee fa44 	bl	80005b0 <__aeabi_dmul>
 8012128:	2502      	movs	r5, #2
 801212a:	2300      	movs	r3, #0
 801212c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012130:	4f9a      	ldr	r7, [pc, #616]	; (801239c <_dtoa_r+0x60c>)
 8012132:	1136      	asrs	r6, r6, #4
 8012134:	2e00      	cmp	r6, #0
 8012136:	f040 8083 	bne.w	8012240 <_dtoa_r+0x4b0>
 801213a:	2b00      	cmp	r3, #0
 801213c:	d1e0      	bne.n	8012100 <_dtoa_r+0x370>
 801213e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012140:	2b00      	cmp	r3, #0
 8012142:	f000 808a 	beq.w	801225a <_dtoa_r+0x4ca>
 8012146:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801214a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801214e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012152:	2200      	movs	r2, #0
 8012154:	4b92      	ldr	r3, [pc, #584]	; (80123a0 <_dtoa_r+0x610>)
 8012156:	f7ee fc9d 	bl	8000a94 <__aeabi_dcmplt>
 801215a:	2800      	cmp	r0, #0
 801215c:	d07d      	beq.n	801225a <_dtoa_r+0x4ca>
 801215e:	f1b8 0f00 	cmp.w	r8, #0
 8012162:	d07a      	beq.n	801225a <_dtoa_r+0x4ca>
 8012164:	9b04      	ldr	r3, [sp, #16]
 8012166:	2b00      	cmp	r3, #0
 8012168:	dd36      	ble.n	80121d8 <_dtoa_r+0x448>
 801216a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801216e:	2200      	movs	r2, #0
 8012170:	4b8c      	ldr	r3, [pc, #560]	; (80123a4 <_dtoa_r+0x614>)
 8012172:	f7ee fa1d 	bl	80005b0 <__aeabi_dmul>
 8012176:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801217a:	9e04      	ldr	r6, [sp, #16]
 801217c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8012180:	3501      	adds	r5, #1
 8012182:	4628      	mov	r0, r5
 8012184:	f7ee f9aa 	bl	80004dc <__aeabi_i2d>
 8012188:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801218c:	f7ee fa10 	bl	80005b0 <__aeabi_dmul>
 8012190:	2200      	movs	r2, #0
 8012192:	4b85      	ldr	r3, [pc, #532]	; (80123a8 <_dtoa_r+0x618>)
 8012194:	f7ee f856 	bl	8000244 <__adddf3>
 8012198:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 801219c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80121a0:	950b      	str	r5, [sp, #44]	; 0x2c
 80121a2:	2e00      	cmp	r6, #0
 80121a4:	d15c      	bne.n	8012260 <_dtoa_r+0x4d0>
 80121a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80121aa:	2200      	movs	r2, #0
 80121ac:	4b7f      	ldr	r3, [pc, #508]	; (80123ac <_dtoa_r+0x61c>)
 80121ae:	f7ee f847 	bl	8000240 <__aeabi_dsub>
 80121b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80121b4:	462b      	mov	r3, r5
 80121b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80121ba:	f7ee fc89 	bl	8000ad0 <__aeabi_dcmpgt>
 80121be:	2800      	cmp	r0, #0
 80121c0:	f040 8281 	bne.w	80126c6 <_dtoa_r+0x936>
 80121c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80121c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80121ca:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80121ce:	f7ee fc61 	bl	8000a94 <__aeabi_dcmplt>
 80121d2:	2800      	cmp	r0, #0
 80121d4:	f040 8275 	bne.w	80126c2 <_dtoa_r+0x932>
 80121d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80121dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80121e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	f2c0 814b 	blt.w	801247e <_dtoa_r+0x6ee>
 80121e8:	f1ba 0f0e 	cmp.w	sl, #14
 80121ec:	f300 8147 	bgt.w	801247e <_dtoa_r+0x6ee>
 80121f0:	4b69      	ldr	r3, [pc, #420]	; (8012398 <_dtoa_r+0x608>)
 80121f2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80121f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80121fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012200:	2b00      	cmp	r3, #0
 8012202:	f280 80d7 	bge.w	80123b4 <_dtoa_r+0x624>
 8012206:	f1b8 0f00 	cmp.w	r8, #0
 801220a:	f300 80d3 	bgt.w	80123b4 <_dtoa_r+0x624>
 801220e:	f040 8257 	bne.w	80126c0 <_dtoa_r+0x930>
 8012212:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012216:	2200      	movs	r2, #0
 8012218:	4b64      	ldr	r3, [pc, #400]	; (80123ac <_dtoa_r+0x61c>)
 801221a:	f7ee f9c9 	bl	80005b0 <__aeabi_dmul>
 801221e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012222:	f7ee fc4b 	bl	8000abc <__aeabi_dcmpge>
 8012226:	4646      	mov	r6, r8
 8012228:	4647      	mov	r7, r8
 801222a:	2800      	cmp	r0, #0
 801222c:	f040 822d 	bne.w	801268a <_dtoa_r+0x8fa>
 8012230:	9b06      	ldr	r3, [sp, #24]
 8012232:	9a06      	ldr	r2, [sp, #24]
 8012234:	1c5d      	adds	r5, r3, #1
 8012236:	2331      	movs	r3, #49	; 0x31
 8012238:	f10a 0a01 	add.w	sl, sl, #1
 801223c:	7013      	strb	r3, [r2, #0]
 801223e:	e228      	b.n	8012692 <_dtoa_r+0x902>
 8012240:	07f2      	lsls	r2, r6, #31
 8012242:	d505      	bpl.n	8012250 <_dtoa_r+0x4c0>
 8012244:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012248:	f7ee f9b2 	bl	80005b0 <__aeabi_dmul>
 801224c:	2301      	movs	r3, #1
 801224e:	3501      	adds	r5, #1
 8012250:	1076      	asrs	r6, r6, #1
 8012252:	3708      	adds	r7, #8
 8012254:	e76e      	b.n	8012134 <_dtoa_r+0x3a4>
 8012256:	2502      	movs	r5, #2
 8012258:	e771      	b.n	801213e <_dtoa_r+0x3ae>
 801225a:	4657      	mov	r7, sl
 801225c:	4646      	mov	r6, r8
 801225e:	e790      	b.n	8012182 <_dtoa_r+0x3f2>
 8012260:	4b4d      	ldr	r3, [pc, #308]	; (8012398 <_dtoa_r+0x608>)
 8012262:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012266:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801226a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801226c:	2b00      	cmp	r3, #0
 801226e:	d048      	beq.n	8012302 <_dtoa_r+0x572>
 8012270:	4602      	mov	r2, r0
 8012272:	460b      	mov	r3, r1
 8012274:	2000      	movs	r0, #0
 8012276:	494e      	ldr	r1, [pc, #312]	; (80123b0 <_dtoa_r+0x620>)
 8012278:	f7ee fac4 	bl	8000804 <__aeabi_ddiv>
 801227c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012280:	f7ed ffde 	bl	8000240 <__aeabi_dsub>
 8012284:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8012288:	9d06      	ldr	r5, [sp, #24]
 801228a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801228e:	f7ee fc3f 	bl	8000b10 <__aeabi_d2iz>
 8012292:	9011      	str	r0, [sp, #68]	; 0x44
 8012294:	f7ee f922 	bl	80004dc <__aeabi_i2d>
 8012298:	4602      	mov	r2, r0
 801229a:	460b      	mov	r3, r1
 801229c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80122a0:	f7ed ffce 	bl	8000240 <__aeabi_dsub>
 80122a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80122a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80122aa:	3330      	adds	r3, #48	; 0x30
 80122ac:	f805 3b01 	strb.w	r3, [r5], #1
 80122b0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80122b4:	f7ee fbee 	bl	8000a94 <__aeabi_dcmplt>
 80122b8:	2800      	cmp	r0, #0
 80122ba:	d163      	bne.n	8012384 <_dtoa_r+0x5f4>
 80122bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80122c0:	2000      	movs	r0, #0
 80122c2:	4937      	ldr	r1, [pc, #220]	; (80123a0 <_dtoa_r+0x610>)
 80122c4:	f7ed ffbc 	bl	8000240 <__aeabi_dsub>
 80122c8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80122cc:	f7ee fbe2 	bl	8000a94 <__aeabi_dcmplt>
 80122d0:	2800      	cmp	r0, #0
 80122d2:	f040 80b5 	bne.w	8012440 <_dtoa_r+0x6b0>
 80122d6:	9b06      	ldr	r3, [sp, #24]
 80122d8:	1aeb      	subs	r3, r5, r3
 80122da:	429e      	cmp	r6, r3
 80122dc:	f77f af7c 	ble.w	80121d8 <_dtoa_r+0x448>
 80122e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80122e4:	2200      	movs	r2, #0
 80122e6:	4b2f      	ldr	r3, [pc, #188]	; (80123a4 <_dtoa_r+0x614>)
 80122e8:	f7ee f962 	bl	80005b0 <__aeabi_dmul>
 80122ec:	2200      	movs	r2, #0
 80122ee:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80122f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80122f6:	4b2b      	ldr	r3, [pc, #172]	; (80123a4 <_dtoa_r+0x614>)
 80122f8:	f7ee f95a 	bl	80005b0 <__aeabi_dmul>
 80122fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012300:	e7c3      	b.n	801228a <_dtoa_r+0x4fa>
 8012302:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012306:	f7ee f953 	bl	80005b0 <__aeabi_dmul>
 801230a:	9b06      	ldr	r3, [sp, #24]
 801230c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8012310:	199d      	adds	r5, r3, r6
 8012312:	461e      	mov	r6, r3
 8012314:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012318:	f7ee fbfa 	bl	8000b10 <__aeabi_d2iz>
 801231c:	9011      	str	r0, [sp, #68]	; 0x44
 801231e:	f7ee f8dd 	bl	80004dc <__aeabi_i2d>
 8012322:	4602      	mov	r2, r0
 8012324:	460b      	mov	r3, r1
 8012326:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801232a:	f7ed ff89 	bl	8000240 <__aeabi_dsub>
 801232e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012330:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012334:	3330      	adds	r3, #48	; 0x30
 8012336:	f806 3b01 	strb.w	r3, [r6], #1
 801233a:	42ae      	cmp	r6, r5
 801233c:	f04f 0200 	mov.w	r2, #0
 8012340:	d124      	bne.n	801238c <_dtoa_r+0x5fc>
 8012342:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012346:	4b1a      	ldr	r3, [pc, #104]	; (80123b0 <_dtoa_r+0x620>)
 8012348:	f7ed ff7c 	bl	8000244 <__adddf3>
 801234c:	4602      	mov	r2, r0
 801234e:	460b      	mov	r3, r1
 8012350:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012354:	f7ee fbbc 	bl	8000ad0 <__aeabi_dcmpgt>
 8012358:	2800      	cmp	r0, #0
 801235a:	d171      	bne.n	8012440 <_dtoa_r+0x6b0>
 801235c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012360:	2000      	movs	r0, #0
 8012362:	4913      	ldr	r1, [pc, #76]	; (80123b0 <_dtoa_r+0x620>)
 8012364:	f7ed ff6c 	bl	8000240 <__aeabi_dsub>
 8012368:	4602      	mov	r2, r0
 801236a:	460b      	mov	r3, r1
 801236c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012370:	f7ee fb90 	bl	8000a94 <__aeabi_dcmplt>
 8012374:	2800      	cmp	r0, #0
 8012376:	f43f af2f 	beq.w	80121d8 <_dtoa_r+0x448>
 801237a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801237e:	1e6a      	subs	r2, r5, #1
 8012380:	2b30      	cmp	r3, #48	; 0x30
 8012382:	d001      	beq.n	8012388 <_dtoa_r+0x5f8>
 8012384:	46ba      	mov	sl, r7
 8012386:	e04a      	b.n	801241e <_dtoa_r+0x68e>
 8012388:	4615      	mov	r5, r2
 801238a:	e7f6      	b.n	801237a <_dtoa_r+0x5ea>
 801238c:	4b05      	ldr	r3, [pc, #20]	; (80123a4 <_dtoa_r+0x614>)
 801238e:	f7ee f90f 	bl	80005b0 <__aeabi_dmul>
 8012392:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012396:	e7bd      	b.n	8012314 <_dtoa_r+0x584>
 8012398:	080165d8 	.word	0x080165d8
 801239c:	080165b0 	.word	0x080165b0
 80123a0:	3ff00000 	.word	0x3ff00000
 80123a4:	40240000 	.word	0x40240000
 80123a8:	401c0000 	.word	0x401c0000
 80123ac:	40140000 	.word	0x40140000
 80123b0:	3fe00000 	.word	0x3fe00000
 80123b4:	9d06      	ldr	r5, [sp, #24]
 80123b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80123ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80123be:	4630      	mov	r0, r6
 80123c0:	4639      	mov	r1, r7
 80123c2:	f7ee fa1f 	bl	8000804 <__aeabi_ddiv>
 80123c6:	f7ee fba3 	bl	8000b10 <__aeabi_d2iz>
 80123ca:	4681      	mov	r9, r0
 80123cc:	f7ee f886 	bl	80004dc <__aeabi_i2d>
 80123d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80123d4:	f7ee f8ec 	bl	80005b0 <__aeabi_dmul>
 80123d8:	4602      	mov	r2, r0
 80123da:	460b      	mov	r3, r1
 80123dc:	4630      	mov	r0, r6
 80123de:	4639      	mov	r1, r7
 80123e0:	f7ed ff2e 	bl	8000240 <__aeabi_dsub>
 80123e4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80123e8:	f805 6b01 	strb.w	r6, [r5], #1
 80123ec:	9e06      	ldr	r6, [sp, #24]
 80123ee:	4602      	mov	r2, r0
 80123f0:	1bae      	subs	r6, r5, r6
 80123f2:	45b0      	cmp	r8, r6
 80123f4:	460b      	mov	r3, r1
 80123f6:	d135      	bne.n	8012464 <_dtoa_r+0x6d4>
 80123f8:	f7ed ff24 	bl	8000244 <__adddf3>
 80123fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012400:	4606      	mov	r6, r0
 8012402:	460f      	mov	r7, r1
 8012404:	f7ee fb64 	bl	8000ad0 <__aeabi_dcmpgt>
 8012408:	b9c8      	cbnz	r0, 801243e <_dtoa_r+0x6ae>
 801240a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801240e:	4630      	mov	r0, r6
 8012410:	4639      	mov	r1, r7
 8012412:	f7ee fb35 	bl	8000a80 <__aeabi_dcmpeq>
 8012416:	b110      	cbz	r0, 801241e <_dtoa_r+0x68e>
 8012418:	f019 0f01 	tst.w	r9, #1
 801241c:	d10f      	bne.n	801243e <_dtoa_r+0x6ae>
 801241e:	4659      	mov	r1, fp
 8012420:	4620      	mov	r0, r4
 8012422:	f000 ffdf 	bl	80133e4 <_Bfree>
 8012426:	2300      	movs	r3, #0
 8012428:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801242a:	702b      	strb	r3, [r5, #0]
 801242c:	f10a 0301 	add.w	r3, sl, #1
 8012430:	6013      	str	r3, [r2, #0]
 8012432:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012434:	2b00      	cmp	r3, #0
 8012436:	f43f acf3 	beq.w	8011e20 <_dtoa_r+0x90>
 801243a:	601d      	str	r5, [r3, #0]
 801243c:	e4f0      	b.n	8011e20 <_dtoa_r+0x90>
 801243e:	4657      	mov	r7, sl
 8012440:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012444:	1e6b      	subs	r3, r5, #1
 8012446:	2a39      	cmp	r2, #57	; 0x39
 8012448:	d106      	bne.n	8012458 <_dtoa_r+0x6c8>
 801244a:	9a06      	ldr	r2, [sp, #24]
 801244c:	429a      	cmp	r2, r3
 801244e:	d107      	bne.n	8012460 <_dtoa_r+0x6d0>
 8012450:	2330      	movs	r3, #48	; 0x30
 8012452:	7013      	strb	r3, [r2, #0]
 8012454:	4613      	mov	r3, r2
 8012456:	3701      	adds	r7, #1
 8012458:	781a      	ldrb	r2, [r3, #0]
 801245a:	3201      	adds	r2, #1
 801245c:	701a      	strb	r2, [r3, #0]
 801245e:	e791      	b.n	8012384 <_dtoa_r+0x5f4>
 8012460:	461d      	mov	r5, r3
 8012462:	e7ed      	b.n	8012440 <_dtoa_r+0x6b0>
 8012464:	2200      	movs	r2, #0
 8012466:	4b99      	ldr	r3, [pc, #612]	; (80126cc <_dtoa_r+0x93c>)
 8012468:	f7ee f8a2 	bl	80005b0 <__aeabi_dmul>
 801246c:	2200      	movs	r2, #0
 801246e:	2300      	movs	r3, #0
 8012470:	4606      	mov	r6, r0
 8012472:	460f      	mov	r7, r1
 8012474:	f7ee fb04 	bl	8000a80 <__aeabi_dcmpeq>
 8012478:	2800      	cmp	r0, #0
 801247a:	d09e      	beq.n	80123ba <_dtoa_r+0x62a>
 801247c:	e7cf      	b.n	801241e <_dtoa_r+0x68e>
 801247e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012480:	2a00      	cmp	r2, #0
 8012482:	f000 8088 	beq.w	8012596 <_dtoa_r+0x806>
 8012486:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012488:	2a01      	cmp	r2, #1
 801248a:	dc6d      	bgt.n	8012568 <_dtoa_r+0x7d8>
 801248c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801248e:	2a00      	cmp	r2, #0
 8012490:	d066      	beq.n	8012560 <_dtoa_r+0x7d0>
 8012492:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012496:	464d      	mov	r5, r9
 8012498:	9e08      	ldr	r6, [sp, #32]
 801249a:	9a07      	ldr	r2, [sp, #28]
 801249c:	2101      	movs	r1, #1
 801249e:	441a      	add	r2, r3
 80124a0:	4620      	mov	r0, r4
 80124a2:	4499      	add	r9, r3
 80124a4:	9207      	str	r2, [sp, #28]
 80124a6:	f001 f87b 	bl	80135a0 <__i2b>
 80124aa:	4607      	mov	r7, r0
 80124ac:	2d00      	cmp	r5, #0
 80124ae:	dd0b      	ble.n	80124c8 <_dtoa_r+0x738>
 80124b0:	9b07      	ldr	r3, [sp, #28]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	dd08      	ble.n	80124c8 <_dtoa_r+0x738>
 80124b6:	42ab      	cmp	r3, r5
 80124b8:	bfa8      	it	ge
 80124ba:	462b      	movge	r3, r5
 80124bc:	9a07      	ldr	r2, [sp, #28]
 80124be:	eba9 0903 	sub.w	r9, r9, r3
 80124c2:	1aed      	subs	r5, r5, r3
 80124c4:	1ad3      	subs	r3, r2, r3
 80124c6:	9307      	str	r3, [sp, #28]
 80124c8:	9b08      	ldr	r3, [sp, #32]
 80124ca:	b1eb      	cbz	r3, 8012508 <_dtoa_r+0x778>
 80124cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d065      	beq.n	801259e <_dtoa_r+0x80e>
 80124d2:	b18e      	cbz	r6, 80124f8 <_dtoa_r+0x768>
 80124d4:	4639      	mov	r1, r7
 80124d6:	4632      	mov	r2, r6
 80124d8:	4620      	mov	r0, r4
 80124da:	f001 f8ff 	bl	80136dc <__pow5mult>
 80124de:	465a      	mov	r2, fp
 80124e0:	4601      	mov	r1, r0
 80124e2:	4607      	mov	r7, r0
 80124e4:	4620      	mov	r0, r4
 80124e6:	f001 f864 	bl	80135b2 <__multiply>
 80124ea:	4659      	mov	r1, fp
 80124ec:	900a      	str	r0, [sp, #40]	; 0x28
 80124ee:	4620      	mov	r0, r4
 80124f0:	f000 ff78 	bl	80133e4 <_Bfree>
 80124f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124f6:	469b      	mov	fp, r3
 80124f8:	9b08      	ldr	r3, [sp, #32]
 80124fa:	1b9a      	subs	r2, r3, r6
 80124fc:	d004      	beq.n	8012508 <_dtoa_r+0x778>
 80124fe:	4659      	mov	r1, fp
 8012500:	4620      	mov	r0, r4
 8012502:	f001 f8eb 	bl	80136dc <__pow5mult>
 8012506:	4683      	mov	fp, r0
 8012508:	2101      	movs	r1, #1
 801250a:	4620      	mov	r0, r4
 801250c:	f001 f848 	bl	80135a0 <__i2b>
 8012510:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012512:	4606      	mov	r6, r0
 8012514:	2b00      	cmp	r3, #0
 8012516:	f000 81c6 	beq.w	80128a6 <_dtoa_r+0xb16>
 801251a:	461a      	mov	r2, r3
 801251c:	4601      	mov	r1, r0
 801251e:	4620      	mov	r0, r4
 8012520:	f001 f8dc 	bl	80136dc <__pow5mult>
 8012524:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012526:	4606      	mov	r6, r0
 8012528:	2b01      	cmp	r3, #1
 801252a:	dc3e      	bgt.n	80125aa <_dtoa_r+0x81a>
 801252c:	9b02      	ldr	r3, [sp, #8]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d137      	bne.n	80125a2 <_dtoa_r+0x812>
 8012532:	9b03      	ldr	r3, [sp, #12]
 8012534:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012538:	2b00      	cmp	r3, #0
 801253a:	d134      	bne.n	80125a6 <_dtoa_r+0x816>
 801253c:	9b03      	ldr	r3, [sp, #12]
 801253e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012542:	0d1b      	lsrs	r3, r3, #20
 8012544:	051b      	lsls	r3, r3, #20
 8012546:	b12b      	cbz	r3, 8012554 <_dtoa_r+0x7c4>
 8012548:	9b07      	ldr	r3, [sp, #28]
 801254a:	f109 0901 	add.w	r9, r9, #1
 801254e:	3301      	adds	r3, #1
 8012550:	9307      	str	r3, [sp, #28]
 8012552:	2301      	movs	r3, #1
 8012554:	9308      	str	r3, [sp, #32]
 8012556:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012558:	2b00      	cmp	r3, #0
 801255a:	d128      	bne.n	80125ae <_dtoa_r+0x81e>
 801255c:	2001      	movs	r0, #1
 801255e:	e02e      	b.n	80125be <_dtoa_r+0x82e>
 8012560:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012562:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012566:	e796      	b.n	8012496 <_dtoa_r+0x706>
 8012568:	9b08      	ldr	r3, [sp, #32]
 801256a:	f108 36ff 	add.w	r6, r8, #4294967295
 801256e:	42b3      	cmp	r3, r6
 8012570:	bfb7      	itett	lt
 8012572:	9b08      	ldrlt	r3, [sp, #32]
 8012574:	1b9e      	subge	r6, r3, r6
 8012576:	1af2      	sublt	r2, r6, r3
 8012578:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 801257a:	bfbf      	itttt	lt
 801257c:	9608      	strlt	r6, [sp, #32]
 801257e:	189b      	addlt	r3, r3, r2
 8012580:	930c      	strlt	r3, [sp, #48]	; 0x30
 8012582:	2600      	movlt	r6, #0
 8012584:	f1b8 0f00 	cmp.w	r8, #0
 8012588:	bfb9      	ittee	lt
 801258a:	eba9 0508 	sublt.w	r5, r9, r8
 801258e:	2300      	movlt	r3, #0
 8012590:	464d      	movge	r5, r9
 8012592:	4643      	movge	r3, r8
 8012594:	e781      	b.n	801249a <_dtoa_r+0x70a>
 8012596:	9e08      	ldr	r6, [sp, #32]
 8012598:	464d      	mov	r5, r9
 801259a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801259c:	e786      	b.n	80124ac <_dtoa_r+0x71c>
 801259e:	9a08      	ldr	r2, [sp, #32]
 80125a0:	e7ad      	b.n	80124fe <_dtoa_r+0x76e>
 80125a2:	2300      	movs	r3, #0
 80125a4:	e7d6      	b.n	8012554 <_dtoa_r+0x7c4>
 80125a6:	9b02      	ldr	r3, [sp, #8]
 80125a8:	e7d4      	b.n	8012554 <_dtoa_r+0x7c4>
 80125aa:	2300      	movs	r3, #0
 80125ac:	9308      	str	r3, [sp, #32]
 80125ae:	6933      	ldr	r3, [r6, #16]
 80125b0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80125b4:	6918      	ldr	r0, [r3, #16]
 80125b6:	f000 ffa5 	bl	8013504 <__hi0bits>
 80125ba:	f1c0 0020 	rsb	r0, r0, #32
 80125be:	9b07      	ldr	r3, [sp, #28]
 80125c0:	4418      	add	r0, r3
 80125c2:	f010 001f 	ands.w	r0, r0, #31
 80125c6:	d047      	beq.n	8012658 <_dtoa_r+0x8c8>
 80125c8:	f1c0 0320 	rsb	r3, r0, #32
 80125cc:	2b04      	cmp	r3, #4
 80125ce:	dd3b      	ble.n	8012648 <_dtoa_r+0x8b8>
 80125d0:	9b07      	ldr	r3, [sp, #28]
 80125d2:	f1c0 001c 	rsb	r0, r0, #28
 80125d6:	4481      	add	r9, r0
 80125d8:	4405      	add	r5, r0
 80125da:	4403      	add	r3, r0
 80125dc:	9307      	str	r3, [sp, #28]
 80125de:	f1b9 0f00 	cmp.w	r9, #0
 80125e2:	dd05      	ble.n	80125f0 <_dtoa_r+0x860>
 80125e4:	4659      	mov	r1, fp
 80125e6:	464a      	mov	r2, r9
 80125e8:	4620      	mov	r0, r4
 80125ea:	f001 f8c5 	bl	8013778 <__lshift>
 80125ee:	4683      	mov	fp, r0
 80125f0:	9b07      	ldr	r3, [sp, #28]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	dd05      	ble.n	8012602 <_dtoa_r+0x872>
 80125f6:	4631      	mov	r1, r6
 80125f8:	461a      	mov	r2, r3
 80125fa:	4620      	mov	r0, r4
 80125fc:	f001 f8bc 	bl	8013778 <__lshift>
 8012600:	4606      	mov	r6, r0
 8012602:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012604:	b353      	cbz	r3, 801265c <_dtoa_r+0x8cc>
 8012606:	4631      	mov	r1, r6
 8012608:	4658      	mov	r0, fp
 801260a:	f001 f909 	bl	8013820 <__mcmp>
 801260e:	2800      	cmp	r0, #0
 8012610:	da24      	bge.n	801265c <_dtoa_r+0x8cc>
 8012612:	2300      	movs	r3, #0
 8012614:	4659      	mov	r1, fp
 8012616:	220a      	movs	r2, #10
 8012618:	4620      	mov	r0, r4
 801261a:	f000 fefa 	bl	8013412 <__multadd>
 801261e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012620:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012624:	4683      	mov	fp, r0
 8012626:	2b00      	cmp	r3, #0
 8012628:	f000 8144 	beq.w	80128b4 <_dtoa_r+0xb24>
 801262c:	2300      	movs	r3, #0
 801262e:	4639      	mov	r1, r7
 8012630:	220a      	movs	r2, #10
 8012632:	4620      	mov	r0, r4
 8012634:	f000 feed 	bl	8013412 <__multadd>
 8012638:	9b04      	ldr	r3, [sp, #16]
 801263a:	4607      	mov	r7, r0
 801263c:	2b00      	cmp	r3, #0
 801263e:	dc4d      	bgt.n	80126dc <_dtoa_r+0x94c>
 8012640:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012642:	2b02      	cmp	r3, #2
 8012644:	dd4a      	ble.n	80126dc <_dtoa_r+0x94c>
 8012646:	e011      	b.n	801266c <_dtoa_r+0x8dc>
 8012648:	d0c9      	beq.n	80125de <_dtoa_r+0x84e>
 801264a:	9a07      	ldr	r2, [sp, #28]
 801264c:	331c      	adds	r3, #28
 801264e:	441a      	add	r2, r3
 8012650:	4499      	add	r9, r3
 8012652:	441d      	add	r5, r3
 8012654:	4613      	mov	r3, r2
 8012656:	e7c1      	b.n	80125dc <_dtoa_r+0x84c>
 8012658:	4603      	mov	r3, r0
 801265a:	e7f6      	b.n	801264a <_dtoa_r+0x8ba>
 801265c:	f1b8 0f00 	cmp.w	r8, #0
 8012660:	dc36      	bgt.n	80126d0 <_dtoa_r+0x940>
 8012662:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012664:	2b02      	cmp	r3, #2
 8012666:	dd33      	ble.n	80126d0 <_dtoa_r+0x940>
 8012668:	f8cd 8010 	str.w	r8, [sp, #16]
 801266c:	9b04      	ldr	r3, [sp, #16]
 801266e:	b963      	cbnz	r3, 801268a <_dtoa_r+0x8fa>
 8012670:	4631      	mov	r1, r6
 8012672:	2205      	movs	r2, #5
 8012674:	4620      	mov	r0, r4
 8012676:	f000 fecc 	bl	8013412 <__multadd>
 801267a:	4601      	mov	r1, r0
 801267c:	4606      	mov	r6, r0
 801267e:	4658      	mov	r0, fp
 8012680:	f001 f8ce 	bl	8013820 <__mcmp>
 8012684:	2800      	cmp	r0, #0
 8012686:	f73f add3 	bgt.w	8012230 <_dtoa_r+0x4a0>
 801268a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801268c:	9d06      	ldr	r5, [sp, #24]
 801268e:	ea6f 0a03 	mvn.w	sl, r3
 8012692:	f04f 0900 	mov.w	r9, #0
 8012696:	4631      	mov	r1, r6
 8012698:	4620      	mov	r0, r4
 801269a:	f000 fea3 	bl	80133e4 <_Bfree>
 801269e:	2f00      	cmp	r7, #0
 80126a0:	f43f aebd 	beq.w	801241e <_dtoa_r+0x68e>
 80126a4:	f1b9 0f00 	cmp.w	r9, #0
 80126a8:	d005      	beq.n	80126b6 <_dtoa_r+0x926>
 80126aa:	45b9      	cmp	r9, r7
 80126ac:	d003      	beq.n	80126b6 <_dtoa_r+0x926>
 80126ae:	4649      	mov	r1, r9
 80126b0:	4620      	mov	r0, r4
 80126b2:	f000 fe97 	bl	80133e4 <_Bfree>
 80126b6:	4639      	mov	r1, r7
 80126b8:	4620      	mov	r0, r4
 80126ba:	f000 fe93 	bl	80133e4 <_Bfree>
 80126be:	e6ae      	b.n	801241e <_dtoa_r+0x68e>
 80126c0:	2600      	movs	r6, #0
 80126c2:	4637      	mov	r7, r6
 80126c4:	e7e1      	b.n	801268a <_dtoa_r+0x8fa>
 80126c6:	46ba      	mov	sl, r7
 80126c8:	4637      	mov	r7, r6
 80126ca:	e5b1      	b.n	8012230 <_dtoa_r+0x4a0>
 80126cc:	40240000 	.word	0x40240000
 80126d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80126d2:	f8cd 8010 	str.w	r8, [sp, #16]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	f000 80f3 	beq.w	80128c2 <_dtoa_r+0xb32>
 80126dc:	2d00      	cmp	r5, #0
 80126de:	dd05      	ble.n	80126ec <_dtoa_r+0x95c>
 80126e0:	4639      	mov	r1, r7
 80126e2:	462a      	mov	r2, r5
 80126e4:	4620      	mov	r0, r4
 80126e6:	f001 f847 	bl	8013778 <__lshift>
 80126ea:	4607      	mov	r7, r0
 80126ec:	9b08      	ldr	r3, [sp, #32]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d04c      	beq.n	801278c <_dtoa_r+0x9fc>
 80126f2:	6879      	ldr	r1, [r7, #4]
 80126f4:	4620      	mov	r0, r4
 80126f6:	f000 fe41 	bl	801337c <_Balloc>
 80126fa:	4605      	mov	r5, r0
 80126fc:	693a      	ldr	r2, [r7, #16]
 80126fe:	f107 010c 	add.w	r1, r7, #12
 8012702:	3202      	adds	r2, #2
 8012704:	0092      	lsls	r2, r2, #2
 8012706:	300c      	adds	r0, #12
 8012708:	f7fd fc3d 	bl	800ff86 <memcpy>
 801270c:	2201      	movs	r2, #1
 801270e:	4629      	mov	r1, r5
 8012710:	4620      	mov	r0, r4
 8012712:	f001 f831 	bl	8013778 <__lshift>
 8012716:	46b9      	mov	r9, r7
 8012718:	4607      	mov	r7, r0
 801271a:	9b06      	ldr	r3, [sp, #24]
 801271c:	9307      	str	r3, [sp, #28]
 801271e:	9b02      	ldr	r3, [sp, #8]
 8012720:	f003 0301 	and.w	r3, r3, #1
 8012724:	9308      	str	r3, [sp, #32]
 8012726:	4631      	mov	r1, r6
 8012728:	4658      	mov	r0, fp
 801272a:	f7ff faa3 	bl	8011c74 <quorem>
 801272e:	4649      	mov	r1, r9
 8012730:	4605      	mov	r5, r0
 8012732:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012736:	4658      	mov	r0, fp
 8012738:	f001 f872 	bl	8013820 <__mcmp>
 801273c:	463a      	mov	r2, r7
 801273e:	9002      	str	r0, [sp, #8]
 8012740:	4631      	mov	r1, r6
 8012742:	4620      	mov	r0, r4
 8012744:	f001 f886 	bl	8013854 <__mdiff>
 8012748:	68c3      	ldr	r3, [r0, #12]
 801274a:	4602      	mov	r2, r0
 801274c:	bb03      	cbnz	r3, 8012790 <_dtoa_r+0xa00>
 801274e:	4601      	mov	r1, r0
 8012750:	9009      	str	r0, [sp, #36]	; 0x24
 8012752:	4658      	mov	r0, fp
 8012754:	f001 f864 	bl	8013820 <__mcmp>
 8012758:	4603      	mov	r3, r0
 801275a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801275c:	4611      	mov	r1, r2
 801275e:	4620      	mov	r0, r4
 8012760:	9309      	str	r3, [sp, #36]	; 0x24
 8012762:	f000 fe3f 	bl	80133e4 <_Bfree>
 8012766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012768:	b9a3      	cbnz	r3, 8012794 <_dtoa_r+0xa04>
 801276a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801276c:	b992      	cbnz	r2, 8012794 <_dtoa_r+0xa04>
 801276e:	9a08      	ldr	r2, [sp, #32]
 8012770:	b982      	cbnz	r2, 8012794 <_dtoa_r+0xa04>
 8012772:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012776:	d029      	beq.n	80127cc <_dtoa_r+0xa3c>
 8012778:	9b02      	ldr	r3, [sp, #8]
 801277a:	2b00      	cmp	r3, #0
 801277c:	dd01      	ble.n	8012782 <_dtoa_r+0x9f2>
 801277e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8012782:	9b07      	ldr	r3, [sp, #28]
 8012784:	1c5d      	adds	r5, r3, #1
 8012786:	f883 8000 	strb.w	r8, [r3]
 801278a:	e784      	b.n	8012696 <_dtoa_r+0x906>
 801278c:	4638      	mov	r0, r7
 801278e:	e7c2      	b.n	8012716 <_dtoa_r+0x986>
 8012790:	2301      	movs	r3, #1
 8012792:	e7e3      	b.n	801275c <_dtoa_r+0x9cc>
 8012794:	9a02      	ldr	r2, [sp, #8]
 8012796:	2a00      	cmp	r2, #0
 8012798:	db04      	blt.n	80127a4 <_dtoa_r+0xa14>
 801279a:	d123      	bne.n	80127e4 <_dtoa_r+0xa54>
 801279c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801279e:	bb0a      	cbnz	r2, 80127e4 <_dtoa_r+0xa54>
 80127a0:	9a08      	ldr	r2, [sp, #32]
 80127a2:	b9fa      	cbnz	r2, 80127e4 <_dtoa_r+0xa54>
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	ddec      	ble.n	8012782 <_dtoa_r+0x9f2>
 80127a8:	4659      	mov	r1, fp
 80127aa:	2201      	movs	r2, #1
 80127ac:	4620      	mov	r0, r4
 80127ae:	f000 ffe3 	bl	8013778 <__lshift>
 80127b2:	4631      	mov	r1, r6
 80127b4:	4683      	mov	fp, r0
 80127b6:	f001 f833 	bl	8013820 <__mcmp>
 80127ba:	2800      	cmp	r0, #0
 80127bc:	dc03      	bgt.n	80127c6 <_dtoa_r+0xa36>
 80127be:	d1e0      	bne.n	8012782 <_dtoa_r+0x9f2>
 80127c0:	f018 0f01 	tst.w	r8, #1
 80127c4:	d0dd      	beq.n	8012782 <_dtoa_r+0x9f2>
 80127c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80127ca:	d1d8      	bne.n	801277e <_dtoa_r+0x9ee>
 80127cc:	9b07      	ldr	r3, [sp, #28]
 80127ce:	9a07      	ldr	r2, [sp, #28]
 80127d0:	1c5d      	adds	r5, r3, #1
 80127d2:	2339      	movs	r3, #57	; 0x39
 80127d4:	7013      	strb	r3, [r2, #0]
 80127d6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80127da:	1e6a      	subs	r2, r5, #1
 80127dc:	2b39      	cmp	r3, #57	; 0x39
 80127de:	d04d      	beq.n	801287c <_dtoa_r+0xaec>
 80127e0:	3301      	adds	r3, #1
 80127e2:	e052      	b.n	801288a <_dtoa_r+0xafa>
 80127e4:	9a07      	ldr	r2, [sp, #28]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	f102 0501 	add.w	r5, r2, #1
 80127ec:	dd06      	ble.n	80127fc <_dtoa_r+0xa6c>
 80127ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80127f2:	d0eb      	beq.n	80127cc <_dtoa_r+0xa3c>
 80127f4:	f108 0801 	add.w	r8, r8, #1
 80127f8:	9b07      	ldr	r3, [sp, #28]
 80127fa:	e7c4      	b.n	8012786 <_dtoa_r+0x9f6>
 80127fc:	9b06      	ldr	r3, [sp, #24]
 80127fe:	9a04      	ldr	r2, [sp, #16]
 8012800:	1aeb      	subs	r3, r5, r3
 8012802:	4293      	cmp	r3, r2
 8012804:	f805 8c01 	strb.w	r8, [r5, #-1]
 8012808:	d021      	beq.n	801284e <_dtoa_r+0xabe>
 801280a:	4659      	mov	r1, fp
 801280c:	2300      	movs	r3, #0
 801280e:	220a      	movs	r2, #10
 8012810:	4620      	mov	r0, r4
 8012812:	f000 fdfe 	bl	8013412 <__multadd>
 8012816:	45b9      	cmp	r9, r7
 8012818:	4683      	mov	fp, r0
 801281a:	f04f 0300 	mov.w	r3, #0
 801281e:	f04f 020a 	mov.w	r2, #10
 8012822:	4649      	mov	r1, r9
 8012824:	4620      	mov	r0, r4
 8012826:	d105      	bne.n	8012834 <_dtoa_r+0xaa4>
 8012828:	f000 fdf3 	bl	8013412 <__multadd>
 801282c:	4681      	mov	r9, r0
 801282e:	4607      	mov	r7, r0
 8012830:	9507      	str	r5, [sp, #28]
 8012832:	e778      	b.n	8012726 <_dtoa_r+0x996>
 8012834:	f000 fded 	bl	8013412 <__multadd>
 8012838:	4639      	mov	r1, r7
 801283a:	4681      	mov	r9, r0
 801283c:	2300      	movs	r3, #0
 801283e:	220a      	movs	r2, #10
 8012840:	4620      	mov	r0, r4
 8012842:	f000 fde6 	bl	8013412 <__multadd>
 8012846:	4607      	mov	r7, r0
 8012848:	e7f2      	b.n	8012830 <_dtoa_r+0xaa0>
 801284a:	f04f 0900 	mov.w	r9, #0
 801284e:	4659      	mov	r1, fp
 8012850:	2201      	movs	r2, #1
 8012852:	4620      	mov	r0, r4
 8012854:	f000 ff90 	bl	8013778 <__lshift>
 8012858:	4631      	mov	r1, r6
 801285a:	4683      	mov	fp, r0
 801285c:	f000 ffe0 	bl	8013820 <__mcmp>
 8012860:	2800      	cmp	r0, #0
 8012862:	dcb8      	bgt.n	80127d6 <_dtoa_r+0xa46>
 8012864:	d102      	bne.n	801286c <_dtoa_r+0xadc>
 8012866:	f018 0f01 	tst.w	r8, #1
 801286a:	d1b4      	bne.n	80127d6 <_dtoa_r+0xa46>
 801286c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012870:	1e6a      	subs	r2, r5, #1
 8012872:	2b30      	cmp	r3, #48	; 0x30
 8012874:	f47f af0f 	bne.w	8012696 <_dtoa_r+0x906>
 8012878:	4615      	mov	r5, r2
 801287a:	e7f7      	b.n	801286c <_dtoa_r+0xadc>
 801287c:	9b06      	ldr	r3, [sp, #24]
 801287e:	4293      	cmp	r3, r2
 8012880:	d105      	bne.n	801288e <_dtoa_r+0xafe>
 8012882:	2331      	movs	r3, #49	; 0x31
 8012884:	9a06      	ldr	r2, [sp, #24]
 8012886:	f10a 0a01 	add.w	sl, sl, #1
 801288a:	7013      	strb	r3, [r2, #0]
 801288c:	e703      	b.n	8012696 <_dtoa_r+0x906>
 801288e:	4615      	mov	r5, r2
 8012890:	e7a1      	b.n	80127d6 <_dtoa_r+0xa46>
 8012892:	4b17      	ldr	r3, [pc, #92]	; (80128f0 <_dtoa_r+0xb60>)
 8012894:	f7ff bae1 	b.w	8011e5a <_dtoa_r+0xca>
 8012898:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801289a:	2b00      	cmp	r3, #0
 801289c:	f47f aabb 	bne.w	8011e16 <_dtoa_r+0x86>
 80128a0:	4b14      	ldr	r3, [pc, #80]	; (80128f4 <_dtoa_r+0xb64>)
 80128a2:	f7ff bada 	b.w	8011e5a <_dtoa_r+0xca>
 80128a6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80128a8:	2b01      	cmp	r3, #1
 80128aa:	f77f ae3f 	ble.w	801252c <_dtoa_r+0x79c>
 80128ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80128b0:	9308      	str	r3, [sp, #32]
 80128b2:	e653      	b.n	801255c <_dtoa_r+0x7cc>
 80128b4:	9b04      	ldr	r3, [sp, #16]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	dc03      	bgt.n	80128c2 <_dtoa_r+0xb32>
 80128ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80128bc:	2b02      	cmp	r3, #2
 80128be:	f73f aed5 	bgt.w	801266c <_dtoa_r+0x8dc>
 80128c2:	9d06      	ldr	r5, [sp, #24]
 80128c4:	4631      	mov	r1, r6
 80128c6:	4658      	mov	r0, fp
 80128c8:	f7ff f9d4 	bl	8011c74 <quorem>
 80128cc:	9b06      	ldr	r3, [sp, #24]
 80128ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80128d2:	f805 8b01 	strb.w	r8, [r5], #1
 80128d6:	9a04      	ldr	r2, [sp, #16]
 80128d8:	1aeb      	subs	r3, r5, r3
 80128da:	429a      	cmp	r2, r3
 80128dc:	ddb5      	ble.n	801284a <_dtoa_r+0xaba>
 80128de:	4659      	mov	r1, fp
 80128e0:	2300      	movs	r3, #0
 80128e2:	220a      	movs	r2, #10
 80128e4:	4620      	mov	r0, r4
 80128e6:	f000 fd94 	bl	8013412 <__multadd>
 80128ea:	4683      	mov	fp, r0
 80128ec:	e7ea      	b.n	80128c4 <_dtoa_r+0xb34>
 80128ee:	bf00      	nop
 80128f0:	080164b4 	.word	0x080164b4
 80128f4:	08016530 	.word	0x08016530

080128f8 <__sflush_r>:
 80128f8:	898a      	ldrh	r2, [r1, #12]
 80128fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128fe:	4605      	mov	r5, r0
 8012900:	0710      	lsls	r0, r2, #28
 8012902:	460c      	mov	r4, r1
 8012904:	d458      	bmi.n	80129b8 <__sflush_r+0xc0>
 8012906:	684b      	ldr	r3, [r1, #4]
 8012908:	2b00      	cmp	r3, #0
 801290a:	dc05      	bgt.n	8012918 <__sflush_r+0x20>
 801290c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801290e:	2b00      	cmp	r3, #0
 8012910:	dc02      	bgt.n	8012918 <__sflush_r+0x20>
 8012912:	2000      	movs	r0, #0
 8012914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012918:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801291a:	2e00      	cmp	r6, #0
 801291c:	d0f9      	beq.n	8012912 <__sflush_r+0x1a>
 801291e:	2300      	movs	r3, #0
 8012920:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012924:	682f      	ldr	r7, [r5, #0]
 8012926:	6a21      	ldr	r1, [r4, #32]
 8012928:	602b      	str	r3, [r5, #0]
 801292a:	d032      	beq.n	8012992 <__sflush_r+0x9a>
 801292c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801292e:	89a3      	ldrh	r3, [r4, #12]
 8012930:	075a      	lsls	r2, r3, #29
 8012932:	d505      	bpl.n	8012940 <__sflush_r+0x48>
 8012934:	6863      	ldr	r3, [r4, #4]
 8012936:	1ac0      	subs	r0, r0, r3
 8012938:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801293a:	b10b      	cbz	r3, 8012940 <__sflush_r+0x48>
 801293c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801293e:	1ac0      	subs	r0, r0, r3
 8012940:	2300      	movs	r3, #0
 8012942:	4602      	mov	r2, r0
 8012944:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012946:	6a21      	ldr	r1, [r4, #32]
 8012948:	4628      	mov	r0, r5
 801294a:	47b0      	blx	r6
 801294c:	1c43      	adds	r3, r0, #1
 801294e:	89a3      	ldrh	r3, [r4, #12]
 8012950:	d106      	bne.n	8012960 <__sflush_r+0x68>
 8012952:	6829      	ldr	r1, [r5, #0]
 8012954:	291d      	cmp	r1, #29
 8012956:	d848      	bhi.n	80129ea <__sflush_r+0xf2>
 8012958:	4a29      	ldr	r2, [pc, #164]	; (8012a00 <__sflush_r+0x108>)
 801295a:	40ca      	lsrs	r2, r1
 801295c:	07d6      	lsls	r6, r2, #31
 801295e:	d544      	bpl.n	80129ea <__sflush_r+0xf2>
 8012960:	2200      	movs	r2, #0
 8012962:	6062      	str	r2, [r4, #4]
 8012964:	6922      	ldr	r2, [r4, #16]
 8012966:	04d9      	lsls	r1, r3, #19
 8012968:	6022      	str	r2, [r4, #0]
 801296a:	d504      	bpl.n	8012976 <__sflush_r+0x7e>
 801296c:	1c42      	adds	r2, r0, #1
 801296e:	d101      	bne.n	8012974 <__sflush_r+0x7c>
 8012970:	682b      	ldr	r3, [r5, #0]
 8012972:	b903      	cbnz	r3, 8012976 <__sflush_r+0x7e>
 8012974:	6560      	str	r0, [r4, #84]	; 0x54
 8012976:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012978:	602f      	str	r7, [r5, #0]
 801297a:	2900      	cmp	r1, #0
 801297c:	d0c9      	beq.n	8012912 <__sflush_r+0x1a>
 801297e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012982:	4299      	cmp	r1, r3
 8012984:	d002      	beq.n	801298c <__sflush_r+0x94>
 8012986:	4628      	mov	r0, r5
 8012988:	f001 f8fe 	bl	8013b88 <_free_r>
 801298c:	2000      	movs	r0, #0
 801298e:	6360      	str	r0, [r4, #52]	; 0x34
 8012990:	e7c0      	b.n	8012914 <__sflush_r+0x1c>
 8012992:	2301      	movs	r3, #1
 8012994:	4628      	mov	r0, r5
 8012996:	47b0      	blx	r6
 8012998:	1c41      	adds	r1, r0, #1
 801299a:	d1c8      	bne.n	801292e <__sflush_r+0x36>
 801299c:	682b      	ldr	r3, [r5, #0]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d0c5      	beq.n	801292e <__sflush_r+0x36>
 80129a2:	2b1d      	cmp	r3, #29
 80129a4:	d001      	beq.n	80129aa <__sflush_r+0xb2>
 80129a6:	2b16      	cmp	r3, #22
 80129a8:	d101      	bne.n	80129ae <__sflush_r+0xb6>
 80129aa:	602f      	str	r7, [r5, #0]
 80129ac:	e7b1      	b.n	8012912 <__sflush_r+0x1a>
 80129ae:	89a3      	ldrh	r3, [r4, #12]
 80129b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80129b4:	81a3      	strh	r3, [r4, #12]
 80129b6:	e7ad      	b.n	8012914 <__sflush_r+0x1c>
 80129b8:	690f      	ldr	r7, [r1, #16]
 80129ba:	2f00      	cmp	r7, #0
 80129bc:	d0a9      	beq.n	8012912 <__sflush_r+0x1a>
 80129be:	0793      	lsls	r3, r2, #30
 80129c0:	bf18      	it	ne
 80129c2:	2300      	movne	r3, #0
 80129c4:	680e      	ldr	r6, [r1, #0]
 80129c6:	bf08      	it	eq
 80129c8:	694b      	ldreq	r3, [r1, #20]
 80129ca:	eba6 0807 	sub.w	r8, r6, r7
 80129ce:	600f      	str	r7, [r1, #0]
 80129d0:	608b      	str	r3, [r1, #8]
 80129d2:	f1b8 0f00 	cmp.w	r8, #0
 80129d6:	dd9c      	ble.n	8012912 <__sflush_r+0x1a>
 80129d8:	4643      	mov	r3, r8
 80129da:	463a      	mov	r2, r7
 80129dc:	6a21      	ldr	r1, [r4, #32]
 80129de:	4628      	mov	r0, r5
 80129e0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80129e2:	47b0      	blx	r6
 80129e4:	2800      	cmp	r0, #0
 80129e6:	dc06      	bgt.n	80129f6 <__sflush_r+0xfe>
 80129e8:	89a3      	ldrh	r3, [r4, #12]
 80129ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80129ee:	81a3      	strh	r3, [r4, #12]
 80129f0:	f04f 30ff 	mov.w	r0, #4294967295
 80129f4:	e78e      	b.n	8012914 <__sflush_r+0x1c>
 80129f6:	4407      	add	r7, r0
 80129f8:	eba8 0800 	sub.w	r8, r8, r0
 80129fc:	e7e9      	b.n	80129d2 <__sflush_r+0xda>
 80129fe:	bf00      	nop
 8012a00:	20400001 	.word	0x20400001

08012a04 <_fflush_r>:
 8012a04:	b538      	push	{r3, r4, r5, lr}
 8012a06:	690b      	ldr	r3, [r1, #16]
 8012a08:	4605      	mov	r5, r0
 8012a0a:	460c      	mov	r4, r1
 8012a0c:	b1db      	cbz	r3, 8012a46 <_fflush_r+0x42>
 8012a0e:	b118      	cbz	r0, 8012a18 <_fflush_r+0x14>
 8012a10:	6983      	ldr	r3, [r0, #24]
 8012a12:	b90b      	cbnz	r3, 8012a18 <_fflush_r+0x14>
 8012a14:	f000 f860 	bl	8012ad8 <__sinit>
 8012a18:	4b0c      	ldr	r3, [pc, #48]	; (8012a4c <_fflush_r+0x48>)
 8012a1a:	429c      	cmp	r4, r3
 8012a1c:	d109      	bne.n	8012a32 <_fflush_r+0x2e>
 8012a1e:	686c      	ldr	r4, [r5, #4]
 8012a20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a24:	b17b      	cbz	r3, 8012a46 <_fflush_r+0x42>
 8012a26:	4621      	mov	r1, r4
 8012a28:	4628      	mov	r0, r5
 8012a2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012a2e:	f7ff bf63 	b.w	80128f8 <__sflush_r>
 8012a32:	4b07      	ldr	r3, [pc, #28]	; (8012a50 <_fflush_r+0x4c>)
 8012a34:	429c      	cmp	r4, r3
 8012a36:	d101      	bne.n	8012a3c <_fflush_r+0x38>
 8012a38:	68ac      	ldr	r4, [r5, #8]
 8012a3a:	e7f1      	b.n	8012a20 <_fflush_r+0x1c>
 8012a3c:	4b05      	ldr	r3, [pc, #20]	; (8012a54 <_fflush_r+0x50>)
 8012a3e:	429c      	cmp	r4, r3
 8012a40:	bf08      	it	eq
 8012a42:	68ec      	ldreq	r4, [r5, #12]
 8012a44:	e7ec      	b.n	8012a20 <_fflush_r+0x1c>
 8012a46:	2000      	movs	r0, #0
 8012a48:	bd38      	pop	{r3, r4, r5, pc}
 8012a4a:	bf00      	nop
 8012a4c:	08016560 	.word	0x08016560
 8012a50:	08016580 	.word	0x08016580
 8012a54:	08016540 	.word	0x08016540

08012a58 <std>:
 8012a58:	2300      	movs	r3, #0
 8012a5a:	b510      	push	{r4, lr}
 8012a5c:	4604      	mov	r4, r0
 8012a5e:	e9c0 3300 	strd	r3, r3, [r0]
 8012a62:	6083      	str	r3, [r0, #8]
 8012a64:	8181      	strh	r1, [r0, #12]
 8012a66:	6643      	str	r3, [r0, #100]	; 0x64
 8012a68:	81c2      	strh	r2, [r0, #14]
 8012a6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012a6e:	6183      	str	r3, [r0, #24]
 8012a70:	4619      	mov	r1, r3
 8012a72:	2208      	movs	r2, #8
 8012a74:	305c      	adds	r0, #92	; 0x5c
 8012a76:	f7fd fa91 	bl	800ff9c <memset>
 8012a7a:	4b05      	ldr	r3, [pc, #20]	; (8012a90 <std+0x38>)
 8012a7c:	6224      	str	r4, [r4, #32]
 8012a7e:	6263      	str	r3, [r4, #36]	; 0x24
 8012a80:	4b04      	ldr	r3, [pc, #16]	; (8012a94 <std+0x3c>)
 8012a82:	62a3      	str	r3, [r4, #40]	; 0x28
 8012a84:	4b04      	ldr	r3, [pc, #16]	; (8012a98 <std+0x40>)
 8012a86:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012a88:	4b04      	ldr	r3, [pc, #16]	; (8012a9c <std+0x44>)
 8012a8a:	6323      	str	r3, [r4, #48]	; 0x30
 8012a8c:	bd10      	pop	{r4, pc}
 8012a8e:	bf00      	nop
 8012a90:	08014215 	.word	0x08014215
 8012a94:	08014237 	.word	0x08014237
 8012a98:	0801426f 	.word	0x0801426f
 8012a9c:	08014293 	.word	0x08014293

08012aa0 <_cleanup_r>:
 8012aa0:	4901      	ldr	r1, [pc, #4]	; (8012aa8 <_cleanup_r+0x8>)
 8012aa2:	f000 b885 	b.w	8012bb0 <_fwalk_reent>
 8012aa6:	bf00      	nop
 8012aa8:	08012a05 	.word	0x08012a05

08012aac <__sfmoreglue>:
 8012aac:	b570      	push	{r4, r5, r6, lr}
 8012aae:	2568      	movs	r5, #104	; 0x68
 8012ab0:	1e4a      	subs	r2, r1, #1
 8012ab2:	4355      	muls	r5, r2
 8012ab4:	460e      	mov	r6, r1
 8012ab6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012aba:	f001 f8b1 	bl	8013c20 <_malloc_r>
 8012abe:	4604      	mov	r4, r0
 8012ac0:	b140      	cbz	r0, 8012ad4 <__sfmoreglue+0x28>
 8012ac2:	2100      	movs	r1, #0
 8012ac4:	e9c0 1600 	strd	r1, r6, [r0]
 8012ac8:	300c      	adds	r0, #12
 8012aca:	60a0      	str	r0, [r4, #8]
 8012acc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012ad0:	f7fd fa64 	bl	800ff9c <memset>
 8012ad4:	4620      	mov	r0, r4
 8012ad6:	bd70      	pop	{r4, r5, r6, pc}

08012ad8 <__sinit>:
 8012ad8:	6983      	ldr	r3, [r0, #24]
 8012ada:	b510      	push	{r4, lr}
 8012adc:	4604      	mov	r4, r0
 8012ade:	bb33      	cbnz	r3, 8012b2e <__sinit+0x56>
 8012ae0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8012ae4:	6503      	str	r3, [r0, #80]	; 0x50
 8012ae6:	4b12      	ldr	r3, [pc, #72]	; (8012b30 <__sinit+0x58>)
 8012ae8:	4a12      	ldr	r2, [pc, #72]	; (8012b34 <__sinit+0x5c>)
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	6282      	str	r2, [r0, #40]	; 0x28
 8012aee:	4298      	cmp	r0, r3
 8012af0:	bf04      	itt	eq
 8012af2:	2301      	moveq	r3, #1
 8012af4:	6183      	streq	r3, [r0, #24]
 8012af6:	f000 f81f 	bl	8012b38 <__sfp>
 8012afa:	6060      	str	r0, [r4, #4]
 8012afc:	4620      	mov	r0, r4
 8012afe:	f000 f81b 	bl	8012b38 <__sfp>
 8012b02:	60a0      	str	r0, [r4, #8]
 8012b04:	4620      	mov	r0, r4
 8012b06:	f000 f817 	bl	8012b38 <__sfp>
 8012b0a:	2200      	movs	r2, #0
 8012b0c:	60e0      	str	r0, [r4, #12]
 8012b0e:	2104      	movs	r1, #4
 8012b10:	6860      	ldr	r0, [r4, #4]
 8012b12:	f7ff ffa1 	bl	8012a58 <std>
 8012b16:	2201      	movs	r2, #1
 8012b18:	2109      	movs	r1, #9
 8012b1a:	68a0      	ldr	r0, [r4, #8]
 8012b1c:	f7ff ff9c 	bl	8012a58 <std>
 8012b20:	2202      	movs	r2, #2
 8012b22:	2112      	movs	r1, #18
 8012b24:	68e0      	ldr	r0, [r4, #12]
 8012b26:	f7ff ff97 	bl	8012a58 <std>
 8012b2a:	2301      	movs	r3, #1
 8012b2c:	61a3      	str	r3, [r4, #24]
 8012b2e:	bd10      	pop	{r4, pc}
 8012b30:	080164a0 	.word	0x080164a0
 8012b34:	08012aa1 	.word	0x08012aa1

08012b38 <__sfp>:
 8012b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b3a:	4b1b      	ldr	r3, [pc, #108]	; (8012ba8 <__sfp+0x70>)
 8012b3c:	4607      	mov	r7, r0
 8012b3e:	681e      	ldr	r6, [r3, #0]
 8012b40:	69b3      	ldr	r3, [r6, #24]
 8012b42:	b913      	cbnz	r3, 8012b4a <__sfp+0x12>
 8012b44:	4630      	mov	r0, r6
 8012b46:	f7ff ffc7 	bl	8012ad8 <__sinit>
 8012b4a:	3648      	adds	r6, #72	; 0x48
 8012b4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012b50:	3b01      	subs	r3, #1
 8012b52:	d503      	bpl.n	8012b5c <__sfp+0x24>
 8012b54:	6833      	ldr	r3, [r6, #0]
 8012b56:	b133      	cbz	r3, 8012b66 <__sfp+0x2e>
 8012b58:	6836      	ldr	r6, [r6, #0]
 8012b5a:	e7f7      	b.n	8012b4c <__sfp+0x14>
 8012b5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012b60:	b16d      	cbz	r5, 8012b7e <__sfp+0x46>
 8012b62:	3468      	adds	r4, #104	; 0x68
 8012b64:	e7f4      	b.n	8012b50 <__sfp+0x18>
 8012b66:	2104      	movs	r1, #4
 8012b68:	4638      	mov	r0, r7
 8012b6a:	f7ff ff9f 	bl	8012aac <__sfmoreglue>
 8012b6e:	6030      	str	r0, [r6, #0]
 8012b70:	2800      	cmp	r0, #0
 8012b72:	d1f1      	bne.n	8012b58 <__sfp+0x20>
 8012b74:	230c      	movs	r3, #12
 8012b76:	4604      	mov	r4, r0
 8012b78:	603b      	str	r3, [r7, #0]
 8012b7a:	4620      	mov	r0, r4
 8012b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b7e:	4b0b      	ldr	r3, [pc, #44]	; (8012bac <__sfp+0x74>)
 8012b80:	6665      	str	r5, [r4, #100]	; 0x64
 8012b82:	e9c4 5500 	strd	r5, r5, [r4]
 8012b86:	60a5      	str	r5, [r4, #8]
 8012b88:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8012b8c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8012b90:	2208      	movs	r2, #8
 8012b92:	4629      	mov	r1, r5
 8012b94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012b98:	f7fd fa00 	bl	800ff9c <memset>
 8012b9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012ba0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012ba4:	e7e9      	b.n	8012b7a <__sfp+0x42>
 8012ba6:	bf00      	nop
 8012ba8:	080164a0 	.word	0x080164a0
 8012bac:	ffff0001 	.word	0xffff0001

08012bb0 <_fwalk_reent>:
 8012bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012bb4:	4680      	mov	r8, r0
 8012bb6:	4689      	mov	r9, r1
 8012bb8:	2600      	movs	r6, #0
 8012bba:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012bbe:	b914      	cbnz	r4, 8012bc6 <_fwalk_reent+0x16>
 8012bc0:	4630      	mov	r0, r6
 8012bc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012bc6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8012bca:	3f01      	subs	r7, #1
 8012bcc:	d501      	bpl.n	8012bd2 <_fwalk_reent+0x22>
 8012bce:	6824      	ldr	r4, [r4, #0]
 8012bd0:	e7f5      	b.n	8012bbe <_fwalk_reent+0xe>
 8012bd2:	89ab      	ldrh	r3, [r5, #12]
 8012bd4:	2b01      	cmp	r3, #1
 8012bd6:	d907      	bls.n	8012be8 <_fwalk_reent+0x38>
 8012bd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012bdc:	3301      	adds	r3, #1
 8012bde:	d003      	beq.n	8012be8 <_fwalk_reent+0x38>
 8012be0:	4629      	mov	r1, r5
 8012be2:	4640      	mov	r0, r8
 8012be4:	47c8      	blx	r9
 8012be6:	4306      	orrs	r6, r0
 8012be8:	3568      	adds	r5, #104	; 0x68
 8012bea:	e7ee      	b.n	8012bca <_fwalk_reent+0x1a>

08012bec <rshift>:
 8012bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012bee:	6906      	ldr	r6, [r0, #16]
 8012bf0:	114b      	asrs	r3, r1, #5
 8012bf2:	429e      	cmp	r6, r3
 8012bf4:	f100 0414 	add.w	r4, r0, #20
 8012bf8:	dd31      	ble.n	8012c5e <rshift+0x72>
 8012bfa:	f011 011f 	ands.w	r1, r1, #31
 8012bfe:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8012c02:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8012c06:	d108      	bne.n	8012c1a <rshift+0x2e>
 8012c08:	4621      	mov	r1, r4
 8012c0a:	42b2      	cmp	r2, r6
 8012c0c:	460b      	mov	r3, r1
 8012c0e:	d211      	bcs.n	8012c34 <rshift+0x48>
 8012c10:	f852 3b04 	ldr.w	r3, [r2], #4
 8012c14:	f841 3b04 	str.w	r3, [r1], #4
 8012c18:	e7f7      	b.n	8012c0a <rshift+0x1e>
 8012c1a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8012c1e:	4623      	mov	r3, r4
 8012c20:	f1c1 0c20 	rsb	ip, r1, #32
 8012c24:	40cd      	lsrs	r5, r1
 8012c26:	3204      	adds	r2, #4
 8012c28:	42b2      	cmp	r2, r6
 8012c2a:	4617      	mov	r7, r2
 8012c2c:	d30d      	bcc.n	8012c4a <rshift+0x5e>
 8012c2e:	601d      	str	r5, [r3, #0]
 8012c30:	b105      	cbz	r5, 8012c34 <rshift+0x48>
 8012c32:	3304      	adds	r3, #4
 8012c34:	42a3      	cmp	r3, r4
 8012c36:	eba3 0204 	sub.w	r2, r3, r4
 8012c3a:	bf08      	it	eq
 8012c3c:	2300      	moveq	r3, #0
 8012c3e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012c42:	6102      	str	r2, [r0, #16]
 8012c44:	bf08      	it	eq
 8012c46:	6143      	streq	r3, [r0, #20]
 8012c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c4a:	683f      	ldr	r7, [r7, #0]
 8012c4c:	fa07 f70c 	lsl.w	r7, r7, ip
 8012c50:	433d      	orrs	r5, r7
 8012c52:	f843 5b04 	str.w	r5, [r3], #4
 8012c56:	f852 5b04 	ldr.w	r5, [r2], #4
 8012c5a:	40cd      	lsrs	r5, r1
 8012c5c:	e7e4      	b.n	8012c28 <rshift+0x3c>
 8012c5e:	4623      	mov	r3, r4
 8012c60:	e7e8      	b.n	8012c34 <rshift+0x48>

08012c62 <__hexdig_fun>:
 8012c62:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012c66:	2b09      	cmp	r3, #9
 8012c68:	d802      	bhi.n	8012c70 <__hexdig_fun+0xe>
 8012c6a:	3820      	subs	r0, #32
 8012c6c:	b2c0      	uxtb	r0, r0
 8012c6e:	4770      	bx	lr
 8012c70:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012c74:	2b05      	cmp	r3, #5
 8012c76:	d801      	bhi.n	8012c7c <__hexdig_fun+0x1a>
 8012c78:	3847      	subs	r0, #71	; 0x47
 8012c7a:	e7f7      	b.n	8012c6c <__hexdig_fun+0xa>
 8012c7c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012c80:	2b05      	cmp	r3, #5
 8012c82:	d801      	bhi.n	8012c88 <__hexdig_fun+0x26>
 8012c84:	3827      	subs	r0, #39	; 0x27
 8012c86:	e7f1      	b.n	8012c6c <__hexdig_fun+0xa>
 8012c88:	2000      	movs	r0, #0
 8012c8a:	4770      	bx	lr

08012c8c <__gethex>:
 8012c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c90:	b08b      	sub	sp, #44	; 0x2c
 8012c92:	9002      	str	r0, [sp, #8]
 8012c94:	9816      	ldr	r0, [sp, #88]	; 0x58
 8012c96:	468a      	mov	sl, r1
 8012c98:	4690      	mov	r8, r2
 8012c9a:	9306      	str	r3, [sp, #24]
 8012c9c:	f000 fad1 	bl	8013242 <__localeconv_l>
 8012ca0:	6803      	ldr	r3, [r0, #0]
 8012ca2:	f04f 0b00 	mov.w	fp, #0
 8012ca6:	4618      	mov	r0, r3
 8012ca8:	9303      	str	r3, [sp, #12]
 8012caa:	f7ed fabd 	bl	8000228 <strlen>
 8012cae:	9b03      	ldr	r3, [sp, #12]
 8012cb0:	9001      	str	r0, [sp, #4]
 8012cb2:	4403      	add	r3, r0
 8012cb4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8012cb8:	9307      	str	r3, [sp, #28]
 8012cba:	f8da 3000 	ldr.w	r3, [sl]
 8012cbe:	3302      	adds	r3, #2
 8012cc0:	461f      	mov	r7, r3
 8012cc2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012cc6:	2830      	cmp	r0, #48	; 0x30
 8012cc8:	d06c      	beq.n	8012da4 <__gethex+0x118>
 8012cca:	f7ff ffca 	bl	8012c62 <__hexdig_fun>
 8012cce:	4604      	mov	r4, r0
 8012cd0:	2800      	cmp	r0, #0
 8012cd2:	d16a      	bne.n	8012daa <__gethex+0x11e>
 8012cd4:	9a01      	ldr	r2, [sp, #4]
 8012cd6:	9903      	ldr	r1, [sp, #12]
 8012cd8:	4638      	mov	r0, r7
 8012cda:	f7fe f837 	bl	8010d4c <strncmp>
 8012cde:	2800      	cmp	r0, #0
 8012ce0:	d166      	bne.n	8012db0 <__gethex+0x124>
 8012ce2:	9b01      	ldr	r3, [sp, #4]
 8012ce4:	5cf8      	ldrb	r0, [r7, r3]
 8012ce6:	18fe      	adds	r6, r7, r3
 8012ce8:	f7ff ffbb 	bl	8012c62 <__hexdig_fun>
 8012cec:	2800      	cmp	r0, #0
 8012cee:	d062      	beq.n	8012db6 <__gethex+0x12a>
 8012cf0:	4633      	mov	r3, r6
 8012cf2:	7818      	ldrb	r0, [r3, #0]
 8012cf4:	461f      	mov	r7, r3
 8012cf6:	2830      	cmp	r0, #48	; 0x30
 8012cf8:	f103 0301 	add.w	r3, r3, #1
 8012cfc:	d0f9      	beq.n	8012cf2 <__gethex+0x66>
 8012cfe:	f7ff ffb0 	bl	8012c62 <__hexdig_fun>
 8012d02:	fab0 f580 	clz	r5, r0
 8012d06:	4634      	mov	r4, r6
 8012d08:	f04f 0b01 	mov.w	fp, #1
 8012d0c:	096d      	lsrs	r5, r5, #5
 8012d0e:	463a      	mov	r2, r7
 8012d10:	4616      	mov	r6, r2
 8012d12:	7830      	ldrb	r0, [r6, #0]
 8012d14:	3201      	adds	r2, #1
 8012d16:	f7ff ffa4 	bl	8012c62 <__hexdig_fun>
 8012d1a:	2800      	cmp	r0, #0
 8012d1c:	d1f8      	bne.n	8012d10 <__gethex+0x84>
 8012d1e:	9a01      	ldr	r2, [sp, #4]
 8012d20:	9903      	ldr	r1, [sp, #12]
 8012d22:	4630      	mov	r0, r6
 8012d24:	f7fe f812 	bl	8010d4c <strncmp>
 8012d28:	b950      	cbnz	r0, 8012d40 <__gethex+0xb4>
 8012d2a:	b954      	cbnz	r4, 8012d42 <__gethex+0xb6>
 8012d2c:	9b01      	ldr	r3, [sp, #4]
 8012d2e:	18f4      	adds	r4, r6, r3
 8012d30:	4622      	mov	r2, r4
 8012d32:	4616      	mov	r6, r2
 8012d34:	7830      	ldrb	r0, [r6, #0]
 8012d36:	3201      	adds	r2, #1
 8012d38:	f7ff ff93 	bl	8012c62 <__hexdig_fun>
 8012d3c:	2800      	cmp	r0, #0
 8012d3e:	d1f8      	bne.n	8012d32 <__gethex+0xa6>
 8012d40:	b10c      	cbz	r4, 8012d46 <__gethex+0xba>
 8012d42:	1ba4      	subs	r4, r4, r6
 8012d44:	00a4      	lsls	r4, r4, #2
 8012d46:	7833      	ldrb	r3, [r6, #0]
 8012d48:	2b50      	cmp	r3, #80	; 0x50
 8012d4a:	d001      	beq.n	8012d50 <__gethex+0xc4>
 8012d4c:	2b70      	cmp	r3, #112	; 0x70
 8012d4e:	d140      	bne.n	8012dd2 <__gethex+0x146>
 8012d50:	7873      	ldrb	r3, [r6, #1]
 8012d52:	2b2b      	cmp	r3, #43	; 0x2b
 8012d54:	d031      	beq.n	8012dba <__gethex+0x12e>
 8012d56:	2b2d      	cmp	r3, #45	; 0x2d
 8012d58:	d033      	beq.n	8012dc2 <__gethex+0x136>
 8012d5a:	f04f 0900 	mov.w	r9, #0
 8012d5e:	1c71      	adds	r1, r6, #1
 8012d60:	7808      	ldrb	r0, [r1, #0]
 8012d62:	f7ff ff7e 	bl	8012c62 <__hexdig_fun>
 8012d66:	1e43      	subs	r3, r0, #1
 8012d68:	b2db      	uxtb	r3, r3
 8012d6a:	2b18      	cmp	r3, #24
 8012d6c:	d831      	bhi.n	8012dd2 <__gethex+0x146>
 8012d6e:	f1a0 0210 	sub.w	r2, r0, #16
 8012d72:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012d76:	f7ff ff74 	bl	8012c62 <__hexdig_fun>
 8012d7a:	1e43      	subs	r3, r0, #1
 8012d7c:	b2db      	uxtb	r3, r3
 8012d7e:	2b18      	cmp	r3, #24
 8012d80:	d922      	bls.n	8012dc8 <__gethex+0x13c>
 8012d82:	f1b9 0f00 	cmp.w	r9, #0
 8012d86:	d000      	beq.n	8012d8a <__gethex+0xfe>
 8012d88:	4252      	negs	r2, r2
 8012d8a:	4414      	add	r4, r2
 8012d8c:	f8ca 1000 	str.w	r1, [sl]
 8012d90:	b30d      	cbz	r5, 8012dd6 <__gethex+0x14a>
 8012d92:	f1bb 0f00 	cmp.w	fp, #0
 8012d96:	bf0c      	ite	eq
 8012d98:	2706      	moveq	r7, #6
 8012d9a:	2700      	movne	r7, #0
 8012d9c:	4638      	mov	r0, r7
 8012d9e:	b00b      	add	sp, #44	; 0x2c
 8012da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012da4:	f10b 0b01 	add.w	fp, fp, #1
 8012da8:	e78a      	b.n	8012cc0 <__gethex+0x34>
 8012daa:	2500      	movs	r5, #0
 8012dac:	462c      	mov	r4, r5
 8012dae:	e7ae      	b.n	8012d0e <__gethex+0x82>
 8012db0:	463e      	mov	r6, r7
 8012db2:	2501      	movs	r5, #1
 8012db4:	e7c7      	b.n	8012d46 <__gethex+0xba>
 8012db6:	4604      	mov	r4, r0
 8012db8:	e7fb      	b.n	8012db2 <__gethex+0x126>
 8012dba:	f04f 0900 	mov.w	r9, #0
 8012dbe:	1cb1      	adds	r1, r6, #2
 8012dc0:	e7ce      	b.n	8012d60 <__gethex+0xd4>
 8012dc2:	f04f 0901 	mov.w	r9, #1
 8012dc6:	e7fa      	b.n	8012dbe <__gethex+0x132>
 8012dc8:	230a      	movs	r3, #10
 8012dca:	fb03 0202 	mla	r2, r3, r2, r0
 8012dce:	3a10      	subs	r2, #16
 8012dd0:	e7cf      	b.n	8012d72 <__gethex+0xe6>
 8012dd2:	4631      	mov	r1, r6
 8012dd4:	e7da      	b.n	8012d8c <__gethex+0x100>
 8012dd6:	4629      	mov	r1, r5
 8012dd8:	1bf3      	subs	r3, r6, r7
 8012dda:	3b01      	subs	r3, #1
 8012ddc:	2b07      	cmp	r3, #7
 8012dde:	dc49      	bgt.n	8012e74 <__gethex+0x1e8>
 8012de0:	9802      	ldr	r0, [sp, #8]
 8012de2:	f000 facb 	bl	801337c <_Balloc>
 8012de6:	f04f 0b00 	mov.w	fp, #0
 8012dea:	4605      	mov	r5, r0
 8012dec:	46da      	mov	sl, fp
 8012dee:	9b01      	ldr	r3, [sp, #4]
 8012df0:	f100 0914 	add.w	r9, r0, #20
 8012df4:	f1c3 0301 	rsb	r3, r3, #1
 8012df8:	f8cd 9010 	str.w	r9, [sp, #16]
 8012dfc:	9308      	str	r3, [sp, #32]
 8012dfe:	42b7      	cmp	r7, r6
 8012e00:	d33b      	bcc.n	8012e7a <__gethex+0x1ee>
 8012e02:	9804      	ldr	r0, [sp, #16]
 8012e04:	f840 ab04 	str.w	sl, [r0], #4
 8012e08:	eba0 0009 	sub.w	r0, r0, r9
 8012e0c:	1080      	asrs	r0, r0, #2
 8012e0e:	6128      	str	r0, [r5, #16]
 8012e10:	0147      	lsls	r7, r0, #5
 8012e12:	4650      	mov	r0, sl
 8012e14:	f000 fb76 	bl	8013504 <__hi0bits>
 8012e18:	f8d8 6000 	ldr.w	r6, [r8]
 8012e1c:	1a3f      	subs	r7, r7, r0
 8012e1e:	42b7      	cmp	r7, r6
 8012e20:	dd64      	ble.n	8012eec <__gethex+0x260>
 8012e22:	1bbf      	subs	r7, r7, r6
 8012e24:	4639      	mov	r1, r7
 8012e26:	4628      	mov	r0, r5
 8012e28:	f000 fe7f 	bl	8013b2a <__any_on>
 8012e2c:	4682      	mov	sl, r0
 8012e2e:	b178      	cbz	r0, 8012e50 <__gethex+0x1c4>
 8012e30:	f04f 0a01 	mov.w	sl, #1
 8012e34:	1e7b      	subs	r3, r7, #1
 8012e36:	1159      	asrs	r1, r3, #5
 8012e38:	f003 021f 	and.w	r2, r3, #31
 8012e3c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012e40:	fa0a f202 	lsl.w	r2, sl, r2
 8012e44:	420a      	tst	r2, r1
 8012e46:	d003      	beq.n	8012e50 <__gethex+0x1c4>
 8012e48:	4553      	cmp	r3, sl
 8012e4a:	dc46      	bgt.n	8012eda <__gethex+0x24e>
 8012e4c:	f04f 0a02 	mov.w	sl, #2
 8012e50:	4639      	mov	r1, r7
 8012e52:	4628      	mov	r0, r5
 8012e54:	f7ff feca 	bl	8012bec <rshift>
 8012e58:	443c      	add	r4, r7
 8012e5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012e5e:	42a3      	cmp	r3, r4
 8012e60:	da52      	bge.n	8012f08 <__gethex+0x27c>
 8012e62:	4629      	mov	r1, r5
 8012e64:	9802      	ldr	r0, [sp, #8]
 8012e66:	f000 fabd 	bl	80133e4 <_Bfree>
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012e6e:	27a3      	movs	r7, #163	; 0xa3
 8012e70:	6013      	str	r3, [r2, #0]
 8012e72:	e793      	b.n	8012d9c <__gethex+0x110>
 8012e74:	3101      	adds	r1, #1
 8012e76:	105b      	asrs	r3, r3, #1
 8012e78:	e7b0      	b.n	8012ddc <__gethex+0x150>
 8012e7a:	1e73      	subs	r3, r6, #1
 8012e7c:	9305      	str	r3, [sp, #20]
 8012e7e:	9a07      	ldr	r2, [sp, #28]
 8012e80:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012e84:	4293      	cmp	r3, r2
 8012e86:	d018      	beq.n	8012eba <__gethex+0x22e>
 8012e88:	f1bb 0f20 	cmp.w	fp, #32
 8012e8c:	d107      	bne.n	8012e9e <__gethex+0x212>
 8012e8e:	9b04      	ldr	r3, [sp, #16]
 8012e90:	f8c3 a000 	str.w	sl, [r3]
 8012e94:	f04f 0a00 	mov.w	sl, #0
 8012e98:	46d3      	mov	fp, sl
 8012e9a:	3304      	adds	r3, #4
 8012e9c:	9304      	str	r3, [sp, #16]
 8012e9e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8012ea2:	f7ff fede 	bl	8012c62 <__hexdig_fun>
 8012ea6:	f000 000f 	and.w	r0, r0, #15
 8012eaa:	fa00 f00b 	lsl.w	r0, r0, fp
 8012eae:	ea4a 0a00 	orr.w	sl, sl, r0
 8012eb2:	f10b 0b04 	add.w	fp, fp, #4
 8012eb6:	9b05      	ldr	r3, [sp, #20]
 8012eb8:	e00d      	b.n	8012ed6 <__gethex+0x24a>
 8012eba:	9b05      	ldr	r3, [sp, #20]
 8012ebc:	9a08      	ldr	r2, [sp, #32]
 8012ebe:	4413      	add	r3, r2
 8012ec0:	42bb      	cmp	r3, r7
 8012ec2:	d3e1      	bcc.n	8012e88 <__gethex+0x1fc>
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	9a01      	ldr	r2, [sp, #4]
 8012ec8:	9903      	ldr	r1, [sp, #12]
 8012eca:	9309      	str	r3, [sp, #36]	; 0x24
 8012ecc:	f7fd ff3e 	bl	8010d4c <strncmp>
 8012ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ed2:	2800      	cmp	r0, #0
 8012ed4:	d1d8      	bne.n	8012e88 <__gethex+0x1fc>
 8012ed6:	461e      	mov	r6, r3
 8012ed8:	e791      	b.n	8012dfe <__gethex+0x172>
 8012eda:	1eb9      	subs	r1, r7, #2
 8012edc:	4628      	mov	r0, r5
 8012ede:	f000 fe24 	bl	8013b2a <__any_on>
 8012ee2:	2800      	cmp	r0, #0
 8012ee4:	d0b2      	beq.n	8012e4c <__gethex+0x1c0>
 8012ee6:	f04f 0a03 	mov.w	sl, #3
 8012eea:	e7b1      	b.n	8012e50 <__gethex+0x1c4>
 8012eec:	da09      	bge.n	8012f02 <__gethex+0x276>
 8012eee:	1bf7      	subs	r7, r6, r7
 8012ef0:	4629      	mov	r1, r5
 8012ef2:	463a      	mov	r2, r7
 8012ef4:	9802      	ldr	r0, [sp, #8]
 8012ef6:	f000 fc3f 	bl	8013778 <__lshift>
 8012efa:	4605      	mov	r5, r0
 8012efc:	1be4      	subs	r4, r4, r7
 8012efe:	f100 0914 	add.w	r9, r0, #20
 8012f02:	f04f 0a00 	mov.w	sl, #0
 8012f06:	e7a8      	b.n	8012e5a <__gethex+0x1ce>
 8012f08:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012f0c:	42a0      	cmp	r0, r4
 8012f0e:	dd6b      	ble.n	8012fe8 <__gethex+0x35c>
 8012f10:	1b04      	subs	r4, r0, r4
 8012f12:	42a6      	cmp	r6, r4
 8012f14:	dc2e      	bgt.n	8012f74 <__gethex+0x2e8>
 8012f16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012f1a:	2b02      	cmp	r3, #2
 8012f1c:	d022      	beq.n	8012f64 <__gethex+0x2d8>
 8012f1e:	2b03      	cmp	r3, #3
 8012f20:	d024      	beq.n	8012f6c <__gethex+0x2e0>
 8012f22:	2b01      	cmp	r3, #1
 8012f24:	d115      	bne.n	8012f52 <__gethex+0x2c6>
 8012f26:	42a6      	cmp	r6, r4
 8012f28:	d113      	bne.n	8012f52 <__gethex+0x2c6>
 8012f2a:	2e01      	cmp	r6, #1
 8012f2c:	dc0b      	bgt.n	8012f46 <__gethex+0x2ba>
 8012f2e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012f32:	9a06      	ldr	r2, [sp, #24]
 8012f34:	2762      	movs	r7, #98	; 0x62
 8012f36:	6013      	str	r3, [r2, #0]
 8012f38:	2301      	movs	r3, #1
 8012f3a:	612b      	str	r3, [r5, #16]
 8012f3c:	f8c9 3000 	str.w	r3, [r9]
 8012f40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012f42:	601d      	str	r5, [r3, #0]
 8012f44:	e72a      	b.n	8012d9c <__gethex+0x110>
 8012f46:	1e71      	subs	r1, r6, #1
 8012f48:	4628      	mov	r0, r5
 8012f4a:	f000 fdee 	bl	8013b2a <__any_on>
 8012f4e:	2800      	cmp	r0, #0
 8012f50:	d1ed      	bne.n	8012f2e <__gethex+0x2a2>
 8012f52:	4629      	mov	r1, r5
 8012f54:	9802      	ldr	r0, [sp, #8]
 8012f56:	f000 fa45 	bl	80133e4 <_Bfree>
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012f5e:	2750      	movs	r7, #80	; 0x50
 8012f60:	6013      	str	r3, [r2, #0]
 8012f62:	e71b      	b.n	8012d9c <__gethex+0x110>
 8012f64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d0e1      	beq.n	8012f2e <__gethex+0x2a2>
 8012f6a:	e7f2      	b.n	8012f52 <__gethex+0x2c6>
 8012f6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d1dd      	bne.n	8012f2e <__gethex+0x2a2>
 8012f72:	e7ee      	b.n	8012f52 <__gethex+0x2c6>
 8012f74:	1e67      	subs	r7, r4, #1
 8012f76:	f1ba 0f00 	cmp.w	sl, #0
 8012f7a:	d132      	bne.n	8012fe2 <__gethex+0x356>
 8012f7c:	b127      	cbz	r7, 8012f88 <__gethex+0x2fc>
 8012f7e:	4639      	mov	r1, r7
 8012f80:	4628      	mov	r0, r5
 8012f82:	f000 fdd2 	bl	8013b2a <__any_on>
 8012f86:	4682      	mov	sl, r0
 8012f88:	2301      	movs	r3, #1
 8012f8a:	117a      	asrs	r2, r7, #5
 8012f8c:	f007 071f 	and.w	r7, r7, #31
 8012f90:	fa03 f707 	lsl.w	r7, r3, r7
 8012f94:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8012f98:	4621      	mov	r1, r4
 8012f9a:	421f      	tst	r7, r3
 8012f9c:	f04f 0702 	mov.w	r7, #2
 8012fa0:	4628      	mov	r0, r5
 8012fa2:	bf18      	it	ne
 8012fa4:	f04a 0a02 	orrne.w	sl, sl, #2
 8012fa8:	1b36      	subs	r6, r6, r4
 8012faa:	f7ff fe1f 	bl	8012bec <rshift>
 8012fae:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8012fb2:	f1ba 0f00 	cmp.w	sl, #0
 8012fb6:	d048      	beq.n	801304a <__gethex+0x3be>
 8012fb8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012fbc:	2b02      	cmp	r3, #2
 8012fbe:	d015      	beq.n	8012fec <__gethex+0x360>
 8012fc0:	2b03      	cmp	r3, #3
 8012fc2:	d017      	beq.n	8012ff4 <__gethex+0x368>
 8012fc4:	2b01      	cmp	r3, #1
 8012fc6:	d109      	bne.n	8012fdc <__gethex+0x350>
 8012fc8:	f01a 0f02 	tst.w	sl, #2
 8012fcc:	d006      	beq.n	8012fdc <__gethex+0x350>
 8012fce:	f8d9 3000 	ldr.w	r3, [r9]
 8012fd2:	ea4a 0a03 	orr.w	sl, sl, r3
 8012fd6:	f01a 0f01 	tst.w	sl, #1
 8012fda:	d10e      	bne.n	8012ffa <__gethex+0x36e>
 8012fdc:	f047 0710 	orr.w	r7, r7, #16
 8012fe0:	e033      	b.n	801304a <__gethex+0x3be>
 8012fe2:	f04f 0a01 	mov.w	sl, #1
 8012fe6:	e7cf      	b.n	8012f88 <__gethex+0x2fc>
 8012fe8:	2701      	movs	r7, #1
 8012fea:	e7e2      	b.n	8012fb2 <__gethex+0x326>
 8012fec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012fee:	f1c3 0301 	rsb	r3, r3, #1
 8012ff2:	9315      	str	r3, [sp, #84]	; 0x54
 8012ff4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d0f0      	beq.n	8012fdc <__gethex+0x350>
 8012ffa:	f04f 0c00 	mov.w	ip, #0
 8012ffe:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8013002:	f105 0314 	add.w	r3, r5, #20
 8013006:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801300a:	eb03 010a 	add.w	r1, r3, sl
 801300e:	4618      	mov	r0, r3
 8013010:	f853 2b04 	ldr.w	r2, [r3], #4
 8013014:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013018:	d01c      	beq.n	8013054 <__gethex+0x3c8>
 801301a:	3201      	adds	r2, #1
 801301c:	6002      	str	r2, [r0, #0]
 801301e:	2f02      	cmp	r7, #2
 8013020:	f105 0314 	add.w	r3, r5, #20
 8013024:	d138      	bne.n	8013098 <__gethex+0x40c>
 8013026:	f8d8 2000 	ldr.w	r2, [r8]
 801302a:	3a01      	subs	r2, #1
 801302c:	42b2      	cmp	r2, r6
 801302e:	d10a      	bne.n	8013046 <__gethex+0x3ba>
 8013030:	2201      	movs	r2, #1
 8013032:	1171      	asrs	r1, r6, #5
 8013034:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013038:	f006 061f 	and.w	r6, r6, #31
 801303c:	fa02 f606 	lsl.w	r6, r2, r6
 8013040:	421e      	tst	r6, r3
 8013042:	bf18      	it	ne
 8013044:	4617      	movne	r7, r2
 8013046:	f047 0720 	orr.w	r7, r7, #32
 801304a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801304c:	601d      	str	r5, [r3, #0]
 801304e:	9b06      	ldr	r3, [sp, #24]
 8013050:	601c      	str	r4, [r3, #0]
 8013052:	e6a3      	b.n	8012d9c <__gethex+0x110>
 8013054:	4299      	cmp	r1, r3
 8013056:	f843 cc04 	str.w	ip, [r3, #-4]
 801305a:	d8d8      	bhi.n	801300e <__gethex+0x382>
 801305c:	68ab      	ldr	r3, [r5, #8]
 801305e:	4599      	cmp	r9, r3
 8013060:	db12      	blt.n	8013088 <__gethex+0x3fc>
 8013062:	6869      	ldr	r1, [r5, #4]
 8013064:	9802      	ldr	r0, [sp, #8]
 8013066:	3101      	adds	r1, #1
 8013068:	f000 f988 	bl	801337c <_Balloc>
 801306c:	4683      	mov	fp, r0
 801306e:	692a      	ldr	r2, [r5, #16]
 8013070:	f105 010c 	add.w	r1, r5, #12
 8013074:	3202      	adds	r2, #2
 8013076:	0092      	lsls	r2, r2, #2
 8013078:	300c      	adds	r0, #12
 801307a:	f7fc ff84 	bl	800ff86 <memcpy>
 801307e:	4629      	mov	r1, r5
 8013080:	9802      	ldr	r0, [sp, #8]
 8013082:	f000 f9af 	bl	80133e4 <_Bfree>
 8013086:	465d      	mov	r5, fp
 8013088:	692b      	ldr	r3, [r5, #16]
 801308a:	1c5a      	adds	r2, r3, #1
 801308c:	612a      	str	r2, [r5, #16]
 801308e:	2201      	movs	r2, #1
 8013090:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8013094:	615a      	str	r2, [r3, #20]
 8013096:	e7c2      	b.n	801301e <__gethex+0x392>
 8013098:	692a      	ldr	r2, [r5, #16]
 801309a:	454a      	cmp	r2, r9
 801309c:	dd0b      	ble.n	80130b6 <__gethex+0x42a>
 801309e:	2101      	movs	r1, #1
 80130a0:	4628      	mov	r0, r5
 80130a2:	f7ff fda3 	bl	8012bec <rshift>
 80130a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80130aa:	3401      	adds	r4, #1
 80130ac:	42a3      	cmp	r3, r4
 80130ae:	f6ff aed8 	blt.w	8012e62 <__gethex+0x1d6>
 80130b2:	2701      	movs	r7, #1
 80130b4:	e7c7      	b.n	8013046 <__gethex+0x3ba>
 80130b6:	f016 061f 	ands.w	r6, r6, #31
 80130ba:	d0fa      	beq.n	80130b2 <__gethex+0x426>
 80130bc:	449a      	add	sl, r3
 80130be:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80130c2:	f000 fa1f 	bl	8013504 <__hi0bits>
 80130c6:	f1c6 0620 	rsb	r6, r6, #32
 80130ca:	42b0      	cmp	r0, r6
 80130cc:	dbe7      	blt.n	801309e <__gethex+0x412>
 80130ce:	e7f0      	b.n	80130b2 <__gethex+0x426>

080130d0 <L_shift>:
 80130d0:	f1c2 0208 	rsb	r2, r2, #8
 80130d4:	0092      	lsls	r2, r2, #2
 80130d6:	b570      	push	{r4, r5, r6, lr}
 80130d8:	f1c2 0620 	rsb	r6, r2, #32
 80130dc:	6843      	ldr	r3, [r0, #4]
 80130de:	6804      	ldr	r4, [r0, #0]
 80130e0:	fa03 f506 	lsl.w	r5, r3, r6
 80130e4:	432c      	orrs	r4, r5
 80130e6:	40d3      	lsrs	r3, r2
 80130e8:	6004      	str	r4, [r0, #0]
 80130ea:	f840 3f04 	str.w	r3, [r0, #4]!
 80130ee:	4288      	cmp	r0, r1
 80130f0:	d3f4      	bcc.n	80130dc <L_shift+0xc>
 80130f2:	bd70      	pop	{r4, r5, r6, pc}

080130f4 <__match>:
 80130f4:	b530      	push	{r4, r5, lr}
 80130f6:	6803      	ldr	r3, [r0, #0]
 80130f8:	3301      	adds	r3, #1
 80130fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80130fe:	b914      	cbnz	r4, 8013106 <__match+0x12>
 8013100:	6003      	str	r3, [r0, #0]
 8013102:	2001      	movs	r0, #1
 8013104:	bd30      	pop	{r4, r5, pc}
 8013106:	f813 2b01 	ldrb.w	r2, [r3], #1
 801310a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801310e:	2d19      	cmp	r5, #25
 8013110:	bf98      	it	ls
 8013112:	3220      	addls	r2, #32
 8013114:	42a2      	cmp	r2, r4
 8013116:	d0f0      	beq.n	80130fa <__match+0x6>
 8013118:	2000      	movs	r0, #0
 801311a:	e7f3      	b.n	8013104 <__match+0x10>

0801311c <__hexnan>:
 801311c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013120:	2500      	movs	r5, #0
 8013122:	680b      	ldr	r3, [r1, #0]
 8013124:	4682      	mov	sl, r0
 8013126:	115f      	asrs	r7, r3, #5
 8013128:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801312c:	f013 031f 	ands.w	r3, r3, #31
 8013130:	bf18      	it	ne
 8013132:	3704      	addne	r7, #4
 8013134:	1f3e      	subs	r6, r7, #4
 8013136:	4690      	mov	r8, r2
 8013138:	46b1      	mov	r9, r6
 801313a:	4634      	mov	r4, r6
 801313c:	46ab      	mov	fp, r5
 801313e:	b087      	sub	sp, #28
 8013140:	6801      	ldr	r1, [r0, #0]
 8013142:	9301      	str	r3, [sp, #4]
 8013144:	f847 5c04 	str.w	r5, [r7, #-4]
 8013148:	9502      	str	r5, [sp, #8]
 801314a:	784a      	ldrb	r2, [r1, #1]
 801314c:	1c4b      	adds	r3, r1, #1
 801314e:	9303      	str	r3, [sp, #12]
 8013150:	b342      	cbz	r2, 80131a4 <__hexnan+0x88>
 8013152:	4610      	mov	r0, r2
 8013154:	9105      	str	r1, [sp, #20]
 8013156:	9204      	str	r2, [sp, #16]
 8013158:	f7ff fd83 	bl	8012c62 <__hexdig_fun>
 801315c:	2800      	cmp	r0, #0
 801315e:	d143      	bne.n	80131e8 <__hexnan+0xcc>
 8013160:	9a04      	ldr	r2, [sp, #16]
 8013162:	9905      	ldr	r1, [sp, #20]
 8013164:	2a20      	cmp	r2, #32
 8013166:	d818      	bhi.n	801319a <__hexnan+0x7e>
 8013168:	9b02      	ldr	r3, [sp, #8]
 801316a:	459b      	cmp	fp, r3
 801316c:	dd13      	ble.n	8013196 <__hexnan+0x7a>
 801316e:	454c      	cmp	r4, r9
 8013170:	d206      	bcs.n	8013180 <__hexnan+0x64>
 8013172:	2d07      	cmp	r5, #7
 8013174:	dc04      	bgt.n	8013180 <__hexnan+0x64>
 8013176:	462a      	mov	r2, r5
 8013178:	4649      	mov	r1, r9
 801317a:	4620      	mov	r0, r4
 801317c:	f7ff ffa8 	bl	80130d0 <L_shift>
 8013180:	4544      	cmp	r4, r8
 8013182:	d944      	bls.n	801320e <__hexnan+0xf2>
 8013184:	2300      	movs	r3, #0
 8013186:	f1a4 0904 	sub.w	r9, r4, #4
 801318a:	f844 3c04 	str.w	r3, [r4, #-4]
 801318e:	461d      	mov	r5, r3
 8013190:	464c      	mov	r4, r9
 8013192:	f8cd b008 	str.w	fp, [sp, #8]
 8013196:	9903      	ldr	r1, [sp, #12]
 8013198:	e7d7      	b.n	801314a <__hexnan+0x2e>
 801319a:	2a29      	cmp	r2, #41	; 0x29
 801319c:	d14a      	bne.n	8013234 <__hexnan+0x118>
 801319e:	3102      	adds	r1, #2
 80131a0:	f8ca 1000 	str.w	r1, [sl]
 80131a4:	f1bb 0f00 	cmp.w	fp, #0
 80131a8:	d044      	beq.n	8013234 <__hexnan+0x118>
 80131aa:	454c      	cmp	r4, r9
 80131ac:	d206      	bcs.n	80131bc <__hexnan+0xa0>
 80131ae:	2d07      	cmp	r5, #7
 80131b0:	dc04      	bgt.n	80131bc <__hexnan+0xa0>
 80131b2:	462a      	mov	r2, r5
 80131b4:	4649      	mov	r1, r9
 80131b6:	4620      	mov	r0, r4
 80131b8:	f7ff ff8a 	bl	80130d0 <L_shift>
 80131bc:	4544      	cmp	r4, r8
 80131be:	d928      	bls.n	8013212 <__hexnan+0xf6>
 80131c0:	4643      	mov	r3, r8
 80131c2:	f854 2b04 	ldr.w	r2, [r4], #4
 80131c6:	42a6      	cmp	r6, r4
 80131c8:	f843 2b04 	str.w	r2, [r3], #4
 80131cc:	d2f9      	bcs.n	80131c2 <__hexnan+0xa6>
 80131ce:	2200      	movs	r2, #0
 80131d0:	f843 2b04 	str.w	r2, [r3], #4
 80131d4:	429e      	cmp	r6, r3
 80131d6:	d2fb      	bcs.n	80131d0 <__hexnan+0xb4>
 80131d8:	6833      	ldr	r3, [r6, #0]
 80131da:	b91b      	cbnz	r3, 80131e4 <__hexnan+0xc8>
 80131dc:	4546      	cmp	r6, r8
 80131de:	d127      	bne.n	8013230 <__hexnan+0x114>
 80131e0:	2301      	movs	r3, #1
 80131e2:	6033      	str	r3, [r6, #0]
 80131e4:	2005      	movs	r0, #5
 80131e6:	e026      	b.n	8013236 <__hexnan+0x11a>
 80131e8:	3501      	adds	r5, #1
 80131ea:	2d08      	cmp	r5, #8
 80131ec:	f10b 0b01 	add.w	fp, fp, #1
 80131f0:	dd06      	ble.n	8013200 <__hexnan+0xe4>
 80131f2:	4544      	cmp	r4, r8
 80131f4:	d9cf      	bls.n	8013196 <__hexnan+0x7a>
 80131f6:	2300      	movs	r3, #0
 80131f8:	2501      	movs	r5, #1
 80131fa:	f844 3c04 	str.w	r3, [r4, #-4]
 80131fe:	3c04      	subs	r4, #4
 8013200:	6822      	ldr	r2, [r4, #0]
 8013202:	f000 000f 	and.w	r0, r0, #15
 8013206:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801320a:	6020      	str	r0, [r4, #0]
 801320c:	e7c3      	b.n	8013196 <__hexnan+0x7a>
 801320e:	2508      	movs	r5, #8
 8013210:	e7c1      	b.n	8013196 <__hexnan+0x7a>
 8013212:	9b01      	ldr	r3, [sp, #4]
 8013214:	2b00      	cmp	r3, #0
 8013216:	d0df      	beq.n	80131d8 <__hexnan+0xbc>
 8013218:	f04f 32ff 	mov.w	r2, #4294967295
 801321c:	f1c3 0320 	rsb	r3, r3, #32
 8013220:	fa22 f303 	lsr.w	r3, r2, r3
 8013224:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8013228:	401a      	ands	r2, r3
 801322a:	f847 2c04 	str.w	r2, [r7, #-4]
 801322e:	e7d3      	b.n	80131d8 <__hexnan+0xbc>
 8013230:	3e04      	subs	r6, #4
 8013232:	e7d1      	b.n	80131d8 <__hexnan+0xbc>
 8013234:	2004      	movs	r0, #4
 8013236:	b007      	add	sp, #28
 8013238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801323c <__locale_ctype_ptr_l>:
 801323c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8013240:	4770      	bx	lr

08013242 <__localeconv_l>:
 8013242:	30f0      	adds	r0, #240	; 0xf0
 8013244:	4770      	bx	lr
	...

08013248 <_localeconv_r>:
 8013248:	4b04      	ldr	r3, [pc, #16]	; (801325c <_localeconv_r+0x14>)
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	6a18      	ldr	r0, [r3, #32]
 801324e:	4b04      	ldr	r3, [pc, #16]	; (8013260 <_localeconv_r+0x18>)
 8013250:	2800      	cmp	r0, #0
 8013252:	bf08      	it	eq
 8013254:	4618      	moveq	r0, r3
 8013256:	30f0      	adds	r0, #240	; 0xf0
 8013258:	4770      	bx	lr
 801325a:	bf00      	nop
 801325c:	20000010 	.word	0x20000010
 8013260:	20000074 	.word	0x20000074

08013264 <__swhatbuf_r>:
 8013264:	b570      	push	{r4, r5, r6, lr}
 8013266:	460e      	mov	r6, r1
 8013268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801326c:	b096      	sub	sp, #88	; 0x58
 801326e:	2900      	cmp	r1, #0
 8013270:	4614      	mov	r4, r2
 8013272:	461d      	mov	r5, r3
 8013274:	da07      	bge.n	8013286 <__swhatbuf_r+0x22>
 8013276:	2300      	movs	r3, #0
 8013278:	602b      	str	r3, [r5, #0]
 801327a:	89b3      	ldrh	r3, [r6, #12]
 801327c:	061a      	lsls	r2, r3, #24
 801327e:	d410      	bmi.n	80132a2 <__swhatbuf_r+0x3e>
 8013280:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013284:	e00e      	b.n	80132a4 <__swhatbuf_r+0x40>
 8013286:	466a      	mov	r2, sp
 8013288:	f001 f836 	bl	80142f8 <_fstat_r>
 801328c:	2800      	cmp	r0, #0
 801328e:	dbf2      	blt.n	8013276 <__swhatbuf_r+0x12>
 8013290:	9a01      	ldr	r2, [sp, #4]
 8013292:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013296:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801329a:	425a      	negs	r2, r3
 801329c:	415a      	adcs	r2, r3
 801329e:	602a      	str	r2, [r5, #0]
 80132a0:	e7ee      	b.n	8013280 <__swhatbuf_r+0x1c>
 80132a2:	2340      	movs	r3, #64	; 0x40
 80132a4:	2000      	movs	r0, #0
 80132a6:	6023      	str	r3, [r4, #0]
 80132a8:	b016      	add	sp, #88	; 0x58
 80132aa:	bd70      	pop	{r4, r5, r6, pc}

080132ac <__smakebuf_r>:
 80132ac:	898b      	ldrh	r3, [r1, #12]
 80132ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80132b0:	079d      	lsls	r5, r3, #30
 80132b2:	4606      	mov	r6, r0
 80132b4:	460c      	mov	r4, r1
 80132b6:	d507      	bpl.n	80132c8 <__smakebuf_r+0x1c>
 80132b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80132bc:	6023      	str	r3, [r4, #0]
 80132be:	6123      	str	r3, [r4, #16]
 80132c0:	2301      	movs	r3, #1
 80132c2:	6163      	str	r3, [r4, #20]
 80132c4:	b002      	add	sp, #8
 80132c6:	bd70      	pop	{r4, r5, r6, pc}
 80132c8:	ab01      	add	r3, sp, #4
 80132ca:	466a      	mov	r2, sp
 80132cc:	f7ff ffca 	bl	8013264 <__swhatbuf_r>
 80132d0:	9900      	ldr	r1, [sp, #0]
 80132d2:	4605      	mov	r5, r0
 80132d4:	4630      	mov	r0, r6
 80132d6:	f000 fca3 	bl	8013c20 <_malloc_r>
 80132da:	b948      	cbnz	r0, 80132f0 <__smakebuf_r+0x44>
 80132dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80132e0:	059a      	lsls	r2, r3, #22
 80132e2:	d4ef      	bmi.n	80132c4 <__smakebuf_r+0x18>
 80132e4:	f023 0303 	bic.w	r3, r3, #3
 80132e8:	f043 0302 	orr.w	r3, r3, #2
 80132ec:	81a3      	strh	r3, [r4, #12]
 80132ee:	e7e3      	b.n	80132b8 <__smakebuf_r+0xc>
 80132f0:	4b0d      	ldr	r3, [pc, #52]	; (8013328 <__smakebuf_r+0x7c>)
 80132f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80132f4:	89a3      	ldrh	r3, [r4, #12]
 80132f6:	6020      	str	r0, [r4, #0]
 80132f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80132fc:	81a3      	strh	r3, [r4, #12]
 80132fe:	9b00      	ldr	r3, [sp, #0]
 8013300:	6120      	str	r0, [r4, #16]
 8013302:	6163      	str	r3, [r4, #20]
 8013304:	9b01      	ldr	r3, [sp, #4]
 8013306:	b15b      	cbz	r3, 8013320 <__smakebuf_r+0x74>
 8013308:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801330c:	4630      	mov	r0, r6
 801330e:	f001 f805 	bl	801431c <_isatty_r>
 8013312:	b128      	cbz	r0, 8013320 <__smakebuf_r+0x74>
 8013314:	89a3      	ldrh	r3, [r4, #12]
 8013316:	f023 0303 	bic.w	r3, r3, #3
 801331a:	f043 0301 	orr.w	r3, r3, #1
 801331e:	81a3      	strh	r3, [r4, #12]
 8013320:	89a3      	ldrh	r3, [r4, #12]
 8013322:	431d      	orrs	r5, r3
 8013324:	81a5      	strh	r5, [r4, #12]
 8013326:	e7cd      	b.n	80132c4 <__smakebuf_r+0x18>
 8013328:	08012aa1 	.word	0x08012aa1

0801332c <malloc>:
 801332c:	4b02      	ldr	r3, [pc, #8]	; (8013338 <malloc+0xc>)
 801332e:	4601      	mov	r1, r0
 8013330:	6818      	ldr	r0, [r3, #0]
 8013332:	f000 bc75 	b.w	8013c20 <_malloc_r>
 8013336:	bf00      	nop
 8013338:	20000010 	.word	0x20000010

0801333c <__ascii_mbtowc>:
 801333c:	b082      	sub	sp, #8
 801333e:	b901      	cbnz	r1, 8013342 <__ascii_mbtowc+0x6>
 8013340:	a901      	add	r1, sp, #4
 8013342:	b142      	cbz	r2, 8013356 <__ascii_mbtowc+0x1a>
 8013344:	b14b      	cbz	r3, 801335a <__ascii_mbtowc+0x1e>
 8013346:	7813      	ldrb	r3, [r2, #0]
 8013348:	600b      	str	r3, [r1, #0]
 801334a:	7812      	ldrb	r2, [r2, #0]
 801334c:	1c10      	adds	r0, r2, #0
 801334e:	bf18      	it	ne
 8013350:	2001      	movne	r0, #1
 8013352:	b002      	add	sp, #8
 8013354:	4770      	bx	lr
 8013356:	4610      	mov	r0, r2
 8013358:	e7fb      	b.n	8013352 <__ascii_mbtowc+0x16>
 801335a:	f06f 0001 	mvn.w	r0, #1
 801335e:	e7f8      	b.n	8013352 <__ascii_mbtowc+0x16>

08013360 <memchr>:
 8013360:	b510      	push	{r4, lr}
 8013362:	b2c9      	uxtb	r1, r1
 8013364:	4402      	add	r2, r0
 8013366:	4290      	cmp	r0, r2
 8013368:	4603      	mov	r3, r0
 801336a:	d101      	bne.n	8013370 <memchr+0x10>
 801336c:	2300      	movs	r3, #0
 801336e:	e003      	b.n	8013378 <memchr+0x18>
 8013370:	781c      	ldrb	r4, [r3, #0]
 8013372:	3001      	adds	r0, #1
 8013374:	428c      	cmp	r4, r1
 8013376:	d1f6      	bne.n	8013366 <memchr+0x6>
 8013378:	4618      	mov	r0, r3
 801337a:	bd10      	pop	{r4, pc}

0801337c <_Balloc>:
 801337c:	b570      	push	{r4, r5, r6, lr}
 801337e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013380:	4604      	mov	r4, r0
 8013382:	460e      	mov	r6, r1
 8013384:	b93d      	cbnz	r5, 8013396 <_Balloc+0x1a>
 8013386:	2010      	movs	r0, #16
 8013388:	f7ff ffd0 	bl	801332c <malloc>
 801338c:	6260      	str	r0, [r4, #36]	; 0x24
 801338e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013392:	6005      	str	r5, [r0, #0]
 8013394:	60c5      	str	r5, [r0, #12]
 8013396:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8013398:	68eb      	ldr	r3, [r5, #12]
 801339a:	b183      	cbz	r3, 80133be <_Balloc+0x42>
 801339c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801339e:	68db      	ldr	r3, [r3, #12]
 80133a0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80133a4:	b9b8      	cbnz	r0, 80133d6 <_Balloc+0x5a>
 80133a6:	2101      	movs	r1, #1
 80133a8:	fa01 f506 	lsl.w	r5, r1, r6
 80133ac:	1d6a      	adds	r2, r5, #5
 80133ae:	0092      	lsls	r2, r2, #2
 80133b0:	4620      	mov	r0, r4
 80133b2:	f000 fbdb 	bl	8013b6c <_calloc_r>
 80133b6:	b160      	cbz	r0, 80133d2 <_Balloc+0x56>
 80133b8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80133bc:	e00e      	b.n	80133dc <_Balloc+0x60>
 80133be:	2221      	movs	r2, #33	; 0x21
 80133c0:	2104      	movs	r1, #4
 80133c2:	4620      	mov	r0, r4
 80133c4:	f000 fbd2 	bl	8013b6c <_calloc_r>
 80133c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80133ca:	60e8      	str	r0, [r5, #12]
 80133cc:	68db      	ldr	r3, [r3, #12]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d1e4      	bne.n	801339c <_Balloc+0x20>
 80133d2:	2000      	movs	r0, #0
 80133d4:	bd70      	pop	{r4, r5, r6, pc}
 80133d6:	6802      	ldr	r2, [r0, #0]
 80133d8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80133dc:	2300      	movs	r3, #0
 80133de:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80133e2:	e7f7      	b.n	80133d4 <_Balloc+0x58>

080133e4 <_Bfree>:
 80133e4:	b570      	push	{r4, r5, r6, lr}
 80133e6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80133e8:	4606      	mov	r6, r0
 80133ea:	460d      	mov	r5, r1
 80133ec:	b93c      	cbnz	r4, 80133fe <_Bfree+0x1a>
 80133ee:	2010      	movs	r0, #16
 80133f0:	f7ff ff9c 	bl	801332c <malloc>
 80133f4:	6270      	str	r0, [r6, #36]	; 0x24
 80133f6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80133fa:	6004      	str	r4, [r0, #0]
 80133fc:	60c4      	str	r4, [r0, #12]
 80133fe:	b13d      	cbz	r5, 8013410 <_Bfree+0x2c>
 8013400:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013402:	686a      	ldr	r2, [r5, #4]
 8013404:	68db      	ldr	r3, [r3, #12]
 8013406:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801340a:	6029      	str	r1, [r5, #0]
 801340c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8013410:	bd70      	pop	{r4, r5, r6, pc}

08013412 <__multadd>:
 8013412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013416:	461f      	mov	r7, r3
 8013418:	4606      	mov	r6, r0
 801341a:	460c      	mov	r4, r1
 801341c:	2300      	movs	r3, #0
 801341e:	690d      	ldr	r5, [r1, #16]
 8013420:	f101 0c14 	add.w	ip, r1, #20
 8013424:	f8dc 0000 	ldr.w	r0, [ip]
 8013428:	3301      	adds	r3, #1
 801342a:	b281      	uxth	r1, r0
 801342c:	fb02 7101 	mla	r1, r2, r1, r7
 8013430:	0c00      	lsrs	r0, r0, #16
 8013432:	0c0f      	lsrs	r7, r1, #16
 8013434:	fb02 7000 	mla	r0, r2, r0, r7
 8013438:	b289      	uxth	r1, r1
 801343a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801343e:	429d      	cmp	r5, r3
 8013440:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8013444:	f84c 1b04 	str.w	r1, [ip], #4
 8013448:	dcec      	bgt.n	8013424 <__multadd+0x12>
 801344a:	b1d7      	cbz	r7, 8013482 <__multadd+0x70>
 801344c:	68a3      	ldr	r3, [r4, #8]
 801344e:	42ab      	cmp	r3, r5
 8013450:	dc12      	bgt.n	8013478 <__multadd+0x66>
 8013452:	6861      	ldr	r1, [r4, #4]
 8013454:	4630      	mov	r0, r6
 8013456:	3101      	adds	r1, #1
 8013458:	f7ff ff90 	bl	801337c <_Balloc>
 801345c:	4680      	mov	r8, r0
 801345e:	6922      	ldr	r2, [r4, #16]
 8013460:	f104 010c 	add.w	r1, r4, #12
 8013464:	3202      	adds	r2, #2
 8013466:	0092      	lsls	r2, r2, #2
 8013468:	300c      	adds	r0, #12
 801346a:	f7fc fd8c 	bl	800ff86 <memcpy>
 801346e:	4621      	mov	r1, r4
 8013470:	4630      	mov	r0, r6
 8013472:	f7ff ffb7 	bl	80133e4 <_Bfree>
 8013476:	4644      	mov	r4, r8
 8013478:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801347c:	3501      	adds	r5, #1
 801347e:	615f      	str	r7, [r3, #20]
 8013480:	6125      	str	r5, [r4, #16]
 8013482:	4620      	mov	r0, r4
 8013484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013488 <__s2b>:
 8013488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801348c:	4615      	mov	r5, r2
 801348e:	2209      	movs	r2, #9
 8013490:	461f      	mov	r7, r3
 8013492:	3308      	adds	r3, #8
 8013494:	460c      	mov	r4, r1
 8013496:	fb93 f3f2 	sdiv	r3, r3, r2
 801349a:	4606      	mov	r6, r0
 801349c:	2201      	movs	r2, #1
 801349e:	2100      	movs	r1, #0
 80134a0:	429a      	cmp	r2, r3
 80134a2:	db20      	blt.n	80134e6 <__s2b+0x5e>
 80134a4:	4630      	mov	r0, r6
 80134a6:	f7ff ff69 	bl	801337c <_Balloc>
 80134aa:	9b08      	ldr	r3, [sp, #32]
 80134ac:	2d09      	cmp	r5, #9
 80134ae:	6143      	str	r3, [r0, #20]
 80134b0:	f04f 0301 	mov.w	r3, #1
 80134b4:	6103      	str	r3, [r0, #16]
 80134b6:	dd19      	ble.n	80134ec <__s2b+0x64>
 80134b8:	f104 0809 	add.w	r8, r4, #9
 80134bc:	46c1      	mov	r9, r8
 80134be:	442c      	add	r4, r5
 80134c0:	f819 3b01 	ldrb.w	r3, [r9], #1
 80134c4:	4601      	mov	r1, r0
 80134c6:	3b30      	subs	r3, #48	; 0x30
 80134c8:	220a      	movs	r2, #10
 80134ca:	4630      	mov	r0, r6
 80134cc:	f7ff ffa1 	bl	8013412 <__multadd>
 80134d0:	45a1      	cmp	r9, r4
 80134d2:	d1f5      	bne.n	80134c0 <__s2b+0x38>
 80134d4:	eb08 0405 	add.w	r4, r8, r5
 80134d8:	3c08      	subs	r4, #8
 80134da:	1b2d      	subs	r5, r5, r4
 80134dc:	1963      	adds	r3, r4, r5
 80134de:	42bb      	cmp	r3, r7
 80134e0:	db07      	blt.n	80134f2 <__s2b+0x6a>
 80134e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134e6:	0052      	lsls	r2, r2, #1
 80134e8:	3101      	adds	r1, #1
 80134ea:	e7d9      	b.n	80134a0 <__s2b+0x18>
 80134ec:	340a      	adds	r4, #10
 80134ee:	2509      	movs	r5, #9
 80134f0:	e7f3      	b.n	80134da <__s2b+0x52>
 80134f2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80134f6:	4601      	mov	r1, r0
 80134f8:	3b30      	subs	r3, #48	; 0x30
 80134fa:	220a      	movs	r2, #10
 80134fc:	4630      	mov	r0, r6
 80134fe:	f7ff ff88 	bl	8013412 <__multadd>
 8013502:	e7eb      	b.n	80134dc <__s2b+0x54>

08013504 <__hi0bits>:
 8013504:	0c02      	lsrs	r2, r0, #16
 8013506:	0412      	lsls	r2, r2, #16
 8013508:	4603      	mov	r3, r0
 801350a:	b9b2      	cbnz	r2, 801353a <__hi0bits+0x36>
 801350c:	0403      	lsls	r3, r0, #16
 801350e:	2010      	movs	r0, #16
 8013510:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013514:	bf04      	itt	eq
 8013516:	021b      	lsleq	r3, r3, #8
 8013518:	3008      	addeq	r0, #8
 801351a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801351e:	bf04      	itt	eq
 8013520:	011b      	lsleq	r3, r3, #4
 8013522:	3004      	addeq	r0, #4
 8013524:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013528:	bf04      	itt	eq
 801352a:	009b      	lsleq	r3, r3, #2
 801352c:	3002      	addeq	r0, #2
 801352e:	2b00      	cmp	r3, #0
 8013530:	db06      	blt.n	8013540 <__hi0bits+0x3c>
 8013532:	005b      	lsls	r3, r3, #1
 8013534:	d503      	bpl.n	801353e <__hi0bits+0x3a>
 8013536:	3001      	adds	r0, #1
 8013538:	4770      	bx	lr
 801353a:	2000      	movs	r0, #0
 801353c:	e7e8      	b.n	8013510 <__hi0bits+0xc>
 801353e:	2020      	movs	r0, #32
 8013540:	4770      	bx	lr

08013542 <__lo0bits>:
 8013542:	6803      	ldr	r3, [r0, #0]
 8013544:	4601      	mov	r1, r0
 8013546:	f013 0207 	ands.w	r2, r3, #7
 801354a:	d00b      	beq.n	8013564 <__lo0bits+0x22>
 801354c:	07da      	lsls	r2, r3, #31
 801354e:	d423      	bmi.n	8013598 <__lo0bits+0x56>
 8013550:	0798      	lsls	r0, r3, #30
 8013552:	bf49      	itett	mi
 8013554:	085b      	lsrmi	r3, r3, #1
 8013556:	089b      	lsrpl	r3, r3, #2
 8013558:	2001      	movmi	r0, #1
 801355a:	600b      	strmi	r3, [r1, #0]
 801355c:	bf5c      	itt	pl
 801355e:	600b      	strpl	r3, [r1, #0]
 8013560:	2002      	movpl	r0, #2
 8013562:	4770      	bx	lr
 8013564:	b298      	uxth	r0, r3
 8013566:	b9a8      	cbnz	r0, 8013594 <__lo0bits+0x52>
 8013568:	2010      	movs	r0, #16
 801356a:	0c1b      	lsrs	r3, r3, #16
 801356c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013570:	bf04      	itt	eq
 8013572:	0a1b      	lsreq	r3, r3, #8
 8013574:	3008      	addeq	r0, #8
 8013576:	071a      	lsls	r2, r3, #28
 8013578:	bf04      	itt	eq
 801357a:	091b      	lsreq	r3, r3, #4
 801357c:	3004      	addeq	r0, #4
 801357e:	079a      	lsls	r2, r3, #30
 8013580:	bf04      	itt	eq
 8013582:	089b      	lsreq	r3, r3, #2
 8013584:	3002      	addeq	r0, #2
 8013586:	07da      	lsls	r2, r3, #31
 8013588:	d402      	bmi.n	8013590 <__lo0bits+0x4e>
 801358a:	085b      	lsrs	r3, r3, #1
 801358c:	d006      	beq.n	801359c <__lo0bits+0x5a>
 801358e:	3001      	adds	r0, #1
 8013590:	600b      	str	r3, [r1, #0]
 8013592:	4770      	bx	lr
 8013594:	4610      	mov	r0, r2
 8013596:	e7e9      	b.n	801356c <__lo0bits+0x2a>
 8013598:	2000      	movs	r0, #0
 801359a:	4770      	bx	lr
 801359c:	2020      	movs	r0, #32
 801359e:	4770      	bx	lr

080135a0 <__i2b>:
 80135a0:	b510      	push	{r4, lr}
 80135a2:	460c      	mov	r4, r1
 80135a4:	2101      	movs	r1, #1
 80135a6:	f7ff fee9 	bl	801337c <_Balloc>
 80135aa:	2201      	movs	r2, #1
 80135ac:	6144      	str	r4, [r0, #20]
 80135ae:	6102      	str	r2, [r0, #16]
 80135b0:	bd10      	pop	{r4, pc}

080135b2 <__multiply>:
 80135b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135b6:	4614      	mov	r4, r2
 80135b8:	690a      	ldr	r2, [r1, #16]
 80135ba:	6923      	ldr	r3, [r4, #16]
 80135bc:	4688      	mov	r8, r1
 80135be:	429a      	cmp	r2, r3
 80135c0:	bfbe      	ittt	lt
 80135c2:	460b      	movlt	r3, r1
 80135c4:	46a0      	movlt	r8, r4
 80135c6:	461c      	movlt	r4, r3
 80135c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80135cc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80135d0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80135d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80135d8:	eb07 0609 	add.w	r6, r7, r9
 80135dc:	42b3      	cmp	r3, r6
 80135de:	bfb8      	it	lt
 80135e0:	3101      	addlt	r1, #1
 80135e2:	f7ff fecb 	bl	801337c <_Balloc>
 80135e6:	f100 0514 	add.w	r5, r0, #20
 80135ea:	462b      	mov	r3, r5
 80135ec:	2200      	movs	r2, #0
 80135ee:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80135f2:	4573      	cmp	r3, lr
 80135f4:	d316      	bcc.n	8013624 <__multiply+0x72>
 80135f6:	f104 0214 	add.w	r2, r4, #20
 80135fa:	f108 0114 	add.w	r1, r8, #20
 80135fe:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8013602:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8013606:	9300      	str	r3, [sp, #0]
 8013608:	9b00      	ldr	r3, [sp, #0]
 801360a:	9201      	str	r2, [sp, #4]
 801360c:	4293      	cmp	r3, r2
 801360e:	d80c      	bhi.n	801362a <__multiply+0x78>
 8013610:	2e00      	cmp	r6, #0
 8013612:	dd03      	ble.n	801361c <__multiply+0x6a>
 8013614:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8013618:	2b00      	cmp	r3, #0
 801361a:	d05d      	beq.n	80136d8 <__multiply+0x126>
 801361c:	6106      	str	r6, [r0, #16]
 801361e:	b003      	add	sp, #12
 8013620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013624:	f843 2b04 	str.w	r2, [r3], #4
 8013628:	e7e3      	b.n	80135f2 <__multiply+0x40>
 801362a:	f8b2 b000 	ldrh.w	fp, [r2]
 801362e:	f1bb 0f00 	cmp.w	fp, #0
 8013632:	d023      	beq.n	801367c <__multiply+0xca>
 8013634:	4689      	mov	r9, r1
 8013636:	46ac      	mov	ip, r5
 8013638:	f04f 0800 	mov.w	r8, #0
 801363c:	f859 4b04 	ldr.w	r4, [r9], #4
 8013640:	f8dc a000 	ldr.w	sl, [ip]
 8013644:	b2a3      	uxth	r3, r4
 8013646:	fa1f fa8a 	uxth.w	sl, sl
 801364a:	fb0b a303 	mla	r3, fp, r3, sl
 801364e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013652:	f8dc 4000 	ldr.w	r4, [ip]
 8013656:	4443      	add	r3, r8
 8013658:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801365c:	fb0b 840a 	mla	r4, fp, sl, r8
 8013660:	46e2      	mov	sl, ip
 8013662:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8013666:	b29b      	uxth	r3, r3
 8013668:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801366c:	454f      	cmp	r7, r9
 801366e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013672:	f84a 3b04 	str.w	r3, [sl], #4
 8013676:	d82b      	bhi.n	80136d0 <__multiply+0x11e>
 8013678:	f8cc 8004 	str.w	r8, [ip, #4]
 801367c:	9b01      	ldr	r3, [sp, #4]
 801367e:	3204      	adds	r2, #4
 8013680:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8013684:	f1ba 0f00 	cmp.w	sl, #0
 8013688:	d020      	beq.n	80136cc <__multiply+0x11a>
 801368a:	4689      	mov	r9, r1
 801368c:	46a8      	mov	r8, r5
 801368e:	f04f 0b00 	mov.w	fp, #0
 8013692:	682b      	ldr	r3, [r5, #0]
 8013694:	f8b9 c000 	ldrh.w	ip, [r9]
 8013698:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801369c:	b29b      	uxth	r3, r3
 801369e:	fb0a 440c 	mla	r4, sl, ip, r4
 80136a2:	46c4      	mov	ip, r8
 80136a4:	445c      	add	r4, fp
 80136a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80136aa:	f84c 3b04 	str.w	r3, [ip], #4
 80136ae:	f859 3b04 	ldr.w	r3, [r9], #4
 80136b2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80136b6:	0c1b      	lsrs	r3, r3, #16
 80136b8:	fb0a b303 	mla	r3, sl, r3, fp
 80136bc:	454f      	cmp	r7, r9
 80136be:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80136c2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80136c6:	d805      	bhi.n	80136d4 <__multiply+0x122>
 80136c8:	f8c8 3004 	str.w	r3, [r8, #4]
 80136cc:	3504      	adds	r5, #4
 80136ce:	e79b      	b.n	8013608 <__multiply+0x56>
 80136d0:	46d4      	mov	ip, sl
 80136d2:	e7b3      	b.n	801363c <__multiply+0x8a>
 80136d4:	46e0      	mov	r8, ip
 80136d6:	e7dd      	b.n	8013694 <__multiply+0xe2>
 80136d8:	3e01      	subs	r6, #1
 80136da:	e799      	b.n	8013610 <__multiply+0x5e>

080136dc <__pow5mult>:
 80136dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80136e0:	4615      	mov	r5, r2
 80136e2:	f012 0203 	ands.w	r2, r2, #3
 80136e6:	4606      	mov	r6, r0
 80136e8:	460f      	mov	r7, r1
 80136ea:	d007      	beq.n	80136fc <__pow5mult+0x20>
 80136ec:	4c21      	ldr	r4, [pc, #132]	; (8013774 <__pow5mult+0x98>)
 80136ee:	3a01      	subs	r2, #1
 80136f0:	2300      	movs	r3, #0
 80136f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80136f6:	f7ff fe8c 	bl	8013412 <__multadd>
 80136fa:	4607      	mov	r7, r0
 80136fc:	10ad      	asrs	r5, r5, #2
 80136fe:	d035      	beq.n	801376c <__pow5mult+0x90>
 8013700:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013702:	b93c      	cbnz	r4, 8013714 <__pow5mult+0x38>
 8013704:	2010      	movs	r0, #16
 8013706:	f7ff fe11 	bl	801332c <malloc>
 801370a:	6270      	str	r0, [r6, #36]	; 0x24
 801370c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013710:	6004      	str	r4, [r0, #0]
 8013712:	60c4      	str	r4, [r0, #12]
 8013714:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013718:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801371c:	b94c      	cbnz	r4, 8013732 <__pow5mult+0x56>
 801371e:	f240 2171 	movw	r1, #625	; 0x271
 8013722:	4630      	mov	r0, r6
 8013724:	f7ff ff3c 	bl	80135a0 <__i2b>
 8013728:	2300      	movs	r3, #0
 801372a:	4604      	mov	r4, r0
 801372c:	f8c8 0008 	str.w	r0, [r8, #8]
 8013730:	6003      	str	r3, [r0, #0]
 8013732:	f04f 0800 	mov.w	r8, #0
 8013736:	07eb      	lsls	r3, r5, #31
 8013738:	d50a      	bpl.n	8013750 <__pow5mult+0x74>
 801373a:	4639      	mov	r1, r7
 801373c:	4622      	mov	r2, r4
 801373e:	4630      	mov	r0, r6
 8013740:	f7ff ff37 	bl	80135b2 <__multiply>
 8013744:	4681      	mov	r9, r0
 8013746:	4639      	mov	r1, r7
 8013748:	4630      	mov	r0, r6
 801374a:	f7ff fe4b 	bl	80133e4 <_Bfree>
 801374e:	464f      	mov	r7, r9
 8013750:	106d      	asrs	r5, r5, #1
 8013752:	d00b      	beq.n	801376c <__pow5mult+0x90>
 8013754:	6820      	ldr	r0, [r4, #0]
 8013756:	b938      	cbnz	r0, 8013768 <__pow5mult+0x8c>
 8013758:	4622      	mov	r2, r4
 801375a:	4621      	mov	r1, r4
 801375c:	4630      	mov	r0, r6
 801375e:	f7ff ff28 	bl	80135b2 <__multiply>
 8013762:	6020      	str	r0, [r4, #0]
 8013764:	f8c0 8000 	str.w	r8, [r0]
 8013768:	4604      	mov	r4, r0
 801376a:	e7e4      	b.n	8013736 <__pow5mult+0x5a>
 801376c:	4638      	mov	r0, r7
 801376e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013772:	bf00      	nop
 8013774:	080166a0 	.word	0x080166a0

08013778 <__lshift>:
 8013778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801377c:	460c      	mov	r4, r1
 801377e:	4607      	mov	r7, r0
 8013780:	4616      	mov	r6, r2
 8013782:	6923      	ldr	r3, [r4, #16]
 8013784:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013788:	eb0a 0903 	add.w	r9, sl, r3
 801378c:	6849      	ldr	r1, [r1, #4]
 801378e:	68a3      	ldr	r3, [r4, #8]
 8013790:	f109 0501 	add.w	r5, r9, #1
 8013794:	42ab      	cmp	r3, r5
 8013796:	db32      	blt.n	80137fe <__lshift+0x86>
 8013798:	4638      	mov	r0, r7
 801379a:	f7ff fdef 	bl	801337c <_Balloc>
 801379e:	2300      	movs	r3, #0
 80137a0:	4680      	mov	r8, r0
 80137a2:	461a      	mov	r2, r3
 80137a4:	f100 0114 	add.w	r1, r0, #20
 80137a8:	4553      	cmp	r3, sl
 80137aa:	db2b      	blt.n	8013804 <__lshift+0x8c>
 80137ac:	6920      	ldr	r0, [r4, #16]
 80137ae:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80137b2:	f104 0314 	add.w	r3, r4, #20
 80137b6:	f016 021f 	ands.w	r2, r6, #31
 80137ba:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80137be:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80137c2:	d025      	beq.n	8013810 <__lshift+0x98>
 80137c4:	2000      	movs	r0, #0
 80137c6:	f1c2 0e20 	rsb	lr, r2, #32
 80137ca:	468a      	mov	sl, r1
 80137cc:	681e      	ldr	r6, [r3, #0]
 80137ce:	4096      	lsls	r6, r2
 80137d0:	4330      	orrs	r0, r6
 80137d2:	f84a 0b04 	str.w	r0, [sl], #4
 80137d6:	f853 0b04 	ldr.w	r0, [r3], #4
 80137da:	459c      	cmp	ip, r3
 80137dc:	fa20 f00e 	lsr.w	r0, r0, lr
 80137e0:	d814      	bhi.n	801380c <__lshift+0x94>
 80137e2:	6048      	str	r0, [r1, #4]
 80137e4:	b108      	cbz	r0, 80137ea <__lshift+0x72>
 80137e6:	f109 0502 	add.w	r5, r9, #2
 80137ea:	3d01      	subs	r5, #1
 80137ec:	4638      	mov	r0, r7
 80137ee:	f8c8 5010 	str.w	r5, [r8, #16]
 80137f2:	4621      	mov	r1, r4
 80137f4:	f7ff fdf6 	bl	80133e4 <_Bfree>
 80137f8:	4640      	mov	r0, r8
 80137fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137fe:	3101      	adds	r1, #1
 8013800:	005b      	lsls	r3, r3, #1
 8013802:	e7c7      	b.n	8013794 <__lshift+0x1c>
 8013804:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8013808:	3301      	adds	r3, #1
 801380a:	e7cd      	b.n	80137a8 <__lshift+0x30>
 801380c:	4651      	mov	r1, sl
 801380e:	e7dc      	b.n	80137ca <__lshift+0x52>
 8013810:	3904      	subs	r1, #4
 8013812:	f853 2b04 	ldr.w	r2, [r3], #4
 8013816:	459c      	cmp	ip, r3
 8013818:	f841 2f04 	str.w	r2, [r1, #4]!
 801381c:	d8f9      	bhi.n	8013812 <__lshift+0x9a>
 801381e:	e7e4      	b.n	80137ea <__lshift+0x72>

08013820 <__mcmp>:
 8013820:	6903      	ldr	r3, [r0, #16]
 8013822:	690a      	ldr	r2, [r1, #16]
 8013824:	b530      	push	{r4, r5, lr}
 8013826:	1a9b      	subs	r3, r3, r2
 8013828:	d10c      	bne.n	8013844 <__mcmp+0x24>
 801382a:	0092      	lsls	r2, r2, #2
 801382c:	3014      	adds	r0, #20
 801382e:	3114      	adds	r1, #20
 8013830:	1884      	adds	r4, r0, r2
 8013832:	4411      	add	r1, r2
 8013834:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013838:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801383c:	4295      	cmp	r5, r2
 801383e:	d003      	beq.n	8013848 <__mcmp+0x28>
 8013840:	d305      	bcc.n	801384e <__mcmp+0x2e>
 8013842:	2301      	movs	r3, #1
 8013844:	4618      	mov	r0, r3
 8013846:	bd30      	pop	{r4, r5, pc}
 8013848:	42a0      	cmp	r0, r4
 801384a:	d3f3      	bcc.n	8013834 <__mcmp+0x14>
 801384c:	e7fa      	b.n	8013844 <__mcmp+0x24>
 801384e:	f04f 33ff 	mov.w	r3, #4294967295
 8013852:	e7f7      	b.n	8013844 <__mcmp+0x24>

08013854 <__mdiff>:
 8013854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013858:	460d      	mov	r5, r1
 801385a:	4607      	mov	r7, r0
 801385c:	4611      	mov	r1, r2
 801385e:	4628      	mov	r0, r5
 8013860:	4614      	mov	r4, r2
 8013862:	f7ff ffdd 	bl	8013820 <__mcmp>
 8013866:	1e06      	subs	r6, r0, #0
 8013868:	d108      	bne.n	801387c <__mdiff+0x28>
 801386a:	4631      	mov	r1, r6
 801386c:	4638      	mov	r0, r7
 801386e:	f7ff fd85 	bl	801337c <_Balloc>
 8013872:	2301      	movs	r3, #1
 8013874:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8013878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801387c:	bfa4      	itt	ge
 801387e:	4623      	movge	r3, r4
 8013880:	462c      	movge	r4, r5
 8013882:	4638      	mov	r0, r7
 8013884:	6861      	ldr	r1, [r4, #4]
 8013886:	bfa6      	itte	ge
 8013888:	461d      	movge	r5, r3
 801388a:	2600      	movge	r6, #0
 801388c:	2601      	movlt	r6, #1
 801388e:	f7ff fd75 	bl	801337c <_Balloc>
 8013892:	f04f 0e00 	mov.w	lr, #0
 8013896:	60c6      	str	r6, [r0, #12]
 8013898:	692b      	ldr	r3, [r5, #16]
 801389a:	6926      	ldr	r6, [r4, #16]
 801389c:	f104 0214 	add.w	r2, r4, #20
 80138a0:	f105 0914 	add.w	r9, r5, #20
 80138a4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80138a8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80138ac:	f100 0114 	add.w	r1, r0, #20
 80138b0:	f852 ab04 	ldr.w	sl, [r2], #4
 80138b4:	f859 5b04 	ldr.w	r5, [r9], #4
 80138b8:	fa1f f38a 	uxth.w	r3, sl
 80138bc:	4473      	add	r3, lr
 80138be:	b2ac      	uxth	r4, r5
 80138c0:	1b1b      	subs	r3, r3, r4
 80138c2:	0c2c      	lsrs	r4, r5, #16
 80138c4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80138c8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80138cc:	b29b      	uxth	r3, r3
 80138ce:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80138d2:	45c8      	cmp	r8, r9
 80138d4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80138d8:	4694      	mov	ip, r2
 80138da:	f841 4b04 	str.w	r4, [r1], #4
 80138de:	d8e7      	bhi.n	80138b0 <__mdiff+0x5c>
 80138e0:	45bc      	cmp	ip, r7
 80138e2:	d304      	bcc.n	80138ee <__mdiff+0x9a>
 80138e4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80138e8:	b183      	cbz	r3, 801390c <__mdiff+0xb8>
 80138ea:	6106      	str	r6, [r0, #16]
 80138ec:	e7c4      	b.n	8013878 <__mdiff+0x24>
 80138ee:	f85c 4b04 	ldr.w	r4, [ip], #4
 80138f2:	b2a2      	uxth	r2, r4
 80138f4:	4472      	add	r2, lr
 80138f6:	1413      	asrs	r3, r2, #16
 80138f8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80138fc:	b292      	uxth	r2, r2
 80138fe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8013902:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8013906:	f841 2b04 	str.w	r2, [r1], #4
 801390a:	e7e9      	b.n	80138e0 <__mdiff+0x8c>
 801390c:	3e01      	subs	r6, #1
 801390e:	e7e9      	b.n	80138e4 <__mdiff+0x90>

08013910 <__ulp>:
 8013910:	4b10      	ldr	r3, [pc, #64]	; (8013954 <__ulp+0x44>)
 8013912:	400b      	ands	r3, r1
 8013914:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8013918:	2b00      	cmp	r3, #0
 801391a:	dd02      	ble.n	8013922 <__ulp+0x12>
 801391c:	2000      	movs	r0, #0
 801391e:	4619      	mov	r1, r3
 8013920:	4770      	bx	lr
 8013922:	425b      	negs	r3, r3
 8013924:	151b      	asrs	r3, r3, #20
 8013926:	2b13      	cmp	r3, #19
 8013928:	f04f 0000 	mov.w	r0, #0
 801392c:	f04f 0100 	mov.w	r1, #0
 8013930:	dc04      	bgt.n	801393c <__ulp+0x2c>
 8013932:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8013936:	fa42 f103 	asr.w	r1, r2, r3
 801393a:	4770      	bx	lr
 801393c:	2201      	movs	r2, #1
 801393e:	3b14      	subs	r3, #20
 8013940:	2b1e      	cmp	r3, #30
 8013942:	bfce      	itee	gt
 8013944:	4613      	movgt	r3, r2
 8013946:	f1c3 031f 	rsble	r3, r3, #31
 801394a:	fa02 f303 	lslle.w	r3, r2, r3
 801394e:	4618      	mov	r0, r3
 8013950:	4770      	bx	lr
 8013952:	bf00      	nop
 8013954:	7ff00000 	.word	0x7ff00000

08013958 <__b2d>:
 8013958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801395c:	6907      	ldr	r7, [r0, #16]
 801395e:	f100 0914 	add.w	r9, r0, #20
 8013962:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8013966:	f857 6c04 	ldr.w	r6, [r7, #-4]
 801396a:	f1a7 0804 	sub.w	r8, r7, #4
 801396e:	4630      	mov	r0, r6
 8013970:	f7ff fdc8 	bl	8013504 <__hi0bits>
 8013974:	f1c0 0320 	rsb	r3, r0, #32
 8013978:	280a      	cmp	r0, #10
 801397a:	600b      	str	r3, [r1, #0]
 801397c:	491e      	ldr	r1, [pc, #120]	; (80139f8 <__b2d+0xa0>)
 801397e:	dc17      	bgt.n	80139b0 <__b2d+0x58>
 8013980:	45c1      	cmp	r9, r8
 8013982:	bf28      	it	cs
 8013984:	2200      	movcs	r2, #0
 8013986:	f1c0 0c0b 	rsb	ip, r0, #11
 801398a:	fa26 f30c 	lsr.w	r3, r6, ip
 801398e:	bf38      	it	cc
 8013990:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8013994:	ea43 0501 	orr.w	r5, r3, r1
 8013998:	f100 0315 	add.w	r3, r0, #21
 801399c:	fa06 f303 	lsl.w	r3, r6, r3
 80139a0:	fa22 f20c 	lsr.w	r2, r2, ip
 80139a4:	ea43 0402 	orr.w	r4, r3, r2
 80139a8:	4620      	mov	r0, r4
 80139aa:	4629      	mov	r1, r5
 80139ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139b0:	45c1      	cmp	r9, r8
 80139b2:	bf3a      	itte	cc
 80139b4:	f1a7 0808 	subcc.w	r8, r7, #8
 80139b8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80139bc:	2200      	movcs	r2, #0
 80139be:	f1b0 030b 	subs.w	r3, r0, #11
 80139c2:	d015      	beq.n	80139f0 <__b2d+0x98>
 80139c4:	409e      	lsls	r6, r3
 80139c6:	f1c3 0720 	rsb	r7, r3, #32
 80139ca:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 80139ce:	fa22 f107 	lsr.w	r1, r2, r7
 80139d2:	45c8      	cmp	r8, r9
 80139d4:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 80139d8:	ea46 0501 	orr.w	r5, r6, r1
 80139dc:	bf94      	ite	ls
 80139de:	2100      	movls	r1, #0
 80139e0:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80139e4:	fa02 f003 	lsl.w	r0, r2, r3
 80139e8:	40f9      	lsrs	r1, r7
 80139ea:	ea40 0401 	orr.w	r4, r0, r1
 80139ee:	e7db      	b.n	80139a8 <__b2d+0x50>
 80139f0:	ea46 0501 	orr.w	r5, r6, r1
 80139f4:	4614      	mov	r4, r2
 80139f6:	e7d7      	b.n	80139a8 <__b2d+0x50>
 80139f8:	3ff00000 	.word	0x3ff00000

080139fc <__d2b>:
 80139fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8013a00:	461c      	mov	r4, r3
 8013a02:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8013a06:	2101      	movs	r1, #1
 8013a08:	4690      	mov	r8, r2
 8013a0a:	f7ff fcb7 	bl	801337c <_Balloc>
 8013a0e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8013a12:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8013a16:	4607      	mov	r7, r0
 8013a18:	bb34      	cbnz	r4, 8013a68 <__d2b+0x6c>
 8013a1a:	9201      	str	r2, [sp, #4]
 8013a1c:	f1b8 0200 	subs.w	r2, r8, #0
 8013a20:	d027      	beq.n	8013a72 <__d2b+0x76>
 8013a22:	a802      	add	r0, sp, #8
 8013a24:	f840 2d08 	str.w	r2, [r0, #-8]!
 8013a28:	f7ff fd8b 	bl	8013542 <__lo0bits>
 8013a2c:	9900      	ldr	r1, [sp, #0]
 8013a2e:	b1f0      	cbz	r0, 8013a6e <__d2b+0x72>
 8013a30:	9a01      	ldr	r2, [sp, #4]
 8013a32:	f1c0 0320 	rsb	r3, r0, #32
 8013a36:	fa02 f303 	lsl.w	r3, r2, r3
 8013a3a:	430b      	orrs	r3, r1
 8013a3c:	40c2      	lsrs	r2, r0
 8013a3e:	617b      	str	r3, [r7, #20]
 8013a40:	9201      	str	r2, [sp, #4]
 8013a42:	9b01      	ldr	r3, [sp, #4]
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	bf14      	ite	ne
 8013a48:	2102      	movne	r1, #2
 8013a4a:	2101      	moveq	r1, #1
 8013a4c:	61bb      	str	r3, [r7, #24]
 8013a4e:	6139      	str	r1, [r7, #16]
 8013a50:	b1c4      	cbz	r4, 8013a84 <__d2b+0x88>
 8013a52:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8013a56:	4404      	add	r4, r0
 8013a58:	6034      	str	r4, [r6, #0]
 8013a5a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013a5e:	6028      	str	r0, [r5, #0]
 8013a60:	4638      	mov	r0, r7
 8013a62:	b002      	add	sp, #8
 8013a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a68:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8013a6c:	e7d5      	b.n	8013a1a <__d2b+0x1e>
 8013a6e:	6179      	str	r1, [r7, #20]
 8013a70:	e7e7      	b.n	8013a42 <__d2b+0x46>
 8013a72:	a801      	add	r0, sp, #4
 8013a74:	f7ff fd65 	bl	8013542 <__lo0bits>
 8013a78:	2101      	movs	r1, #1
 8013a7a:	9b01      	ldr	r3, [sp, #4]
 8013a7c:	6139      	str	r1, [r7, #16]
 8013a7e:	617b      	str	r3, [r7, #20]
 8013a80:	3020      	adds	r0, #32
 8013a82:	e7e5      	b.n	8013a50 <__d2b+0x54>
 8013a84:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013a88:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8013a8c:	6030      	str	r0, [r6, #0]
 8013a8e:	6918      	ldr	r0, [r3, #16]
 8013a90:	f7ff fd38 	bl	8013504 <__hi0bits>
 8013a94:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8013a98:	e7e1      	b.n	8013a5e <__d2b+0x62>

08013a9a <__ratio>:
 8013a9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a9e:	4688      	mov	r8, r1
 8013aa0:	4669      	mov	r1, sp
 8013aa2:	4681      	mov	r9, r0
 8013aa4:	f7ff ff58 	bl	8013958 <__b2d>
 8013aa8:	468b      	mov	fp, r1
 8013aaa:	4606      	mov	r6, r0
 8013aac:	460f      	mov	r7, r1
 8013aae:	4640      	mov	r0, r8
 8013ab0:	a901      	add	r1, sp, #4
 8013ab2:	f7ff ff51 	bl	8013958 <__b2d>
 8013ab6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013aba:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013abe:	460d      	mov	r5, r1
 8013ac0:	eba3 0c02 	sub.w	ip, r3, r2
 8013ac4:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013ac8:	1a9b      	subs	r3, r3, r2
 8013aca:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	bfd5      	itete	le
 8013ad2:	460a      	movle	r2, r1
 8013ad4:	463a      	movgt	r2, r7
 8013ad6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013ada:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8013ade:	bfd8      	it	le
 8013ae0:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8013ae4:	462b      	mov	r3, r5
 8013ae6:	4602      	mov	r2, r0
 8013ae8:	4659      	mov	r1, fp
 8013aea:	4630      	mov	r0, r6
 8013aec:	f7ec fe8a 	bl	8000804 <__aeabi_ddiv>
 8013af0:	b003      	add	sp, #12
 8013af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013af6 <__copybits>:
 8013af6:	3901      	subs	r1, #1
 8013af8:	b510      	push	{r4, lr}
 8013afa:	1149      	asrs	r1, r1, #5
 8013afc:	6914      	ldr	r4, [r2, #16]
 8013afe:	3101      	adds	r1, #1
 8013b00:	f102 0314 	add.w	r3, r2, #20
 8013b04:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013b08:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013b0c:	42a3      	cmp	r3, r4
 8013b0e:	4602      	mov	r2, r0
 8013b10:	d303      	bcc.n	8013b1a <__copybits+0x24>
 8013b12:	2300      	movs	r3, #0
 8013b14:	428a      	cmp	r2, r1
 8013b16:	d305      	bcc.n	8013b24 <__copybits+0x2e>
 8013b18:	bd10      	pop	{r4, pc}
 8013b1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b1e:	f840 2b04 	str.w	r2, [r0], #4
 8013b22:	e7f3      	b.n	8013b0c <__copybits+0x16>
 8013b24:	f842 3b04 	str.w	r3, [r2], #4
 8013b28:	e7f4      	b.n	8013b14 <__copybits+0x1e>

08013b2a <__any_on>:
 8013b2a:	f100 0214 	add.w	r2, r0, #20
 8013b2e:	6900      	ldr	r0, [r0, #16]
 8013b30:	114b      	asrs	r3, r1, #5
 8013b32:	4298      	cmp	r0, r3
 8013b34:	b510      	push	{r4, lr}
 8013b36:	db11      	blt.n	8013b5c <__any_on+0x32>
 8013b38:	dd0a      	ble.n	8013b50 <__any_on+0x26>
 8013b3a:	f011 011f 	ands.w	r1, r1, #31
 8013b3e:	d007      	beq.n	8013b50 <__any_on+0x26>
 8013b40:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013b44:	fa24 f001 	lsr.w	r0, r4, r1
 8013b48:	fa00 f101 	lsl.w	r1, r0, r1
 8013b4c:	428c      	cmp	r4, r1
 8013b4e:	d10b      	bne.n	8013b68 <__any_on+0x3e>
 8013b50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013b54:	4293      	cmp	r3, r2
 8013b56:	d803      	bhi.n	8013b60 <__any_on+0x36>
 8013b58:	2000      	movs	r0, #0
 8013b5a:	bd10      	pop	{r4, pc}
 8013b5c:	4603      	mov	r3, r0
 8013b5e:	e7f7      	b.n	8013b50 <__any_on+0x26>
 8013b60:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013b64:	2900      	cmp	r1, #0
 8013b66:	d0f5      	beq.n	8013b54 <__any_on+0x2a>
 8013b68:	2001      	movs	r0, #1
 8013b6a:	e7f6      	b.n	8013b5a <__any_on+0x30>

08013b6c <_calloc_r>:
 8013b6c:	b538      	push	{r3, r4, r5, lr}
 8013b6e:	fb02 f401 	mul.w	r4, r2, r1
 8013b72:	4621      	mov	r1, r4
 8013b74:	f000 f854 	bl	8013c20 <_malloc_r>
 8013b78:	4605      	mov	r5, r0
 8013b7a:	b118      	cbz	r0, 8013b84 <_calloc_r+0x18>
 8013b7c:	4622      	mov	r2, r4
 8013b7e:	2100      	movs	r1, #0
 8013b80:	f7fc fa0c 	bl	800ff9c <memset>
 8013b84:	4628      	mov	r0, r5
 8013b86:	bd38      	pop	{r3, r4, r5, pc}

08013b88 <_free_r>:
 8013b88:	b538      	push	{r3, r4, r5, lr}
 8013b8a:	4605      	mov	r5, r0
 8013b8c:	2900      	cmp	r1, #0
 8013b8e:	d043      	beq.n	8013c18 <_free_r+0x90>
 8013b90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013b94:	1f0c      	subs	r4, r1, #4
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	bfb8      	it	lt
 8013b9a:	18e4      	addlt	r4, r4, r3
 8013b9c:	f000 fbf9 	bl	8014392 <__malloc_lock>
 8013ba0:	4a1e      	ldr	r2, [pc, #120]	; (8013c1c <_free_r+0x94>)
 8013ba2:	6813      	ldr	r3, [r2, #0]
 8013ba4:	4610      	mov	r0, r2
 8013ba6:	b933      	cbnz	r3, 8013bb6 <_free_r+0x2e>
 8013ba8:	6063      	str	r3, [r4, #4]
 8013baa:	6014      	str	r4, [r2, #0]
 8013bac:	4628      	mov	r0, r5
 8013bae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013bb2:	f000 bbef 	b.w	8014394 <__malloc_unlock>
 8013bb6:	42a3      	cmp	r3, r4
 8013bb8:	d90b      	bls.n	8013bd2 <_free_r+0x4a>
 8013bba:	6821      	ldr	r1, [r4, #0]
 8013bbc:	1862      	adds	r2, r4, r1
 8013bbe:	4293      	cmp	r3, r2
 8013bc0:	bf01      	itttt	eq
 8013bc2:	681a      	ldreq	r2, [r3, #0]
 8013bc4:	685b      	ldreq	r3, [r3, #4]
 8013bc6:	1852      	addeq	r2, r2, r1
 8013bc8:	6022      	streq	r2, [r4, #0]
 8013bca:	6063      	str	r3, [r4, #4]
 8013bcc:	6004      	str	r4, [r0, #0]
 8013bce:	e7ed      	b.n	8013bac <_free_r+0x24>
 8013bd0:	4613      	mov	r3, r2
 8013bd2:	685a      	ldr	r2, [r3, #4]
 8013bd4:	b10a      	cbz	r2, 8013bda <_free_r+0x52>
 8013bd6:	42a2      	cmp	r2, r4
 8013bd8:	d9fa      	bls.n	8013bd0 <_free_r+0x48>
 8013bda:	6819      	ldr	r1, [r3, #0]
 8013bdc:	1858      	adds	r0, r3, r1
 8013bde:	42a0      	cmp	r0, r4
 8013be0:	d10b      	bne.n	8013bfa <_free_r+0x72>
 8013be2:	6820      	ldr	r0, [r4, #0]
 8013be4:	4401      	add	r1, r0
 8013be6:	1858      	adds	r0, r3, r1
 8013be8:	4282      	cmp	r2, r0
 8013bea:	6019      	str	r1, [r3, #0]
 8013bec:	d1de      	bne.n	8013bac <_free_r+0x24>
 8013bee:	6810      	ldr	r0, [r2, #0]
 8013bf0:	6852      	ldr	r2, [r2, #4]
 8013bf2:	4401      	add	r1, r0
 8013bf4:	6019      	str	r1, [r3, #0]
 8013bf6:	605a      	str	r2, [r3, #4]
 8013bf8:	e7d8      	b.n	8013bac <_free_r+0x24>
 8013bfa:	d902      	bls.n	8013c02 <_free_r+0x7a>
 8013bfc:	230c      	movs	r3, #12
 8013bfe:	602b      	str	r3, [r5, #0]
 8013c00:	e7d4      	b.n	8013bac <_free_r+0x24>
 8013c02:	6820      	ldr	r0, [r4, #0]
 8013c04:	1821      	adds	r1, r4, r0
 8013c06:	428a      	cmp	r2, r1
 8013c08:	bf01      	itttt	eq
 8013c0a:	6811      	ldreq	r1, [r2, #0]
 8013c0c:	6852      	ldreq	r2, [r2, #4]
 8013c0e:	1809      	addeq	r1, r1, r0
 8013c10:	6021      	streq	r1, [r4, #0]
 8013c12:	6062      	str	r2, [r4, #4]
 8013c14:	605c      	str	r4, [r3, #4]
 8013c16:	e7c9      	b.n	8013bac <_free_r+0x24>
 8013c18:	bd38      	pop	{r3, r4, r5, pc}
 8013c1a:	bf00      	nop
 8013c1c:	20000388 	.word	0x20000388

08013c20 <_malloc_r>:
 8013c20:	b570      	push	{r4, r5, r6, lr}
 8013c22:	1ccd      	adds	r5, r1, #3
 8013c24:	f025 0503 	bic.w	r5, r5, #3
 8013c28:	3508      	adds	r5, #8
 8013c2a:	2d0c      	cmp	r5, #12
 8013c2c:	bf38      	it	cc
 8013c2e:	250c      	movcc	r5, #12
 8013c30:	2d00      	cmp	r5, #0
 8013c32:	4606      	mov	r6, r0
 8013c34:	db01      	blt.n	8013c3a <_malloc_r+0x1a>
 8013c36:	42a9      	cmp	r1, r5
 8013c38:	d903      	bls.n	8013c42 <_malloc_r+0x22>
 8013c3a:	230c      	movs	r3, #12
 8013c3c:	6033      	str	r3, [r6, #0]
 8013c3e:	2000      	movs	r0, #0
 8013c40:	bd70      	pop	{r4, r5, r6, pc}
 8013c42:	f000 fba6 	bl	8014392 <__malloc_lock>
 8013c46:	4a21      	ldr	r2, [pc, #132]	; (8013ccc <_malloc_r+0xac>)
 8013c48:	6814      	ldr	r4, [r2, #0]
 8013c4a:	4621      	mov	r1, r4
 8013c4c:	b991      	cbnz	r1, 8013c74 <_malloc_r+0x54>
 8013c4e:	4c20      	ldr	r4, [pc, #128]	; (8013cd0 <_malloc_r+0xb0>)
 8013c50:	6823      	ldr	r3, [r4, #0]
 8013c52:	b91b      	cbnz	r3, 8013c5c <_malloc_r+0x3c>
 8013c54:	4630      	mov	r0, r6
 8013c56:	f000 facd 	bl	80141f4 <_sbrk_r>
 8013c5a:	6020      	str	r0, [r4, #0]
 8013c5c:	4629      	mov	r1, r5
 8013c5e:	4630      	mov	r0, r6
 8013c60:	f000 fac8 	bl	80141f4 <_sbrk_r>
 8013c64:	1c43      	adds	r3, r0, #1
 8013c66:	d124      	bne.n	8013cb2 <_malloc_r+0x92>
 8013c68:	230c      	movs	r3, #12
 8013c6a:	4630      	mov	r0, r6
 8013c6c:	6033      	str	r3, [r6, #0]
 8013c6e:	f000 fb91 	bl	8014394 <__malloc_unlock>
 8013c72:	e7e4      	b.n	8013c3e <_malloc_r+0x1e>
 8013c74:	680b      	ldr	r3, [r1, #0]
 8013c76:	1b5b      	subs	r3, r3, r5
 8013c78:	d418      	bmi.n	8013cac <_malloc_r+0x8c>
 8013c7a:	2b0b      	cmp	r3, #11
 8013c7c:	d90f      	bls.n	8013c9e <_malloc_r+0x7e>
 8013c7e:	600b      	str	r3, [r1, #0]
 8013c80:	18cc      	adds	r4, r1, r3
 8013c82:	50cd      	str	r5, [r1, r3]
 8013c84:	4630      	mov	r0, r6
 8013c86:	f000 fb85 	bl	8014394 <__malloc_unlock>
 8013c8a:	f104 000b 	add.w	r0, r4, #11
 8013c8e:	1d23      	adds	r3, r4, #4
 8013c90:	f020 0007 	bic.w	r0, r0, #7
 8013c94:	1ac3      	subs	r3, r0, r3
 8013c96:	d0d3      	beq.n	8013c40 <_malloc_r+0x20>
 8013c98:	425a      	negs	r2, r3
 8013c9a:	50e2      	str	r2, [r4, r3]
 8013c9c:	e7d0      	b.n	8013c40 <_malloc_r+0x20>
 8013c9e:	684b      	ldr	r3, [r1, #4]
 8013ca0:	428c      	cmp	r4, r1
 8013ca2:	bf16      	itet	ne
 8013ca4:	6063      	strne	r3, [r4, #4]
 8013ca6:	6013      	streq	r3, [r2, #0]
 8013ca8:	460c      	movne	r4, r1
 8013caa:	e7eb      	b.n	8013c84 <_malloc_r+0x64>
 8013cac:	460c      	mov	r4, r1
 8013cae:	6849      	ldr	r1, [r1, #4]
 8013cb0:	e7cc      	b.n	8013c4c <_malloc_r+0x2c>
 8013cb2:	1cc4      	adds	r4, r0, #3
 8013cb4:	f024 0403 	bic.w	r4, r4, #3
 8013cb8:	42a0      	cmp	r0, r4
 8013cba:	d005      	beq.n	8013cc8 <_malloc_r+0xa8>
 8013cbc:	1a21      	subs	r1, r4, r0
 8013cbe:	4630      	mov	r0, r6
 8013cc0:	f000 fa98 	bl	80141f4 <_sbrk_r>
 8013cc4:	3001      	adds	r0, #1
 8013cc6:	d0cf      	beq.n	8013c68 <_malloc_r+0x48>
 8013cc8:	6025      	str	r5, [r4, #0]
 8013cca:	e7db      	b.n	8013c84 <_malloc_r+0x64>
 8013ccc:	20000388 	.word	0x20000388
 8013cd0:	2000038c 	.word	0x2000038c

08013cd4 <__ssputs_r>:
 8013cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013cd8:	688e      	ldr	r6, [r1, #8]
 8013cda:	4682      	mov	sl, r0
 8013cdc:	429e      	cmp	r6, r3
 8013cde:	460c      	mov	r4, r1
 8013ce0:	4690      	mov	r8, r2
 8013ce2:	4699      	mov	r9, r3
 8013ce4:	d837      	bhi.n	8013d56 <__ssputs_r+0x82>
 8013ce6:	898a      	ldrh	r2, [r1, #12]
 8013ce8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013cec:	d031      	beq.n	8013d52 <__ssputs_r+0x7e>
 8013cee:	2302      	movs	r3, #2
 8013cf0:	6825      	ldr	r5, [r4, #0]
 8013cf2:	6909      	ldr	r1, [r1, #16]
 8013cf4:	1a6f      	subs	r7, r5, r1
 8013cf6:	6965      	ldr	r5, [r4, #20]
 8013cf8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013cfc:	fb95 f5f3 	sdiv	r5, r5, r3
 8013d00:	f109 0301 	add.w	r3, r9, #1
 8013d04:	443b      	add	r3, r7
 8013d06:	429d      	cmp	r5, r3
 8013d08:	bf38      	it	cc
 8013d0a:	461d      	movcc	r5, r3
 8013d0c:	0553      	lsls	r3, r2, #21
 8013d0e:	d530      	bpl.n	8013d72 <__ssputs_r+0x9e>
 8013d10:	4629      	mov	r1, r5
 8013d12:	f7ff ff85 	bl	8013c20 <_malloc_r>
 8013d16:	4606      	mov	r6, r0
 8013d18:	b950      	cbnz	r0, 8013d30 <__ssputs_r+0x5c>
 8013d1a:	230c      	movs	r3, #12
 8013d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8013d20:	f8ca 3000 	str.w	r3, [sl]
 8013d24:	89a3      	ldrh	r3, [r4, #12]
 8013d26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d2a:	81a3      	strh	r3, [r4, #12]
 8013d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d30:	463a      	mov	r2, r7
 8013d32:	6921      	ldr	r1, [r4, #16]
 8013d34:	f7fc f927 	bl	800ff86 <memcpy>
 8013d38:	89a3      	ldrh	r3, [r4, #12]
 8013d3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013d42:	81a3      	strh	r3, [r4, #12]
 8013d44:	6126      	str	r6, [r4, #16]
 8013d46:	443e      	add	r6, r7
 8013d48:	6026      	str	r6, [r4, #0]
 8013d4a:	464e      	mov	r6, r9
 8013d4c:	6165      	str	r5, [r4, #20]
 8013d4e:	1bed      	subs	r5, r5, r7
 8013d50:	60a5      	str	r5, [r4, #8]
 8013d52:	454e      	cmp	r6, r9
 8013d54:	d900      	bls.n	8013d58 <__ssputs_r+0x84>
 8013d56:	464e      	mov	r6, r9
 8013d58:	4632      	mov	r2, r6
 8013d5a:	4641      	mov	r1, r8
 8013d5c:	6820      	ldr	r0, [r4, #0]
 8013d5e:	f000 faff 	bl	8014360 <memmove>
 8013d62:	68a3      	ldr	r3, [r4, #8]
 8013d64:	2000      	movs	r0, #0
 8013d66:	1b9b      	subs	r3, r3, r6
 8013d68:	60a3      	str	r3, [r4, #8]
 8013d6a:	6823      	ldr	r3, [r4, #0]
 8013d6c:	441e      	add	r6, r3
 8013d6e:	6026      	str	r6, [r4, #0]
 8013d70:	e7dc      	b.n	8013d2c <__ssputs_r+0x58>
 8013d72:	462a      	mov	r2, r5
 8013d74:	f000 fb0f 	bl	8014396 <_realloc_r>
 8013d78:	4606      	mov	r6, r0
 8013d7a:	2800      	cmp	r0, #0
 8013d7c:	d1e2      	bne.n	8013d44 <__ssputs_r+0x70>
 8013d7e:	6921      	ldr	r1, [r4, #16]
 8013d80:	4650      	mov	r0, sl
 8013d82:	f7ff ff01 	bl	8013b88 <_free_r>
 8013d86:	e7c8      	b.n	8013d1a <__ssputs_r+0x46>

08013d88 <_svfiprintf_r>:
 8013d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d8c:	461d      	mov	r5, r3
 8013d8e:	898b      	ldrh	r3, [r1, #12]
 8013d90:	b09d      	sub	sp, #116	; 0x74
 8013d92:	061f      	lsls	r7, r3, #24
 8013d94:	4680      	mov	r8, r0
 8013d96:	460c      	mov	r4, r1
 8013d98:	4616      	mov	r6, r2
 8013d9a:	d50f      	bpl.n	8013dbc <_svfiprintf_r+0x34>
 8013d9c:	690b      	ldr	r3, [r1, #16]
 8013d9e:	b96b      	cbnz	r3, 8013dbc <_svfiprintf_r+0x34>
 8013da0:	2140      	movs	r1, #64	; 0x40
 8013da2:	f7ff ff3d 	bl	8013c20 <_malloc_r>
 8013da6:	6020      	str	r0, [r4, #0]
 8013da8:	6120      	str	r0, [r4, #16]
 8013daa:	b928      	cbnz	r0, 8013db8 <_svfiprintf_r+0x30>
 8013dac:	230c      	movs	r3, #12
 8013dae:	f8c8 3000 	str.w	r3, [r8]
 8013db2:	f04f 30ff 	mov.w	r0, #4294967295
 8013db6:	e0c8      	b.n	8013f4a <_svfiprintf_r+0x1c2>
 8013db8:	2340      	movs	r3, #64	; 0x40
 8013dba:	6163      	str	r3, [r4, #20]
 8013dbc:	2300      	movs	r3, #0
 8013dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8013dc0:	2320      	movs	r3, #32
 8013dc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013dc6:	2330      	movs	r3, #48	; 0x30
 8013dc8:	f04f 0b01 	mov.w	fp, #1
 8013dcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013dd0:	9503      	str	r5, [sp, #12]
 8013dd2:	4637      	mov	r7, r6
 8013dd4:	463d      	mov	r5, r7
 8013dd6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013dda:	b10b      	cbz	r3, 8013de0 <_svfiprintf_r+0x58>
 8013ddc:	2b25      	cmp	r3, #37	; 0x25
 8013dde:	d13e      	bne.n	8013e5e <_svfiprintf_r+0xd6>
 8013de0:	ebb7 0a06 	subs.w	sl, r7, r6
 8013de4:	d00b      	beq.n	8013dfe <_svfiprintf_r+0x76>
 8013de6:	4653      	mov	r3, sl
 8013de8:	4632      	mov	r2, r6
 8013dea:	4621      	mov	r1, r4
 8013dec:	4640      	mov	r0, r8
 8013dee:	f7ff ff71 	bl	8013cd4 <__ssputs_r>
 8013df2:	3001      	adds	r0, #1
 8013df4:	f000 80a4 	beq.w	8013f40 <_svfiprintf_r+0x1b8>
 8013df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013dfa:	4453      	add	r3, sl
 8013dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8013dfe:	783b      	ldrb	r3, [r7, #0]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	f000 809d 	beq.w	8013f40 <_svfiprintf_r+0x1b8>
 8013e06:	2300      	movs	r3, #0
 8013e08:	f04f 32ff 	mov.w	r2, #4294967295
 8013e0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013e10:	9304      	str	r3, [sp, #16]
 8013e12:	9307      	str	r3, [sp, #28]
 8013e14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013e18:	931a      	str	r3, [sp, #104]	; 0x68
 8013e1a:	462f      	mov	r7, r5
 8013e1c:	2205      	movs	r2, #5
 8013e1e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8013e22:	4850      	ldr	r0, [pc, #320]	; (8013f64 <_svfiprintf_r+0x1dc>)
 8013e24:	f7ff fa9c 	bl	8013360 <memchr>
 8013e28:	9b04      	ldr	r3, [sp, #16]
 8013e2a:	b9d0      	cbnz	r0, 8013e62 <_svfiprintf_r+0xda>
 8013e2c:	06d9      	lsls	r1, r3, #27
 8013e2e:	bf44      	itt	mi
 8013e30:	2220      	movmi	r2, #32
 8013e32:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013e36:	071a      	lsls	r2, r3, #28
 8013e38:	bf44      	itt	mi
 8013e3a:	222b      	movmi	r2, #43	; 0x2b
 8013e3c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013e40:	782a      	ldrb	r2, [r5, #0]
 8013e42:	2a2a      	cmp	r2, #42	; 0x2a
 8013e44:	d015      	beq.n	8013e72 <_svfiprintf_r+0xea>
 8013e46:	462f      	mov	r7, r5
 8013e48:	2000      	movs	r0, #0
 8013e4a:	250a      	movs	r5, #10
 8013e4c:	9a07      	ldr	r2, [sp, #28]
 8013e4e:	4639      	mov	r1, r7
 8013e50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013e54:	3b30      	subs	r3, #48	; 0x30
 8013e56:	2b09      	cmp	r3, #9
 8013e58:	d94d      	bls.n	8013ef6 <_svfiprintf_r+0x16e>
 8013e5a:	b1b8      	cbz	r0, 8013e8c <_svfiprintf_r+0x104>
 8013e5c:	e00f      	b.n	8013e7e <_svfiprintf_r+0xf6>
 8013e5e:	462f      	mov	r7, r5
 8013e60:	e7b8      	b.n	8013dd4 <_svfiprintf_r+0x4c>
 8013e62:	4a40      	ldr	r2, [pc, #256]	; (8013f64 <_svfiprintf_r+0x1dc>)
 8013e64:	463d      	mov	r5, r7
 8013e66:	1a80      	subs	r0, r0, r2
 8013e68:	fa0b f000 	lsl.w	r0, fp, r0
 8013e6c:	4318      	orrs	r0, r3
 8013e6e:	9004      	str	r0, [sp, #16]
 8013e70:	e7d3      	b.n	8013e1a <_svfiprintf_r+0x92>
 8013e72:	9a03      	ldr	r2, [sp, #12]
 8013e74:	1d11      	adds	r1, r2, #4
 8013e76:	6812      	ldr	r2, [r2, #0]
 8013e78:	9103      	str	r1, [sp, #12]
 8013e7a:	2a00      	cmp	r2, #0
 8013e7c:	db01      	blt.n	8013e82 <_svfiprintf_r+0xfa>
 8013e7e:	9207      	str	r2, [sp, #28]
 8013e80:	e004      	b.n	8013e8c <_svfiprintf_r+0x104>
 8013e82:	4252      	negs	r2, r2
 8013e84:	f043 0302 	orr.w	r3, r3, #2
 8013e88:	9207      	str	r2, [sp, #28]
 8013e8a:	9304      	str	r3, [sp, #16]
 8013e8c:	783b      	ldrb	r3, [r7, #0]
 8013e8e:	2b2e      	cmp	r3, #46	; 0x2e
 8013e90:	d10c      	bne.n	8013eac <_svfiprintf_r+0x124>
 8013e92:	787b      	ldrb	r3, [r7, #1]
 8013e94:	2b2a      	cmp	r3, #42	; 0x2a
 8013e96:	d133      	bne.n	8013f00 <_svfiprintf_r+0x178>
 8013e98:	9b03      	ldr	r3, [sp, #12]
 8013e9a:	3702      	adds	r7, #2
 8013e9c:	1d1a      	adds	r2, r3, #4
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	9203      	str	r2, [sp, #12]
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	bfb8      	it	lt
 8013ea6:	f04f 33ff 	movlt.w	r3, #4294967295
 8013eaa:	9305      	str	r3, [sp, #20]
 8013eac:	4d2e      	ldr	r5, [pc, #184]	; (8013f68 <_svfiprintf_r+0x1e0>)
 8013eae:	2203      	movs	r2, #3
 8013eb0:	7839      	ldrb	r1, [r7, #0]
 8013eb2:	4628      	mov	r0, r5
 8013eb4:	f7ff fa54 	bl	8013360 <memchr>
 8013eb8:	b138      	cbz	r0, 8013eca <_svfiprintf_r+0x142>
 8013eba:	2340      	movs	r3, #64	; 0x40
 8013ebc:	1b40      	subs	r0, r0, r5
 8013ebe:	fa03 f000 	lsl.w	r0, r3, r0
 8013ec2:	9b04      	ldr	r3, [sp, #16]
 8013ec4:	3701      	adds	r7, #1
 8013ec6:	4303      	orrs	r3, r0
 8013ec8:	9304      	str	r3, [sp, #16]
 8013eca:	7839      	ldrb	r1, [r7, #0]
 8013ecc:	2206      	movs	r2, #6
 8013ece:	4827      	ldr	r0, [pc, #156]	; (8013f6c <_svfiprintf_r+0x1e4>)
 8013ed0:	1c7e      	adds	r6, r7, #1
 8013ed2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013ed6:	f7ff fa43 	bl	8013360 <memchr>
 8013eda:	2800      	cmp	r0, #0
 8013edc:	d038      	beq.n	8013f50 <_svfiprintf_r+0x1c8>
 8013ede:	4b24      	ldr	r3, [pc, #144]	; (8013f70 <_svfiprintf_r+0x1e8>)
 8013ee0:	bb13      	cbnz	r3, 8013f28 <_svfiprintf_r+0x1a0>
 8013ee2:	9b03      	ldr	r3, [sp, #12]
 8013ee4:	3307      	adds	r3, #7
 8013ee6:	f023 0307 	bic.w	r3, r3, #7
 8013eea:	3308      	adds	r3, #8
 8013eec:	9303      	str	r3, [sp, #12]
 8013eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ef0:	444b      	add	r3, r9
 8013ef2:	9309      	str	r3, [sp, #36]	; 0x24
 8013ef4:	e76d      	b.n	8013dd2 <_svfiprintf_r+0x4a>
 8013ef6:	fb05 3202 	mla	r2, r5, r2, r3
 8013efa:	2001      	movs	r0, #1
 8013efc:	460f      	mov	r7, r1
 8013efe:	e7a6      	b.n	8013e4e <_svfiprintf_r+0xc6>
 8013f00:	2300      	movs	r3, #0
 8013f02:	250a      	movs	r5, #10
 8013f04:	4619      	mov	r1, r3
 8013f06:	3701      	adds	r7, #1
 8013f08:	9305      	str	r3, [sp, #20]
 8013f0a:	4638      	mov	r0, r7
 8013f0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013f10:	3a30      	subs	r2, #48	; 0x30
 8013f12:	2a09      	cmp	r2, #9
 8013f14:	d903      	bls.n	8013f1e <_svfiprintf_r+0x196>
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d0c8      	beq.n	8013eac <_svfiprintf_r+0x124>
 8013f1a:	9105      	str	r1, [sp, #20]
 8013f1c:	e7c6      	b.n	8013eac <_svfiprintf_r+0x124>
 8013f1e:	fb05 2101 	mla	r1, r5, r1, r2
 8013f22:	2301      	movs	r3, #1
 8013f24:	4607      	mov	r7, r0
 8013f26:	e7f0      	b.n	8013f0a <_svfiprintf_r+0x182>
 8013f28:	ab03      	add	r3, sp, #12
 8013f2a:	9300      	str	r3, [sp, #0]
 8013f2c:	4622      	mov	r2, r4
 8013f2e:	4b11      	ldr	r3, [pc, #68]	; (8013f74 <_svfiprintf_r+0x1ec>)
 8013f30:	a904      	add	r1, sp, #16
 8013f32:	4640      	mov	r0, r8
 8013f34:	f7fc f8cc 	bl	80100d0 <_printf_float>
 8013f38:	f1b0 3fff 	cmp.w	r0, #4294967295
 8013f3c:	4681      	mov	r9, r0
 8013f3e:	d1d6      	bne.n	8013eee <_svfiprintf_r+0x166>
 8013f40:	89a3      	ldrh	r3, [r4, #12]
 8013f42:	065b      	lsls	r3, r3, #25
 8013f44:	f53f af35 	bmi.w	8013db2 <_svfiprintf_r+0x2a>
 8013f48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013f4a:	b01d      	add	sp, #116	; 0x74
 8013f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f50:	ab03      	add	r3, sp, #12
 8013f52:	9300      	str	r3, [sp, #0]
 8013f54:	4622      	mov	r2, r4
 8013f56:	4b07      	ldr	r3, [pc, #28]	; (8013f74 <_svfiprintf_r+0x1ec>)
 8013f58:	a904      	add	r1, sp, #16
 8013f5a:	4640      	mov	r0, r8
 8013f5c:	f7fc fb64 	bl	8010628 <_printf_i>
 8013f60:	e7ea      	b.n	8013f38 <_svfiprintf_r+0x1b0>
 8013f62:	bf00      	nop
 8013f64:	080166ac 	.word	0x080166ac
 8013f68:	080166b2 	.word	0x080166b2
 8013f6c:	080166b6 	.word	0x080166b6
 8013f70:	080100d1 	.word	0x080100d1
 8013f74:	08013cd5 	.word	0x08013cd5

08013f78 <__sfputc_r>:
 8013f78:	6893      	ldr	r3, [r2, #8]
 8013f7a:	b410      	push	{r4}
 8013f7c:	3b01      	subs	r3, #1
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	6093      	str	r3, [r2, #8]
 8013f82:	da07      	bge.n	8013f94 <__sfputc_r+0x1c>
 8013f84:	6994      	ldr	r4, [r2, #24]
 8013f86:	42a3      	cmp	r3, r4
 8013f88:	db01      	blt.n	8013f8e <__sfputc_r+0x16>
 8013f8a:	290a      	cmp	r1, #10
 8013f8c:	d102      	bne.n	8013f94 <__sfputc_r+0x1c>
 8013f8e:	bc10      	pop	{r4}
 8013f90:	f7fd bdb0 	b.w	8011af4 <__swbuf_r>
 8013f94:	6813      	ldr	r3, [r2, #0]
 8013f96:	1c58      	adds	r0, r3, #1
 8013f98:	6010      	str	r0, [r2, #0]
 8013f9a:	7019      	strb	r1, [r3, #0]
 8013f9c:	4608      	mov	r0, r1
 8013f9e:	bc10      	pop	{r4}
 8013fa0:	4770      	bx	lr

08013fa2 <__sfputs_r>:
 8013fa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fa4:	4606      	mov	r6, r0
 8013fa6:	460f      	mov	r7, r1
 8013fa8:	4614      	mov	r4, r2
 8013faa:	18d5      	adds	r5, r2, r3
 8013fac:	42ac      	cmp	r4, r5
 8013fae:	d101      	bne.n	8013fb4 <__sfputs_r+0x12>
 8013fb0:	2000      	movs	r0, #0
 8013fb2:	e007      	b.n	8013fc4 <__sfputs_r+0x22>
 8013fb4:	463a      	mov	r2, r7
 8013fb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013fba:	4630      	mov	r0, r6
 8013fbc:	f7ff ffdc 	bl	8013f78 <__sfputc_r>
 8013fc0:	1c43      	adds	r3, r0, #1
 8013fc2:	d1f3      	bne.n	8013fac <__sfputs_r+0xa>
 8013fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013fc8 <_vfiprintf_r>:
 8013fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fcc:	460c      	mov	r4, r1
 8013fce:	b09d      	sub	sp, #116	; 0x74
 8013fd0:	4617      	mov	r7, r2
 8013fd2:	461d      	mov	r5, r3
 8013fd4:	4606      	mov	r6, r0
 8013fd6:	b118      	cbz	r0, 8013fe0 <_vfiprintf_r+0x18>
 8013fd8:	6983      	ldr	r3, [r0, #24]
 8013fda:	b90b      	cbnz	r3, 8013fe0 <_vfiprintf_r+0x18>
 8013fdc:	f7fe fd7c 	bl	8012ad8 <__sinit>
 8013fe0:	4b7c      	ldr	r3, [pc, #496]	; (80141d4 <_vfiprintf_r+0x20c>)
 8013fe2:	429c      	cmp	r4, r3
 8013fe4:	d158      	bne.n	8014098 <_vfiprintf_r+0xd0>
 8013fe6:	6874      	ldr	r4, [r6, #4]
 8013fe8:	89a3      	ldrh	r3, [r4, #12]
 8013fea:	0718      	lsls	r0, r3, #28
 8013fec:	d55e      	bpl.n	80140ac <_vfiprintf_r+0xe4>
 8013fee:	6923      	ldr	r3, [r4, #16]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d05b      	beq.n	80140ac <_vfiprintf_r+0xe4>
 8013ff4:	2300      	movs	r3, #0
 8013ff6:	9309      	str	r3, [sp, #36]	; 0x24
 8013ff8:	2320      	movs	r3, #32
 8013ffa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013ffe:	2330      	movs	r3, #48	; 0x30
 8014000:	f04f 0b01 	mov.w	fp, #1
 8014004:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014008:	9503      	str	r5, [sp, #12]
 801400a:	46b8      	mov	r8, r7
 801400c:	4645      	mov	r5, r8
 801400e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014012:	b10b      	cbz	r3, 8014018 <_vfiprintf_r+0x50>
 8014014:	2b25      	cmp	r3, #37	; 0x25
 8014016:	d154      	bne.n	80140c2 <_vfiprintf_r+0xfa>
 8014018:	ebb8 0a07 	subs.w	sl, r8, r7
 801401c:	d00b      	beq.n	8014036 <_vfiprintf_r+0x6e>
 801401e:	4653      	mov	r3, sl
 8014020:	463a      	mov	r2, r7
 8014022:	4621      	mov	r1, r4
 8014024:	4630      	mov	r0, r6
 8014026:	f7ff ffbc 	bl	8013fa2 <__sfputs_r>
 801402a:	3001      	adds	r0, #1
 801402c:	f000 80c2 	beq.w	80141b4 <_vfiprintf_r+0x1ec>
 8014030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014032:	4453      	add	r3, sl
 8014034:	9309      	str	r3, [sp, #36]	; 0x24
 8014036:	f898 3000 	ldrb.w	r3, [r8]
 801403a:	2b00      	cmp	r3, #0
 801403c:	f000 80ba 	beq.w	80141b4 <_vfiprintf_r+0x1ec>
 8014040:	2300      	movs	r3, #0
 8014042:	f04f 32ff 	mov.w	r2, #4294967295
 8014046:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801404a:	9304      	str	r3, [sp, #16]
 801404c:	9307      	str	r3, [sp, #28]
 801404e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014052:	931a      	str	r3, [sp, #104]	; 0x68
 8014054:	46a8      	mov	r8, r5
 8014056:	2205      	movs	r2, #5
 8014058:	f818 1b01 	ldrb.w	r1, [r8], #1
 801405c:	485e      	ldr	r0, [pc, #376]	; (80141d8 <_vfiprintf_r+0x210>)
 801405e:	f7ff f97f 	bl	8013360 <memchr>
 8014062:	9b04      	ldr	r3, [sp, #16]
 8014064:	bb78      	cbnz	r0, 80140c6 <_vfiprintf_r+0xfe>
 8014066:	06d9      	lsls	r1, r3, #27
 8014068:	bf44      	itt	mi
 801406a:	2220      	movmi	r2, #32
 801406c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014070:	071a      	lsls	r2, r3, #28
 8014072:	bf44      	itt	mi
 8014074:	222b      	movmi	r2, #43	; 0x2b
 8014076:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801407a:	782a      	ldrb	r2, [r5, #0]
 801407c:	2a2a      	cmp	r2, #42	; 0x2a
 801407e:	d02a      	beq.n	80140d6 <_vfiprintf_r+0x10e>
 8014080:	46a8      	mov	r8, r5
 8014082:	2000      	movs	r0, #0
 8014084:	250a      	movs	r5, #10
 8014086:	9a07      	ldr	r2, [sp, #28]
 8014088:	4641      	mov	r1, r8
 801408a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801408e:	3b30      	subs	r3, #48	; 0x30
 8014090:	2b09      	cmp	r3, #9
 8014092:	d969      	bls.n	8014168 <_vfiprintf_r+0x1a0>
 8014094:	b360      	cbz	r0, 80140f0 <_vfiprintf_r+0x128>
 8014096:	e024      	b.n	80140e2 <_vfiprintf_r+0x11a>
 8014098:	4b50      	ldr	r3, [pc, #320]	; (80141dc <_vfiprintf_r+0x214>)
 801409a:	429c      	cmp	r4, r3
 801409c:	d101      	bne.n	80140a2 <_vfiprintf_r+0xda>
 801409e:	68b4      	ldr	r4, [r6, #8]
 80140a0:	e7a2      	b.n	8013fe8 <_vfiprintf_r+0x20>
 80140a2:	4b4f      	ldr	r3, [pc, #316]	; (80141e0 <_vfiprintf_r+0x218>)
 80140a4:	429c      	cmp	r4, r3
 80140a6:	bf08      	it	eq
 80140a8:	68f4      	ldreq	r4, [r6, #12]
 80140aa:	e79d      	b.n	8013fe8 <_vfiprintf_r+0x20>
 80140ac:	4621      	mov	r1, r4
 80140ae:	4630      	mov	r0, r6
 80140b0:	f7fd fd72 	bl	8011b98 <__swsetup_r>
 80140b4:	2800      	cmp	r0, #0
 80140b6:	d09d      	beq.n	8013ff4 <_vfiprintf_r+0x2c>
 80140b8:	f04f 30ff 	mov.w	r0, #4294967295
 80140bc:	b01d      	add	sp, #116	; 0x74
 80140be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140c2:	46a8      	mov	r8, r5
 80140c4:	e7a2      	b.n	801400c <_vfiprintf_r+0x44>
 80140c6:	4a44      	ldr	r2, [pc, #272]	; (80141d8 <_vfiprintf_r+0x210>)
 80140c8:	4645      	mov	r5, r8
 80140ca:	1a80      	subs	r0, r0, r2
 80140cc:	fa0b f000 	lsl.w	r0, fp, r0
 80140d0:	4318      	orrs	r0, r3
 80140d2:	9004      	str	r0, [sp, #16]
 80140d4:	e7be      	b.n	8014054 <_vfiprintf_r+0x8c>
 80140d6:	9a03      	ldr	r2, [sp, #12]
 80140d8:	1d11      	adds	r1, r2, #4
 80140da:	6812      	ldr	r2, [r2, #0]
 80140dc:	9103      	str	r1, [sp, #12]
 80140de:	2a00      	cmp	r2, #0
 80140e0:	db01      	blt.n	80140e6 <_vfiprintf_r+0x11e>
 80140e2:	9207      	str	r2, [sp, #28]
 80140e4:	e004      	b.n	80140f0 <_vfiprintf_r+0x128>
 80140e6:	4252      	negs	r2, r2
 80140e8:	f043 0302 	orr.w	r3, r3, #2
 80140ec:	9207      	str	r2, [sp, #28]
 80140ee:	9304      	str	r3, [sp, #16]
 80140f0:	f898 3000 	ldrb.w	r3, [r8]
 80140f4:	2b2e      	cmp	r3, #46	; 0x2e
 80140f6:	d10e      	bne.n	8014116 <_vfiprintf_r+0x14e>
 80140f8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80140fc:	2b2a      	cmp	r3, #42	; 0x2a
 80140fe:	d138      	bne.n	8014172 <_vfiprintf_r+0x1aa>
 8014100:	9b03      	ldr	r3, [sp, #12]
 8014102:	f108 0802 	add.w	r8, r8, #2
 8014106:	1d1a      	adds	r2, r3, #4
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	9203      	str	r2, [sp, #12]
 801410c:	2b00      	cmp	r3, #0
 801410e:	bfb8      	it	lt
 8014110:	f04f 33ff 	movlt.w	r3, #4294967295
 8014114:	9305      	str	r3, [sp, #20]
 8014116:	4d33      	ldr	r5, [pc, #204]	; (80141e4 <_vfiprintf_r+0x21c>)
 8014118:	2203      	movs	r2, #3
 801411a:	f898 1000 	ldrb.w	r1, [r8]
 801411e:	4628      	mov	r0, r5
 8014120:	f7ff f91e 	bl	8013360 <memchr>
 8014124:	b140      	cbz	r0, 8014138 <_vfiprintf_r+0x170>
 8014126:	2340      	movs	r3, #64	; 0x40
 8014128:	1b40      	subs	r0, r0, r5
 801412a:	fa03 f000 	lsl.w	r0, r3, r0
 801412e:	9b04      	ldr	r3, [sp, #16]
 8014130:	f108 0801 	add.w	r8, r8, #1
 8014134:	4303      	orrs	r3, r0
 8014136:	9304      	str	r3, [sp, #16]
 8014138:	f898 1000 	ldrb.w	r1, [r8]
 801413c:	2206      	movs	r2, #6
 801413e:	482a      	ldr	r0, [pc, #168]	; (80141e8 <_vfiprintf_r+0x220>)
 8014140:	f108 0701 	add.w	r7, r8, #1
 8014144:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014148:	f7ff f90a 	bl	8013360 <memchr>
 801414c:	2800      	cmp	r0, #0
 801414e:	d037      	beq.n	80141c0 <_vfiprintf_r+0x1f8>
 8014150:	4b26      	ldr	r3, [pc, #152]	; (80141ec <_vfiprintf_r+0x224>)
 8014152:	bb1b      	cbnz	r3, 801419c <_vfiprintf_r+0x1d4>
 8014154:	9b03      	ldr	r3, [sp, #12]
 8014156:	3307      	adds	r3, #7
 8014158:	f023 0307 	bic.w	r3, r3, #7
 801415c:	3308      	adds	r3, #8
 801415e:	9303      	str	r3, [sp, #12]
 8014160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014162:	444b      	add	r3, r9
 8014164:	9309      	str	r3, [sp, #36]	; 0x24
 8014166:	e750      	b.n	801400a <_vfiprintf_r+0x42>
 8014168:	fb05 3202 	mla	r2, r5, r2, r3
 801416c:	2001      	movs	r0, #1
 801416e:	4688      	mov	r8, r1
 8014170:	e78a      	b.n	8014088 <_vfiprintf_r+0xc0>
 8014172:	2300      	movs	r3, #0
 8014174:	250a      	movs	r5, #10
 8014176:	4619      	mov	r1, r3
 8014178:	f108 0801 	add.w	r8, r8, #1
 801417c:	9305      	str	r3, [sp, #20]
 801417e:	4640      	mov	r0, r8
 8014180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014184:	3a30      	subs	r2, #48	; 0x30
 8014186:	2a09      	cmp	r2, #9
 8014188:	d903      	bls.n	8014192 <_vfiprintf_r+0x1ca>
 801418a:	2b00      	cmp	r3, #0
 801418c:	d0c3      	beq.n	8014116 <_vfiprintf_r+0x14e>
 801418e:	9105      	str	r1, [sp, #20]
 8014190:	e7c1      	b.n	8014116 <_vfiprintf_r+0x14e>
 8014192:	fb05 2101 	mla	r1, r5, r1, r2
 8014196:	2301      	movs	r3, #1
 8014198:	4680      	mov	r8, r0
 801419a:	e7f0      	b.n	801417e <_vfiprintf_r+0x1b6>
 801419c:	ab03      	add	r3, sp, #12
 801419e:	9300      	str	r3, [sp, #0]
 80141a0:	4622      	mov	r2, r4
 80141a2:	4b13      	ldr	r3, [pc, #76]	; (80141f0 <_vfiprintf_r+0x228>)
 80141a4:	a904      	add	r1, sp, #16
 80141a6:	4630      	mov	r0, r6
 80141a8:	f7fb ff92 	bl	80100d0 <_printf_float>
 80141ac:	f1b0 3fff 	cmp.w	r0, #4294967295
 80141b0:	4681      	mov	r9, r0
 80141b2:	d1d5      	bne.n	8014160 <_vfiprintf_r+0x198>
 80141b4:	89a3      	ldrh	r3, [r4, #12]
 80141b6:	065b      	lsls	r3, r3, #25
 80141b8:	f53f af7e 	bmi.w	80140b8 <_vfiprintf_r+0xf0>
 80141bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80141be:	e77d      	b.n	80140bc <_vfiprintf_r+0xf4>
 80141c0:	ab03      	add	r3, sp, #12
 80141c2:	9300      	str	r3, [sp, #0]
 80141c4:	4622      	mov	r2, r4
 80141c6:	4b0a      	ldr	r3, [pc, #40]	; (80141f0 <_vfiprintf_r+0x228>)
 80141c8:	a904      	add	r1, sp, #16
 80141ca:	4630      	mov	r0, r6
 80141cc:	f7fc fa2c 	bl	8010628 <_printf_i>
 80141d0:	e7ec      	b.n	80141ac <_vfiprintf_r+0x1e4>
 80141d2:	bf00      	nop
 80141d4:	08016560 	.word	0x08016560
 80141d8:	080166ac 	.word	0x080166ac
 80141dc:	08016580 	.word	0x08016580
 80141e0:	08016540 	.word	0x08016540
 80141e4:	080166b2 	.word	0x080166b2
 80141e8:	080166b6 	.word	0x080166b6
 80141ec:	080100d1 	.word	0x080100d1
 80141f0:	08013fa3 	.word	0x08013fa3

080141f4 <_sbrk_r>:
 80141f4:	b538      	push	{r3, r4, r5, lr}
 80141f6:	2300      	movs	r3, #0
 80141f8:	4c05      	ldr	r4, [pc, #20]	; (8014210 <_sbrk_r+0x1c>)
 80141fa:	4605      	mov	r5, r0
 80141fc:	4608      	mov	r0, r1
 80141fe:	6023      	str	r3, [r4, #0]
 8014200:	f7fb fd86 	bl	800fd10 <_sbrk>
 8014204:	1c43      	adds	r3, r0, #1
 8014206:	d102      	bne.n	801420e <_sbrk_r+0x1a>
 8014208:	6823      	ldr	r3, [r4, #0]
 801420a:	b103      	cbz	r3, 801420e <_sbrk_r+0x1a>
 801420c:	602b      	str	r3, [r5, #0]
 801420e:	bd38      	pop	{r3, r4, r5, pc}
 8014210:	2000822c 	.word	0x2000822c

08014214 <__sread>:
 8014214:	b510      	push	{r4, lr}
 8014216:	460c      	mov	r4, r1
 8014218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801421c:	f000 f8e2 	bl	80143e4 <_read_r>
 8014220:	2800      	cmp	r0, #0
 8014222:	bfab      	itete	ge
 8014224:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014226:	89a3      	ldrhlt	r3, [r4, #12]
 8014228:	181b      	addge	r3, r3, r0
 801422a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801422e:	bfac      	ite	ge
 8014230:	6563      	strge	r3, [r4, #84]	; 0x54
 8014232:	81a3      	strhlt	r3, [r4, #12]
 8014234:	bd10      	pop	{r4, pc}

08014236 <__swrite>:
 8014236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801423a:	461f      	mov	r7, r3
 801423c:	898b      	ldrh	r3, [r1, #12]
 801423e:	4605      	mov	r5, r0
 8014240:	05db      	lsls	r3, r3, #23
 8014242:	460c      	mov	r4, r1
 8014244:	4616      	mov	r6, r2
 8014246:	d505      	bpl.n	8014254 <__swrite+0x1e>
 8014248:	2302      	movs	r3, #2
 801424a:	2200      	movs	r2, #0
 801424c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014250:	f000 f874 	bl	801433c <_lseek_r>
 8014254:	89a3      	ldrh	r3, [r4, #12]
 8014256:	4632      	mov	r2, r6
 8014258:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801425c:	81a3      	strh	r3, [r4, #12]
 801425e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014262:	463b      	mov	r3, r7
 8014264:	4628      	mov	r0, r5
 8014266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801426a:	f000 b823 	b.w	80142b4 <_write_r>

0801426e <__sseek>:
 801426e:	b510      	push	{r4, lr}
 8014270:	460c      	mov	r4, r1
 8014272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014276:	f000 f861 	bl	801433c <_lseek_r>
 801427a:	1c43      	adds	r3, r0, #1
 801427c:	89a3      	ldrh	r3, [r4, #12]
 801427e:	bf15      	itete	ne
 8014280:	6560      	strne	r0, [r4, #84]	; 0x54
 8014282:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014286:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801428a:	81a3      	strheq	r3, [r4, #12]
 801428c:	bf18      	it	ne
 801428e:	81a3      	strhne	r3, [r4, #12]
 8014290:	bd10      	pop	{r4, pc}

08014292 <__sclose>:
 8014292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014296:	f000 b81f 	b.w	80142d8 <_close_r>

0801429a <__ascii_wctomb>:
 801429a:	b149      	cbz	r1, 80142b0 <__ascii_wctomb+0x16>
 801429c:	2aff      	cmp	r2, #255	; 0xff
 801429e:	bf8b      	itete	hi
 80142a0:	238a      	movhi	r3, #138	; 0x8a
 80142a2:	700a      	strbls	r2, [r1, #0]
 80142a4:	6003      	strhi	r3, [r0, #0]
 80142a6:	2001      	movls	r0, #1
 80142a8:	bf88      	it	hi
 80142aa:	f04f 30ff 	movhi.w	r0, #4294967295
 80142ae:	4770      	bx	lr
 80142b0:	4608      	mov	r0, r1
 80142b2:	4770      	bx	lr

080142b4 <_write_r>:
 80142b4:	b538      	push	{r3, r4, r5, lr}
 80142b6:	4605      	mov	r5, r0
 80142b8:	4608      	mov	r0, r1
 80142ba:	4611      	mov	r1, r2
 80142bc:	2200      	movs	r2, #0
 80142be:	4c05      	ldr	r4, [pc, #20]	; (80142d4 <_write_r+0x20>)
 80142c0:	6022      	str	r2, [r4, #0]
 80142c2:	461a      	mov	r2, r3
 80142c4:	f7fb fcd7 	bl	800fc76 <_write>
 80142c8:	1c43      	adds	r3, r0, #1
 80142ca:	d102      	bne.n	80142d2 <_write_r+0x1e>
 80142cc:	6823      	ldr	r3, [r4, #0]
 80142ce:	b103      	cbz	r3, 80142d2 <_write_r+0x1e>
 80142d0:	602b      	str	r3, [r5, #0]
 80142d2:	bd38      	pop	{r3, r4, r5, pc}
 80142d4:	2000822c 	.word	0x2000822c

080142d8 <_close_r>:
 80142d8:	b538      	push	{r3, r4, r5, lr}
 80142da:	2300      	movs	r3, #0
 80142dc:	4c05      	ldr	r4, [pc, #20]	; (80142f4 <_close_r+0x1c>)
 80142de:	4605      	mov	r5, r0
 80142e0:	4608      	mov	r0, r1
 80142e2:	6023      	str	r3, [r4, #0]
 80142e4:	f7fb fce3 	bl	800fcae <_close>
 80142e8:	1c43      	adds	r3, r0, #1
 80142ea:	d102      	bne.n	80142f2 <_close_r+0x1a>
 80142ec:	6823      	ldr	r3, [r4, #0]
 80142ee:	b103      	cbz	r3, 80142f2 <_close_r+0x1a>
 80142f0:	602b      	str	r3, [r5, #0]
 80142f2:	bd38      	pop	{r3, r4, r5, pc}
 80142f4:	2000822c 	.word	0x2000822c

080142f8 <_fstat_r>:
 80142f8:	b538      	push	{r3, r4, r5, lr}
 80142fa:	2300      	movs	r3, #0
 80142fc:	4c06      	ldr	r4, [pc, #24]	; (8014318 <_fstat_r+0x20>)
 80142fe:	4605      	mov	r5, r0
 8014300:	4608      	mov	r0, r1
 8014302:	4611      	mov	r1, r2
 8014304:	6023      	str	r3, [r4, #0]
 8014306:	f7fb fcdd 	bl	800fcc4 <_fstat>
 801430a:	1c43      	adds	r3, r0, #1
 801430c:	d102      	bne.n	8014314 <_fstat_r+0x1c>
 801430e:	6823      	ldr	r3, [r4, #0]
 8014310:	b103      	cbz	r3, 8014314 <_fstat_r+0x1c>
 8014312:	602b      	str	r3, [r5, #0]
 8014314:	bd38      	pop	{r3, r4, r5, pc}
 8014316:	bf00      	nop
 8014318:	2000822c 	.word	0x2000822c

0801431c <_isatty_r>:
 801431c:	b538      	push	{r3, r4, r5, lr}
 801431e:	2300      	movs	r3, #0
 8014320:	4c05      	ldr	r4, [pc, #20]	; (8014338 <_isatty_r+0x1c>)
 8014322:	4605      	mov	r5, r0
 8014324:	4608      	mov	r0, r1
 8014326:	6023      	str	r3, [r4, #0]
 8014328:	f7fb fcdb 	bl	800fce2 <_isatty>
 801432c:	1c43      	adds	r3, r0, #1
 801432e:	d102      	bne.n	8014336 <_isatty_r+0x1a>
 8014330:	6823      	ldr	r3, [r4, #0]
 8014332:	b103      	cbz	r3, 8014336 <_isatty_r+0x1a>
 8014334:	602b      	str	r3, [r5, #0]
 8014336:	bd38      	pop	{r3, r4, r5, pc}
 8014338:	2000822c 	.word	0x2000822c

0801433c <_lseek_r>:
 801433c:	b538      	push	{r3, r4, r5, lr}
 801433e:	4605      	mov	r5, r0
 8014340:	4608      	mov	r0, r1
 8014342:	4611      	mov	r1, r2
 8014344:	2200      	movs	r2, #0
 8014346:	4c05      	ldr	r4, [pc, #20]	; (801435c <_lseek_r+0x20>)
 8014348:	6022      	str	r2, [r4, #0]
 801434a:	461a      	mov	r2, r3
 801434c:	f7fb fcd3 	bl	800fcf6 <_lseek>
 8014350:	1c43      	adds	r3, r0, #1
 8014352:	d102      	bne.n	801435a <_lseek_r+0x1e>
 8014354:	6823      	ldr	r3, [r4, #0]
 8014356:	b103      	cbz	r3, 801435a <_lseek_r+0x1e>
 8014358:	602b      	str	r3, [r5, #0]
 801435a:	bd38      	pop	{r3, r4, r5, pc}
 801435c:	2000822c 	.word	0x2000822c

08014360 <memmove>:
 8014360:	4288      	cmp	r0, r1
 8014362:	b510      	push	{r4, lr}
 8014364:	eb01 0302 	add.w	r3, r1, r2
 8014368:	d807      	bhi.n	801437a <memmove+0x1a>
 801436a:	1e42      	subs	r2, r0, #1
 801436c:	4299      	cmp	r1, r3
 801436e:	d00a      	beq.n	8014386 <memmove+0x26>
 8014370:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014374:	f802 4f01 	strb.w	r4, [r2, #1]!
 8014378:	e7f8      	b.n	801436c <memmove+0xc>
 801437a:	4283      	cmp	r3, r0
 801437c:	d9f5      	bls.n	801436a <memmove+0xa>
 801437e:	1881      	adds	r1, r0, r2
 8014380:	1ad2      	subs	r2, r2, r3
 8014382:	42d3      	cmn	r3, r2
 8014384:	d100      	bne.n	8014388 <memmove+0x28>
 8014386:	bd10      	pop	{r4, pc}
 8014388:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801438c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8014390:	e7f7      	b.n	8014382 <memmove+0x22>

08014392 <__malloc_lock>:
 8014392:	4770      	bx	lr

08014394 <__malloc_unlock>:
 8014394:	4770      	bx	lr

08014396 <_realloc_r>:
 8014396:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014398:	4607      	mov	r7, r0
 801439a:	4614      	mov	r4, r2
 801439c:	460e      	mov	r6, r1
 801439e:	b921      	cbnz	r1, 80143aa <_realloc_r+0x14>
 80143a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80143a4:	4611      	mov	r1, r2
 80143a6:	f7ff bc3b 	b.w	8013c20 <_malloc_r>
 80143aa:	b922      	cbnz	r2, 80143b6 <_realloc_r+0x20>
 80143ac:	f7ff fbec 	bl	8013b88 <_free_r>
 80143b0:	4625      	mov	r5, r4
 80143b2:	4628      	mov	r0, r5
 80143b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80143b6:	f000 f827 	bl	8014408 <_malloc_usable_size_r>
 80143ba:	42a0      	cmp	r0, r4
 80143bc:	d20f      	bcs.n	80143de <_realloc_r+0x48>
 80143be:	4621      	mov	r1, r4
 80143c0:	4638      	mov	r0, r7
 80143c2:	f7ff fc2d 	bl	8013c20 <_malloc_r>
 80143c6:	4605      	mov	r5, r0
 80143c8:	2800      	cmp	r0, #0
 80143ca:	d0f2      	beq.n	80143b2 <_realloc_r+0x1c>
 80143cc:	4631      	mov	r1, r6
 80143ce:	4622      	mov	r2, r4
 80143d0:	f7fb fdd9 	bl	800ff86 <memcpy>
 80143d4:	4631      	mov	r1, r6
 80143d6:	4638      	mov	r0, r7
 80143d8:	f7ff fbd6 	bl	8013b88 <_free_r>
 80143dc:	e7e9      	b.n	80143b2 <_realloc_r+0x1c>
 80143de:	4635      	mov	r5, r6
 80143e0:	e7e7      	b.n	80143b2 <_realloc_r+0x1c>
	...

080143e4 <_read_r>:
 80143e4:	b538      	push	{r3, r4, r5, lr}
 80143e6:	4605      	mov	r5, r0
 80143e8:	4608      	mov	r0, r1
 80143ea:	4611      	mov	r1, r2
 80143ec:	2200      	movs	r2, #0
 80143ee:	4c05      	ldr	r4, [pc, #20]	; (8014404 <_read_r+0x20>)
 80143f0:	6022      	str	r2, [r4, #0]
 80143f2:	461a      	mov	r2, r3
 80143f4:	f7fb fc22 	bl	800fc3c <_read>
 80143f8:	1c43      	adds	r3, r0, #1
 80143fa:	d102      	bne.n	8014402 <_read_r+0x1e>
 80143fc:	6823      	ldr	r3, [r4, #0]
 80143fe:	b103      	cbz	r3, 8014402 <_read_r+0x1e>
 8014400:	602b      	str	r3, [r5, #0]
 8014402:	bd38      	pop	{r3, r4, r5, pc}
 8014404:	2000822c 	.word	0x2000822c

08014408 <_malloc_usable_size_r>:
 8014408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801440c:	1f18      	subs	r0, r3, #4
 801440e:	2b00      	cmp	r3, #0
 8014410:	bfbc      	itt	lt
 8014412:	580b      	ldrlt	r3, [r1, r0]
 8014414:	18c0      	addlt	r0, r0, r3
 8014416:	4770      	bx	lr

08014418 <_init>:
 8014418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801441a:	bf00      	nop
 801441c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801441e:	bc08      	pop	{r3}
 8014420:	469e      	mov	lr, r3
 8014422:	4770      	bx	lr

08014424 <_fini>:
 8014424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014426:	bf00      	nop
 8014428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801442a:	bc08      	pop	{r3}
 801442c:	469e      	mov	lr, r3
 801442e:	4770      	bx	lr
